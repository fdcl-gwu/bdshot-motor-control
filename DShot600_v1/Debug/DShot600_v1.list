
DShot600_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006658  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080067e8  080067e8  000077e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006970  08006970  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006970  08006970  00007970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006978  08006978  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006978  08006978  00007978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800697c  0800697c  0000797c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006980  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          0000050c  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000574  20000574  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea17  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002165  00000000  00000000  00016aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  00018c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b00  00000000  00000000  00019a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020256  00000000  00000000  0001a500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f895  00000000  00000000  0003a756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2a63  00000000  00000000  00049feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ca4e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044ec  00000000  00000000  0010ca94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00110f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067d0 	.word	0x080067d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080067d0 	.word	0x080067d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b988 	b.w	8000d74 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	468e      	mov	lr, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	4688      	mov	r8, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4617      	mov	r7, r2
 8000a90:	d962      	bls.n	8000b58 <__udivmoddi4+0xdc>
 8000a92:	fab2 f682 	clz	r6, r2
 8000a96:	b14e      	cbz	r6, 8000aac <__udivmoddi4+0x30>
 8000a98:	f1c6 0320 	rsb	r3, r6, #32
 8000a9c:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa0:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa4:	40b7      	lsls	r7, r6
 8000aa6:	ea43 0808 	orr.w	r8, r3, r8
 8000aaa:	40b4      	lsls	r4, r6
 8000aac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab0:	fa1f fc87 	uxth.w	ip, r7
 8000ab4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab8:	0c23      	lsrs	r3, r4, #16
 8000aba:	fb0e 8811 	mls	r8, lr, r1, r8
 8000abe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0x62>
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ad0:	f080 80ea 	bcs.w	8000ca8 <__udivmoddi4+0x22c>
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f240 80e7 	bls.w	8000ca8 <__udivmoddi4+0x22c>
 8000ada:	3902      	subs	r1, #2
 8000adc:	443b      	add	r3, r7
 8000ade:	1a9a      	subs	r2, r3, r2
 8000ae0:	b2a3      	uxth	r3, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aee:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af2:	459c      	cmp	ip, r3
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x8e>
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afc:	f080 80d6 	bcs.w	8000cac <__udivmoddi4+0x230>
 8000b00:	459c      	cmp	ip, r3
 8000b02:	f240 80d3 	bls.w	8000cac <__udivmoddi4+0x230>
 8000b06:	443b      	add	r3, r7
 8000b08:	3802      	subs	r0, #2
 8000b0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b0e:	eba3 030c 	sub.w	r3, r3, ip
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11d      	cbz	r5, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40f3      	lsrs	r3, r6
 8000b18:	2200      	movs	r2, #0
 8000b1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d905      	bls.n	8000b32 <__udivmoddi4+0xb6>
 8000b26:	b10d      	cbz	r5, 8000b2c <__udivmoddi4+0xb0>
 8000b28:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e7f5      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b32:	fab3 f183 	clz	r1, r3
 8000b36:	2900      	cmp	r1, #0
 8000b38:	d146      	bne.n	8000bc8 <__udivmoddi4+0x14c>
 8000b3a:	4573      	cmp	r3, lr
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xc8>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 8105 	bhi.w	8000d4e <__udivmoddi4+0x2d2>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4690      	mov	r8, r2
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0e5      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b52:	e9c5 4800 	strd	r4, r8, [r5]
 8000b56:	e7e2      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	f000 8090 	beq.w	8000c7e <__udivmoddi4+0x202>
 8000b5e:	fab2 f682 	clz	r6, r2
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f040 80a4 	bne.w	8000cb0 <__udivmoddi4+0x234>
 8000b68:	1a8a      	subs	r2, r1, r2
 8000b6a:	0c03      	lsrs	r3, r0, #16
 8000b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b70:	b280      	uxth	r0, r0
 8000b72:	b2bc      	uxth	r4, r7
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b82:	fb04 f20c 	mul.w	r2, r4, ip
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d907      	bls.n	8000b9a <__udivmoddi4+0x11e>
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x11c>
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f200 80e0 	bhi.w	8000d58 <__udivmoddi4+0x2dc>
 8000b98:	46c4      	mov	ip, r8
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ba4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba8:	fb02 f404 	mul.w	r4, r2, r4
 8000bac:	429c      	cmp	r4, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x144>
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x142>
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	f200 80ca 	bhi.w	8000d52 <__udivmoddi4+0x2d6>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	1b1b      	subs	r3, r3, r4
 8000bc2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bc8:	f1c1 0620 	rsb	r6, r1, #32
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd2:	431f      	orrs	r7, r3
 8000bd4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bdc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	fa1f fc87 	uxth.w	ip, r7
 8000bee:	fbbe f0f9 	udiv	r0, lr, r9
 8000bf2:	0c1c      	lsrs	r4, r3, #16
 8000bf4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bfc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x1a0>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c0e:	f080 809c 	bcs.w	8000d4a <__udivmoddi4+0x2ce>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f240 8099 	bls.w	8000d4a <__udivmoddi4+0x2ce>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	eba4 040e 	sub.w	r4, r4, lr
 8000c20:	fa1f fe83 	uxth.w	lr, r3
 8000c24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c28:	fb09 4413 	mls	r4, r9, r3, r4
 8000c2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1ce>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c3e:	f080 8082 	bcs.w	8000d46 <__udivmoddi4+0x2ca>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d97f      	bls.n	8000d46 <__udivmoddi4+0x2ca>
 8000c46:	3b02      	subs	r3, #2
 8000c48:	443c      	add	r4, r7
 8000c4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c56:	4564      	cmp	r4, ip
 8000c58:	4673      	mov	r3, lr
 8000c5a:	46e1      	mov	r9, ip
 8000c5c:	d362      	bcc.n	8000d24 <__udivmoddi4+0x2a8>
 8000c5e:	d05f      	beq.n	8000d20 <__udivmoddi4+0x2a4>
 8000c60:	b15d      	cbz	r5, 8000c7a <__udivmoddi4+0x1fe>
 8000c62:	ebb8 0203 	subs.w	r2, r8, r3
 8000c66:	eb64 0409 	sbc.w	r4, r4, r9
 8000c6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c72:	431e      	orrs	r6, r3
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	e74f      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000c7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c82:	0c01      	lsrs	r1, r0, #16
 8000c84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4638      	mov	r0, r7
 8000c92:	463c      	mov	r4, r7
 8000c94:	46b8      	mov	r8, r7
 8000c96:	46be      	mov	lr, r7
 8000c98:	2620      	movs	r6, #32
 8000c9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c9e:	eba2 0208 	sub.w	r2, r2, r8
 8000ca2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ca6:	e766      	b.n	8000b76 <__udivmoddi4+0xfa>
 8000ca8:	4601      	mov	r1, r0
 8000caa:	e718      	b.n	8000ade <__udivmoddi4+0x62>
 8000cac:	4610      	mov	r0, r2
 8000cae:	e72c      	b.n	8000b0a <__udivmoddi4+0x8e>
 8000cb0:	f1c6 0220 	rsb	r2, r6, #32
 8000cb4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb8:	40b7      	lsls	r7, r6
 8000cba:	40b1      	lsls	r1, r6
 8000cbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cca:	b2bc      	uxth	r4, r7
 8000ccc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb08 f904 	mul.w	r9, r8, r4
 8000cda:	40b0      	lsls	r0, r6
 8000cdc:	4589      	cmp	r9, r1
 8000cde:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ce2:	b280      	uxth	r0, r0
 8000ce4:	d93e      	bls.n	8000d64 <__udivmoddi4+0x2e8>
 8000ce6:	1879      	adds	r1, r7, r1
 8000ce8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cec:	d201      	bcs.n	8000cf2 <__udivmoddi4+0x276>
 8000cee:	4589      	cmp	r9, r1
 8000cf0:	d81f      	bhi.n	8000d32 <__udivmoddi4+0x2b6>
 8000cf2:	eba1 0109 	sub.w	r1, r1, r9
 8000cf6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfa:	fb09 f804 	mul.w	r8, r9, r4
 8000cfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d02:	b292      	uxth	r2, r2
 8000d04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d08:	4542      	cmp	r2, r8
 8000d0a:	d229      	bcs.n	8000d60 <__udivmoddi4+0x2e4>
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d12:	d2c4      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d14:	4542      	cmp	r2, r8
 8000d16:	d2c2      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d18:	f1a9 0102 	sub.w	r1, r9, #2
 8000d1c:	443a      	add	r2, r7
 8000d1e:	e7be      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d20:	45f0      	cmp	r8, lr
 8000d22:	d29d      	bcs.n	8000c60 <__udivmoddi4+0x1e4>
 8000d24:	ebbe 0302 	subs.w	r3, lr, r2
 8000d28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	46e1      	mov	r9, ip
 8000d30:	e796      	b.n	8000c60 <__udivmoddi4+0x1e4>
 8000d32:	eba7 0909 	sub.w	r9, r7, r9
 8000d36:	4449      	add	r1, r9
 8000d38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d40:	fb09 f804 	mul.w	r8, r9, r4
 8000d44:	e7db      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d46:	4673      	mov	r3, lr
 8000d48:	e77f      	b.n	8000c4a <__udivmoddi4+0x1ce>
 8000d4a:	4650      	mov	r0, sl
 8000d4c:	e766      	b.n	8000c1c <__udivmoddi4+0x1a0>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e6fd      	b.n	8000b4e <__udivmoddi4+0xd2>
 8000d52:	443b      	add	r3, r7
 8000d54:	3a02      	subs	r2, #2
 8000d56:	e733      	b.n	8000bc0 <__udivmoddi4+0x144>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	443b      	add	r3, r7
 8000d5e:	e71c      	b.n	8000b9a <__udivmoddi4+0x11e>
 8000d60:	4649      	mov	r1, r9
 8000d62:	e79c      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d64:	eba1 0109 	sub.w	r1, r1, r9
 8000d68:	46c4      	mov	ip, r8
 8000d6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6e:	fb09 f804 	mul.w	r8, r9, r4
 8000d72:	e7c4      	b.n	8000cfe <__udivmoddi4+0x282>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f001 fbb7 	bl	80024f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8000d82:	f000 fe15 	bl	80019b0 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d86:	f000 f91f 	bl	8000fc8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8a:	f000 fa63 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8e:	f000 fa29 	bl	80011e4 <MX_DMA_Init>
  MX_TIM5_Init();
 8000d92:	f000 f983 	bl	800109c <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8000d96:	f000 f9fb 	bl	8001190 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("\nDShotTask Begin.\r\n");
 8000d9a:	487d      	ldr	r0, [pc, #500]	@ (8000f90 <main+0x218>)
 8000d9c:	f004 fcde 	bl	800575c <puts>
  printf("SystemCoreClock=%lu\r\n", SystemCoreClock);
 8000da0:	4b7c      	ldr	r3, [pc, #496]	@ (8000f94 <main+0x21c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	487c      	ldr	r0, [pc, #496]	@ (8000f98 <main+0x220>)
 8000da8:	f004 fc70 	bl	800568c <iprintf>
  uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 8000dac:	f002 fe32 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8000db0:	6178      	str	r0, [r7, #20]
  uint32_t tim5_clk = pclk1;
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	61fb      	str	r3, [r7, #28]
  if ((RCC->CFGR & RCC_CFGR_PPRE1) != RCC_CFGR_PPRE1_DIV1)
 8000db6:	4b79      	ldr	r3, [pc, #484]	@ (8000f9c <main+0x224>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <main+0x50>
      tim5_clk *= 2;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
  printf("TIM5 actual clk: %lu\r\n", tim5_clk);
 8000dc8:	69f9      	ldr	r1, [r7, #28]
 8000dca:	4875      	ldr	r0, [pc, #468]	@ (8000fa0 <main+0x228>)
 8000dcc:	f004 fc5e 	bl	800568c <iprintf>

  queue_bdshot_pulse(0, true, dshot_buffer_ch1);
 8000dd0:	4a74      	ldr	r2, [pc, #464]	@ (8000fa4 <main+0x22c>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 fcbc 	bl	8001752 <queue_bdshot_pulse>
  queue_bdshot_pulse(0, true, dshot_buffer_ch2);
 8000dda:	4a73      	ldr	r2, [pc, #460]	@ (8000fa8 <main+0x230>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 fcb7 	bl	8001752 <queue_bdshot_pulse>
  queue_bdshot_pulse(0, true, dshot_buffer_ch3);
 8000de4:	4a71      	ldr	r2, [pc, #452]	@ (8000fac <main+0x234>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 fcb2 	bl	8001752 <queue_bdshot_pulse>
  queue_bdshot_pulse(0, true, dshot_buffer_ch4);
 8000dee:	4a70      	ldr	r2, [pc, #448]	@ (8000fb0 <main+0x238>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 fcad 	bl	8001752 <queue_bdshot_pulse>
  for (int i = 0; i < 3000; i++){
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	e012      	b.n	8000e24 <main+0xac>
  	send_bdshot(TIM_CHANNEL_1);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 fcc2 	bl	8001788 <send_bdshot>
  	send_bdshot(TIM_CHANNEL_2);
 8000e04:	2004      	movs	r0, #4
 8000e06:	f000 fcbf 	bl	8001788 <send_bdshot>
  	send_bdshot(TIM_CHANNEL_3);
 8000e0a:	2008      	movs	r0, #8
 8000e0c:	f000 fcbc 	bl	8001788 <send_bdshot>
  	send_bdshot(TIM_CHANNEL_4);
 8000e10:	200c      	movs	r0, #12
 8000e12:	f000 fcb9 	bl	8001788 <send_bdshot>
  	delay_us_precise(1000);
 8000e16:	ed9f 0b54 	vldr	d0, [pc, #336]	@ 8000f68 <main+0x1f0>
 8000e1a:	f000 fd91 	bl	8001940 <delay_us_precise>
  for (int i = 0; i < 3000; i++){
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	3301      	adds	r3, #1
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	dde7      	ble.n	8000dfe <main+0x86>
  	}
  	delay_us_precise(50000);
 8000e2e:	ed9f 0b50 	vldr	d0, [pc, #320]	@ 8000f70 <main+0x1f8>
 8000e32:	f000 fd85 	bl	8001940 <delay_us_precise>

  	queue_bdshot_pulse(100, true, dshot_buffer_ch1);
 8000e36:	4a5b      	ldr	r2, [pc, #364]	@ (8000fa4 <main+0x22c>)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	2064      	movs	r0, #100	@ 0x64
 8000e3c:	f000 fc89 	bl	8001752 <queue_bdshot_pulse>
  	queue_bdshot_pulse(200, true, dshot_buffer_ch2);
 8000e40:	4a59      	ldr	r2, [pc, #356]	@ (8000fa8 <main+0x230>)
 8000e42:	2101      	movs	r1, #1
 8000e44:	20c8      	movs	r0, #200	@ 0xc8
 8000e46:	f000 fc84 	bl	8001752 <queue_bdshot_pulse>
  	queue_bdshot_pulse(300, true, dshot_buffer_ch3);
 8000e4a:	4a58      	ldr	r2, [pc, #352]	@ (8000fac <main+0x234>)
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e52:	f000 fc7e 	bl	8001752 <queue_bdshot_pulse>
  	queue_bdshot_pulse(400, true, dshot_buffer_ch4);
 8000e56:	4a56      	ldr	r2, [pc, #344]	@ (8000fb0 <main+0x238>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000e5e:	f000 fc78 	bl	8001752 <queue_bdshot_pulse>
  	uint8_t packet_PA0[3];
  	uint8_t packet_PA1[3];
  	uint8_t packet_PA2[3];
  	uint8_t packet_PA3[3];
      for (;;){
        while(dshot_running_ch1){delay_us_precise(5);}
 8000e62:	e003      	b.n	8000e6c <main+0xf4>
 8000e64:	ed9f 0b44 	vldr	d0, [pc, #272]	@ 8000f78 <main+0x200>
 8000e68:	f000 fd6a 	bl	8001940 <delay_us_precise>
 8000e6c:	4b51      	ldr	r3, [pc, #324]	@ (8000fb4 <main+0x23c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f6      	bne.n	8000e64 <main+0xec>
        send_bdshot(TIM_CHANNEL_1);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 fc86 	bl	8001788 <send_bdshot>
        delay_us_precise(40);
 8000e7c:	ed9f 0b40 	vldr	d0, [pc, #256]	@ 8000f80 <main+0x208>
 8000e80:	f000 fd5e 	bl	8001940 <delay_us_precise>
        set_pin_input(GPIOA, GPIO_PIN_0);
 8000e84:	2101      	movs	r1, #1
 8000e86:	484c      	ldr	r0, [pc, #304]	@ (8000fb8 <main+0x240>)
 8000e88:	f000 fb82 	bl	8001590 <set_pin_input>
        process_bdshot_telemetry(GPIOA, GPIO_PIN_0, packet_PA0);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	461a      	mov	r2, r3
 8000e92:	2101      	movs	r1, #1
 8000e94:	4848      	ldr	r0, [pc, #288]	@ (8000fb8 <main+0x240>)
 8000e96:	f000 faaf 	bl	80013f8 <process_bdshot_telemetry>
        set_pin_pwm(GPIOA, GPIO_PIN_0, GPIO_AF2_TIM5);
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4846      	ldr	r0, [pc, #280]	@ (8000fb8 <main+0x240>)
 8000ea0:	f000 fb94 	bl	80015cc <set_pin_pwm>
        delay_us_precise(60);
 8000ea4:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8000f88 <main+0x210>
 8000ea8:	f000 fd4a 	bl	8001940 <delay_us_precise>

        while(dshot_running_ch2){delay_us_precise(5);}
 8000eac:	e003      	b.n	8000eb6 <main+0x13e>
 8000eae:	ed9f 0b32 	vldr	d0, [pc, #200]	@ 8000f78 <main+0x200>
 8000eb2:	f000 fd45 	bl	8001940 <delay_us_precise>
 8000eb6:	4b41      	ldr	r3, [pc, #260]	@ (8000fbc <main+0x244>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f6      	bne.n	8000eae <main+0x136>
        send_bdshot(TIM_CHANNEL_2);
 8000ec0:	2004      	movs	r0, #4
 8000ec2:	f000 fc61 	bl	8001788 <send_bdshot>
        delay_us_precise(40);
 8000ec6:	ed9f 0b2e 	vldr	d0, [pc, #184]	@ 8000f80 <main+0x208>
 8000eca:	f000 fd39 	bl	8001940 <delay_us_precise>
        set_pin_input(GPIOA, GPIO_PIN_1);
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4839      	ldr	r0, [pc, #228]	@ (8000fb8 <main+0x240>)
 8000ed2:	f000 fb5d 	bl	8001590 <set_pin_input>
        //process_bdshot_telemetry(GPIOA, GPIO_PIN_1, packet_PA1);
        set_pin_pwm(GPIOA, GPIO_PIN_1, GPIO_AF2_TIM5);
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4837      	ldr	r0, [pc, #220]	@ (8000fb8 <main+0x240>)
 8000edc:	f000 fb76 	bl	80015cc <set_pin_pwm>
        delay_us_precise(60);
 8000ee0:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 8000f88 <main+0x210>
 8000ee4:	f000 fd2c 	bl	8001940 <delay_us_precise>

        while(dshot_running_ch3){delay_us_precise(5);}
 8000ee8:	e003      	b.n	8000ef2 <main+0x17a>
 8000eea:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8000f78 <main+0x200>
 8000eee:	f000 fd27 	bl	8001940 <delay_us_precise>
 8000ef2:	4b33      	ldr	r3, [pc, #204]	@ (8000fc0 <main+0x248>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f6      	bne.n	8000eea <main+0x172>
        send_bdshot(TIM_CHANNEL_3);
 8000efc:	2008      	movs	r0, #8
 8000efe:	f000 fc43 	bl	8001788 <send_bdshot>
        delay_us_precise(40);
 8000f02:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8000f80 <main+0x208>
 8000f06:	f000 fd1b 	bl	8001940 <delay_us_precise>
        set_pin_input(GPIOA, GPIO_PIN_2);
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	482a      	ldr	r0, [pc, #168]	@ (8000fb8 <main+0x240>)
 8000f0e:	f000 fb3f 	bl	8001590 <set_pin_input>
        //process_bdshot_telemetry(GPIOA, GPIO_PIN_2, packet_PA2);
        set_pin_pwm(GPIOA, GPIO_PIN_2, GPIO_AF2_TIM5);
 8000f12:	2202      	movs	r2, #2
 8000f14:	2104      	movs	r1, #4
 8000f16:	4828      	ldr	r0, [pc, #160]	@ (8000fb8 <main+0x240>)
 8000f18:	f000 fb58 	bl	80015cc <set_pin_pwm>
        delay_us_precise(60);
 8000f1c:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 8000f88 <main+0x210>
 8000f20:	f000 fd0e 	bl	8001940 <delay_us_precise>

        while(dshot_running_ch4){delay_us_precise(5);}
 8000f24:	e003      	b.n	8000f2e <main+0x1b6>
 8000f26:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 8000f78 <main+0x200>
 8000f2a:	f000 fd09 	bl	8001940 <delay_us_precise>
 8000f2e:	4b25      	ldr	r3, [pc, #148]	@ (8000fc4 <main+0x24c>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f6      	bne.n	8000f26 <main+0x1ae>
        send_bdshot(TIM_CHANNEL_4);
 8000f38:	200c      	movs	r0, #12
 8000f3a:	f000 fc25 	bl	8001788 <send_bdshot>
        delay_us_precise(40);
 8000f3e:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 8000f80 <main+0x208>
 8000f42:	f000 fcfd 	bl	8001940 <delay_us_precise>
        set_pin_input(GPIOA, GPIO_PIN_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	481b      	ldr	r0, [pc, #108]	@ (8000fb8 <main+0x240>)
 8000f4a:	f000 fb21 	bl	8001590 <set_pin_input>
        //process_bdshot_telemetry(GPIOA, GPIO_PIN_3, packet_PA3);
        set_pin_pwm(GPIOA, GPIO_PIN_3, GPIO_AF2_TIM5);
 8000f4e:	2202      	movs	r2, #2
 8000f50:	2108      	movs	r1, #8
 8000f52:	4819      	ldr	r0, [pc, #100]	@ (8000fb8 <main+0x240>)
 8000f54:	f000 fb3a 	bl	80015cc <set_pin_pwm>
        delay_us_precise(60);
 8000f58:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 8000f88 <main+0x210>
 8000f5c:	f000 fcf0 	bl	8001940 <delay_us_precise>
        while(dshot_running_ch1){delay_us_precise(5);}
 8000f60:	e784      	b.n	8000e6c <main+0xf4>
 8000f62:	bf00      	nop
 8000f64:	f3af 8000 	nop.w
 8000f68:	00000000 	.word	0x00000000
 8000f6c:	408f4000 	.word	0x408f4000
 8000f70:	00000000 	.word	0x00000000
 8000f74:	40e86a00 	.word	0x40e86a00
 8000f78:	00000000 	.word	0x00000000
 8000f7c:	40140000 	.word	0x40140000
 8000f80:	00000000 	.word	0x00000000
 8000f84:	40440000 	.word	0x40440000
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	404e0000 	.word	0x404e0000
 8000f90:	080067e8 	.word	0x080067e8
 8000f94:	20000000 	.word	0x20000000
 8000f98:	080067fc 	.word	0x080067fc
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	08006814 	.word	0x08006814
 8000fa4:	20000294 	.word	0x20000294
 8000fa8:	200002e4 	.word	0x200002e4
 8000fac:	20000334 	.word	0x20000334
 8000fb0:	20000384 	.word	0x20000384
 8000fb4:	200003d4 	.word	0x200003d4
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	200003d5 	.word	0x200003d5
 8000fc0:	200003d6 	.word	0x200003d6
 8000fc4:	200003d7 	.word	0x200003d7

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	@ 0x50
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	2230      	movs	r2, #48	@ 0x30
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 fcc2 	bl	8005960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <SystemClock_Config+0xcc>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	4a27      	ldr	r2, [pc, #156]	@ (8001094 <SystemClock_Config+0xcc>)
 8000ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffc:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <SystemClock_Config+0xcc>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <SystemClock_Config+0xd0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a21      	ldr	r2, [pc, #132]	@ (8001098 <SystemClock_Config+0xd0>)
 8001012:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <SystemClock_Config+0xd0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102c:	2310      	movs	r3, #16
 800102e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001030:	2302      	movs	r3, #2
 8001032:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001034:	2300      	movs	r3, #0
 8001036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001038:	2308      	movs	r3, #8
 800103a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800103c:	23a8      	movs	r3, #168	@ 0xa8
 800103e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001040:	2302      	movs	r3, #2
 8001042:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001044:	2304      	movs	r3, #4
 8001046:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	4618      	mov	r0, r3
 800104e:	f002 f8b1 	bl	80031b4 <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001058:	f000 fee8 	bl	8001e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105c:	230f      	movs	r3, #15
 800105e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001060:	2302      	movs	r3, #2
 8001062:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001068:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800106c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001072:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2105      	movs	r1, #5
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fb12 	bl	80036a4 <HAL_RCC_ClockConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001086:	f000 fed1 	bl	8001e2c <Error_Handler>
  }
}
 800108a:	bf00      	nop
 800108c:	3750      	adds	r7, #80	@ 0x50
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40007000 	.word	0x40007000

0800109c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010be:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <MX_TIM5_Init+0xec>)
 80010c0:	4a32      	ldr	r2, [pc, #200]	@ (800118c <MX_TIM5_Init+0xf0>)
 80010c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010c4:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <MX_TIM5_Init+0xec>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001188 <MX_TIM5_Init+0xec>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 139;
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <MX_TIM5_Init+0xec>)
 80010d2:	228b      	movs	r2, #139	@ 0x8b
 80010d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <MX_TIM5_Init+0xec>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <MX_TIM5_Init+0xec>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80010e2:	4829      	ldr	r0, [pc, #164]	@ (8001188 <MX_TIM5_Init+0xec>)
 80010e4:	f002 fdba 	bl	8003c5c <HAL_TIM_PWM_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80010ee:	f000 fe9d 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	4619      	mov	r1, r3
 8001100:	4821      	ldr	r0, [pc, #132]	@ (8001188 <MX_TIM5_Init+0xec>)
 8001102:	f003 fd65 	bl	8004bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800110c:	f000 fe8e 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001110:	2360      	movs	r3, #96	@ 0x60
 8001112:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001118:	2302      	movs	r3, #2
 800111a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	4619      	mov	r1, r3
 8001126:	4818      	ldr	r0, [pc, #96]	@ (8001188 <MX_TIM5_Init+0xec>)
 8001128:	f003 f910 	bl	800434c <HAL_TIM_PWM_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001132:	f000 fe7b 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2204      	movs	r2, #4
 800113a:	4619      	mov	r1, r3
 800113c:	4812      	ldr	r0, [pc, #72]	@ (8001188 <MX_TIM5_Init+0xec>)
 800113e:	f003 f905 	bl	800434c <HAL_TIM_PWM_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001148:	f000 fe70 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2208      	movs	r2, #8
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	@ (8001188 <MX_TIM5_Init+0xec>)
 8001154:	f003 f8fa 	bl	800434c <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 800115e:	f000 fe65 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	220c      	movs	r2, #12
 8001166:	4619      	mov	r1, r3
 8001168:	4807      	ldr	r0, [pc, #28]	@ (8001188 <MX_TIM5_Init+0xec>)
 800116a:	f003 f8ef 	bl	800434c <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8001174:	f000 fe5a 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <MX_TIM5_Init+0xec>)
 800117a:	f000 ff85 	bl	8002088 <HAL_TIM_MspPostInit>

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	@ 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000084 	.word	0x20000084
 800118c:	40000c00 	.word	0x40000c00

08001190 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_USART6_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 800119c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80011a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011c8:	f003 fd92 	bl	8004cf0 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011d2:	f000 fe2b 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000024c 	.word	0x2000024c
 80011e0:	40011400 	.word	0x40011400

080011e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <MX_DMA_Init+0x6c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <MX_DMA_Init+0x6c>)
 80011f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_DMA_Init+0x6c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	200b      	movs	r0, #11
 800120c:	f001 fa6a 	bl	80026e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001210:	200b      	movs	r0, #11
 8001212:	f001 fa83 	bl	800271c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	200c      	movs	r0, #12
 800121c:	f001 fa62 	bl	80026e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001220:	200c      	movs	r0, #12
 8001222:	f001 fa7b 	bl	800271c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	200d      	movs	r0, #13
 800122c:	f001 fa5a 	bl	80026e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001230:	200d      	movs	r0, #13
 8001232:	f001 fa73 	bl	800271c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	200f      	movs	r0, #15
 800123c:	f001 fa52 	bl	80026e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001240:	200f      	movs	r0, #15
 8001242:	f001 fa6b 	bl	800271c <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b27      	ldr	r3, [pc, #156]	@ (800130c <MX_GPIO_Init+0xb8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a26      	ldr	r2, [pc, #152]	@ (800130c <MX_GPIO_Init+0xb8>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b24      	ldr	r3, [pc, #144]	@ (800130c <MX_GPIO_Init+0xb8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b20      	ldr	r3, [pc, #128]	@ (800130c <MX_GPIO_Init+0xb8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a1f      	ldr	r2, [pc, #124]	@ (800130c <MX_GPIO_Init+0xb8>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <MX_GPIO_Init+0xb8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <MX_GPIO_Init+0xb8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a18      	ldr	r2, [pc, #96]	@ (800130c <MX_GPIO_Init+0xb8>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <MX_GPIO_Init+0xb8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <MX_GPIO_Init+0xb8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a11      	ldr	r2, [pc, #68]	@ (800130c <MX_GPIO_Init+0xb8>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_GPIO_Init+0xb8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012e0:	480b      	ldr	r0, [pc, #44]	@ (8001310 <MX_GPIO_Init+0xbc>)
 80012e2:	f001 ff4d 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_GPIO_Init+0xbc>)
 8001300:	f001 fd8a 	bl	8002e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	@ 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40020400 	.word	0x40020400

08001314 <read_telemetry_pin>:
    HAL_UART_Transmit(huart, (uint8_t *)buf, idx, HAL_MAX_DELAY);
}


static inline uint8_t read_telemetry_pin(GPIO_TypeDef *port, uint16_t pin)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
    return HAL_GPIO_ReadPin(port, pin) ? 1 : 0;
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	4619      	mov	r1, r3
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f001 ff13 	bl	8003150 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	b2db      	uxtb	r3, r3
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <receive_bdshot_telemetry>:

int receive_bdshot_telemetry(uint32_t *telemetry_out, GPIO_TypeDef *port, uint16_t pin) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	4613      	mov	r3, r2
 800134c:	80fb      	strh	r3, [r7, #6]
    uint32_t value = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]

    // Wait for line to go low (start bit)
    uint32_t timeout = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
    while (read_telemetry_pin(port, pin)) {
 8001356:	e00c      	b.n	8001372 <receive_bdshot_telemetry+0x32>
        delay_us_precise(1);
 8001358:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 80013e8 <receive_bdshot_telemetry+0xa8>
 800135c:	f000 faf0 	bl	8001940 <delay_us_precise>
        if (++timeout > TELEMETRY_TIMEOUT_US)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	3301      	adds	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	2b32      	cmp	r3, #50	@ 0x32
 800136a:	d902      	bls.n	8001372 <receive_bdshot_telemetry+0x32>
            return -1; // Timeout
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	e034      	b.n	80013dc <receive_bdshot_telemetry+0x9c>
    while (read_telemetry_pin(port, pin)) {
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	4619      	mov	r1, r3
 8001376:	68b8      	ldr	r0, [r7, #8]
 8001378:	f7ff ffcc 	bl	8001314 <read_telemetry_pin>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1ea      	bne.n	8001358 <receive_bdshot_telemetry+0x18>
    }

    delay_ns(500);
 8001382:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001386:	f000 f8d1 	bl	800152c <delay_ns>

    // LSB-first: capture 20 bits
    for (int i = 0; i < 20; i++) {
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e01e      	b.n	80013ce <receive_bdshot_telemetry+0x8e>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001396:	4816      	ldr	r0, [pc, #88]	@ (80013f0 <receive_bdshot_telemetry+0xb0>)
 8001398:	f001 fef2 	bl	8003180 <HAL_GPIO_WritePin>
        value |= (read_telemetry_pin(port, pin) << (19-i)); // LSB-first
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	4619      	mov	r1, r3
 80013a0:	68b8      	ldr	r0, [r7, #8]
 80013a2:	f7ff ffb7 	bl	8001314 <read_telemetry_pin>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f1c3 0313 	rsb	r3, r3, #19
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61fb      	str	r3, [r7, #28]
        //delay_ns(100);
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013c2:	480b      	ldr	r0, [pc, #44]	@ (80013f0 <receive_bdshot_telemetry+0xb0>)
 80013c4:	f001 fedc 	bl	8003180 <HAL_GPIO_WritePin>
    for (int i = 0; i < 20; i++) {
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3301      	adds	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2b13      	cmp	r3, #19
 80013d2:	dddd      	ble.n	8001390 <receive_bdshot_telemetry+0x50>
    }

    *telemetry_out = value;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	601a      	str	r2, [r3, #0]
    return 0;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	f3af 8000 	nop.w
 80013e8:	00000000 	.word	0x00000000
 80013ec:	3ff00000 	.word	0x3ff00000
 80013f0:	40020400 	.word	0x40020400
 80013f4:	00000000 	.word	0x00000000

080013f8 <process_bdshot_telemetry>:

void process_bdshot_telemetry(GPIO_TypeDef *port, uint16_t pin, uint8_t *packet_out) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	460b      	mov	r3, r1
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	817b      	strh	r3, [r7, #10]
	uint32_t telemetry;
	uint16_t telemetry_16bit;
	char telemetry_type;
	float telemetry_value;
    if (receive_bdshot_telemetry(&telemetry, port, pin) == 0) {
 8001406:	897a      	ldrh	r2, [r7, #10]
 8001408:	f107 0318 	add.w	r3, r7, #24
 800140c:	68f9      	ldr	r1, [r7, #12]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff96 	bl	8001340 <receive_bdshot_telemetry>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d16a      	bne.n	80014f0 <process_bdshot_telemetry+0xf8>
  	  uint32_t gcr = decode_gcr_mapping(telemetry);
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fb7c 	bl	8001b1a <decode_gcr_mapping>
 8001422:	6278      	str	r0, [r7, #36]	@ 0x24
  	  if (!decode_gcr_20_to_16(gcr, &telemetry_16bit)) {
 8001424:	f107 0316 	add.w	r3, r7, #22
 8001428:	4619      	mov	r1, r3
 800142a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800142c:	f000 fb83 	bl	8001b36 <decode_gcr_20_to_16>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d107      	bne.n	8001446 <process_bdshot_telemetry+0x4e>
  		  printf("Invalid GCR encoding.\r\n");
 8001436:	4834      	ldr	r0, [pc, #208]	@ (8001508 <process_bdshot_telemetry+0x110>)
 8001438:	f004 f990 	bl	800575c <puts>
  		  delay_us_precise(10);
 800143c:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 8001500 <process_bdshot_telemetry+0x108>
 8001440:	f000 fa7e 	bl	8001940 <delay_us_precise>
  	  }
    }
    else {
    	printf("Invalid Telemetry.\r\n");
    }
}
 8001444:	e057      	b.n	80014f6 <process_bdshot_telemetry+0xfe>
            int type = parse_edt_frame(telemetry_16bit, &telemetry_type, &telemetry_value);
 8001446:	8afb      	ldrh	r3, [r7, #22]
 8001448:	f107 0210 	add.w	r2, r7, #16
 800144c:	f107 0115 	add.w	r1, r7, #21
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fbe5 	bl	8001c20 <parse_edt_frame>
 8001456:	6238      	str	r0, [r7, #32]
            if (type == 2) {
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d125      	bne.n	80014aa <process_bdshot_telemetry+0xb2>
          	  uint16_t rpm = (uint16_t)(telemetry_value / 7.0);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f869 	bl	8000538 <__aeabi_f2d>
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b28      	ldr	r3, [pc, #160]	@ (800150c <process_bdshot_telemetry+0x114>)
 800146c:	f7ff f9e6 	bl	800083c <__aeabi_ddiv>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fac8 	bl	8000a0c <__aeabi_d2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	83fb      	strh	r3, [r7, #30]
          	  packet_out[0] = 0xAA;                      // Start byte
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	22aa      	movs	r2, #170	@ 0xaa
 8001484:	701a      	strb	r2, [r3, #0]
          	  packet_out[1] = rpm & 0xFF;               // LSB
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3301      	adds	r3, #1
 800148a:	8bfa      	ldrh	r2, [r7, #30]
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
          	  packet_out[2] = (rpm >> 8) & 0xFF;        // MSB
 8001490:	8bfb      	ldrh	r3, [r7, #30]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	b29a      	uxth	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3302      	adds	r3, #2
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]
          	  printf("PA0 RPM: %d\r\n", rpm);
 800149e:	8bfb      	ldrh	r3, [r7, #30]
 80014a0:	4619      	mov	r1, r3
 80014a2:	481b      	ldr	r0, [pc, #108]	@ (8001510 <process_bdshot_telemetry+0x118>)
 80014a4:	f004 f8f2 	bl	800568c <iprintf>
}
 80014a8:	e025      	b.n	80014f6 <process_bdshot_telemetry+0xfe>
            else if (type == 1) {
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d103      	bne.n	80014b8 <process_bdshot_telemetry+0xc0>
            	printf("EDT\r\n");
 80014b0:	4818      	ldr	r0, [pc, #96]	@ (8001514 <process_bdshot_telemetry+0x11c>)
 80014b2:	f004 f953 	bl	800575c <puts>
}
 80014b6:	e01e      	b.n	80014f6 <process_bdshot_telemetry+0xfe>
            else if (type == -1){
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014be:	d103      	bne.n	80014c8 <process_bdshot_telemetry+0xd0>
                printf("Invalid Telemetry frame.\r\n");
 80014c0:	4815      	ldr	r0, [pc, #84]	@ (8001518 <process_bdshot_telemetry+0x120>)
 80014c2:	f004 f94b 	bl	800575c <puts>
}
 80014c6:	e016      	b.n	80014f6 <process_bdshot_telemetry+0xfe>
            else if (type == -2){
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	f113 0f02 	cmn.w	r3, #2
 80014ce:	d103      	bne.n	80014d8 <process_bdshot_telemetry+0xe0>
            	printf("Invalid CRC.\r\n");
 80014d0:	4812      	ldr	r0, [pc, #72]	@ (800151c <process_bdshot_telemetry+0x124>)
 80014d2:	f004 f943 	bl	800575c <puts>
}
 80014d6:	e00e      	b.n	80014f6 <process_bdshot_telemetry+0xfe>
            else if (type == -3){
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	f113 0f03 	cmn.w	r3, #3
 80014de:	d103      	bne.n	80014e8 <process_bdshot_telemetry+0xf0>
            	printf("Something went wrong.\r\n");
 80014e0:	480f      	ldr	r0, [pc, #60]	@ (8001520 <process_bdshot_telemetry+0x128>)
 80014e2:	f004 f93b 	bl	800575c <puts>
}
 80014e6:	e006      	b.n	80014f6 <process_bdshot_telemetry+0xfe>
            	printf("Unknown Error.\r\n");
 80014e8:	480e      	ldr	r0, [pc, #56]	@ (8001524 <process_bdshot_telemetry+0x12c>)
 80014ea:	f004 f937 	bl	800575c <puts>
}
 80014ee:	e002      	b.n	80014f6 <process_bdshot_telemetry+0xfe>
    	printf("Invalid Telemetry.\r\n");
 80014f0:	480d      	ldr	r0, [pc, #52]	@ (8001528 <process_bdshot_telemetry+0x130>)
 80014f2:	f004 f933 	bl	800575c <puts>
}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	@ 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	00000000 	.word	0x00000000
 8001504:	40240000 	.word	0x40240000
 8001508:	0800682c 	.word	0x0800682c
 800150c:	401c0000 	.word	0x401c0000
 8001510:	08006844 	.word	0x08006844
 8001514:	08006854 	.word	0x08006854
 8001518:	0800685c 	.word	0x0800685c
 800151c:	08006878 	.word	0x08006878
 8001520:	08006888 	.word	0x08006888
 8001524:	080068a0 	.word	0x080068a0
 8001528:	080068b0 	.word	0x080068b0

0800152c <delay_ns>:

//One cycle is ~6 ns. This is lower limit of function
void delay_ns(uint32_t ns) {
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1e9f) * ns;
 8001534:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <delay_ns+0x58>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001540:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001588 <delay_ns+0x5c>
 8001544:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155a:	ee17 3a90 	vmov	r3, s15
 800155e:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8001560:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <delay_ns+0x60>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8001566:	bf00      	nop
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <delay_ns+0x60>)
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	429a      	cmp	r2, r3
 8001574:	d8f8      	bhi.n	8001568 <delay_ns+0x3c>
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	20000000 	.word	0x20000000
 8001588:	4e6e6b28 	.word	0x4e6e6b28
 800158c:	e0001000 	.word	0xe0001000

08001590 <set_pin_input>:
//Telemetry Input
void set_pin_input(GPIO_TypeDef *port, uint16_t pin)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = pin;
 80015ac:	887b      	ldrh	r3, [r7, #2]
 80015ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f001 fc2a 	bl	8002e18 <HAL_GPIO_Init>
}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <set_pin_pwm>:

//DShot Generation
void set_pin_pwm(GPIO_TypeDef *port, uint16_t pin, uint8_t alternate)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
 80015d8:	4613      	mov	r3, r2
 80015da:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = pin;
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = alternate;
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4619      	mov	r1, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f001 fc06 	bl	8002e18 <HAL_GPIO_Init>
}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <prepare_bdshot_buffer>:

void prepare_bdshot_buffer(uint16_t frame, uint32_t *dshot_buffer)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	80fb      	strh	r3, [r7, #6]
    uint32_t buffer_index = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

    dshot_buffer[buffer_index++] = 0;  // preload entry
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	617a      	str	r2, [r7, #20]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	4413      	add	r3, r2
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
    dshot_buffer[buffer_index++] = 0;  // preload entry
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	617a      	str	r2, [r7, #20]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	4413      	add	r3, r2
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
    dshot_buffer[buffer_index++] = 0;  // preload entry
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	617a      	str	r2, [r7, #20]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	4413      	add	r3, r2
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

    //2Build the actual DSHOT waveform entries
    for (int i = 15; i >= 0; i--)
 8001654:	230f      	movs	r3, #15
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	e01e      	b.n	8001698 <prepare_bdshot_buffer+0x84>
    {
        uint8_t bit = (frame >> i) & 0x01;
 800165a:	88fa      	ldrh	r2, [r7, #6]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	fa42 f303 	asr.w	r3, r2, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
        if (bit)
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <prepare_bdshot_buffer+0x6e>
        {
            dshot_buffer[buffer_index++] = DSHOT_T1L_TICKS;  // logic 1
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	617a      	str	r2, [r7, #20]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	4413      	add	r3, r2
 800167c:	2269      	movs	r2, #105	@ 0x69
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e007      	b.n	8001692 <prepare_bdshot_buffer+0x7e>
            //dshot_buffer[buffer_index++] = 0;
        }
        else
        {
            dshot_buffer[buffer_index++] = DSHOT_T0L_TICKS;  // logic 0
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	617a      	str	r2, [r7, #20]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	4413      	add	r3, r2
 800168e:	2232      	movs	r2, #50	@ 0x32
 8001690:	601a      	str	r2, [r3, #0]
    for (int i = 15; i >= 0; i--)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	3b01      	subs	r3, #1
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	2b00      	cmp	r3, #0
 800169c:	dadd      	bge.n	800165a <prepare_bdshot_buffer+0x46>
            //dshot_buffer[buffer_index++] = 0;
        }
    }

    dshot_buffer[buffer_index++] = 0;  // Final LOW
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	617a      	str	r2, [r7, #20]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	4413      	add	r3, r2
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
}
 80016ae:	bf00      	nop
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <bdshot_crc>:


// value_12bit should be 0...4095
uint8_t bdshot_crc(uint16_t value_12bit)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	80fb      	strh	r3, [r7, #6]
    // Optional: Uncomment to assert 12-bit range in debug
    // assert(value_12bit < 4096);

    uint16_t crc = value_12bit ^ (value_12bit >> 4) ^ (value_12bit >> 8);
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	4053      	eors	r3, r2
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4053      	eors	r3, r2
 80016d8:	81fb      	strh	r3, [r7, #14]
    crc = ~crc;           // Bitwise NOT
 80016da:	89fb      	ldrh	r3, [r7, #14]
 80016dc:	43db      	mvns	r3, r3
 80016de:	81fb      	strh	r3, [r7, #14]
    crc = crc & 0x0F;     // Mask to 4 bits
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)crc;
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	b2db      	uxtb	r3, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <make_bdshot_frame>:

// Create 16-bit DSHOT frame with correct CRC
uint16_t make_bdshot_frame(uint16_t value, bool telemetry) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	460a      	mov	r2, r1
 8001702:	80fb      	strh	r3, [r7, #6]
 8001704:	4613      	mov	r3, r2
 8001706:	717b      	strb	r3, [r7, #5]
    if (value == 0) {
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <make_bdshot_frame+0x1a>
        return 0x000F; // hardware expects this special frame
 800170e:	230f      	movs	r3, #15
 8001710:	e01b      	b.n	800174a <make_bdshot_frame+0x52>
    }
    value &= 0x07FF; // 11 bits
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001718:	80fb      	strh	r3, [r7, #6]
    uint16_t frame_no_crc = (value << 1) | (telemetry ? 1 : 0);
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	b21a      	sxth	r2, r3
 8001722:	797b      	ldrb	r3, [r7, #5]
 8001724:	b21b      	sxth	r3, r3
 8001726:	4313      	orrs	r3, r2
 8001728:	b21b      	sxth	r3, r3
 800172a:	81fb      	strh	r3, [r7, #14]
    uint8_t crc = bdshot_crc(frame_no_crc);
 800172c:	89fb      	ldrh	r3, [r7, #14]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ffc3 	bl	80016ba <bdshot_crc>
 8001734:	4603      	mov	r3, r0
 8001736:	737b      	strb	r3, [r7, #13]
    return (frame_no_crc << 4) | crc;
 8001738:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	b21a      	sxth	r2, r3
 8001740:	7b7b      	ldrb	r3, [r7, #13]
 8001742:	b21b      	sxth	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b21b      	sxth	r3, r3
 8001748:	b29b      	uxth	r3, r3
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <queue_bdshot_pulse>:

void queue_bdshot_pulse(uint16_t throttle, bool telemetry, uint32_t *dshot_buffer){
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	603a      	str	r2, [r7, #0]
 800175c:	80fb      	strh	r3, [r7, #6]
 800175e:	460b      	mov	r3, r1
 8001760:	717b      	strb	r3, [r7, #5]
	uint16_t frame = make_bdshot_frame(throttle, telemetry);
 8001762:	797a      	ldrb	r2, [r7, #5]
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ffc5 	bl	80016f8 <make_bdshot_frame>
 800176e:	4603      	mov	r3, r0
 8001770:	81fb      	strh	r3, [r7, #14]
	prepare_bdshot_buffer(frame, dshot_buffer);
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	6839      	ldr	r1, [r7, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff4c 	bl	8001614 <prepare_bdshot_buffer>
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	0000      	movs	r0, r0
	...

08001788 <send_bdshot>:

void send_bdshot(uint32_t channel){
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	uint32_t *buffer = NULL;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
	switch(channel) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d828      	bhi.n	80017ec <send_bdshot+0x64>
 800179a:	a201      	add	r2, pc, #4	@ (adr r2, 80017a0 <send_bdshot+0x18>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017d5 	.word	0x080017d5
 80017a4:	080017ed 	.word	0x080017ed
 80017a8:	080017ed 	.word	0x080017ed
 80017ac:	080017ed 	.word	0x080017ed
 80017b0:	080017db 	.word	0x080017db
 80017b4:	080017ed 	.word	0x080017ed
 80017b8:	080017ed 	.word	0x080017ed
 80017bc:	080017ed 	.word	0x080017ed
 80017c0:	080017e1 	.word	0x080017e1
 80017c4:	080017ed 	.word	0x080017ed
 80017c8:	080017ed 	.word	0x080017ed
 80017cc:	080017ed 	.word	0x080017ed
 80017d0:	080017e7 	.word	0x080017e7
	  case TIM_CHANNEL_1: buffer = dshot_buffer_ch1; break;
 80017d4:	4b50      	ldr	r3, [pc, #320]	@ (8001918 <send_bdshot+0x190>)
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e008      	b.n	80017ec <send_bdshot+0x64>
	  case TIM_CHANNEL_2: buffer = dshot_buffer_ch2; break;
 80017da:	4b50      	ldr	r3, [pc, #320]	@ (800191c <send_bdshot+0x194>)
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e005      	b.n	80017ec <send_bdshot+0x64>
	  case TIM_CHANNEL_3: buffer = dshot_buffer_ch3; break;
 80017e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001920 <send_bdshot+0x198>)
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e002      	b.n	80017ec <send_bdshot+0x64>
	  case TIM_CHANNEL_4: buffer = dshot_buffer_ch4; break;
 80017e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001924 <send_bdshot+0x19c>)
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	bf00      	nop
	}
    switch (channel) {
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d844      	bhi.n	800187c <send_bdshot+0xf4>
 80017f2:	a201      	add	r2, pc, #4	@ (adr r2, 80017f8 <send_bdshot+0x70>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001835 	.word	0x08001835
 80017fc:	0800187d 	.word	0x0800187d
 8001800:	0800187d 	.word	0x0800187d
 8001804:	0800187d 	.word	0x0800187d
 8001808:	08001849 	.word	0x08001849
 800180c:	0800187d 	.word	0x0800187d
 8001810:	0800187d 	.word	0x0800187d
 8001814:	0800187d 	.word	0x0800187d
 8001818:	0800185d 	.word	0x0800185d
 800181c:	0800187d 	.word	0x0800187d
 8001820:	0800187d 	.word	0x0800187d
 8001824:	0800187d 	.word	0x0800187d
 8001828:	08001871 	.word	0x08001871
        case TIM_CHANNEL_1: while (dshot_running_ch1) delay_us_precise(1); break;
 800182c:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8001910 <send_bdshot+0x188>
 8001830:	f000 f886 	bl	8001940 <delay_us_precise>
 8001834:	4b3c      	ldr	r3, [pc, #240]	@ (8001928 <send_bdshot+0x1a0>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f6      	bne.n	800182c <send_bdshot+0xa4>
 800183e:	e01d      	b.n	800187c <send_bdshot+0xf4>
        case TIM_CHANNEL_2: while (dshot_running_ch2) delay_us_precise(1); break;
 8001840:	ed9f 0b33 	vldr	d0, [pc, #204]	@ 8001910 <send_bdshot+0x188>
 8001844:	f000 f87c 	bl	8001940 <delay_us_precise>
 8001848:	4b38      	ldr	r3, [pc, #224]	@ (800192c <send_bdshot+0x1a4>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f6      	bne.n	8001840 <send_bdshot+0xb8>
 8001852:	e013      	b.n	800187c <send_bdshot+0xf4>
        case TIM_CHANNEL_3: while (dshot_running_ch3) delay_us_precise(1); break;
 8001854:	ed9f 0b2e 	vldr	d0, [pc, #184]	@ 8001910 <send_bdshot+0x188>
 8001858:	f000 f872 	bl	8001940 <delay_us_precise>
 800185c:	4b34      	ldr	r3, [pc, #208]	@ (8001930 <send_bdshot+0x1a8>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f6      	bne.n	8001854 <send_bdshot+0xcc>
 8001866:	e009      	b.n	800187c <send_bdshot+0xf4>
        case TIM_CHANNEL_4: while (dshot_running_ch4) delay_us_precise(1); break;
 8001868:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 8001910 <send_bdshot+0x188>
 800186c:	f000 f868 	bl	8001940 <delay_us_precise>
 8001870:	4b30      	ldr	r3, [pc, #192]	@ (8001934 <send_bdshot+0x1ac>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f6      	bne.n	8001868 <send_bdshot+0xe0>
 800187a:	bf00      	nop
    }
	if (buffer == NULL) Error_Handler();
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <send_bdshot+0xfe>
 8001882:	f000 fad3 	bl	8001e2c <Error_Handler>
    if (HAL_TIM_PWM_Start_DMA(&htim5, channel, (uint32_t*)buffer, DSHOT_BUFFER_SIZE) != HAL_OK)
 8001886:	2314      	movs	r3, #20
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	482a      	ldr	r0, [pc, #168]	@ (8001938 <send_bdshot+0x1b0>)
 800188e:	f002 faa5 	bl	8003ddc <HAL_TIM_PWM_Start_DMA>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <send_bdshot+0x11a>
    {
        Error_Handler();
 8001898:	f000 fac8 	bl	8001e2c <Error_Handler>
        printf("Error in send_bdshot()\r\n");
 800189c:	4827      	ldr	r0, [pc, #156]	@ (800193c <send_bdshot+0x1b4>)
 800189e:	f003 ff5d 	bl	800575c <puts>
    }
    switch (channel) {
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d82d      	bhi.n	8001904 <send_bdshot+0x17c>
 80018a8:	a201      	add	r2, pc, #4	@ (adr r2, 80018b0 <send_bdshot+0x128>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018e5 	.word	0x080018e5
 80018b4:	08001905 	.word	0x08001905
 80018b8:	08001905 	.word	0x08001905
 80018bc:	08001905 	.word	0x08001905
 80018c0:	080018ed 	.word	0x080018ed
 80018c4:	08001905 	.word	0x08001905
 80018c8:	08001905 	.word	0x08001905
 80018cc:	08001905 	.word	0x08001905
 80018d0:	080018f5 	.word	0x080018f5
 80018d4:	08001905 	.word	0x08001905
 80018d8:	08001905 	.word	0x08001905
 80018dc:	08001905 	.word	0x08001905
 80018e0:	080018fd 	.word	0x080018fd
        case TIM_CHANNEL_1: dshot_running_ch1 = true; break;
 80018e4:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <send_bdshot+0x1a0>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e00b      	b.n	8001904 <send_bdshot+0x17c>
        case TIM_CHANNEL_2: dshot_running_ch2 = true; break;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <send_bdshot+0x1a4>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e007      	b.n	8001904 <send_bdshot+0x17c>
        case TIM_CHANNEL_3: dshot_running_ch3 = true; break;
 80018f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <send_bdshot+0x1a8>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	e003      	b.n	8001904 <send_bdshot+0x17c>
        case TIM_CHANNEL_4: dshot_running_ch4 = true; break;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <send_bdshot+0x1ac>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	bf00      	nop
    }
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	f3af 8000 	nop.w
 8001910:	00000000 	.word	0x00000000
 8001914:	3ff00000 	.word	0x3ff00000
 8001918:	20000294 	.word	0x20000294
 800191c:	200002e4 	.word	0x200002e4
 8001920:	20000334 	.word	0x20000334
 8001924:	20000384 	.word	0x20000384
 8001928:	200003d4 	.word	0x200003d4
 800192c:	200003d5 	.word	0x200003d5
 8001930:	200003d6 	.word	0x200003d6
 8001934:	200003d7 	.word	0x200003d7
 8001938:	20000084 	.word	0x20000084
 800193c:	080068c4 	.word	0x080068c4

08001940 <delay_us_precise>:


void delay_us_precise(double us) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	ed87 0b00 	vstr	d0, [r7]
    uint32_t cycles = (uint32_t)(SystemCoreClock * us / 1e6f);
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <delay_us_precise+0x68>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fdd0 	bl	80004f4 <__aeabi_ui2d>
 8001954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001958:	f7fe fe46 	bl	80005e8 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	a30e      	add	r3, pc, #56	@ (adr r3, 80019a0 <delay_us_precise+0x60>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe ff67 	bl	800083c <__aeabi_ddiv>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f849 	bl	8000a0c <__aeabi_d2uiz>
 800197a:	4603      	mov	r3, r0
 800197c:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <delay_us_precise+0x6c>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8001984:	bf00      	nop
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <delay_us_precise+0x6c>)
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f8      	bhi.n	8001986 <delay_us_precise+0x46>
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	00000000 	.word	0x00000000
 80019a4:	412e8480 	.word	0x412e8480
 80019a8:	20000000 	.word	0x20000000
 80019ac:	e0001000 	.word	0xe0001000

080019b0 <DWT_Init>:


void DWT_Init(void) {
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk)) {
 80019b4:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <DWT_Init+0x38>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10e      	bne.n	80019de <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <DWT_Init+0x3c>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4a09      	ldr	r2, [pc, #36]	@ (80019ec <DWT_Init+0x3c>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ca:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <DWT_Init+0x38>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80019d2:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <DWT_Init+0x38>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <DWT_Init+0x38>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6013      	str	r3, [r2, #0]
    }
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e0001000 	.word	0xe0001000
 80019ec:	e000edf0 	.word	0xe000edf0

080019f0 <HAL_TIM_PWM_PulseFinishedCallback>:
    }
    printf("\r\n");
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM5) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1b      	ldr	r2, [pc, #108]	@ (8001a6c <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d12f      	bne.n	8001a62 <HAL_TIM_PWM_PulseFinishedCallback+0x72>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a02:	b672      	cpsid	i
}
 8001a04:	bf00      	nop
        __disable_irq();
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7f1b      	ldrb	r3, [r3, #28]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d106      	bne.n	8001a1c <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4817      	ldr	r0, [pc, #92]	@ (8001a70 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001a12:	f002 f973 	bl	8003cfc <HAL_TIM_PWM_Stop>
            dshot_running_ch1 = false;
 8001a16:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
        }
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7f1b      	ldrb	r3, [r3, #28]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d106      	bne.n	8001a32 <HAL_TIM_PWM_PulseFinishedCallback+0x42>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
 8001a24:	2104      	movs	r1, #4
 8001a26:	4812      	ldr	r0, [pc, #72]	@ (8001a70 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001a28:	f002 f968 	bl	8003cfc <HAL_TIM_PWM_Stop>
            dshot_running_ch2 = false;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
        }
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7f1b      	ldrb	r3, [r3, #28]
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d106      	bne.n	8001a48 <HAL_TIM_PWM_PulseFinishedCallback+0x58>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8001a3a:	2108      	movs	r1, #8
 8001a3c:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001a3e:	f002 f95d 	bl	8003cfc <HAL_TIM_PWM_Stop>
            dshot_running_ch3 = false;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
        }
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7f1b      	ldrb	r3, [r3, #28]
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d106      	bne.n	8001a5e <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8001a50:	210c      	movs	r1, #12
 8001a52:	4807      	ldr	r0, [pc, #28]	@ (8001a70 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001a54:	f002 f952 	bl	8003cfc <HAL_TIM_PWM_Stop>
            dshot_running_ch4 = false;
 8001a58:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a5e:	b662      	cpsie	i
}
 8001a60:	bf00      	nop
        }
        __enable_irq();
    }
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40000c00 	.word	0x40000c00
 8001a70:	20000084 	.word	0x20000084
 8001a74:	200003d4 	.word	0x200003d4
 8001a78:	200003d5 	.word	0x200003d5
 8001a7c:	200003d6 	.word	0x200003d6
 8001a80:	200003d7 	.word	0x200003d7

08001a84 <calculate_crc>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
    //printf("UART error callback!\r\n");
}

uint8_t calculate_crc(uint16_t value_12bit, const char *protocol) {
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	80fb      	strh	r3, [r7, #6]
    if (value_12bit > 0x0FFF) return 0xFF; // invalid input
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a96:	d301      	bcc.n	8001a9c <calculate_crc+0x18>
 8001a98:	23ff      	movs	r3, #255	@ 0xff
 8001a9a:	e038      	b.n	8001b0e <calculate_crc+0x8a>

    if (protocol[0] == 'B') { // BDShot
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b42      	cmp	r3, #66	@ 0x42
 8001aa2:	d118      	bne.n	8001ad6 <calculate_crc+0x52>
        uint16_t value_16bit = value_12bit << 4;
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	817b      	strh	r3, [r7, #10]
        uint16_t csum = value_16bit;
 8001aaa:	897b      	ldrh	r3, [r7, #10]
 8001aac:	813b      	strh	r3, [r7, #8]
        csum ^= (csum >> 8);
 8001aae:	893b      	ldrh	r3, [r7, #8]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	893b      	ldrh	r3, [r7, #8]
 8001ab6:	4053      	eors	r3, r2
 8001ab8:	813b      	strh	r3, [r7, #8]
        csum ^= (csum >> 4);
 8001aba:	893b      	ldrh	r3, [r7, #8]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	893b      	ldrh	r3, [r7, #8]
 8001ac2:	4053      	eors	r3, r2
 8001ac4:	813b      	strh	r3, [r7, #8]
        return (~csum) & 0xF;
 8001ac6:	893b      	ldrh	r3, [r7, #8]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	e01b      	b.n	8001b0e <calculate_crc+0x8a>
    } else if (protocol[0] == 'D') { // DShot
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b44      	cmp	r3, #68	@ 0x44
 8001adc:	d116      	bne.n	8001b0c <calculate_crc+0x88>
        uint16_t value = value_12bit;
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	81fb      	strh	r3, [r7, #14]
        uint8_t crc = value ^ (value >> 4) ^ (value >> 8);
 8001ae2:	89fb      	ldrh	r3, [r7, #14]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	89fb      	ldrh	r3, [r7, #14]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4053      	eors	r3, r2
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	89fb      	ldrh	r3, [r7, #14]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4053      	eors	r3, r2
 8001afc:	737b      	strb	r3, [r7, #13]
        return (~crc) & 0xF;
 8001afe:	7b7b      	ldrb	r3, [r7, #13]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	e000      	b.n	8001b0e <calculate_crc+0x8a>
    }

    return 0xFF; // unsupported protocol
 8001b0c:	23ff      	movs	r3, #255	@ 0xff
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <decode_gcr_mapping>:
 * @param A value that represents a 20 bit GCR that has been mapped to 21 bits.
 * The first "starting" bit can be excluded for compatibility with a slightly cleaned 20 bit value.
 *
 * @return Returns the 20 bit GCR
 */
uint32_t decode_gcr_mapping(uint32_t value) {
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
    return value ^ (value >> 1);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	085a      	lsrs	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4053      	eors	r3, r2
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <decode_gcr_20_to_16>:
 *
 * @return Returns the 20 bit GCR
 *
 * Initialized the whole map to 0xFF. This way, only explicitly defined entries are accepted
 */
int decode_gcr_20_to_16(uint32_t input_20bit, uint16_t *out_value) {
 8001b36:	b480      	push	{r7}
 8001b38:	b08f      	sub	sp, #60	@ 0x3c
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
    uint8_t decoding_map[32];
    for (int i = 0; i < 32; ++i) decoding_map[i] = 0xFF; // mark all invalid
 8001b40:	2300      	movs	r3, #0
 8001b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b44:	e008      	b.n	8001b58 <decode_gcr_20_to_16+0x22>
 8001b46:	f107 0208 	add.w	r2, r7, #8
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b4c:	4413      	add	r3, r2
 8001b4e:	22ff      	movs	r2, #255	@ 0xff
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b54:	3301      	adds	r3, #1
 8001b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b5a:	2b1f      	cmp	r3, #31
 8001b5c:	ddf3      	ble.n	8001b46 <decode_gcr_20_to_16+0x10>
    decoding_map[0x19] = 0x0; decoding_map[0x1B] = 0x1; decoding_map[0x12] = 0x2;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	76bb      	strb	r3, [r7, #26]
    decoding_map[0x13] = 0x3; decoding_map[0x1D] = 0x4; decoding_map[0x15] = 0x5;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	76fb      	strb	r3, [r7, #27]
 8001b72:	2304      	movs	r3, #4
 8001b74:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001b78:	2305      	movs	r3, #5
 8001b7a:	777b      	strb	r3, [r7, #29]
    decoding_map[0x16] = 0x6; decoding_map[0x17] = 0x7; decoding_map[0x1A] = 0x8;
 8001b7c:	2306      	movs	r3, #6
 8001b7e:	77bb      	strb	r3, [r7, #30]
 8001b80:	2307      	movs	r3, #7
 8001b82:	77fb      	strb	r3, [r7, #31]
 8001b84:	2308      	movs	r3, #8
 8001b86:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    decoding_map[0x09] = 0x9; decoding_map[0x0A] = 0xA; decoding_map[0x0B] = 0xB;
 8001b8a:	2309      	movs	r3, #9
 8001b8c:	747b      	strb	r3, [r7, #17]
 8001b8e:	230a      	movs	r3, #10
 8001b90:	74bb      	strb	r3, [r7, #18]
 8001b92:	230b      	movs	r3, #11
 8001b94:	74fb      	strb	r3, [r7, #19]
    decoding_map[0x1E] = 0xC; decoding_map[0x0D] = 0xD; decoding_map[0x0E] = 0xE;
 8001b96:	230c      	movs	r3, #12
 8001b98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b9c:	230d      	movs	r3, #13
 8001b9e:	757b      	strb	r3, [r7, #21]
 8001ba0:	230e      	movs	r3, #14
 8001ba2:	75bb      	strb	r3, [r7, #22]
    decoding_map[0x0F] = 0xF;
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	75fb      	strb	r3, [r7, #23]

    uint16_t result = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	867b      	strh	r3, [r7, #50]	@ 0x32

    for (int i = 0; i < 4; i++) {
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bb0:	e029      	b.n	8001c06 <decode_gcr_20_to_16+0xd0>
        uint8_t chunk = (input_20bit >> (15 - i * 5)) & 0x1F;
 8001bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	079b      	lsls	r3, r3, #30
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	330f      	adds	r3, #15
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        if (decoding_map[chunk] == 0xFF) return 0; // invalid chunk
 8001bd0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001bd4:	3338      	adds	r3, #56	@ 0x38
 8001bd6:	443b      	add	r3, r7
 8001bd8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001bdc:	2bff      	cmp	r3, #255	@ 0xff
 8001bde:	d101      	bne.n	8001be4 <decode_gcr_20_to_16+0xae>
 8001be0:	2300      	movs	r3, #0
 8001be2:	e017      	b.n	8001c14 <decode_gcr_20_to_16+0xde>
        result = (result << 4) | decoding_map[chunk];
 8001be4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	b21a      	sxth	r2, r3
 8001bec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001bf0:	3338      	adds	r3, #56	@ 0x38
 8001bf2:	443b      	add	r3, r7
 8001bf4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	867b      	strh	r3, [r7, #50]	@ 0x32
    for (int i = 0; i < 4; i++) {
 8001c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c02:	3301      	adds	r3, #1
 8001c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	ddd2      	ble.n	8001bb2 <decode_gcr_20_to_16+0x7c>
    }

    *out_value = result;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001c10:	801a      	strh	r2, [r3, #0]
    return 1;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	373c      	adds	r7, #60	@ 0x3c
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <parse_edt_frame>:

int parse_edt_frame(uint16_t frame, char *type_out, float *value_out) {
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b08b      	sub	sp, #44	@ 0x2c
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	81fb      	strh	r3, [r7, #14]
    if (frame > 0xFFFF || frame < 0){
    	return -1;
    }

    uint16_t data = (frame >> 4) & 0x0FFF;
 8001c2e:	89fb      	ldrh	r3, [r7, #14]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t crc_received = frame & 0x0F;
 8001c34:	89fb      	ldrh	r3, [r7, #14]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t crc_calculated = calculate_crc(data, "BDShot");
 8001c40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c42:	4960      	ldr	r1, [pc, #384]	@ (8001dc4 <parse_edt_frame+0x1a4>)
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff1d 	bl	8001a84 <calculate_crc>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    if (crc_received != crc_calculated) return -2;
 8001c50:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001c54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d002      	beq.n	8001c62 <parse_edt_frame+0x42>
 8001c5c:	f06f 0301 	mvn.w	r3, #1
 8001c60:	e0ab      	b.n	8001dba <parse_edt_frame+0x19a>

    uint8_t exponent = (data >> 9) & 0x07;
 8001c62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c64:	0a5b      	lsrs	r3, r3, #9
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint16_t base_period = data & 0x1FF;
 8001c72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c78:	843b      	strh	r3, [r7, #32]
    if (exponent > 12) return -3;
 8001c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d902      	bls.n	8001c88 <parse_edt_frame+0x68>
 8001c82:	f06f 0302 	mvn.w	r3, #2
 8001c86:	e098      	b.n	8001dba <parse_edt_frame+0x19a>

    uint32_t period_us = base_period << exponent;
 8001c88:	8c3a      	ldrh	r2, [r7, #32]
 8001c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	61fb      	str	r3, [r7, #28]
    if (period_us == 0) return -3;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <parse_edt_frame+0x80>
 8001c9a:	f06f 0302 	mvn.w	r3, #2
 8001c9e:	e08c      	b.n	8001dba <parse_edt_frame+0x19a>

    bool is_edt = ((exponent & 1) == 0) && ((base_period & 0x100) == 0);
 8001ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d106      	bne.n	8001cba <parse_edt_frame+0x9a>
 8001cac:	8c3b      	ldrh	r3, [r7, #32]
 8001cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <parse_edt_frame+0x9a>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <parse_edt_frame+0x9c>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	76fb      	strb	r3, [r7, #27]
 8001cbe:	7efb      	ldrb	r3, [r7, #27]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	76fb      	strb	r3, [r7, #27]

    if (is_edt) {
 8001cc6:	7efb      	ldrb	r3, [r7, #27]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d051      	beq.n	8001d70 <parse_edt_frame+0x150>
        uint8_t telemetry_type = (data >> 8) & 0xF;
 8001ccc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	74fb      	strb	r3, [r7, #19]
        uint8_t telemetry_value = data & 0xFF;
 8001cda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001cdc:	74bb      	strb	r3, [r7, #18]

        switch (telemetry_type) {
 8001cde:	7cfb      	ldrb	r3, [r7, #19]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d002      	beq.n	8001cea <parse_edt_frame+0xca>
 8001ce4:	2b0e      	cmp	r3, #14
 8001ce6:	d018      	beq.n	8001d1a <parse_edt_frame+0xfa>
 8001ce8:	e02d      	b.n	8001d46 <parse_edt_frame+0x126>
            case 0x04:
                *value_out = (float)(telemetry_value) / 0.25f;
 8001cea:	7cbb      	ldrb	r3, [r7, #18]
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cf4:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8001cf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	edc3 7a00 	vstr	s15, [r3]
                if (type_out) strcpy(type_out, "Voltage (V)");
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d030      	beq.n	8001d6a <parse_edt_frame+0x14a>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8001dc8 <parse_edt_frame+0x1a8>)
 8001d0c:	461c      	mov	r4, r3
 8001d0e:	4613      	mov	r3, r2
 8001d10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001d12:	6020      	str	r0, [r4, #0]
 8001d14:	6061      	str	r1, [r4, #4]
 8001d16:	60a2      	str	r2, [r4, #8]
                break;
 8001d18:	e027      	b.n	8001d6a <parse_edt_frame+0x14a>
            case 0x0E:
                if (type_out) strcpy(type_out, "Status Frame");
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <parse_edt_frame+0x114>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4a2a      	ldr	r2, [pc, #168]	@ (8001dcc <parse_edt_frame+0x1ac>)
 8001d24:	461c      	mov	r4, r3
 8001d26:	4613      	mov	r3, r2
 8001d28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001d2a:	6020      	str	r0, [r4, #0]
 8001d2c:	6061      	str	r1, [r4, #4]
 8001d2e:	60a2      	str	r2, [r4, #8]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	7323      	strb	r3, [r4, #12]
                *value_out = telemetry_value; // raw value, parse later if needed
 8001d34:	7cbb      	ldrb	r3, [r7, #18]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	edc3 7a00 	vstr	s15, [r3]
                break;
 8001d44:	e012      	b.n	8001d6c <parse_edt_frame+0x14c>
            default:
                *value_out = telemetry_value;
 8001d46:	7cbb      	ldrb	r3, [r7, #18]
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	edc3 7a00 	vstr	s15, [r3]
                if (type_out) sprintf(type_out, "Unknown (0x%X)", telemetry_type);
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <parse_edt_frame+0x14c>
 8001d5c:	7cfb      	ldrb	r3, [r7, #19]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	491b      	ldr	r1, [pc, #108]	@ (8001dd0 <parse_edt_frame+0x1b0>)
 8001d62:	68b8      	ldr	r0, [r7, #8]
 8001d64:	f003 fd02 	bl	800576c <siprintf>
 8001d68:	e000      	b.n	8001d6c <parse_edt_frame+0x14c>
                break;
 8001d6a:	bf00      	nop
        }

        return 1; // EDT frame
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e024      	b.n	8001dba <parse_edt_frame+0x19a>
    } else {
        if (base_period == 0 || base_period == 0x1FF) {
 8001d70:	8c3b      	ldrh	r3, [r7, #32]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d004      	beq.n	8001d80 <parse_edt_frame+0x160>
 8001d76:	8c3b      	ldrh	r3, [r7, #32]
 8001d78:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d104      	bne.n	8001d8a <parse_edt_frame+0x16a>
            *value_out = 0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	e00d      	b.n	8001da6 <parse_edt_frame+0x186>
        } else {
            float erpm = 60000000.0f / (float)period_us;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	ee07 3a90 	vmov	s15, r3
 8001d90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d94:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001dd4 <parse_edt_frame+0x1b4>
 8001d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d9c:	edc7 7a05 	vstr	s15, [r7, #20]
            *value_out = erpm;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	601a      	str	r2, [r3, #0]
        }

        if (type_out) strcpy(type_out, "eRPM");
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <parse_edt_frame+0x198>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <parse_edt_frame+0x1b8>)
 8001db0:	6810      	ldr	r0, [r2, #0]
 8001db2:	6018      	str	r0, [r3, #0]
 8001db4:	7912      	ldrb	r2, [r2, #4]
 8001db6:	711a      	strb	r2, [r3, #4]
        return 2; // eRPM frame
 8001db8:	2302      	movs	r3, #2
    }

    return -3;
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	372c      	adds	r7, #44	@ 0x2c
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	080068e0 	.word	0x080068e0
 8001dc8:	080068e8 	.word	0x080068e8
 8001dcc:	080068f4 	.word	0x080068f4
 8001dd0:	08006904 	.word	0x08006904
 8001dd4:	4c64e1c0 	.word	0x4c64e1c0
 8001dd8:	08006914 	.word	0x08006914

08001ddc <_write>:

int _write(int file, char *ptr, int len)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	4804      	ldr	r0, [pc, #16]	@ (8001e04 <_write+0x28>)
 8001df4:	f002 ffcc 	bl	8004d90 <HAL_UART_Transmit>
    return len;
 8001df8:	687b      	ldr	r3, [r7, #4]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000024c 	.word	0x2000024c

08001e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001e1a:	f000 fb8b 	bl	8002534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  //printf("PeriodElapsedCallback\r\n");
  /* USER CODE END Callback 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40001c00 	.word	0x40001c00

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <Error_Handler+0x8>

08001e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <HAL_MspInit+0x4c>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	4a0f      	ldr	r2, [pc, #60]	@ (8001e84 <HAL_MspInit+0x4c>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <HAL_MspInit+0x4c>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <HAL_MspInit+0x4c>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	4a08      	ldr	r2, [pc, #32]	@ (8001e84 <HAL_MspInit+0x4c>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_MspInit+0x4c>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a72      	ldr	r2, [pc, #456]	@ (8002060 <HAL_TIM_PWM_MspInit+0x1d8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	f040 80de 	bne.w	8002058 <HAL_TIM_PWM_MspInit+0x1d0>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	4b70      	ldr	r3, [pc, #448]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1dc>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	4a6f      	ldr	r2, [pc, #444]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1dc>)
 8001ea6:	f043 0308 	orr.w	r3, r3, #8
 8001eaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eac:	4b6d      	ldr	r3, [pc, #436]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1dc>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001eba:	4a6c      	ldr	r2, [pc, #432]	@ (800206c <HAL_TIM_PWM_MspInit+0x1e4>)
 8001ebc:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8001ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ec0:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001ec4:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec6:	4b68      	ldr	r3, [pc, #416]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ec8:	2240      	movs	r2, #64	@ 0x40
 8001eca:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ecc:	4b66      	ldr	r3, [pc, #408]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ed2:	4b65      	ldr	r3, [pc, #404]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ed4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ed8:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001eda:	4b63      	ldr	r3, [pc, #396]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001edc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ee0:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ee2:	4b61      	ldr	r3, [pc, #388]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ee4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ee8:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8001eea:	4b5f      	ldr	r3, [pc, #380]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001ef0:	4b5d      	ldr	r3, [pc, #372]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ef2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ef6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef8:	4b5b      	ldr	r3, [pc, #364]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001efe:	485a      	ldr	r0, [pc, #360]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001f00:	f000 fc1a 	bl	8002738 <HAL_DMA_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8001f0a:	f7ff ff8f 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a55      	ldr	r2, [pc, #340]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001f12:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f14:	4a54      	ldr	r2, [pc, #336]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5_CH2 Init */
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8001f1a:	4b55      	ldr	r3, [pc, #340]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f1c:	4a55      	ldr	r2, [pc, #340]	@ (8002074 <HAL_TIM_PWM_MspInit+0x1ec>)
 8001f1e:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8001f20:	4b53      	ldr	r3, [pc, #332]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f22:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001f26:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f28:	4b51      	ldr	r3, [pc, #324]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f2a:	2240      	movs	r2, #64	@ 0x40
 8001f2c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f2e:	4b50      	ldr	r3, [pc, #320]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001f34:	4b4e      	ldr	r3, [pc, #312]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f3a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f3c:	4b4c      	ldr	r3, [pc, #304]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f42:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f44:	4b4a      	ldr	r3, [pc, #296]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f4a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001f4c:	4b48      	ldr	r3, [pc, #288]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001f52:	4b47      	ldr	r3, [pc, #284]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f54:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f58:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f5a:	4b45      	ldr	r3, [pc, #276]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8001f60:	4843      	ldr	r0, [pc, #268]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f62:	f000 fbe9 	bl	8002738 <HAL_DMA_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_TIM_PWM_MspInit+0xe8>
    {
      Error_Handler();
 8001f6c:	f7ff ff5e 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3f      	ldr	r2, [pc, #252]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f74:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f76:	4a3e      	ldr	r2, [pc, #248]	@ (8002070 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5_CH3_UP Init */
    hdma_tim5_ch3_up.Instance = DMA1_Stream0;
 8001f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800207c <HAL_TIM_PWM_MspInit+0x1f4>)
 8001f80:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Channel = DMA_CHANNEL_6;
 8001f82:	4b3d      	ldr	r3, [pc, #244]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f84:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001f88:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f8c:	2240      	movs	r2, #64	@ 0x40
 8001f8e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f90:	4b39      	ldr	r3, [pc, #228]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001f96:	4b38      	ldr	r3, [pc, #224]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f9c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f9e:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fa0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fa4:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fa6:	4b34      	ldr	r3, [pc, #208]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fa8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fac:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 8001fae:	4b32      	ldr	r3, [pc, #200]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001fb4:	4b30      	ldr	r3, [pc, #192]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fb6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fba:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8001fc2:	482d      	ldr	r0, [pc, #180]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fc4:	f000 fbb8 	bl	8002738 <HAL_DMA_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_TIM_PWM_MspInit+0x14a>
    {
      Error_Handler();
 8001fce:	f7ff ff2d 	bl	8001e2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a28      	ldr	r2, [pc, #160]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fd8:	4a27      	ldr	r2, [pc, #156]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a25      	ldr	r2, [pc, #148]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fe2:	621a      	str	r2, [r3, #32]
 8001fe4:	4a24      	ldr	r2, [pc, #144]	@ (8002078 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5_CH4_TRIG Init */
    hdma_tim5_ch4_trig.Instance = DMA1_Stream1;
 8001fea:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001fec:	4a25      	ldr	r2, [pc, #148]	@ (8002084 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001fee:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8001ff0:	4b23      	ldr	r3, [pc, #140]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001ff2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001ff6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ff8:	4b21      	ldr	r3, [pc, #132]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001ffa:	2240      	movs	r2, #64	@ 0x40
 8001ffc:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002004:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002006:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800200a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800200c:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 800200e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002012:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002014:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002016:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800201a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 800201c:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002022:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002024:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002028:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800202a:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8002030:	4813      	ldr	r0, [pc, #76]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002032:	f000 fb81 	bl	8002738 <HAL_DMA_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_TIM_PWM_MspInit+0x1b8>
    {
      Error_Handler();
 800203c:	f7ff fef6 	bl	8001e2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a0f      	ldr	r2, [pc, #60]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002044:	631a      	str	r2, [r3, #48]	@ 0x30
 8002046:	4a0e      	ldr	r2, [pc, #56]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a0c      	ldr	r2, [pc, #48]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002050:	639a      	str	r2, [r3, #56]	@ 0x38
 8002052:	4a0b      	ldr	r2, [pc, #44]	@ (8002080 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40000c00 	.word	0x40000c00
 8002064:	40023800 	.word	0x40023800
 8002068:	200000cc 	.word	0x200000cc
 800206c:	40026040 	.word	0x40026040
 8002070:	2000012c 	.word	0x2000012c
 8002074:	40026070 	.word	0x40026070
 8002078:	2000018c 	.word	0x2000018c
 800207c:	40026010 	.word	0x40026010
 8002080:	200001ec 	.word	0x200001ec
 8002084:	40026028 	.word	0x40026028

08002088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002110 <HAL_TIM_MspPostInit+0x88>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12d      	bne.n	8002106 <HAL_TIM_MspPostInit+0x7e>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <HAL_TIM_MspPostInit+0x8c>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	4a18      	ldr	r2, [pc, #96]	@ (8002114 <HAL_TIM_MspPostInit+0x8c>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ba:	4b16      	ldr	r3, [pc, #88]	@ (8002114 <HAL_TIM_MspPostInit+0x8c>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020c6:	2301      	movs	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d2:	2303      	movs	r3, #3
 80020d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	4619      	mov	r1, r3
 80020e0:	480d      	ldr	r0, [pc, #52]	@ (8002118 <HAL_TIM_MspPostInit+0x90>)
 80020e2:	f000 fe99 	bl	8002e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80020e6:	230e      	movs	r3, #14
 80020e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020f6:	2302      	movs	r3, #2
 80020f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	4619      	mov	r1, r3
 8002100:	4805      	ldr	r0, [pc, #20]	@ (8002118 <HAL_TIM_MspPostInit+0x90>)
 8002102:	f000 fe89 	bl	8002e18 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002106:	bf00      	nop
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40000c00 	.word	0x40000c00
 8002114:	40023800 	.word	0x40023800
 8002118:	40020000 	.word	0x40020000

0800211c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a19      	ldr	r2, [pc, #100]	@ (80021a0 <HAL_UART_MspInit+0x84>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d12b      	bne.n	8002196 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	4b18      	ldr	r3, [pc, #96]	@ (80021a4 <HAL_UART_MspInit+0x88>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	4a17      	ldr	r2, [pc, #92]	@ (80021a4 <HAL_UART_MspInit+0x88>)
 8002148:	f043 0320 	orr.w	r3, r3, #32
 800214c:	6453      	str	r3, [r2, #68]	@ 0x44
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <HAL_UART_MspInit+0x88>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <HAL_UART_MspInit+0x88>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a10      	ldr	r2, [pc, #64]	@ (80021a4 <HAL_UART_MspInit+0x88>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <HAL_UART_MspInit+0x88>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002176:	23c0      	movs	r3, #192	@ 0xc0
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002186:	2308      	movs	r3, #8
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4805      	ldr	r0, [pc, #20]	@ (80021a8 <HAL_UART_MspInit+0x8c>)
 8002192:	f000 fe41 	bl	8002e18 <HAL_GPIO_Init>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8002196:	bf00      	nop
 8002198:	3728      	adds	r7, #40	@ 0x28
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40011400 	.word	0x40011400
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020800 	.word	0x40020800

080021ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08e      	sub	sp, #56	@ 0x38
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	4b33      	ldr	r3, [pc, #204]	@ (8002290 <HAL_InitTick+0xe4>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	4a32      	ldr	r2, [pc, #200]	@ (8002290 <HAL_InitTick+0xe4>)
 80021c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80021cc:	4b30      	ldr	r3, [pc, #192]	@ (8002290 <HAL_InitTick+0xe4>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021d8:	f107 0210 	add.w	r2, r7, #16
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f001 fc3e 	bl	8003a64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021f2:	f001 fc0f 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 80021f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80021f8:	e004      	b.n	8002204 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021fa:	f001 fc0b 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 80021fe:	4603      	mov	r3, r0
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002206:	4a23      	ldr	r2, [pc, #140]	@ (8002294 <HAL_InitTick+0xe8>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	0c9b      	lsrs	r3, r3, #18
 800220e:	3b01      	subs	r3, #1
 8002210:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8002212:	4b21      	ldr	r3, [pc, #132]	@ (8002298 <HAL_InitTick+0xec>)
 8002214:	4a21      	ldr	r2, [pc, #132]	@ (800229c <HAL_InitTick+0xf0>)
 8002216:	601a      	str	r2, [r3, #0]
   * Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8002218:	4b1f      	ldr	r3, [pc, #124]	@ (8002298 <HAL_InitTick+0xec>)
 800221a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800221e:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8002220:	4a1d      	ldr	r2, [pc, #116]	@ (8002298 <HAL_InitTick+0xec>)
 8002222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002224:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8002226:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <HAL_InitTick+0xec>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222c:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <HAL_InitTick+0xec>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002232:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <HAL_InitTick+0xec>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 8002238:	4817      	ldr	r0, [pc, #92]	@ (8002298 <HAL_InitTick+0xec>)
 800223a:	f001 fc45 	bl	8003ac8 <HAL_TIM_Base_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002244:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002248:	2b00      	cmp	r3, #0
 800224a:	d11b      	bne.n	8002284 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 800224c:	4812      	ldr	r0, [pc, #72]	@ (8002298 <HAL_InitTick+0xec>)
 800224e:	f001 fc95 	bl	8003b7c <HAL_TIM_Base_Start_IT>
 8002252:	4603      	mov	r3, r0
 8002254:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002258:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800225c:	2b00      	cmp	r3, #0
 800225e:	d111      	bne.n	8002284 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002260:	202c      	movs	r0, #44	@ 0x2c
 8002262:	f000 fa5b 	bl	800271c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b0f      	cmp	r3, #15
 800226a:	d808      	bhi.n	800227e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 800226c:	2200      	movs	r2, #0
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	202c      	movs	r0, #44	@ 0x2c
 8002272:	f000 fa37 	bl	80026e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002276:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <HAL_InitTick+0xf4>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	e002      	b.n	8002284 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002284:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002288:	4618      	mov	r0, r3
 800228a:	3738      	adds	r7, #56	@ 0x38
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	431bde83 	.word	0x431bde83
 8002298:	200003d8 	.word	0x200003d8
 800229c:	40001c00 	.word	0x40001c00
 80022a0:	20000004 	.word	0x20000004

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <NMI_Handler+0x4>

080022ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <HardFault_Handler+0x4>

080022b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <MemManage_Handler+0x4>

080022bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <UsageFault_Handler+0x4>

080022cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 8002308:	4802      	ldr	r0, [pc, #8]	@ (8002314 <DMA1_Stream0_IRQHandler+0x10>)
 800230a:	f000 fb1b 	bl	8002944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000018c 	.word	0x2000018c

08002318 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 800231c:	4802      	ldr	r0, [pc, #8]	@ (8002328 <DMA1_Stream1_IRQHandler+0x10>)
 800231e:	f000 fb11 	bl	8002944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200001ec 	.word	0x200001ec

0800232c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8002330:	4802      	ldr	r0, [pc, #8]	@ (800233c <DMA1_Stream2_IRQHandler+0x10>)
 8002332:	f000 fb07 	bl	8002944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200000cc 	.word	0x200000cc

08002340 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <DMA1_Stream4_IRQHandler+0x10>)
 8002346:	f000 fafd 	bl	8002944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	2000012c 	.word	0x2000012c

08002354 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002358:	4802      	ldr	r0, [pc, #8]	@ (8002364 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800235a:	f001 ff07 	bl	800416c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200003d8 	.word	0x200003d8

08002368 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e00a      	b.n	8002390 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800237a:	f3af 8000 	nop.w
 800237e:	4601      	mov	r1, r0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	b2ca      	uxtb	r2, r1
 8002388:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	dbf0      	blt.n	800237a <_read+0x12>
  }

  return len;
 8002398:	687b      	ldr	r3, [r7, #4]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_close>:

int _close(int file)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023ca:	605a      	str	r2, [r3, #4]
  return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <_isatty>:

int _isatty(int file)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	@ (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	@ (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f003 fade 	bl	80059fc <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	@ (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20020000 	.word	0x20020000
 800246c:	00000400 	.word	0x00000400
 8002470:	20000420 	.word	0x20000420
 8002474:	20000578 	.word	0x20000578

08002478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <SystemInit+0x20>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	4a05      	ldr	r2, [pc, #20]	@ (8002498 <SystemInit+0x20>)
 8002484:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002488:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800249c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024a0:	f7ff ffea 	bl	8002478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024a4:	480c      	ldr	r0, [pc, #48]	@ (80024d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024a6:	490d      	ldr	r1, [pc, #52]	@ (80024dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024a8:	4a0d      	ldr	r2, [pc, #52]	@ (80024e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ac:	e002      	b.n	80024b4 <LoopCopyDataInit>

080024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b2:	3304      	adds	r3, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b8:	d3f9      	bcc.n	80024ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ba:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024bc:	4c0a      	ldr	r4, [pc, #40]	@ (80024e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c0:	e001      	b.n	80024c6 <LoopFillZerobss>

080024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c4:	3204      	adds	r2, #4

080024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80024ca:	f003 fa9d 	bl	8005a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ce:	f7fe fc53 	bl	8000d78 <main>
  bx  lr    
 80024d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80024e0:	08006980 	.word	0x08006980
  ldr r2, =_sbss
 80024e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80024e8:	20000574 	.word	0x20000574

080024ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC_IRQHandler>
	...

080024f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002530 <HAL_Init+0x40>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002530 <HAL_Init+0x40>)
 80024fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002500:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <HAL_Init+0x40>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <HAL_Init+0x40>)
 8002506:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800250a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800250c:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <HAL_Init+0x40>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a07      	ldr	r2, [pc, #28]	@ (8002530 <HAL_Init+0x40>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002518:	2003      	movs	r0, #3
 800251a:	f000 f8d8 	bl	80026ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251e:	200f      	movs	r0, #15
 8002520:	f7ff fe44 	bl	80021ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002524:	f7ff fc88 	bl	8001e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023c00 	.word	0x40023c00

08002534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_IncTick+0x20>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <HAL_IncTick+0x24>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4413      	add	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <HAL_IncTick+0x24>)
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000008 	.word	0x20000008
 8002558:	20000424 	.word	0x20000424

0800255c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;
 8002560:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <HAL_GetTick+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000424 	.word	0x20000424

08002574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	@ (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	@ (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	db0b      	blt.n	8002602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4907      	ldr	r1, [pc, #28]	@ (8002610 <__NVIC_EnableIRQ+0x38>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2001      	movs	r0, #1
 80025fa:	fa00 f202 	lsl.w	r2, r0, r2
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	@ (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	@ (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	@ 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
         );
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ff4c 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f6:	f7ff ff61 	bl	80025bc <__NVIC_GetPriorityGrouping>
 80026fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	6978      	ldr	r0, [r7, #20]
 8002702:	f7ff ffb1 	bl	8002668 <NVIC_EncodePriority>
 8002706:	4602      	mov	r2, r0
 8002708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ff80 	bl	8002614 <__NVIC_SetPriority>
}
 8002714:	bf00      	nop
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff54 	bl	80025d8 <__NVIC_EnableIRQ>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff ff0a 	bl	800255c <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e099      	b.n	8002888 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002774:	e00f      	b.n	8002796 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002776:	f7ff fef1 	bl	800255c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b05      	cmp	r3, #5
 8002782:	d908      	bls.n	8002796 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2203      	movs	r2, #3
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e078      	b.n	8002888 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e8      	bne.n	8002776 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4b38      	ldr	r3, [pc, #224]	@ (8002890 <HAL_DMA_Init+0x158>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d107      	bne.n	8002800 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	4313      	orrs	r3, r2
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f023 0307 	bic.w	r3, r3, #7
 8002816:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	2b04      	cmp	r3, #4
 8002828:	d117      	bne.n	800285a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00e      	beq.n	800285a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fa6f 	bl	8002d20 <DMA_CheckFifoParam>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2240      	movs	r2, #64	@ 0x40
 800284c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002856:	2301      	movs	r3, #1
 8002858:	e016      	b.n	8002888 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa26 	bl	8002cb4 <DMA_CalcBaseAndBitshift>
 8002868:	4603      	mov	r3, r0
 800286a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002870:	223f      	movs	r2, #63	@ 0x3f
 8002872:	409a      	lsls	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	f010803f 	.word	0xf010803f

08002894 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_DMA_Start_IT+0x26>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e040      	b.n	800293c <HAL_DMA_Start_IT+0xa8>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d12f      	bne.n	800292e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f9b8 	bl	8002c58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	223f      	movs	r2, #63	@ 0x3f
 80028ee:	409a      	lsls	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0216 	orr.w	r2, r2, #22
 8002902:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0208 	orr.w	r2, r2, #8
 800291a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e005      	b.n	800293a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800293a:	7dfb      	ldrb	r3, [r7, #23]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002950:	4b8e      	ldr	r3, [pc, #568]	@ (8002b8c <HAL_DMA_IRQHandler+0x248>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a8e      	ldr	r2, [pc, #568]	@ (8002b90 <HAL_DMA_IRQHandler+0x24c>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0a9b      	lsrs	r3, r3, #10
 800295c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002962:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	2208      	movs	r2, #8
 8002970:	409a      	lsls	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01a      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d013      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0204 	bic.w	r2, r2, #4
 8002996:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299c:	2208      	movs	r2, #8
 800299e:	409a      	lsls	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	2201      	movs	r2, #1
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d012      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d2:	2201      	movs	r2, #1
 80029d4:	409a      	lsls	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029de:	f043 0202 	orr.w	r2, r3, #2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	2204      	movs	r2, #4
 80029ec:	409a      	lsls	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d012      	beq.n	8002a1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00b      	beq.n	8002a1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	2204      	movs	r2, #4
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a14:	f043 0204 	orr.w	r2, r3, #4
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a20:	2210      	movs	r2, #16
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d043      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d03c      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3e:	2210      	movs	r2, #16
 8002a40:	409a      	lsls	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d018      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d108      	bne.n	8002a74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d024      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
 8002a72:	e01f      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01b      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
 8002a84:	e016      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d107      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0208 	bic.w	r2, r2, #8
 8002aa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	2220      	movs	r2, #32
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 808f 	beq.w	8002be4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8087 	beq.w	8002be4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ada:	2220      	movs	r2, #32
 8002adc:	409a      	lsls	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d136      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0216 	bic.w	r2, r2, #22
 8002afc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d103      	bne.n	8002b1e <HAL_DMA_IRQHandler+0x1da>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0208 	bic.w	r2, r2, #8
 8002b2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b32:	223f      	movs	r2, #63	@ 0x3f
 8002b34:	409a      	lsls	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d07e      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
        }
        return;
 8002b5a:	e079      	b.n	8002c50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01d      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10d      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d031      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
 8002b88:	e02c      	b.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
 8002b8a:	bf00      	nop
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d023      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4798      	blx	r3
 8002ba4:	e01e      	b.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10f      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0210 	bic.w	r2, r2, #16
 8002bc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d032      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d022      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2205      	movs	r2, #5
 8002bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d307      	bcc.n	8002c2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f2      	bne.n	8002c10 <HAL_DMA_IRQHandler+0x2cc>
 8002c2a:	e000      	b.n	8002c2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	4798      	blx	r3
 8002c4e:	e000      	b.n	8002c52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c50:	bf00      	nop
    }
  }
}
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b40      	cmp	r3, #64	@ 0x40
 8002c84:	d108      	bne.n	8002c98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c96:	e007      	b.n	8002ca8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	60da      	str	r2, [r3, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3b10      	subs	r3, #16
 8002cc4:	4a14      	ldr	r2, [pc, #80]	@ (8002d18 <DMA_CalcBaseAndBitshift+0x64>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cce:	4a13      	ldr	r2, [pc, #76]	@ (8002d1c <DMA_CalcBaseAndBitshift+0x68>)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d909      	bls.n	8002cf6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	1d1a      	adds	r2, r3, #4
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cf4:	e007      	b.n	8002d06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	aaaaaaab 	.word	0xaaaaaaab
 8002d1c:	08006934 	.word	0x08006934

08002d20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d11f      	bne.n	8002d7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d856      	bhi.n	8002dee <DMA_CheckFifoParam+0xce>
 8002d40:	a201      	add	r2, pc, #4	@ (adr r2, 8002d48 <DMA_CheckFifoParam+0x28>)
 8002d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d46:	bf00      	nop
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d6b 	.word	0x08002d6b
 8002d50:	08002d59 	.word	0x08002d59
 8002d54:	08002def 	.word	0x08002def
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d046      	beq.n	8002df2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d68:	e043      	b.n	8002df2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d72:	d140      	bne.n	8002df6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d78:	e03d      	b.n	8002df6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d82:	d121      	bne.n	8002dc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d837      	bhi.n	8002dfa <DMA_CheckFifoParam+0xda>
 8002d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d90 <DMA_CheckFifoParam+0x70>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002da1 	.word	0x08002da1
 8002d94:	08002da7 	.word	0x08002da7
 8002d98:	08002da1 	.word	0x08002da1
 8002d9c:	08002db9 	.word	0x08002db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      break;
 8002da4:	e030      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d025      	beq.n	8002dfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db6:	e022      	b.n	8002dfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002dc0:	d11f      	bne.n	8002e02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dc6:	e01c      	b.n	8002e02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d903      	bls.n	8002dd6 <DMA_CheckFifoParam+0xb6>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d003      	beq.n	8002ddc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dd4:	e018      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dda:	e015      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00e      	beq.n	8002e06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      break;
 8002dec:	e00b      	b.n	8002e06 <DMA_CheckFifoParam+0xe6>
      break;
 8002dee:	bf00      	nop
 8002df0:	e00a      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002df2:	bf00      	nop
 8002df4:	e008      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002df6:	bf00      	nop
 8002df8:	e006      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e004      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e002      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e02:	bf00      	nop
 8002e04:	e000      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
    }
  } 
  
  return status; 
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop

08002e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	@ 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	e16b      	b.n	800310c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e34:	2201      	movs	r2, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f040 815a 	bne.w	8003106 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d005      	beq.n	8002e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d130      	bne.n	8002ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 0201 	and.w	r2, r3, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d017      	beq.n	8002f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d123      	bne.n	8002f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	08da      	lsrs	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	69b9      	ldr	r1, [r7, #24]
 8002f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0203 	and.w	r2, r3, #3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80b4 	beq.w	8003106 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	4b60      	ldr	r3, [pc, #384]	@ (8003124 <HAL_GPIO_Init+0x30c>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8003124 <HAL_GPIO_Init+0x30c>)
 8002fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fae:	4b5d      	ldr	r3, [pc, #372]	@ (8003124 <HAL_GPIO_Init+0x30c>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fba:	4a5b      	ldr	r2, [pc, #364]	@ (8003128 <HAL_GPIO_Init+0x310>)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a52      	ldr	r2, [pc, #328]	@ (800312c <HAL_GPIO_Init+0x314>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d02b      	beq.n	800303e <HAL_GPIO_Init+0x226>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a51      	ldr	r2, [pc, #324]	@ (8003130 <HAL_GPIO_Init+0x318>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d025      	beq.n	800303a <HAL_GPIO_Init+0x222>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a50      	ldr	r2, [pc, #320]	@ (8003134 <HAL_GPIO_Init+0x31c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01f      	beq.n	8003036 <HAL_GPIO_Init+0x21e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8003138 <HAL_GPIO_Init+0x320>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d019      	beq.n	8003032 <HAL_GPIO_Init+0x21a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4e      	ldr	r2, [pc, #312]	@ (800313c <HAL_GPIO_Init+0x324>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0x216>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4d      	ldr	r2, [pc, #308]	@ (8003140 <HAL_GPIO_Init+0x328>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00d      	beq.n	800302a <HAL_GPIO_Init+0x212>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4c      	ldr	r2, [pc, #304]	@ (8003144 <HAL_GPIO_Init+0x32c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <HAL_GPIO_Init+0x20e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4b      	ldr	r2, [pc, #300]	@ (8003148 <HAL_GPIO_Init+0x330>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_GPIO_Init+0x20a>
 800301e:	2307      	movs	r3, #7
 8003020:	e00e      	b.n	8003040 <HAL_GPIO_Init+0x228>
 8003022:	2308      	movs	r3, #8
 8003024:	e00c      	b.n	8003040 <HAL_GPIO_Init+0x228>
 8003026:	2306      	movs	r3, #6
 8003028:	e00a      	b.n	8003040 <HAL_GPIO_Init+0x228>
 800302a:	2305      	movs	r3, #5
 800302c:	e008      	b.n	8003040 <HAL_GPIO_Init+0x228>
 800302e:	2304      	movs	r3, #4
 8003030:	e006      	b.n	8003040 <HAL_GPIO_Init+0x228>
 8003032:	2303      	movs	r3, #3
 8003034:	e004      	b.n	8003040 <HAL_GPIO_Init+0x228>
 8003036:	2302      	movs	r3, #2
 8003038:	e002      	b.n	8003040 <HAL_GPIO_Init+0x228>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_GPIO_Init+0x228>
 800303e:	2300      	movs	r3, #0
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	f002 0203 	and.w	r2, r2, #3
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	4093      	lsls	r3, r2
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003050:	4935      	ldr	r1, [pc, #212]	@ (8003128 <HAL_GPIO_Init+0x310>)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	3302      	adds	r3, #2
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800305e:	4b3b      	ldr	r3, [pc, #236]	@ (800314c <HAL_GPIO_Init+0x334>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003082:	4a32      	ldr	r2, [pc, #200]	@ (800314c <HAL_GPIO_Init+0x334>)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003088:	4b30      	ldr	r3, [pc, #192]	@ (800314c <HAL_GPIO_Init+0x334>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030ac:	4a27      	ldr	r2, [pc, #156]	@ (800314c <HAL_GPIO_Init+0x334>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030b2:	4b26      	ldr	r3, [pc, #152]	@ (800314c <HAL_GPIO_Init+0x334>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030d6:	4a1d      	ldr	r2, [pc, #116]	@ (800314c <HAL_GPIO_Init+0x334>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	@ (800314c <HAL_GPIO_Init+0x334>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003100:	4a12      	ldr	r2, [pc, #72]	@ (800314c <HAL_GPIO_Init+0x334>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3301      	adds	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b0f      	cmp	r3, #15
 8003110:	f67f ae90 	bls.w	8002e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3724      	adds	r7, #36	@ 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	40013800 	.word	0x40013800
 800312c:	40020000 	.word	0x40020000
 8003130:	40020400 	.word	0x40020400
 8003134:	40020800 	.word	0x40020800
 8003138:	40020c00 	.word	0x40020c00
 800313c:	40021000 	.word	0x40021000
 8003140:	40021400 	.word	0x40021400
 8003144:	40021800 	.word	0x40021800
 8003148:	40021c00 	.word	0x40021c00
 800314c:	40013c00 	.word	0x40013c00

08003150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	e001      	b.n	8003172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800319c:	e003      	b.n	80031a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	041a      	lsls	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	619a      	str	r2, [r3, #24]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e267      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d075      	beq.n	80032be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031d2:	4b88      	ldr	r3, [pc, #544]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b85      	ldr	r3, [pc, #532]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d112      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4b82      	ldr	r3, [pc, #520]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031f6:	d10b      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	4b7e      	ldr	r3, [pc, #504]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d05b      	beq.n	80032bc <HAL_RCC_OscConfig+0x108>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d157      	bne.n	80032bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e242      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003218:	d106      	bne.n	8003228 <HAL_RCC_OscConfig+0x74>
 800321a:	4b76      	ldr	r3, [pc, #472]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a75      	ldr	r2, [pc, #468]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x98>
 8003232:	4b70      	ldr	r3, [pc, #448]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6f      	ldr	r2, [pc, #444]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b6d      	ldr	r3, [pc, #436]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6c      	ldr	r2, [pc, #432]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 800324c:	4b69      	ldr	r3, [pc, #420]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a68      	ldr	r2, [pc, #416]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b66      	ldr	r3, [pc, #408]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a65      	ldr	r2, [pc, #404]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7ff f976 	bl	800255c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003274:	f7ff f972 	bl	800255c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	@ 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e207      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b5b      	ldr	r3, [pc, #364]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xc0>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7ff f962 	bl	800255c <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800329c:	f7ff f95e 	bl	800255c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	@ 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1f3      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	4b51      	ldr	r3, [pc, #324]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0xe8>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d063      	beq.n	8003392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032ca:	4b4a      	ldr	r3, [pc, #296]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b47      	ldr	r3, [pc, #284]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d11c      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b44      	ldr	r3, [pc, #272]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d116      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	4b41      	ldr	r3, [pc, #260]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1c7      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b3b      	ldr	r3, [pc, #236]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4937      	ldr	r1, [pc, #220]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	e03a      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003324:	4b34      	ldr	r3, [pc, #208]	@ (80033f8 <HAL_RCC_OscConfig+0x244>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7ff f917 	bl	800255c <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003332:	f7ff f913 	bl	800255c <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1a8      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	4b2b      	ldr	r3, [pc, #172]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b28      	ldr	r3, [pc, #160]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4925      	ldr	r1, [pc, #148]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003366:	4b24      	ldr	r3, [pc, #144]	@ (80033f8 <HAL_RCC_OscConfig+0x244>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7ff f8f6 	bl	800255c <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003374:	f7ff f8f2 	bl	800255c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e187      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	4b1b      	ldr	r3, [pc, #108]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d036      	beq.n	800340c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a6:	4b15      	ldr	r3, [pc, #84]	@ (80033fc <HAL_RCC_OscConfig+0x248>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7ff f8d6 	bl	800255c <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b4:	f7ff f8d2 	bl	800255c <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e167      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	4b0b      	ldr	r3, [pc, #44]	@ (80033f4 <HAL_RCC_OscConfig+0x240>)
 80033c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x200>
 80033d2:	e01b      	b.n	800340c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d4:	4b09      	ldr	r3, [pc, #36]	@ (80033fc <HAL_RCC_OscConfig+0x248>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7ff f8bf 	bl	800255c <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	e00e      	b.n	8003400 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e2:	f7ff f8bb 	bl	800255c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d907      	bls.n	8003400 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e150      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
 80033f4:	40023800 	.word	0x40023800
 80033f8:	42470000 	.word	0x42470000
 80033fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	4b88      	ldr	r3, [pc, #544]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 8003402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ea      	bne.n	80033e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8097 	beq.w	8003548 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341e:	4b81      	ldr	r3, [pc, #516]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10f      	bne.n	800344a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	4b7d      	ldr	r3, [pc, #500]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	4a7c      	ldr	r2, [pc, #496]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	@ 0x40
 800343a:	4b7a      	ldr	r3, [pc, #488]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b77      	ldr	r3, [pc, #476]	@ (8003628 <HAL_RCC_OscConfig+0x474>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003456:	4b74      	ldr	r3, [pc, #464]	@ (8003628 <HAL_RCC_OscConfig+0x474>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a73      	ldr	r2, [pc, #460]	@ (8003628 <HAL_RCC_OscConfig+0x474>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7ff f87b 	bl	800255c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7ff f877 	bl	800255c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e10c      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	4b6a      	ldr	r3, [pc, #424]	@ (8003628 <HAL_RCC_OscConfig+0x474>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x2ea>
 8003490:	4b64      	ldr	r3, [pc, #400]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003494:	4a63      	ldr	r2, [pc, #396]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6713      	str	r3, [r2, #112]	@ 0x70
 800349c:	e01c      	b.n	80034d8 <HAL_RCC_OscConfig+0x324>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x30c>
 80034a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0x324>
 80034c0:	4b58      	ldr	r3, [pc, #352]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c4:	4a57      	ldr	r2, [pc, #348]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80034cc:	4b55      	ldr	r3, [pc, #340]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d0:	4a54      	ldr	r2, [pc, #336]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 80034d2:	f023 0304 	bic.w	r3, r3, #4
 80034d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d015      	beq.n	800350c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7ff f83c 	bl	800255c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7ff f838 	bl	800255c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e0cb      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	4b49      	ldr	r3, [pc, #292]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0ee      	beq.n	80034e8 <HAL_RCC_OscConfig+0x334>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350c:	f7ff f826 	bl	800255c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003512:	e00a      	b.n	800352a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7ff f822 	bl	800255c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0b5      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352a:	4b3e      	ldr	r3, [pc, #248]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ee      	bne.n	8003514 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353c:	4b39      	ldr	r3, [pc, #228]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	4a38      	ldr	r2, [pc, #224]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003546:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80a1 	beq.w	8003694 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003552:	4b34      	ldr	r3, [pc, #208]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b08      	cmp	r3, #8
 800355c:	d05c      	beq.n	8003618 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d141      	bne.n	80035ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	4b31      	ldr	r3, [pc, #196]	@ (800362c <HAL_RCC_OscConfig+0x478>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe fff6 	bl	800255c <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe fff2 	bl	800255c <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e087      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	4b27      	ldr	r3, [pc, #156]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a0:	019b      	lsls	r3, r3, #6
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	061b      	lsls	r3, r3, #24
 80035b6:	491b      	ldr	r1, [pc, #108]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035bc:	4b1b      	ldr	r3, [pc, #108]	@ (800362c <HAL_RCC_OscConfig+0x478>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fe ffcb 	bl	800255c <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fe ffc7 	bl	800255c <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e05c      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035dc:	4b11      	ldr	r3, [pc, #68]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x416>
 80035e8:	e054      	b.n	8003694 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b10      	ldr	r3, [pc, #64]	@ (800362c <HAL_RCC_OscConfig+0x478>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe ffb4 	bl	800255c <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f8:	f7fe ffb0 	bl	800255c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e045      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <HAL_RCC_OscConfig+0x470>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x444>
 8003616:	e03d      	b.n	8003694 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e038      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
 8003624:	40023800 	.word	0x40023800
 8003628:	40007000 	.word	0x40007000
 800362c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003630:	4b1b      	ldr	r3, [pc, #108]	@ (80036a0 <HAL_RCC_OscConfig+0x4ec>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d028      	beq.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d121      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d11a      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003666:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003668:	4293      	cmp	r3, r2
 800366a:	d111      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	3b01      	subs	r3, #1
 800367a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0cc      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b8:	4b68      	ldr	r3, [pc, #416]	@ (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d90c      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b65      	ldr	r3, [pc, #404]	@ (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	@ (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a58      	ldr	r2, [pc, #352]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003702:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a52      	ldr	r2, [pc, #328]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800371a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d044      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d119      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d003      	beq.n	8003762 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375e:	2b03      	cmp	r3, #3
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b3f      	ldr	r3, [pc, #252]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	4b3b      	ldr	r3, [pc, #236]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e067      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b37      	ldr	r3, [pc, #220]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4934      	ldr	r1, [pc, #208]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7fe fee2 	bl	800255c <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fe fede 	bl	800255c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e04f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b25      	ldr	r3, [pc, #148]	@ (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d20c      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b22      	ldr	r3, [pc, #136]	@ (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	@ (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003816:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	490a      	ldr	r1, [pc, #40]	@ (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	@ (800386c <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fcae 	bl	80021ac <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023c00 	.word	0x40023c00
 8003860:	40023800 	.word	0x40023800
 8003864:	0800691c 	.word	0x0800691c
 8003868:	20000000 	.word	0x20000000
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003874:	b090      	sub	sp, #64	@ 0x40
 8003876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003888:	4b59      	ldr	r3, [pc, #356]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d00d      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003894:	2b08      	cmp	r3, #8
 8003896:	f200 80a1 	bhi.w	80039dc <HAL_RCC_GetSysClockFreq+0x16c>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x34>
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x3a>
 80038a2:	e09b      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a4:	4b53      	ldr	r3, [pc, #332]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80038a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038a8:	e09b      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038aa:	4b53      	ldr	r3, [pc, #332]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80038ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038ae:	e098      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b0:	4b4f      	ldr	r3, [pc, #316]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ba:	4b4d      	ldr	r3, [pc, #308]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d028      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c6:	4b4a      	ldr	r3, [pc, #296]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	099b      	lsrs	r3, r3, #6
 80038cc:	2200      	movs	r2, #0
 80038ce:	623b      	str	r3, [r7, #32]
 80038d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038d8:	2100      	movs	r1, #0
 80038da:	4b47      	ldr	r3, [pc, #284]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80038dc:	fb03 f201 	mul.w	r2, r3, r1
 80038e0:	2300      	movs	r3, #0
 80038e2:	fb00 f303 	mul.w	r3, r0, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	4a43      	ldr	r2, [pc, #268]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80038ea:	fba0 1202 	umull	r1, r2, r0, r2
 80038ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038f0:	460a      	mov	r2, r1
 80038f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80038f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f6:	4413      	add	r3, r2
 80038f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fc:	2200      	movs	r2, #0
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	61fa      	str	r2, [r7, #28]
 8003902:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003906:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800390a:	f7fd f89f 	bl	8000a4c <__aeabi_uldivmod>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4613      	mov	r3, r2
 8003914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003916:	e053      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003918:	4b35      	ldr	r3, [pc, #212]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	2200      	movs	r2, #0
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	617a      	str	r2, [r7, #20]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800392a:	f04f 0b00 	mov.w	fp, #0
 800392e:	4652      	mov	r2, sl
 8003930:	465b      	mov	r3, fp
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	0159      	lsls	r1, r3, #5
 800393c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003940:	0150      	lsls	r0, r2, #5
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	ebb2 080a 	subs.w	r8, r2, sl
 800394a:	eb63 090b 	sbc.w	r9, r3, fp
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800395a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800395e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003962:	ebb2 0408 	subs.w	r4, r2, r8
 8003966:	eb63 0509 	sbc.w	r5, r3, r9
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	00eb      	lsls	r3, r5, #3
 8003974:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003978:	00e2      	lsls	r2, r4, #3
 800397a:	4614      	mov	r4, r2
 800397c:	461d      	mov	r5, r3
 800397e:	eb14 030a 	adds.w	r3, r4, sl
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	eb45 030b 	adc.w	r3, r5, fp
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003996:	4629      	mov	r1, r5
 8003998:	028b      	lsls	r3, r1, #10
 800399a:	4621      	mov	r1, r4
 800399c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a0:	4621      	mov	r1, r4
 80039a2:	028a      	lsls	r2, r1, #10
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039aa:	2200      	movs	r2, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	60fa      	str	r2, [r7, #12]
 80039b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039b4:	f7fd f84a 	bl	8000a4c <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4613      	mov	r3, r2
 80039be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039c0:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	3301      	adds	r3, #1
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80039d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80039de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3740      	adds	r7, #64	@ 0x40
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	00f42400 	.word	0x00f42400
 80039f8:	00b71b00 	.word	0x00b71b00

080039fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a00:	4b03      	ldr	r3, [pc, #12]	@ (8003a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000000 	.word	0x20000000

08003a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a18:	f7ff fff0 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0a9b      	lsrs	r3, r3, #10
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4903      	ldr	r1, [pc, #12]	@ (8003a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	0800692c 	.word	0x0800692c

08003a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a40:	f7ff ffdc 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a44:	4602      	mov	r2, r0
 8003a46:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	0b5b      	lsrs	r3, r3, #13
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	4903      	ldr	r1, [pc, #12]	@ (8003a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a52:	5ccb      	ldrb	r3, [r1, r3]
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	0800692c 	.word	0x0800692c

08003a64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	220f      	movs	r2, #15
 8003a72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a74:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0203 	and.w	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a98:	4b09      	ldr	r3, [pc, #36]	@ (8003ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003aa6:	4b07      	ldr	r3, [pc, #28]	@ (8003ac4 <HAL_RCC_GetClockConfig+0x60>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0207 	and.w	r2, r3, #7
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40023c00 	.word	0x40023c00

08003ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e041      	b.n	8003b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f839 	bl	8003b66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	4610      	mov	r0, r2
 8003b08:	f000 fde6 	bl	80046d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
	...

08003b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d001      	beq.n	8003b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e04e      	b.n	8003c32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a23      	ldr	r2, [pc, #140]	@ (8003c40 <HAL_TIM_Base_Start_IT+0xc4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d022      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x80>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bbe:	d01d      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x80>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c44 <HAL_TIM_Base_Start_IT+0xc8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d018      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x80>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1e      	ldr	r2, [pc, #120]	@ (8003c48 <HAL_TIM_Base_Start_IT+0xcc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x80>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c4c <HAL_TIM_Base_Start_IT+0xd0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00e      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x80>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <HAL_TIM_Base_Start_IT+0xd4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x80>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a19      	ldr	r2, [pc, #100]	@ (8003c54 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x80>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a18      	ldr	r2, [pc, #96]	@ (8003c58 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d111      	bne.n	8003c20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b06      	cmp	r3, #6
 8003c0c:	d010      	beq.n	8003c30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1e:	e007      	b.n	8003c30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800
 8003c4c:	40000c00 	.word	0x40000c00
 8003c50:	40010400 	.word	0x40010400
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40001800 	.word	0x40001800

08003c5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e041      	b.n	8003cf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fe f900 	bl	8001e88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f000 fd1c 	bl	80046d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	6839      	ldr	r1, [r7, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 ff38 	bl	8004b84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2e      	ldr	r2, [pc, #184]	@ (8003dd4 <HAL_TIM_PWM_Stop+0xd8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_TIM_PWM_Stop+0x2c>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2d      	ldr	r2, [pc, #180]	@ (8003dd8 <HAL_TIM_PWM_Stop+0xdc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d101      	bne.n	8003d2c <HAL_TIM_PWM_Stop+0x30>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_TIM_PWM_Stop+0x32>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d017      	beq.n	8003d62 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6a1a      	ldr	r2, [r3, #32]
 8003d38:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10f      	bne.n	8003d62 <HAL_TIM_PWM_Stop+0x66>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6a1a      	ldr	r2, [r3, #32]
 8003d48:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <HAL_TIM_PWM_Stop+0x66>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10f      	bne.n	8003d92 <HAL_TIM_PWM_Stop+0x96>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6a1a      	ldr	r2, [r3, #32]
 8003d78:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_PWM_Stop+0x96>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_PWM_Stop+0xa6>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003da0:	e013      	b.n	8003dca <HAL_TIM_PWM_Stop+0xce>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_PWM_Stop+0xb6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003db0:	e00b      	b.n	8003dca <HAL_TIM_PWM_Stop+0xce>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_PWM_Stop+0xc6>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dc0:	e003      	b.n	8003dca <HAL_TIM_PWM_Stop+0xce>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40010400 	.word	0x40010400

08003ddc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e022      	b.n	8003e4e <HAL_TIM_PWM_Start_DMA+0x72>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d109      	bne.n	8003e22 <HAL_TIM_PWM_Start_DMA+0x46>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	e015      	b.n	8003e4e <HAL_TIM_PWM_Start_DMA+0x72>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d109      	bne.n	8003e3c <HAL_TIM_PWM_Start_DMA+0x60>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	e008      	b.n	8003e4e <HAL_TIM_PWM_Start_DMA+0x72>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
 8003e54:	e171      	b.n	800413a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <HAL_TIM_PWM_Start_DMA+0x94>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	e022      	b.n	8003eb6 <HAL_TIM_PWM_Start_DMA+0xda>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d109      	bne.n	8003e8a <HAL_TIM_PWM_Start_DMA+0xae>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e015      	b.n	8003eb6 <HAL_TIM_PWM_Start_DMA+0xda>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d109      	bne.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	e008      	b.n	8003eb6 <HAL_TIM_PWM_Start_DMA+0xda>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d024      	beq.n	8003f04 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_TIM_PWM_Start_DMA+0xea>
 8003ec0:	887b      	ldrh	r3, [r7, #2]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e137      	b.n	800413a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d104      	bne.n	8003eda <HAL_TIM_PWM_Start_DMA+0xfe>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ed8:	e016      	b.n	8003f08 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d104      	bne.n	8003eea <HAL_TIM_PWM_Start_DMA+0x10e>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ee8:	e00e      	b.n	8003f08 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d104      	bne.n	8003efa <HAL_TIM_PWM_Start_DMA+0x11e>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ef8:	e006      	b.n	8003f08 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2202      	movs	r2, #2
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f02:	e001      	b.n	8003f08 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e118      	b.n	800413a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b0c      	cmp	r3, #12
 8003f0c:	f200 80ae 	bhi.w	800406c <HAL_TIM_PWM_Start_DMA+0x290>
 8003f10:	a201      	add	r2, pc, #4	@ (adr r2, 8003f18 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f4d 	.word	0x08003f4d
 8003f1c:	0800406d 	.word	0x0800406d
 8003f20:	0800406d 	.word	0x0800406d
 8003f24:	0800406d 	.word	0x0800406d
 8003f28:	08003f95 	.word	0x08003f95
 8003f2c:	0800406d 	.word	0x0800406d
 8003f30:	0800406d 	.word	0x0800406d
 8003f34:	0800406d 	.word	0x0800406d
 8003f38:	08003fdd 	.word	0x08003fdd
 8003f3c:	0800406d 	.word	0x0800406d
 8003f40:	0800406d 	.word	0x0800406d
 8003f44:	0800406d 	.word	0x0800406d
 8003f48:	08004025 	.word	0x08004025
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	4a7c      	ldr	r2, [pc, #496]	@ (8004144 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003f52:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	4a7b      	ldr	r2, [pc, #492]	@ (8004148 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	4a7a      	ldr	r2, [pc, #488]	@ (800414c <HAL_TIM_PWM_Start_DMA+0x370>)
 8003f62:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3334      	adds	r3, #52	@ 0x34
 8003f70:	461a      	mov	r2, r3
 8003f72:	887b      	ldrh	r3, [r7, #2]
 8003f74:	f7fe fc8e 	bl	8002894 <HAL_DMA_Start_IT>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e0db      	b.n	800413a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f90:	60da      	str	r2, [r3, #12]
      break;
 8003f92:	e06e      	b.n	8004072 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	4a6a      	ldr	r2, [pc, #424]	@ (8004144 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa0:	4a69      	ldr	r2, [pc, #420]	@ (8004148 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003fa2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa8:	4a68      	ldr	r2, [pc, #416]	@ (800414c <HAL_TIM_PWM_Start_DMA+0x370>)
 8003faa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3338      	adds	r3, #56	@ 0x38
 8003fb8:	461a      	mov	r2, r3
 8003fba:	887b      	ldrh	r3, [r7, #2]
 8003fbc:	f7fe fc6a 	bl	8002894 <HAL_DMA_Start_IT>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0b7      	b.n	800413a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fd8:	60da      	str	r2, [r3, #12]
      break;
 8003fda:	e04a      	b.n	8004072 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	4a58      	ldr	r2, [pc, #352]	@ (8004144 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	4a57      	ldr	r2, [pc, #348]	@ (8004148 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003fea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	4a56      	ldr	r2, [pc, #344]	@ (800414c <HAL_TIM_PWM_Start_DMA+0x370>)
 8003ff2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	333c      	adds	r3, #60	@ 0x3c
 8004000:	461a      	mov	r2, r3
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	f7fe fc46 	bl	8002894 <HAL_DMA_Start_IT>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e093      	b.n	800413a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004020:	60da      	str	r2, [r3, #12]
      break;
 8004022:	e026      	b.n	8004072 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004028:	4a46      	ldr	r2, [pc, #280]	@ (8004144 <HAL_TIM_PWM_Start_DMA+0x368>)
 800402a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004030:	4a45      	ldr	r2, [pc, #276]	@ (8004148 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004032:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004038:	4a44      	ldr	r2, [pc, #272]	@ (800414c <HAL_TIM_PWM_Start_DMA+0x370>)
 800403a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3340      	adds	r3, #64	@ 0x40
 8004048:	461a      	mov	r2, r3
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	f7fe fc22 	bl	8002894 <HAL_DMA_Start_IT>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e06f      	b.n	800413a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004068:	60da      	str	r2, [r3, #12]
      break;
 800406a:	e002      	b.n	8004072 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	75fb      	strb	r3, [r7, #23]
      break;
 8004070:	bf00      	nop
  }

  if (status == HAL_OK)
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d15f      	bne.n	8004138 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2201      	movs	r2, #1
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fd7f 	bl	8004b84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a31      	ldr	r2, [pc, #196]	@ (8004150 <HAL_TIM_PWM_Start_DMA+0x374>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_TIM_PWM_Start_DMA+0x2be>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2f      	ldr	r2, [pc, #188]	@ (8004154 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a25      	ldr	r2, [pc, #148]	@ (8004150 <HAL_TIM_PWM_Start_DMA+0x374>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d022      	beq.n	8004104 <HAL_TIM_PWM_Start_DMA+0x328>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c6:	d01d      	beq.n	8004104 <HAL_TIM_PWM_Start_DMA+0x328>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a22      	ldr	r2, [pc, #136]	@ (8004158 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d018      	beq.n	8004104 <HAL_TIM_PWM_Start_DMA+0x328>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a21      	ldr	r2, [pc, #132]	@ (800415c <HAL_TIM_PWM_Start_DMA+0x380>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <HAL_TIM_PWM_Start_DMA+0x328>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004160 <HAL_TIM_PWM_Start_DMA+0x384>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00e      	beq.n	8004104 <HAL_TIM_PWM_Start_DMA+0x328>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004154 <HAL_TIM_PWM_Start_DMA+0x378>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d009      	beq.n	8004104 <HAL_TIM_PWM_Start_DMA+0x328>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004164 <HAL_TIM_PWM_Start_DMA+0x388>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <HAL_TIM_PWM_Start_DMA+0x328>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004168 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d111      	bne.n	8004128 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b06      	cmp	r3, #6
 8004114:	d010      	beq.n	8004138 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004126:	e007      	b.n	8004138 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004138:	7dfb      	ldrb	r3, [r7, #23]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	080045c7 	.word	0x080045c7
 8004148:	0800466f 	.word	0x0800466f
 800414c:	08004535 	.word	0x08004535
 8004150:	40010000 	.word	0x40010000
 8004154:	40010400 	.word	0x40010400
 8004158:	40000400 	.word	0x40000400
 800415c:	40000800 	.word	0x40000800
 8004160:	40000c00 	.word	0x40000c00
 8004164:	40014000 	.word	0x40014000
 8004168:	40001800 	.word	0x40001800

0800416c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d020      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01b      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0202 	mvn.w	r2, #2
 80041a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f994 	bl	80044e4 <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f986 	bl	80044d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fd fc13 	bl	80019f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d020      	beq.n	800421c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01b      	beq.n	800421c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0204 	mvn.w	r2, #4
 80041ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f96e 	bl	80044e4 <HAL_TIM_IC_CaptureCallback>
 8004208:	e005      	b.n	8004216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f960 	bl	80044d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7fd fbed 	bl	80019f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d020      	beq.n	8004268 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01b      	beq.n	8004268 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0208 	mvn.w	r2, #8
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2204      	movs	r2, #4
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f948 	bl	80044e4 <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f93a 	bl	80044d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7fd fbc7 	bl	80019f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b00      	cmp	r3, #0
 8004270:	d020      	beq.n	80042b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01b      	beq.n	80042b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0210 	mvn.w	r2, #16
 8004284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2208      	movs	r2, #8
 800428a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f922 	bl	80044e4 <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f914 	bl	80044d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fd fba1 	bl	80019f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00c      	beq.n	80042d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0201 	mvn.w	r2, #1
 80042d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fd fd98 	bl	8001e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00c      	beq.n	80042fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fcf0 	bl	8004cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00c      	beq.n	8004320 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f8f6 	bl	800450c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00c      	beq.n	8004344 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0220 	mvn.w	r2, #32
 800433c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fcc2 	bl	8004cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004366:	2302      	movs	r3, #2
 8004368:	e0ae      	b.n	80044c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b0c      	cmp	r3, #12
 8004376:	f200 809f 	bhi.w	80044b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800437a:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	080043b5 	.word	0x080043b5
 8004384:	080044b9 	.word	0x080044b9
 8004388:	080044b9 	.word	0x080044b9
 800438c:	080044b9 	.word	0x080044b9
 8004390:	080043f5 	.word	0x080043f5
 8004394:	080044b9 	.word	0x080044b9
 8004398:	080044b9 	.word	0x080044b9
 800439c:	080044b9 	.word	0x080044b9
 80043a0:	08004437 	.word	0x08004437
 80043a4:	080044b9 	.word	0x080044b9
 80043a8:	080044b9 	.word	0x080044b9
 80043ac:	080044b9 	.word	0x080044b9
 80043b0:	08004477 	.word	0x08004477
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fa32 	bl	8004824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0208 	orr.w	r2, r2, #8
 80043ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0204 	bic.w	r2, r2, #4
 80043de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6999      	ldr	r1, [r3, #24]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	619a      	str	r2, [r3, #24]
      break;
 80043f2:	e064      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fa82 	bl	8004904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800440e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800441e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6999      	ldr	r1, [r3, #24]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	021a      	lsls	r2, r3, #8
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	619a      	str	r2, [r3, #24]
      break;
 8004434:	e043      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fad7 	bl	80049f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0208 	orr.w	r2, r2, #8
 8004450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0204 	bic.w	r2, r2, #4
 8004460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69d9      	ldr	r1, [r3, #28]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	61da      	str	r2, [r3, #28]
      break;
 8004474:	e023      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fb2b 	bl	8004ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69d9      	ldr	r1, [r3, #28]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	021a      	lsls	r2, r3, #8
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	61da      	str	r2, [r3, #28]
      break;
 80044b6:	e002      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
      break;
 80044bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	429a      	cmp	r2, r3
 800454a:	d107      	bne.n	800455c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800455a:	e02a      	b.n	80045b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d107      	bne.n	8004576 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2202      	movs	r2, #2
 800456a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004574:	e01d      	b.n	80045b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d107      	bne.n	8004590 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2204      	movs	r2, #4
 8004584:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800458e:	e010      	b.n	80045b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	429a      	cmp	r2, r3
 8004598:	d107      	bne.n	80045aa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2208      	movs	r2, #8
 800459e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045a8:	e003      	b.n	80045b2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff ffb4 	bl	8004520 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	771a      	strb	r2, [r3, #28]
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d10b      	bne.n	80045f6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d136      	bne.n	800465a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f4:	e031      	b.n	800465a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d10b      	bne.n	8004618 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2202      	movs	r2, #2
 8004604:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d125      	bne.n	800465a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004616:	e020      	b.n	800465a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	429a      	cmp	r2, r3
 8004620:	d10b      	bne.n	800463a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2204      	movs	r2, #4
 8004626:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d114      	bne.n	800465a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004638:	e00f      	b.n	800465a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d10a      	bne.n	800465a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2208      	movs	r2, #8
 8004648:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7fd f9c8 	bl	80019f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	771a      	strb	r2, [r3, #28]
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d103      	bne.n	800468e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	771a      	strb	r2, [r3, #28]
 800468c:	e019      	b.n	80046c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d103      	bne.n	80046a0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2202      	movs	r2, #2
 800469c:	771a      	strb	r2, [r3, #28]
 800469e:	e010      	b.n	80046c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d103      	bne.n	80046b2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2204      	movs	r2, #4
 80046ae:	771a      	strb	r2, [r3, #28]
 80046b0:	e007      	b.n	80046c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d102      	bne.n	80046c2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2208      	movs	r2, #8
 80046c0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff ff18 	bl	80044f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	771a      	strb	r2, [r3, #28]
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a43      	ldr	r2, [pc, #268]	@ (80047f8 <TIM_Base_SetConfig+0x120>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f6:	d00f      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a40      	ldr	r2, [pc, #256]	@ (80047fc <TIM_Base_SetConfig+0x124>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00b      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a3f      	ldr	r2, [pc, #252]	@ (8004800 <TIM_Base_SetConfig+0x128>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d007      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a3e      	ldr	r2, [pc, #248]	@ (8004804 <TIM_Base_SetConfig+0x12c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a3d      	ldr	r2, [pc, #244]	@ (8004808 <TIM_Base_SetConfig+0x130>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d108      	bne.n	800472a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a32      	ldr	r2, [pc, #200]	@ (80047f8 <TIM_Base_SetConfig+0x120>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d02b      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004738:	d027      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a2f      	ldr	r2, [pc, #188]	@ (80047fc <TIM_Base_SetConfig+0x124>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d023      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a2e      	ldr	r2, [pc, #184]	@ (8004800 <TIM_Base_SetConfig+0x128>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d01f      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a2d      	ldr	r2, [pc, #180]	@ (8004804 <TIM_Base_SetConfig+0x12c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01b      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a2c      	ldr	r2, [pc, #176]	@ (8004808 <TIM_Base_SetConfig+0x130>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d017      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a2b      	ldr	r2, [pc, #172]	@ (800480c <TIM_Base_SetConfig+0x134>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2a      	ldr	r2, [pc, #168]	@ (8004810 <TIM_Base_SetConfig+0x138>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00f      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a29      	ldr	r2, [pc, #164]	@ (8004814 <TIM_Base_SetConfig+0x13c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a28      	ldr	r2, [pc, #160]	@ (8004818 <TIM_Base_SetConfig+0x140>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a27      	ldr	r2, [pc, #156]	@ (800481c <TIM_Base_SetConfig+0x144>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a26      	ldr	r2, [pc, #152]	@ (8004820 <TIM_Base_SetConfig+0x148>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d108      	bne.n	800479c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a0e      	ldr	r2, [pc, #56]	@ (80047f8 <TIM_Base_SetConfig+0x120>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <TIM_Base_SetConfig+0xf2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a10      	ldr	r2, [pc, #64]	@ (8004808 <TIM_Base_SetConfig+0x130>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d103      	bne.n	80047d2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f043 0204 	orr.w	r2, r3, #4
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	601a      	str	r2, [r3, #0]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40010400 	.word	0x40010400
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800
 8004818:	40001800 	.word	0x40001800
 800481c:	40001c00 	.word	0x40001c00
 8004820:	40002000 	.word	0x40002000

08004824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f023 0201 	bic.w	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f023 0302 	bic.w	r3, r3, #2
 800486c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a20      	ldr	r2, [pc, #128]	@ (80048fc <TIM_OC1_SetConfig+0xd8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <TIM_OC1_SetConfig+0x64>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a1f      	ldr	r2, [pc, #124]	@ (8004900 <TIM_OC1_SetConfig+0xdc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d10c      	bne.n	80048a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f023 0308 	bic.w	r3, r3, #8
 800488e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f023 0304 	bic.w	r3, r3, #4
 80048a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a15      	ldr	r2, [pc, #84]	@ (80048fc <TIM_OC1_SetConfig+0xd8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_OC1_SetConfig+0x8e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a14      	ldr	r2, [pc, #80]	@ (8004900 <TIM_OC1_SetConfig+0xdc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d111      	bne.n	80048d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	621a      	str	r2, [r3, #32]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40010000 	.word	0x40010000
 8004900:	40010400 	.word	0x40010400

08004904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f023 0210 	bic.w	r2, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800493a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0320 	bic.w	r3, r3, #32
 800494e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a22      	ldr	r2, [pc, #136]	@ (80049e8 <TIM_OC2_SetConfig+0xe4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_OC2_SetConfig+0x68>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a21      	ldr	r2, [pc, #132]	@ (80049ec <TIM_OC2_SetConfig+0xe8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10d      	bne.n	8004988 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004986:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a17      	ldr	r2, [pc, #92]	@ (80049e8 <TIM_OC2_SetConfig+0xe4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_OC2_SetConfig+0x94>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a16      	ldr	r2, [pc, #88]	@ (80049ec <TIM_OC2_SetConfig+0xe8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d113      	bne.n	80049c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800499e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40010400 	.word	0x40010400

080049f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a21      	ldr	r2, [pc, #132]	@ (8004ad0 <TIM_OC3_SetConfig+0xe0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d003      	beq.n	8004a56 <TIM_OC3_SetConfig+0x66>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a20      	ldr	r2, [pc, #128]	@ (8004ad4 <TIM_OC3_SetConfig+0xe4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d10d      	bne.n	8004a72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a16      	ldr	r2, [pc, #88]	@ (8004ad0 <TIM_OC3_SetConfig+0xe0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_OC3_SetConfig+0x92>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a15      	ldr	r2, [pc, #84]	@ (8004ad4 <TIM_OC3_SetConfig+0xe4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d113      	bne.n	8004aaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	621a      	str	r2, [r3, #32]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40010400 	.word	0x40010400

08004ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	031b      	lsls	r3, r3, #12
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a12      	ldr	r2, [pc, #72]	@ (8004b7c <TIM_OC4_SetConfig+0xa4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_OC4_SetConfig+0x68>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a11      	ldr	r2, [pc, #68]	@ (8004b80 <TIM_OC4_SetConfig+0xa8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d109      	bne.n	8004b54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	019b      	lsls	r3, r3, #6
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	40010400 	.word	0x40010400

08004b84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 031f 	and.w	r3, r3, #31
 8004b96:	2201      	movs	r2, #1
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1a      	ldr	r2, [r3, #32]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	401a      	ands	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	621a      	str	r2, [r3, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e05a      	b.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a21      	ldr	r2, [pc, #132]	@ (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d022      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c34:	d01d      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d018      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00e      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a18      	ldr	r2, [pc, #96]	@ (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d009      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a17      	ldr	r2, [pc, #92]	@ (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d004      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a15      	ldr	r2, [pc, #84]	@ (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10c      	bne.n	8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40000800 	.word	0x40000800
 8004cb8:	40000c00 	.word	0x40000c00
 8004cbc:	40010400 	.word	0x40010400
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40001800 	.word	0x40001800

08004cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e042      	b.n	8004d88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fd fa00 	bl	800211c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2224      	movs	r2, #36	@ 0x24
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f973 	bl	8005020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	@ 0x28
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d175      	bne.n	8004e9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_UART_Transmit+0x2c>
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e06e      	b.n	8004e9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2221      	movs	r2, #33	@ 0x21
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dce:	f7fd fbc5 	bl	800255c <HAL_GetTick>
 8004dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	88fa      	ldrh	r2, [r7, #6]
 8004dde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de8:	d108      	bne.n	8004dfc <HAL_UART_Transmit+0x6c>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	e003      	b.n	8004e04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e04:	e02e      	b.n	8004e64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2180      	movs	r1, #128	@ 0x80
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f848 	bl	8004ea6 <UART_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e03a      	b.n	8004e9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10b      	bne.n	8004e46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	3302      	adds	r3, #2
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	e007      	b.n	8004e56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	781a      	ldrb	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	3301      	adds	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1cb      	bne.n	8004e06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2200      	movs	r2, #0
 8004e76:	2140      	movs	r1, #64	@ 0x40
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f814 	bl	8004ea6 <UART_WaitOnFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e006      	b.n	8004e9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e9c:	2302      	movs	r3, #2
  }
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b086      	sub	sp, #24
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb6:	e03b      	b.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d037      	beq.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec0:	f7fd fb4c 	bl	800255c <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	6a3a      	ldr	r2, [r7, #32]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d302      	bcc.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e03a      	b.n	8004f50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d023      	beq.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b80      	cmp	r3, #128	@ 0x80
 8004eec:	d020      	beq.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d01d      	beq.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d116      	bne.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f02:	2300      	movs	r3, #0
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f81d 	bl	8004f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2208      	movs	r2, #8
 8004f22:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e00f      	b.n	8004f50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	bf0c      	ite	eq
 8004f40:	2301      	moveq	r3, #1
 8004f42:	2300      	movne	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d0b4      	beq.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b095      	sub	sp, #84	@ 0x54
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	330c      	adds	r3, #12
 8004f66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f80:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e5      	bne.n	8004f60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3314      	adds	r3, #20
 8004f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f023 0301 	bic.w	r3, r3, #1
 8004faa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3314      	adds	r3, #20
 8004fb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e5      	bne.n	8004f94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d119      	bne.n	8005004 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f023 0310 	bic.w	r3, r3, #16
 8004fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ff0:	61ba      	str	r2, [r7, #24]
 8004ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6979      	ldr	r1, [r7, #20]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e5      	bne.n	8004fd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005012:	bf00      	nop
 8005014:	3754      	adds	r7, #84	@ 0x54
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005024:	b0c0      	sub	sp, #256	@ 0x100
 8005026:	af00      	add	r7, sp, #0
 8005028:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503c:	68d9      	ldr	r1, [r3, #12]
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	ea40 0301 	orr.w	r3, r0, r1
 8005048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	431a      	orrs	r2, r3
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	431a      	orrs	r2, r3
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005078:	f021 010c 	bic.w	r1, r1, #12
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005086:	430b      	orrs	r3, r1
 8005088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509a:	6999      	ldr	r1, [r3, #24]
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	ea40 0301 	orr.w	r3, r0, r1
 80050a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b8f      	ldr	r3, [pc, #572]	@ (80052ec <UART_SetConfig+0x2cc>)
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d005      	beq.n	80050c0 <UART_SetConfig+0xa0>
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b8d      	ldr	r3, [pc, #564]	@ (80052f0 <UART_SetConfig+0x2d0>)
 80050bc:	429a      	cmp	r2, r3
 80050be:	d104      	bne.n	80050ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050c0:	f7fe fcbc 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 80050c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050c8:	e003      	b.n	80050d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ca:	f7fe fca3 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 80050ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050dc:	f040 810c 	bne.w	80052f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050f2:	4622      	mov	r2, r4
 80050f4:	462b      	mov	r3, r5
 80050f6:	1891      	adds	r1, r2, r2
 80050f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050fa:	415b      	adcs	r3, r3
 80050fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005102:	4621      	mov	r1, r4
 8005104:	eb12 0801 	adds.w	r8, r2, r1
 8005108:	4629      	mov	r1, r5
 800510a:	eb43 0901 	adc.w	r9, r3, r1
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800511a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005122:	4690      	mov	r8, r2
 8005124:	4699      	mov	r9, r3
 8005126:	4623      	mov	r3, r4
 8005128:	eb18 0303 	adds.w	r3, r8, r3
 800512c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005130:	462b      	mov	r3, r5
 8005132:	eb49 0303 	adc.w	r3, r9, r3
 8005136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005146:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800514a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800514e:	460b      	mov	r3, r1
 8005150:	18db      	adds	r3, r3, r3
 8005152:	653b      	str	r3, [r7, #80]	@ 0x50
 8005154:	4613      	mov	r3, r2
 8005156:	eb42 0303 	adc.w	r3, r2, r3
 800515a:	657b      	str	r3, [r7, #84]	@ 0x54
 800515c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005164:	f7fb fc72 	bl	8000a4c <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4b61      	ldr	r3, [pc, #388]	@ (80052f4 <UART_SetConfig+0x2d4>)
 800516e:	fba3 2302 	umull	r2, r3, r3, r2
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	011c      	lsls	r4, r3, #4
 8005176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800517a:	2200      	movs	r2, #0
 800517c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005180:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	1891      	adds	r1, r2, r2
 800518e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005190:	415b      	adcs	r3, r3
 8005192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005198:	4641      	mov	r1, r8
 800519a:	eb12 0a01 	adds.w	sl, r2, r1
 800519e:	4649      	mov	r1, r9
 80051a0:	eb43 0b01 	adc.w	fp, r3, r1
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b8:	4692      	mov	sl, r2
 80051ba:	469b      	mov	fp, r3
 80051bc:	4643      	mov	r3, r8
 80051be:	eb1a 0303 	adds.w	r3, sl, r3
 80051c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051c6:	464b      	mov	r3, r9
 80051c8:	eb4b 0303 	adc.w	r3, fp, r3
 80051cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051e4:	460b      	mov	r3, r1
 80051e6:	18db      	adds	r3, r3, r3
 80051e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ea:	4613      	mov	r3, r2
 80051ec:	eb42 0303 	adc.w	r3, r2, r3
 80051f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051fa:	f7fb fc27 	bl	8000a4c <__aeabi_uldivmod>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4611      	mov	r1, r2
 8005204:	4b3b      	ldr	r3, [pc, #236]	@ (80052f4 <UART_SetConfig+0x2d4>)
 8005206:	fba3 2301 	umull	r2, r3, r3, r1
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2264      	movs	r2, #100	@ 0x64
 800520e:	fb02 f303 	mul.w	r3, r2, r3
 8005212:	1acb      	subs	r3, r1, r3
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800521a:	4b36      	ldr	r3, [pc, #216]	@ (80052f4 <UART_SetConfig+0x2d4>)
 800521c:	fba3 2302 	umull	r2, r3, r3, r2
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005228:	441c      	add	r4, r3
 800522a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800522e:	2200      	movs	r2, #0
 8005230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005234:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800523c:	4642      	mov	r2, r8
 800523e:	464b      	mov	r3, r9
 8005240:	1891      	adds	r1, r2, r2
 8005242:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005244:	415b      	adcs	r3, r3
 8005246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800524c:	4641      	mov	r1, r8
 800524e:	1851      	adds	r1, r2, r1
 8005250:	6339      	str	r1, [r7, #48]	@ 0x30
 8005252:	4649      	mov	r1, r9
 8005254:	414b      	adcs	r3, r1
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005264:	4659      	mov	r1, fp
 8005266:	00cb      	lsls	r3, r1, #3
 8005268:	4651      	mov	r1, sl
 800526a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800526e:	4651      	mov	r1, sl
 8005270:	00ca      	lsls	r2, r1, #3
 8005272:	4610      	mov	r0, r2
 8005274:	4619      	mov	r1, r3
 8005276:	4603      	mov	r3, r0
 8005278:	4642      	mov	r2, r8
 800527a:	189b      	adds	r3, r3, r2
 800527c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005280:	464b      	mov	r3, r9
 8005282:	460a      	mov	r2, r1
 8005284:	eb42 0303 	adc.w	r3, r2, r3
 8005288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005298:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800529c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052a0:	460b      	mov	r3, r1
 80052a2:	18db      	adds	r3, r3, r3
 80052a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a6:	4613      	mov	r3, r2
 80052a8:	eb42 0303 	adc.w	r3, r2, r3
 80052ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052b6:	f7fb fbc9 	bl	8000a4c <__aeabi_uldivmod>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <UART_SetConfig+0x2d4>)
 80052c0:	fba3 1302 	umull	r1, r3, r3, r2
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	2164      	movs	r1, #100	@ 0x64
 80052c8:	fb01 f303 	mul.w	r3, r1, r3
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	3332      	adds	r3, #50	@ 0x32
 80052d2:	4a08      	ldr	r2, [pc, #32]	@ (80052f4 <UART_SetConfig+0x2d4>)
 80052d4:	fba2 2303 	umull	r2, r3, r2, r3
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	f003 0207 	and.w	r2, r3, #7
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4422      	add	r2, r4
 80052e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052e8:	e106      	b.n	80054f8 <UART_SetConfig+0x4d8>
 80052ea:	bf00      	nop
 80052ec:	40011000 	.word	0x40011000
 80052f0:	40011400 	.word	0x40011400
 80052f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005302:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800530a:	4642      	mov	r2, r8
 800530c:	464b      	mov	r3, r9
 800530e:	1891      	adds	r1, r2, r2
 8005310:	6239      	str	r1, [r7, #32]
 8005312:	415b      	adcs	r3, r3
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
 8005316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800531a:	4641      	mov	r1, r8
 800531c:	1854      	adds	r4, r2, r1
 800531e:	4649      	mov	r1, r9
 8005320:	eb43 0501 	adc.w	r5, r3, r1
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	00eb      	lsls	r3, r5, #3
 800532e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005332:	00e2      	lsls	r2, r4, #3
 8005334:	4614      	mov	r4, r2
 8005336:	461d      	mov	r5, r3
 8005338:	4643      	mov	r3, r8
 800533a:	18e3      	adds	r3, r4, r3
 800533c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005340:	464b      	mov	r3, r9
 8005342:	eb45 0303 	adc.w	r3, r5, r3
 8005346:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800534a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005356:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005366:	4629      	mov	r1, r5
 8005368:	008b      	lsls	r3, r1, #2
 800536a:	4621      	mov	r1, r4
 800536c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005370:	4621      	mov	r1, r4
 8005372:	008a      	lsls	r2, r1, #2
 8005374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005378:	f7fb fb68 	bl	8000a4c <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4b60      	ldr	r3, [pc, #384]	@ (8005504 <UART_SetConfig+0x4e4>)
 8005382:	fba3 2302 	umull	r2, r3, r3, r2
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	011c      	lsls	r4, r3, #4
 800538a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800538e:	2200      	movs	r2, #0
 8005390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005394:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800539c:	4642      	mov	r2, r8
 800539e:	464b      	mov	r3, r9
 80053a0:	1891      	adds	r1, r2, r2
 80053a2:	61b9      	str	r1, [r7, #24]
 80053a4:	415b      	adcs	r3, r3
 80053a6:	61fb      	str	r3, [r7, #28]
 80053a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ac:	4641      	mov	r1, r8
 80053ae:	1851      	adds	r1, r2, r1
 80053b0:	6139      	str	r1, [r7, #16]
 80053b2:	4649      	mov	r1, r9
 80053b4:	414b      	adcs	r3, r1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053c4:	4659      	mov	r1, fp
 80053c6:	00cb      	lsls	r3, r1, #3
 80053c8:	4651      	mov	r1, sl
 80053ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ce:	4651      	mov	r1, sl
 80053d0:	00ca      	lsls	r2, r1, #3
 80053d2:	4610      	mov	r0, r2
 80053d4:	4619      	mov	r1, r3
 80053d6:	4603      	mov	r3, r0
 80053d8:	4642      	mov	r2, r8
 80053da:	189b      	adds	r3, r3, r2
 80053dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053e0:	464b      	mov	r3, r9
 80053e2:	460a      	mov	r2, r1
 80053e4:	eb42 0303 	adc.w	r3, r2, r3
 80053e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005404:	4649      	mov	r1, r9
 8005406:	008b      	lsls	r3, r1, #2
 8005408:	4641      	mov	r1, r8
 800540a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800540e:	4641      	mov	r1, r8
 8005410:	008a      	lsls	r2, r1, #2
 8005412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005416:	f7fb fb19 	bl	8000a4c <__aeabi_uldivmod>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4611      	mov	r1, r2
 8005420:	4b38      	ldr	r3, [pc, #224]	@ (8005504 <UART_SetConfig+0x4e4>)
 8005422:	fba3 2301 	umull	r2, r3, r3, r1
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2264      	movs	r2, #100	@ 0x64
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	1acb      	subs	r3, r1, r3
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	3332      	adds	r3, #50	@ 0x32
 8005434:	4a33      	ldr	r2, [pc, #204]	@ (8005504 <UART_SetConfig+0x4e4>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005440:	441c      	add	r4, r3
 8005442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005446:	2200      	movs	r2, #0
 8005448:	673b      	str	r3, [r7, #112]	@ 0x70
 800544a:	677a      	str	r2, [r7, #116]	@ 0x74
 800544c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	1891      	adds	r1, r2, r2
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	415b      	adcs	r3, r3
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005460:	4641      	mov	r1, r8
 8005462:	1851      	adds	r1, r2, r1
 8005464:	6039      	str	r1, [r7, #0]
 8005466:	4649      	mov	r1, r9
 8005468:	414b      	adcs	r3, r1
 800546a:	607b      	str	r3, [r7, #4]
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005478:	4659      	mov	r1, fp
 800547a:	00cb      	lsls	r3, r1, #3
 800547c:	4651      	mov	r1, sl
 800547e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005482:	4651      	mov	r1, sl
 8005484:	00ca      	lsls	r2, r1, #3
 8005486:	4610      	mov	r0, r2
 8005488:	4619      	mov	r1, r3
 800548a:	4603      	mov	r3, r0
 800548c:	4642      	mov	r2, r8
 800548e:	189b      	adds	r3, r3, r2
 8005490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005492:	464b      	mov	r3, r9
 8005494:	460a      	mov	r2, r1
 8005496:	eb42 0303 	adc.w	r3, r2, r3
 800549a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80054a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054b4:	4649      	mov	r1, r9
 80054b6:	008b      	lsls	r3, r1, #2
 80054b8:	4641      	mov	r1, r8
 80054ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054be:	4641      	mov	r1, r8
 80054c0:	008a      	lsls	r2, r1, #2
 80054c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054c6:	f7fb fac1 	bl	8000a4c <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005504 <UART_SetConfig+0x4e4>)
 80054d0:	fba3 1302 	umull	r1, r3, r3, r2
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	2164      	movs	r1, #100	@ 0x64
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	3332      	adds	r3, #50	@ 0x32
 80054e2:	4a08      	ldr	r2, [pc, #32]	@ (8005504 <UART_SetConfig+0x4e4>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	f003 020f 	and.w	r2, r3, #15
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4422      	add	r2, r4
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054fe:	46bd      	mov	sp, r7
 8005500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005504:	51eb851f 	.word	0x51eb851f

08005508 <std>:
 8005508:	2300      	movs	r3, #0
 800550a:	b510      	push	{r4, lr}
 800550c:	4604      	mov	r4, r0
 800550e:	e9c0 3300 	strd	r3, r3, [r0]
 8005512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005516:	6083      	str	r3, [r0, #8]
 8005518:	8181      	strh	r1, [r0, #12]
 800551a:	6643      	str	r3, [r0, #100]	@ 0x64
 800551c:	81c2      	strh	r2, [r0, #14]
 800551e:	6183      	str	r3, [r0, #24]
 8005520:	4619      	mov	r1, r3
 8005522:	2208      	movs	r2, #8
 8005524:	305c      	adds	r0, #92	@ 0x5c
 8005526:	f000 fa1b 	bl	8005960 <memset>
 800552a:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <std+0x58>)
 800552c:	6263      	str	r3, [r4, #36]	@ 0x24
 800552e:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <std+0x5c>)
 8005530:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005532:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <std+0x60>)
 8005534:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005536:	4b0d      	ldr	r3, [pc, #52]	@ (800556c <std+0x64>)
 8005538:	6323      	str	r3, [r4, #48]	@ 0x30
 800553a:	4b0d      	ldr	r3, [pc, #52]	@ (8005570 <std+0x68>)
 800553c:	6224      	str	r4, [r4, #32]
 800553e:	429c      	cmp	r4, r3
 8005540:	d006      	beq.n	8005550 <std+0x48>
 8005542:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005546:	4294      	cmp	r4, r2
 8005548:	d002      	beq.n	8005550 <std+0x48>
 800554a:	33d0      	adds	r3, #208	@ 0xd0
 800554c:	429c      	cmp	r4, r3
 800554e:	d105      	bne.n	800555c <std+0x54>
 8005550:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005558:	f000 ba7a 	b.w	8005a50 <__retarget_lock_init_recursive>
 800555c:	bd10      	pop	{r4, pc}
 800555e:	bf00      	nop
 8005560:	080057b1 	.word	0x080057b1
 8005564:	080057d3 	.word	0x080057d3
 8005568:	0800580b 	.word	0x0800580b
 800556c:	0800582f 	.word	0x0800582f
 8005570:	20000428 	.word	0x20000428

08005574 <stdio_exit_handler>:
 8005574:	4a02      	ldr	r2, [pc, #8]	@ (8005580 <stdio_exit_handler+0xc>)
 8005576:	4903      	ldr	r1, [pc, #12]	@ (8005584 <stdio_exit_handler+0x10>)
 8005578:	4803      	ldr	r0, [pc, #12]	@ (8005588 <stdio_exit_handler+0x14>)
 800557a:	f000 b869 	b.w	8005650 <_fwalk_sglue>
 800557e:	bf00      	nop
 8005580:	2000000c 	.word	0x2000000c
 8005584:	0800659d 	.word	0x0800659d
 8005588:	2000001c 	.word	0x2000001c

0800558c <cleanup_stdio>:
 800558c:	6841      	ldr	r1, [r0, #4]
 800558e:	4b0c      	ldr	r3, [pc, #48]	@ (80055c0 <cleanup_stdio+0x34>)
 8005590:	4299      	cmp	r1, r3
 8005592:	b510      	push	{r4, lr}
 8005594:	4604      	mov	r4, r0
 8005596:	d001      	beq.n	800559c <cleanup_stdio+0x10>
 8005598:	f001 f800 	bl	800659c <_fflush_r>
 800559c:	68a1      	ldr	r1, [r4, #8]
 800559e:	4b09      	ldr	r3, [pc, #36]	@ (80055c4 <cleanup_stdio+0x38>)
 80055a0:	4299      	cmp	r1, r3
 80055a2:	d002      	beq.n	80055aa <cleanup_stdio+0x1e>
 80055a4:	4620      	mov	r0, r4
 80055a6:	f000 fff9 	bl	800659c <_fflush_r>
 80055aa:	68e1      	ldr	r1, [r4, #12]
 80055ac:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <cleanup_stdio+0x3c>)
 80055ae:	4299      	cmp	r1, r3
 80055b0:	d004      	beq.n	80055bc <cleanup_stdio+0x30>
 80055b2:	4620      	mov	r0, r4
 80055b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b8:	f000 bff0 	b.w	800659c <_fflush_r>
 80055bc:	bd10      	pop	{r4, pc}
 80055be:	bf00      	nop
 80055c0:	20000428 	.word	0x20000428
 80055c4:	20000490 	.word	0x20000490
 80055c8:	200004f8 	.word	0x200004f8

080055cc <global_stdio_init.part.0>:
 80055cc:	b510      	push	{r4, lr}
 80055ce:	4b0b      	ldr	r3, [pc, #44]	@ (80055fc <global_stdio_init.part.0+0x30>)
 80055d0:	4c0b      	ldr	r4, [pc, #44]	@ (8005600 <global_stdio_init.part.0+0x34>)
 80055d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005604 <global_stdio_init.part.0+0x38>)
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	4620      	mov	r0, r4
 80055d8:	2200      	movs	r2, #0
 80055da:	2104      	movs	r1, #4
 80055dc:	f7ff ff94 	bl	8005508 <std>
 80055e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055e4:	2201      	movs	r2, #1
 80055e6:	2109      	movs	r1, #9
 80055e8:	f7ff ff8e 	bl	8005508 <std>
 80055ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055f0:	2202      	movs	r2, #2
 80055f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f6:	2112      	movs	r1, #18
 80055f8:	f7ff bf86 	b.w	8005508 <std>
 80055fc:	20000560 	.word	0x20000560
 8005600:	20000428 	.word	0x20000428
 8005604:	08005575 	.word	0x08005575

08005608 <__sfp_lock_acquire>:
 8005608:	4801      	ldr	r0, [pc, #4]	@ (8005610 <__sfp_lock_acquire+0x8>)
 800560a:	f000 ba22 	b.w	8005a52 <__retarget_lock_acquire_recursive>
 800560e:	bf00      	nop
 8005610:	20000569 	.word	0x20000569

08005614 <__sfp_lock_release>:
 8005614:	4801      	ldr	r0, [pc, #4]	@ (800561c <__sfp_lock_release+0x8>)
 8005616:	f000 ba1d 	b.w	8005a54 <__retarget_lock_release_recursive>
 800561a:	bf00      	nop
 800561c:	20000569 	.word	0x20000569

08005620 <__sinit>:
 8005620:	b510      	push	{r4, lr}
 8005622:	4604      	mov	r4, r0
 8005624:	f7ff fff0 	bl	8005608 <__sfp_lock_acquire>
 8005628:	6a23      	ldr	r3, [r4, #32]
 800562a:	b11b      	cbz	r3, 8005634 <__sinit+0x14>
 800562c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005630:	f7ff bff0 	b.w	8005614 <__sfp_lock_release>
 8005634:	4b04      	ldr	r3, [pc, #16]	@ (8005648 <__sinit+0x28>)
 8005636:	6223      	str	r3, [r4, #32]
 8005638:	4b04      	ldr	r3, [pc, #16]	@ (800564c <__sinit+0x2c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f5      	bne.n	800562c <__sinit+0xc>
 8005640:	f7ff ffc4 	bl	80055cc <global_stdio_init.part.0>
 8005644:	e7f2      	b.n	800562c <__sinit+0xc>
 8005646:	bf00      	nop
 8005648:	0800558d 	.word	0x0800558d
 800564c:	20000560 	.word	0x20000560

08005650 <_fwalk_sglue>:
 8005650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005654:	4607      	mov	r7, r0
 8005656:	4688      	mov	r8, r1
 8005658:	4614      	mov	r4, r2
 800565a:	2600      	movs	r6, #0
 800565c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005660:	f1b9 0901 	subs.w	r9, r9, #1
 8005664:	d505      	bpl.n	8005672 <_fwalk_sglue+0x22>
 8005666:	6824      	ldr	r4, [r4, #0]
 8005668:	2c00      	cmp	r4, #0
 800566a:	d1f7      	bne.n	800565c <_fwalk_sglue+0xc>
 800566c:	4630      	mov	r0, r6
 800566e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005672:	89ab      	ldrh	r3, [r5, #12]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d907      	bls.n	8005688 <_fwalk_sglue+0x38>
 8005678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800567c:	3301      	adds	r3, #1
 800567e:	d003      	beq.n	8005688 <_fwalk_sglue+0x38>
 8005680:	4629      	mov	r1, r5
 8005682:	4638      	mov	r0, r7
 8005684:	47c0      	blx	r8
 8005686:	4306      	orrs	r6, r0
 8005688:	3568      	adds	r5, #104	@ 0x68
 800568a:	e7e9      	b.n	8005660 <_fwalk_sglue+0x10>

0800568c <iprintf>:
 800568c:	b40f      	push	{r0, r1, r2, r3}
 800568e:	b507      	push	{r0, r1, r2, lr}
 8005690:	4906      	ldr	r1, [pc, #24]	@ (80056ac <iprintf+0x20>)
 8005692:	ab04      	add	r3, sp, #16
 8005694:	6808      	ldr	r0, [r1, #0]
 8005696:	f853 2b04 	ldr.w	r2, [r3], #4
 800569a:	6881      	ldr	r1, [r0, #8]
 800569c:	9301      	str	r3, [sp, #4]
 800569e:	f000 fc55 	bl	8005f4c <_vfiprintf_r>
 80056a2:	b003      	add	sp, #12
 80056a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056a8:	b004      	add	sp, #16
 80056aa:	4770      	bx	lr
 80056ac:	20000018 	.word	0x20000018

080056b0 <_puts_r>:
 80056b0:	6a03      	ldr	r3, [r0, #32]
 80056b2:	b570      	push	{r4, r5, r6, lr}
 80056b4:	6884      	ldr	r4, [r0, #8]
 80056b6:	4605      	mov	r5, r0
 80056b8:	460e      	mov	r6, r1
 80056ba:	b90b      	cbnz	r3, 80056c0 <_puts_r+0x10>
 80056bc:	f7ff ffb0 	bl	8005620 <__sinit>
 80056c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056c2:	07db      	lsls	r3, r3, #31
 80056c4:	d405      	bmi.n	80056d2 <_puts_r+0x22>
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	0598      	lsls	r0, r3, #22
 80056ca:	d402      	bmi.n	80056d2 <_puts_r+0x22>
 80056cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056ce:	f000 f9c0 	bl	8005a52 <__retarget_lock_acquire_recursive>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	0719      	lsls	r1, r3, #28
 80056d6:	d502      	bpl.n	80056de <_puts_r+0x2e>
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d135      	bne.n	800574a <_puts_r+0x9a>
 80056de:	4621      	mov	r1, r4
 80056e0:	4628      	mov	r0, r5
 80056e2:	f000 f8e7 	bl	80058b4 <__swsetup_r>
 80056e6:	b380      	cbz	r0, 800574a <_puts_r+0x9a>
 80056e8:	f04f 35ff 	mov.w	r5, #4294967295
 80056ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056ee:	07da      	lsls	r2, r3, #31
 80056f0:	d405      	bmi.n	80056fe <_puts_r+0x4e>
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	059b      	lsls	r3, r3, #22
 80056f6:	d402      	bmi.n	80056fe <_puts_r+0x4e>
 80056f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056fa:	f000 f9ab 	bl	8005a54 <__retarget_lock_release_recursive>
 80056fe:	4628      	mov	r0, r5
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	2b00      	cmp	r3, #0
 8005704:	da04      	bge.n	8005710 <_puts_r+0x60>
 8005706:	69a2      	ldr	r2, [r4, #24]
 8005708:	429a      	cmp	r2, r3
 800570a:	dc17      	bgt.n	800573c <_puts_r+0x8c>
 800570c:	290a      	cmp	r1, #10
 800570e:	d015      	beq.n	800573c <_puts_r+0x8c>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	6022      	str	r2, [r4, #0]
 8005716:	7019      	strb	r1, [r3, #0]
 8005718:	68a3      	ldr	r3, [r4, #8]
 800571a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800571e:	3b01      	subs	r3, #1
 8005720:	60a3      	str	r3, [r4, #8]
 8005722:	2900      	cmp	r1, #0
 8005724:	d1ed      	bne.n	8005702 <_puts_r+0x52>
 8005726:	2b00      	cmp	r3, #0
 8005728:	da11      	bge.n	800574e <_puts_r+0x9e>
 800572a:	4622      	mov	r2, r4
 800572c:	210a      	movs	r1, #10
 800572e:	4628      	mov	r0, r5
 8005730:	f000 f881 	bl	8005836 <__swbuf_r>
 8005734:	3001      	adds	r0, #1
 8005736:	d0d7      	beq.n	80056e8 <_puts_r+0x38>
 8005738:	250a      	movs	r5, #10
 800573a:	e7d7      	b.n	80056ec <_puts_r+0x3c>
 800573c:	4622      	mov	r2, r4
 800573e:	4628      	mov	r0, r5
 8005740:	f000 f879 	bl	8005836 <__swbuf_r>
 8005744:	3001      	adds	r0, #1
 8005746:	d1e7      	bne.n	8005718 <_puts_r+0x68>
 8005748:	e7ce      	b.n	80056e8 <_puts_r+0x38>
 800574a:	3e01      	subs	r6, #1
 800574c:	e7e4      	b.n	8005718 <_puts_r+0x68>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	6022      	str	r2, [r4, #0]
 8005754:	220a      	movs	r2, #10
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	e7ee      	b.n	8005738 <_puts_r+0x88>
	...

0800575c <puts>:
 800575c:	4b02      	ldr	r3, [pc, #8]	@ (8005768 <puts+0xc>)
 800575e:	4601      	mov	r1, r0
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	f7ff bfa5 	b.w	80056b0 <_puts_r>
 8005766:	bf00      	nop
 8005768:	20000018 	.word	0x20000018

0800576c <siprintf>:
 800576c:	b40e      	push	{r1, r2, r3}
 800576e:	b510      	push	{r4, lr}
 8005770:	b09d      	sub	sp, #116	@ 0x74
 8005772:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005774:	9002      	str	r0, [sp, #8]
 8005776:	9006      	str	r0, [sp, #24]
 8005778:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800577c:	480a      	ldr	r0, [pc, #40]	@ (80057a8 <siprintf+0x3c>)
 800577e:	9107      	str	r1, [sp, #28]
 8005780:	9104      	str	r1, [sp, #16]
 8005782:	490a      	ldr	r1, [pc, #40]	@ (80057ac <siprintf+0x40>)
 8005784:	f853 2b04 	ldr.w	r2, [r3], #4
 8005788:	9105      	str	r1, [sp, #20]
 800578a:	2400      	movs	r4, #0
 800578c:	a902      	add	r1, sp, #8
 800578e:	6800      	ldr	r0, [r0, #0]
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005794:	f000 fab4 	bl	8005d00 <_svfiprintf_r>
 8005798:	9b02      	ldr	r3, [sp, #8]
 800579a:	701c      	strb	r4, [r3, #0]
 800579c:	b01d      	add	sp, #116	@ 0x74
 800579e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a2:	b003      	add	sp, #12
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20000018 	.word	0x20000018
 80057ac:	ffff0208 	.word	0xffff0208

080057b0 <__sread>:
 80057b0:	b510      	push	{r4, lr}
 80057b2:	460c      	mov	r4, r1
 80057b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b8:	f000 f8fc 	bl	80059b4 <_read_r>
 80057bc:	2800      	cmp	r0, #0
 80057be:	bfab      	itete	ge
 80057c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057c2:	89a3      	ldrhlt	r3, [r4, #12]
 80057c4:	181b      	addge	r3, r3, r0
 80057c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057ca:	bfac      	ite	ge
 80057cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057ce:	81a3      	strhlt	r3, [r4, #12]
 80057d0:	bd10      	pop	{r4, pc}

080057d2 <__swrite>:
 80057d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d6:	461f      	mov	r7, r3
 80057d8:	898b      	ldrh	r3, [r1, #12]
 80057da:	05db      	lsls	r3, r3, #23
 80057dc:	4605      	mov	r5, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	4616      	mov	r6, r2
 80057e2:	d505      	bpl.n	80057f0 <__swrite+0x1e>
 80057e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e8:	2302      	movs	r3, #2
 80057ea:	2200      	movs	r2, #0
 80057ec:	f000 f8d0 	bl	8005990 <_lseek_r>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	4632      	mov	r2, r6
 80057fe:	463b      	mov	r3, r7
 8005800:	4628      	mov	r0, r5
 8005802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005806:	f000 b8e7 	b.w	80059d8 <_write_r>

0800580a <__sseek>:
 800580a:	b510      	push	{r4, lr}
 800580c:	460c      	mov	r4, r1
 800580e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005812:	f000 f8bd 	bl	8005990 <_lseek_r>
 8005816:	1c43      	adds	r3, r0, #1
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	bf15      	itete	ne
 800581c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800581e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005822:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005826:	81a3      	strheq	r3, [r4, #12]
 8005828:	bf18      	it	ne
 800582a:	81a3      	strhne	r3, [r4, #12]
 800582c:	bd10      	pop	{r4, pc}

0800582e <__sclose>:
 800582e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005832:	f000 b89d 	b.w	8005970 <_close_r>

08005836 <__swbuf_r>:
 8005836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005838:	460e      	mov	r6, r1
 800583a:	4614      	mov	r4, r2
 800583c:	4605      	mov	r5, r0
 800583e:	b118      	cbz	r0, 8005848 <__swbuf_r+0x12>
 8005840:	6a03      	ldr	r3, [r0, #32]
 8005842:	b90b      	cbnz	r3, 8005848 <__swbuf_r+0x12>
 8005844:	f7ff feec 	bl	8005620 <__sinit>
 8005848:	69a3      	ldr	r3, [r4, #24]
 800584a:	60a3      	str	r3, [r4, #8]
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	071a      	lsls	r2, r3, #28
 8005850:	d501      	bpl.n	8005856 <__swbuf_r+0x20>
 8005852:	6923      	ldr	r3, [r4, #16]
 8005854:	b943      	cbnz	r3, 8005868 <__swbuf_r+0x32>
 8005856:	4621      	mov	r1, r4
 8005858:	4628      	mov	r0, r5
 800585a:	f000 f82b 	bl	80058b4 <__swsetup_r>
 800585e:	b118      	cbz	r0, 8005868 <__swbuf_r+0x32>
 8005860:	f04f 37ff 	mov.w	r7, #4294967295
 8005864:	4638      	mov	r0, r7
 8005866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	6922      	ldr	r2, [r4, #16]
 800586c:	1a98      	subs	r0, r3, r2
 800586e:	6963      	ldr	r3, [r4, #20]
 8005870:	b2f6      	uxtb	r6, r6
 8005872:	4283      	cmp	r3, r0
 8005874:	4637      	mov	r7, r6
 8005876:	dc05      	bgt.n	8005884 <__swbuf_r+0x4e>
 8005878:	4621      	mov	r1, r4
 800587a:	4628      	mov	r0, r5
 800587c:	f000 fe8e 	bl	800659c <_fflush_r>
 8005880:	2800      	cmp	r0, #0
 8005882:	d1ed      	bne.n	8005860 <__swbuf_r+0x2a>
 8005884:	68a3      	ldr	r3, [r4, #8]
 8005886:	3b01      	subs	r3, #1
 8005888:	60a3      	str	r3, [r4, #8]
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	6022      	str	r2, [r4, #0]
 8005890:	701e      	strb	r6, [r3, #0]
 8005892:	6962      	ldr	r2, [r4, #20]
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	429a      	cmp	r2, r3
 8005898:	d004      	beq.n	80058a4 <__swbuf_r+0x6e>
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	07db      	lsls	r3, r3, #31
 800589e:	d5e1      	bpl.n	8005864 <__swbuf_r+0x2e>
 80058a0:	2e0a      	cmp	r6, #10
 80058a2:	d1df      	bne.n	8005864 <__swbuf_r+0x2e>
 80058a4:	4621      	mov	r1, r4
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 fe78 	bl	800659c <_fflush_r>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d0d9      	beq.n	8005864 <__swbuf_r+0x2e>
 80058b0:	e7d6      	b.n	8005860 <__swbuf_r+0x2a>
	...

080058b4 <__swsetup_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4b29      	ldr	r3, [pc, #164]	@ (800595c <__swsetup_r+0xa8>)
 80058b8:	4605      	mov	r5, r0
 80058ba:	6818      	ldr	r0, [r3, #0]
 80058bc:	460c      	mov	r4, r1
 80058be:	b118      	cbz	r0, 80058c8 <__swsetup_r+0x14>
 80058c0:	6a03      	ldr	r3, [r0, #32]
 80058c2:	b90b      	cbnz	r3, 80058c8 <__swsetup_r+0x14>
 80058c4:	f7ff feac 	bl	8005620 <__sinit>
 80058c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058cc:	0719      	lsls	r1, r3, #28
 80058ce:	d422      	bmi.n	8005916 <__swsetup_r+0x62>
 80058d0:	06da      	lsls	r2, r3, #27
 80058d2:	d407      	bmi.n	80058e4 <__swsetup_r+0x30>
 80058d4:	2209      	movs	r2, #9
 80058d6:	602a      	str	r2, [r5, #0]
 80058d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	f04f 30ff 	mov.w	r0, #4294967295
 80058e2:	e033      	b.n	800594c <__swsetup_r+0x98>
 80058e4:	0758      	lsls	r0, r3, #29
 80058e6:	d512      	bpl.n	800590e <__swsetup_r+0x5a>
 80058e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058ea:	b141      	cbz	r1, 80058fe <__swsetup_r+0x4a>
 80058ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058f0:	4299      	cmp	r1, r3
 80058f2:	d002      	beq.n	80058fa <__swsetup_r+0x46>
 80058f4:	4628      	mov	r0, r5
 80058f6:	f000 f8af 	bl	8005a58 <_free_r>
 80058fa:	2300      	movs	r3, #0
 80058fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005904:	81a3      	strh	r3, [r4, #12]
 8005906:	2300      	movs	r3, #0
 8005908:	6063      	str	r3, [r4, #4]
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	f043 0308 	orr.w	r3, r3, #8
 8005914:	81a3      	strh	r3, [r4, #12]
 8005916:	6923      	ldr	r3, [r4, #16]
 8005918:	b94b      	cbnz	r3, 800592e <__swsetup_r+0x7a>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005924:	d003      	beq.n	800592e <__swsetup_r+0x7a>
 8005926:	4621      	mov	r1, r4
 8005928:	4628      	mov	r0, r5
 800592a:	f000 fe85 	bl	8006638 <__smakebuf_r>
 800592e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005932:	f013 0201 	ands.w	r2, r3, #1
 8005936:	d00a      	beq.n	800594e <__swsetup_r+0x9a>
 8005938:	2200      	movs	r2, #0
 800593a:	60a2      	str	r2, [r4, #8]
 800593c:	6962      	ldr	r2, [r4, #20]
 800593e:	4252      	negs	r2, r2
 8005940:	61a2      	str	r2, [r4, #24]
 8005942:	6922      	ldr	r2, [r4, #16]
 8005944:	b942      	cbnz	r2, 8005958 <__swsetup_r+0xa4>
 8005946:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800594a:	d1c5      	bne.n	80058d8 <__swsetup_r+0x24>
 800594c:	bd38      	pop	{r3, r4, r5, pc}
 800594e:	0799      	lsls	r1, r3, #30
 8005950:	bf58      	it	pl
 8005952:	6962      	ldrpl	r2, [r4, #20]
 8005954:	60a2      	str	r2, [r4, #8]
 8005956:	e7f4      	b.n	8005942 <__swsetup_r+0x8e>
 8005958:	2000      	movs	r0, #0
 800595a:	e7f7      	b.n	800594c <__swsetup_r+0x98>
 800595c:	20000018 	.word	0x20000018

08005960 <memset>:
 8005960:	4402      	add	r2, r0
 8005962:	4603      	mov	r3, r0
 8005964:	4293      	cmp	r3, r2
 8005966:	d100      	bne.n	800596a <memset+0xa>
 8005968:	4770      	bx	lr
 800596a:	f803 1b01 	strb.w	r1, [r3], #1
 800596e:	e7f9      	b.n	8005964 <memset+0x4>

08005970 <_close_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d06      	ldr	r5, [pc, #24]	@ (800598c <_close_r+0x1c>)
 8005974:	2300      	movs	r3, #0
 8005976:	4604      	mov	r4, r0
 8005978:	4608      	mov	r0, r1
 800597a:	602b      	str	r3, [r5, #0]
 800597c:	f7fc fd11 	bl	80023a2 <_close>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_close_r+0x1a>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b103      	cbz	r3, 800598a <_close_r+0x1a>
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	20000564 	.word	0x20000564

08005990 <_lseek_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d07      	ldr	r5, [pc, #28]	@ (80059b0 <_lseek_r+0x20>)
 8005994:	4604      	mov	r4, r0
 8005996:	4608      	mov	r0, r1
 8005998:	4611      	mov	r1, r2
 800599a:	2200      	movs	r2, #0
 800599c:	602a      	str	r2, [r5, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	f7fc fd26 	bl	80023f0 <_lseek>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_lseek_r+0x1e>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_lseek_r+0x1e>
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	20000564 	.word	0x20000564

080059b4 <_read_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d07      	ldr	r5, [pc, #28]	@ (80059d4 <_read_r+0x20>)
 80059b8:	4604      	mov	r4, r0
 80059ba:	4608      	mov	r0, r1
 80059bc:	4611      	mov	r1, r2
 80059be:	2200      	movs	r2, #0
 80059c0:	602a      	str	r2, [r5, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	f7fc fcd0 	bl	8002368 <_read>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d102      	bne.n	80059d2 <_read_r+0x1e>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	b103      	cbz	r3, 80059d2 <_read_r+0x1e>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	20000564 	.word	0x20000564

080059d8 <_write_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d07      	ldr	r5, [pc, #28]	@ (80059f8 <_write_r+0x20>)
 80059dc:	4604      	mov	r4, r0
 80059de:	4608      	mov	r0, r1
 80059e0:	4611      	mov	r1, r2
 80059e2:	2200      	movs	r2, #0
 80059e4:	602a      	str	r2, [r5, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	f7fc f9f8 	bl	8001ddc <_write>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d102      	bne.n	80059f6 <_write_r+0x1e>
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	b103      	cbz	r3, 80059f6 <_write_r+0x1e>
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	20000564 	.word	0x20000564

080059fc <__errno>:
 80059fc:	4b01      	ldr	r3, [pc, #4]	@ (8005a04 <__errno+0x8>)
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20000018 	.word	0x20000018

08005a08 <__libc_init_array>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005a40 <__libc_init_array+0x38>)
 8005a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005a44 <__libc_init_array+0x3c>)
 8005a0e:	1b64      	subs	r4, r4, r5
 8005a10:	10a4      	asrs	r4, r4, #2
 8005a12:	2600      	movs	r6, #0
 8005a14:	42a6      	cmp	r6, r4
 8005a16:	d109      	bne.n	8005a2c <__libc_init_array+0x24>
 8005a18:	4d0b      	ldr	r5, [pc, #44]	@ (8005a48 <__libc_init_array+0x40>)
 8005a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005a4c <__libc_init_array+0x44>)
 8005a1c:	f000 fed8 	bl	80067d0 <_init>
 8005a20:	1b64      	subs	r4, r4, r5
 8005a22:	10a4      	asrs	r4, r4, #2
 8005a24:	2600      	movs	r6, #0
 8005a26:	42a6      	cmp	r6, r4
 8005a28:	d105      	bne.n	8005a36 <__libc_init_array+0x2e>
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
 8005a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a30:	4798      	blx	r3
 8005a32:	3601      	adds	r6, #1
 8005a34:	e7ee      	b.n	8005a14 <__libc_init_array+0xc>
 8005a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3a:	4798      	blx	r3
 8005a3c:	3601      	adds	r6, #1
 8005a3e:	e7f2      	b.n	8005a26 <__libc_init_array+0x1e>
 8005a40:	08006978 	.word	0x08006978
 8005a44:	08006978 	.word	0x08006978
 8005a48:	08006978 	.word	0x08006978
 8005a4c:	0800697c 	.word	0x0800697c

08005a50 <__retarget_lock_init_recursive>:
 8005a50:	4770      	bx	lr

08005a52 <__retarget_lock_acquire_recursive>:
 8005a52:	4770      	bx	lr

08005a54 <__retarget_lock_release_recursive>:
 8005a54:	4770      	bx	lr
	...

08005a58 <_free_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	2900      	cmp	r1, #0
 8005a5e:	d041      	beq.n	8005ae4 <_free_r+0x8c>
 8005a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a64:	1f0c      	subs	r4, r1, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bfb8      	it	lt
 8005a6a:	18e4      	addlt	r4, r4, r3
 8005a6c:	f000 f8e0 	bl	8005c30 <__malloc_lock>
 8005a70:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae8 <_free_r+0x90>)
 8005a72:	6813      	ldr	r3, [r2, #0]
 8005a74:	b933      	cbnz	r3, 8005a84 <_free_r+0x2c>
 8005a76:	6063      	str	r3, [r4, #4]
 8005a78:	6014      	str	r4, [r2, #0]
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a80:	f000 b8dc 	b.w	8005c3c <__malloc_unlock>
 8005a84:	42a3      	cmp	r3, r4
 8005a86:	d908      	bls.n	8005a9a <_free_r+0x42>
 8005a88:	6820      	ldr	r0, [r4, #0]
 8005a8a:	1821      	adds	r1, r4, r0
 8005a8c:	428b      	cmp	r3, r1
 8005a8e:	bf01      	itttt	eq
 8005a90:	6819      	ldreq	r1, [r3, #0]
 8005a92:	685b      	ldreq	r3, [r3, #4]
 8005a94:	1809      	addeq	r1, r1, r0
 8005a96:	6021      	streq	r1, [r4, #0]
 8005a98:	e7ed      	b.n	8005a76 <_free_r+0x1e>
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	b10b      	cbz	r3, 8005aa4 <_free_r+0x4c>
 8005aa0:	42a3      	cmp	r3, r4
 8005aa2:	d9fa      	bls.n	8005a9a <_free_r+0x42>
 8005aa4:	6811      	ldr	r1, [r2, #0]
 8005aa6:	1850      	adds	r0, r2, r1
 8005aa8:	42a0      	cmp	r0, r4
 8005aaa:	d10b      	bne.n	8005ac4 <_free_r+0x6c>
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	4401      	add	r1, r0
 8005ab0:	1850      	adds	r0, r2, r1
 8005ab2:	4283      	cmp	r3, r0
 8005ab4:	6011      	str	r1, [r2, #0]
 8005ab6:	d1e0      	bne.n	8005a7a <_free_r+0x22>
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	6053      	str	r3, [r2, #4]
 8005abe:	4408      	add	r0, r1
 8005ac0:	6010      	str	r0, [r2, #0]
 8005ac2:	e7da      	b.n	8005a7a <_free_r+0x22>
 8005ac4:	d902      	bls.n	8005acc <_free_r+0x74>
 8005ac6:	230c      	movs	r3, #12
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	e7d6      	b.n	8005a7a <_free_r+0x22>
 8005acc:	6820      	ldr	r0, [r4, #0]
 8005ace:	1821      	adds	r1, r4, r0
 8005ad0:	428b      	cmp	r3, r1
 8005ad2:	bf04      	itt	eq
 8005ad4:	6819      	ldreq	r1, [r3, #0]
 8005ad6:	685b      	ldreq	r3, [r3, #4]
 8005ad8:	6063      	str	r3, [r4, #4]
 8005ada:	bf04      	itt	eq
 8005adc:	1809      	addeq	r1, r1, r0
 8005ade:	6021      	streq	r1, [r4, #0]
 8005ae0:	6054      	str	r4, [r2, #4]
 8005ae2:	e7ca      	b.n	8005a7a <_free_r+0x22>
 8005ae4:	bd38      	pop	{r3, r4, r5, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000570 	.word	0x20000570

08005aec <sbrk_aligned>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	4e0f      	ldr	r6, [pc, #60]	@ (8005b2c <sbrk_aligned+0x40>)
 8005af0:	460c      	mov	r4, r1
 8005af2:	6831      	ldr	r1, [r6, #0]
 8005af4:	4605      	mov	r5, r0
 8005af6:	b911      	cbnz	r1, 8005afe <sbrk_aligned+0x12>
 8005af8:	f000 fe16 	bl	8006728 <_sbrk_r>
 8005afc:	6030      	str	r0, [r6, #0]
 8005afe:	4621      	mov	r1, r4
 8005b00:	4628      	mov	r0, r5
 8005b02:	f000 fe11 	bl	8006728 <_sbrk_r>
 8005b06:	1c43      	adds	r3, r0, #1
 8005b08:	d103      	bne.n	8005b12 <sbrk_aligned+0x26>
 8005b0a:	f04f 34ff 	mov.w	r4, #4294967295
 8005b0e:	4620      	mov	r0, r4
 8005b10:	bd70      	pop	{r4, r5, r6, pc}
 8005b12:	1cc4      	adds	r4, r0, #3
 8005b14:	f024 0403 	bic.w	r4, r4, #3
 8005b18:	42a0      	cmp	r0, r4
 8005b1a:	d0f8      	beq.n	8005b0e <sbrk_aligned+0x22>
 8005b1c:	1a21      	subs	r1, r4, r0
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f000 fe02 	bl	8006728 <_sbrk_r>
 8005b24:	3001      	adds	r0, #1
 8005b26:	d1f2      	bne.n	8005b0e <sbrk_aligned+0x22>
 8005b28:	e7ef      	b.n	8005b0a <sbrk_aligned+0x1e>
 8005b2a:	bf00      	nop
 8005b2c:	2000056c 	.word	0x2000056c

08005b30 <_malloc_r>:
 8005b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b34:	1ccd      	adds	r5, r1, #3
 8005b36:	f025 0503 	bic.w	r5, r5, #3
 8005b3a:	3508      	adds	r5, #8
 8005b3c:	2d0c      	cmp	r5, #12
 8005b3e:	bf38      	it	cc
 8005b40:	250c      	movcc	r5, #12
 8005b42:	2d00      	cmp	r5, #0
 8005b44:	4606      	mov	r6, r0
 8005b46:	db01      	blt.n	8005b4c <_malloc_r+0x1c>
 8005b48:	42a9      	cmp	r1, r5
 8005b4a:	d904      	bls.n	8005b56 <_malloc_r+0x26>
 8005b4c:	230c      	movs	r3, #12
 8005b4e:	6033      	str	r3, [r6, #0]
 8005b50:	2000      	movs	r0, #0
 8005b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c2c <_malloc_r+0xfc>
 8005b5a:	f000 f869 	bl	8005c30 <__malloc_lock>
 8005b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b62:	461c      	mov	r4, r3
 8005b64:	bb44      	cbnz	r4, 8005bb8 <_malloc_r+0x88>
 8005b66:	4629      	mov	r1, r5
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f7ff ffbf 	bl	8005aec <sbrk_aligned>
 8005b6e:	1c43      	adds	r3, r0, #1
 8005b70:	4604      	mov	r4, r0
 8005b72:	d158      	bne.n	8005c26 <_malloc_r+0xf6>
 8005b74:	f8d8 4000 	ldr.w	r4, [r8]
 8005b78:	4627      	mov	r7, r4
 8005b7a:	2f00      	cmp	r7, #0
 8005b7c:	d143      	bne.n	8005c06 <_malloc_r+0xd6>
 8005b7e:	2c00      	cmp	r4, #0
 8005b80:	d04b      	beq.n	8005c1a <_malloc_r+0xea>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	4639      	mov	r1, r7
 8005b86:	4630      	mov	r0, r6
 8005b88:	eb04 0903 	add.w	r9, r4, r3
 8005b8c:	f000 fdcc 	bl	8006728 <_sbrk_r>
 8005b90:	4581      	cmp	r9, r0
 8005b92:	d142      	bne.n	8005c1a <_malloc_r+0xea>
 8005b94:	6821      	ldr	r1, [r4, #0]
 8005b96:	1a6d      	subs	r5, r5, r1
 8005b98:	4629      	mov	r1, r5
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f7ff ffa6 	bl	8005aec <sbrk_aligned>
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d03a      	beq.n	8005c1a <_malloc_r+0xea>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	442b      	add	r3, r5
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	f8d8 3000 	ldr.w	r3, [r8]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	bb62      	cbnz	r2, 8005c0c <_malloc_r+0xdc>
 8005bb2:	f8c8 7000 	str.w	r7, [r8]
 8005bb6:	e00f      	b.n	8005bd8 <_malloc_r+0xa8>
 8005bb8:	6822      	ldr	r2, [r4, #0]
 8005bba:	1b52      	subs	r2, r2, r5
 8005bbc:	d420      	bmi.n	8005c00 <_malloc_r+0xd0>
 8005bbe:	2a0b      	cmp	r2, #11
 8005bc0:	d917      	bls.n	8005bf2 <_malloc_r+0xc2>
 8005bc2:	1961      	adds	r1, r4, r5
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	6025      	str	r5, [r4, #0]
 8005bc8:	bf18      	it	ne
 8005bca:	6059      	strne	r1, [r3, #4]
 8005bcc:	6863      	ldr	r3, [r4, #4]
 8005bce:	bf08      	it	eq
 8005bd0:	f8c8 1000 	streq.w	r1, [r8]
 8005bd4:	5162      	str	r2, [r4, r5]
 8005bd6:	604b      	str	r3, [r1, #4]
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f000 f82f 	bl	8005c3c <__malloc_unlock>
 8005bde:	f104 000b 	add.w	r0, r4, #11
 8005be2:	1d23      	adds	r3, r4, #4
 8005be4:	f020 0007 	bic.w	r0, r0, #7
 8005be8:	1ac2      	subs	r2, r0, r3
 8005bea:	bf1c      	itt	ne
 8005bec:	1a1b      	subne	r3, r3, r0
 8005bee:	50a3      	strne	r3, [r4, r2]
 8005bf0:	e7af      	b.n	8005b52 <_malloc_r+0x22>
 8005bf2:	6862      	ldr	r2, [r4, #4]
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	bf0c      	ite	eq
 8005bf8:	f8c8 2000 	streq.w	r2, [r8]
 8005bfc:	605a      	strne	r2, [r3, #4]
 8005bfe:	e7eb      	b.n	8005bd8 <_malloc_r+0xa8>
 8005c00:	4623      	mov	r3, r4
 8005c02:	6864      	ldr	r4, [r4, #4]
 8005c04:	e7ae      	b.n	8005b64 <_malloc_r+0x34>
 8005c06:	463c      	mov	r4, r7
 8005c08:	687f      	ldr	r7, [r7, #4]
 8005c0a:	e7b6      	b.n	8005b7a <_malloc_r+0x4a>
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d1fb      	bne.n	8005c0c <_malloc_r+0xdc>
 8005c14:	2300      	movs	r3, #0
 8005c16:	6053      	str	r3, [r2, #4]
 8005c18:	e7de      	b.n	8005bd8 <_malloc_r+0xa8>
 8005c1a:	230c      	movs	r3, #12
 8005c1c:	6033      	str	r3, [r6, #0]
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f000 f80c 	bl	8005c3c <__malloc_unlock>
 8005c24:	e794      	b.n	8005b50 <_malloc_r+0x20>
 8005c26:	6005      	str	r5, [r0, #0]
 8005c28:	e7d6      	b.n	8005bd8 <_malloc_r+0xa8>
 8005c2a:	bf00      	nop
 8005c2c:	20000570 	.word	0x20000570

08005c30 <__malloc_lock>:
 8005c30:	4801      	ldr	r0, [pc, #4]	@ (8005c38 <__malloc_lock+0x8>)
 8005c32:	f7ff bf0e 	b.w	8005a52 <__retarget_lock_acquire_recursive>
 8005c36:	bf00      	nop
 8005c38:	20000568 	.word	0x20000568

08005c3c <__malloc_unlock>:
 8005c3c:	4801      	ldr	r0, [pc, #4]	@ (8005c44 <__malloc_unlock+0x8>)
 8005c3e:	f7ff bf09 	b.w	8005a54 <__retarget_lock_release_recursive>
 8005c42:	bf00      	nop
 8005c44:	20000568 	.word	0x20000568

08005c48 <__ssputs_r>:
 8005c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4c:	688e      	ldr	r6, [r1, #8]
 8005c4e:	461f      	mov	r7, r3
 8005c50:	42be      	cmp	r6, r7
 8005c52:	680b      	ldr	r3, [r1, #0]
 8005c54:	4682      	mov	sl, r0
 8005c56:	460c      	mov	r4, r1
 8005c58:	4690      	mov	r8, r2
 8005c5a:	d82d      	bhi.n	8005cb8 <__ssputs_r+0x70>
 8005c5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c64:	d026      	beq.n	8005cb4 <__ssputs_r+0x6c>
 8005c66:	6965      	ldr	r5, [r4, #20]
 8005c68:	6909      	ldr	r1, [r1, #16]
 8005c6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c6e:	eba3 0901 	sub.w	r9, r3, r1
 8005c72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c76:	1c7b      	adds	r3, r7, #1
 8005c78:	444b      	add	r3, r9
 8005c7a:	106d      	asrs	r5, r5, #1
 8005c7c:	429d      	cmp	r5, r3
 8005c7e:	bf38      	it	cc
 8005c80:	461d      	movcc	r5, r3
 8005c82:	0553      	lsls	r3, r2, #21
 8005c84:	d527      	bpl.n	8005cd6 <__ssputs_r+0x8e>
 8005c86:	4629      	mov	r1, r5
 8005c88:	f7ff ff52 	bl	8005b30 <_malloc_r>
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	b360      	cbz	r0, 8005cea <__ssputs_r+0xa2>
 8005c90:	6921      	ldr	r1, [r4, #16]
 8005c92:	464a      	mov	r2, r9
 8005c94:	f000 fd58 	bl	8006748 <memcpy>
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ca2:	81a3      	strh	r3, [r4, #12]
 8005ca4:	6126      	str	r6, [r4, #16]
 8005ca6:	6165      	str	r5, [r4, #20]
 8005ca8:	444e      	add	r6, r9
 8005caa:	eba5 0509 	sub.w	r5, r5, r9
 8005cae:	6026      	str	r6, [r4, #0]
 8005cb0:	60a5      	str	r5, [r4, #8]
 8005cb2:	463e      	mov	r6, r7
 8005cb4:	42be      	cmp	r6, r7
 8005cb6:	d900      	bls.n	8005cba <__ssputs_r+0x72>
 8005cb8:	463e      	mov	r6, r7
 8005cba:	6820      	ldr	r0, [r4, #0]
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	f000 fcf6 	bl	80066b0 <memmove>
 8005cc4:	68a3      	ldr	r3, [r4, #8]
 8005cc6:	1b9b      	subs	r3, r3, r6
 8005cc8:	60a3      	str	r3, [r4, #8]
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	4433      	add	r3, r6
 8005cce:	6023      	str	r3, [r4, #0]
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd6:	462a      	mov	r2, r5
 8005cd8:	f000 fd44 	bl	8006764 <_realloc_r>
 8005cdc:	4606      	mov	r6, r0
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d1e0      	bne.n	8005ca4 <__ssputs_r+0x5c>
 8005ce2:	6921      	ldr	r1, [r4, #16]
 8005ce4:	4650      	mov	r0, sl
 8005ce6:	f7ff feb7 	bl	8005a58 <_free_r>
 8005cea:	230c      	movs	r3, #12
 8005cec:	f8ca 3000 	str.w	r3, [sl]
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cf6:	81a3      	strh	r3, [r4, #12]
 8005cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfc:	e7e9      	b.n	8005cd2 <__ssputs_r+0x8a>
	...

08005d00 <_svfiprintf_r>:
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	4698      	mov	r8, r3
 8005d06:	898b      	ldrh	r3, [r1, #12]
 8005d08:	061b      	lsls	r3, r3, #24
 8005d0a:	b09d      	sub	sp, #116	@ 0x74
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	460d      	mov	r5, r1
 8005d10:	4614      	mov	r4, r2
 8005d12:	d510      	bpl.n	8005d36 <_svfiprintf_r+0x36>
 8005d14:	690b      	ldr	r3, [r1, #16]
 8005d16:	b973      	cbnz	r3, 8005d36 <_svfiprintf_r+0x36>
 8005d18:	2140      	movs	r1, #64	@ 0x40
 8005d1a:	f7ff ff09 	bl	8005b30 <_malloc_r>
 8005d1e:	6028      	str	r0, [r5, #0]
 8005d20:	6128      	str	r0, [r5, #16]
 8005d22:	b930      	cbnz	r0, 8005d32 <_svfiprintf_r+0x32>
 8005d24:	230c      	movs	r3, #12
 8005d26:	603b      	str	r3, [r7, #0]
 8005d28:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2c:	b01d      	add	sp, #116	@ 0x74
 8005d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d32:	2340      	movs	r3, #64	@ 0x40
 8005d34:	616b      	str	r3, [r5, #20]
 8005d36:	2300      	movs	r3, #0
 8005d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d3a:	2320      	movs	r3, #32
 8005d3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d44:	2330      	movs	r3, #48	@ 0x30
 8005d46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ee4 <_svfiprintf_r+0x1e4>
 8005d4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d4e:	f04f 0901 	mov.w	r9, #1
 8005d52:	4623      	mov	r3, r4
 8005d54:	469a      	mov	sl, r3
 8005d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d5a:	b10a      	cbz	r2, 8005d60 <_svfiprintf_r+0x60>
 8005d5c:	2a25      	cmp	r2, #37	@ 0x25
 8005d5e:	d1f9      	bne.n	8005d54 <_svfiprintf_r+0x54>
 8005d60:	ebba 0b04 	subs.w	fp, sl, r4
 8005d64:	d00b      	beq.n	8005d7e <_svfiprintf_r+0x7e>
 8005d66:	465b      	mov	r3, fp
 8005d68:	4622      	mov	r2, r4
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	f7ff ff6b 	bl	8005c48 <__ssputs_r>
 8005d72:	3001      	adds	r0, #1
 8005d74:	f000 80a7 	beq.w	8005ec6 <_svfiprintf_r+0x1c6>
 8005d78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d7a:	445a      	add	r2, fp
 8005d7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 809f 	beq.w	8005ec6 <_svfiprintf_r+0x1c6>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d92:	f10a 0a01 	add.w	sl, sl, #1
 8005d96:	9304      	str	r3, [sp, #16]
 8005d98:	9307      	str	r3, [sp, #28]
 8005d9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005da0:	4654      	mov	r4, sl
 8005da2:	2205      	movs	r2, #5
 8005da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da8:	484e      	ldr	r0, [pc, #312]	@ (8005ee4 <_svfiprintf_r+0x1e4>)
 8005daa:	f7fa fa11 	bl	80001d0 <memchr>
 8005dae:	9a04      	ldr	r2, [sp, #16]
 8005db0:	b9d8      	cbnz	r0, 8005dea <_svfiprintf_r+0xea>
 8005db2:	06d0      	lsls	r0, r2, #27
 8005db4:	bf44      	itt	mi
 8005db6:	2320      	movmi	r3, #32
 8005db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dbc:	0711      	lsls	r1, r2, #28
 8005dbe:	bf44      	itt	mi
 8005dc0:	232b      	movmi	r3, #43	@ 0x2b
 8005dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dca:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dcc:	d015      	beq.n	8005dfa <_svfiprintf_r+0xfa>
 8005dce:	9a07      	ldr	r2, [sp, #28]
 8005dd0:	4654      	mov	r4, sl
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	f04f 0c0a 	mov.w	ip, #10
 8005dd8:	4621      	mov	r1, r4
 8005dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dde:	3b30      	subs	r3, #48	@ 0x30
 8005de0:	2b09      	cmp	r3, #9
 8005de2:	d94b      	bls.n	8005e7c <_svfiprintf_r+0x17c>
 8005de4:	b1b0      	cbz	r0, 8005e14 <_svfiprintf_r+0x114>
 8005de6:	9207      	str	r2, [sp, #28]
 8005de8:	e014      	b.n	8005e14 <_svfiprintf_r+0x114>
 8005dea:	eba0 0308 	sub.w	r3, r0, r8
 8005dee:	fa09 f303 	lsl.w	r3, r9, r3
 8005df2:	4313      	orrs	r3, r2
 8005df4:	9304      	str	r3, [sp, #16]
 8005df6:	46a2      	mov	sl, r4
 8005df8:	e7d2      	b.n	8005da0 <_svfiprintf_r+0xa0>
 8005dfa:	9b03      	ldr	r3, [sp, #12]
 8005dfc:	1d19      	adds	r1, r3, #4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	9103      	str	r1, [sp, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	bfbb      	ittet	lt
 8005e06:	425b      	neglt	r3, r3
 8005e08:	f042 0202 	orrlt.w	r2, r2, #2
 8005e0c:	9307      	strge	r3, [sp, #28]
 8005e0e:	9307      	strlt	r3, [sp, #28]
 8005e10:	bfb8      	it	lt
 8005e12:	9204      	strlt	r2, [sp, #16]
 8005e14:	7823      	ldrb	r3, [r4, #0]
 8005e16:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e18:	d10a      	bne.n	8005e30 <_svfiprintf_r+0x130>
 8005e1a:	7863      	ldrb	r3, [r4, #1]
 8005e1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e1e:	d132      	bne.n	8005e86 <_svfiprintf_r+0x186>
 8005e20:	9b03      	ldr	r3, [sp, #12]
 8005e22:	1d1a      	adds	r2, r3, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	9203      	str	r2, [sp, #12]
 8005e28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e2c:	3402      	adds	r4, #2
 8005e2e:	9305      	str	r3, [sp, #20]
 8005e30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ef4 <_svfiprintf_r+0x1f4>
 8005e34:	7821      	ldrb	r1, [r4, #0]
 8005e36:	2203      	movs	r2, #3
 8005e38:	4650      	mov	r0, sl
 8005e3a:	f7fa f9c9 	bl	80001d0 <memchr>
 8005e3e:	b138      	cbz	r0, 8005e50 <_svfiprintf_r+0x150>
 8005e40:	9b04      	ldr	r3, [sp, #16]
 8005e42:	eba0 000a 	sub.w	r0, r0, sl
 8005e46:	2240      	movs	r2, #64	@ 0x40
 8005e48:	4082      	lsls	r2, r0
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	3401      	adds	r4, #1
 8005e4e:	9304      	str	r3, [sp, #16]
 8005e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e54:	4824      	ldr	r0, [pc, #144]	@ (8005ee8 <_svfiprintf_r+0x1e8>)
 8005e56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e5a:	2206      	movs	r2, #6
 8005e5c:	f7fa f9b8 	bl	80001d0 <memchr>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d036      	beq.n	8005ed2 <_svfiprintf_r+0x1d2>
 8005e64:	4b21      	ldr	r3, [pc, #132]	@ (8005eec <_svfiprintf_r+0x1ec>)
 8005e66:	bb1b      	cbnz	r3, 8005eb0 <_svfiprintf_r+0x1b0>
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	3307      	adds	r3, #7
 8005e6c:	f023 0307 	bic.w	r3, r3, #7
 8005e70:	3308      	adds	r3, #8
 8005e72:	9303      	str	r3, [sp, #12]
 8005e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e76:	4433      	add	r3, r6
 8005e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e7a:	e76a      	b.n	8005d52 <_svfiprintf_r+0x52>
 8005e7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e80:	460c      	mov	r4, r1
 8005e82:	2001      	movs	r0, #1
 8005e84:	e7a8      	b.n	8005dd8 <_svfiprintf_r+0xd8>
 8005e86:	2300      	movs	r3, #0
 8005e88:	3401      	adds	r4, #1
 8005e8a:	9305      	str	r3, [sp, #20]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f04f 0c0a 	mov.w	ip, #10
 8005e92:	4620      	mov	r0, r4
 8005e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e98:	3a30      	subs	r2, #48	@ 0x30
 8005e9a:	2a09      	cmp	r2, #9
 8005e9c:	d903      	bls.n	8005ea6 <_svfiprintf_r+0x1a6>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0c6      	beq.n	8005e30 <_svfiprintf_r+0x130>
 8005ea2:	9105      	str	r1, [sp, #20]
 8005ea4:	e7c4      	b.n	8005e30 <_svfiprintf_r+0x130>
 8005ea6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eaa:	4604      	mov	r4, r0
 8005eac:	2301      	movs	r3, #1
 8005eae:	e7f0      	b.n	8005e92 <_svfiprintf_r+0x192>
 8005eb0:	ab03      	add	r3, sp, #12
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	462a      	mov	r2, r5
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef0 <_svfiprintf_r+0x1f0>)
 8005eb8:	a904      	add	r1, sp, #16
 8005eba:	4638      	mov	r0, r7
 8005ebc:	f3af 8000 	nop.w
 8005ec0:	1c42      	adds	r2, r0, #1
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	d1d6      	bne.n	8005e74 <_svfiprintf_r+0x174>
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	065b      	lsls	r3, r3, #25
 8005eca:	f53f af2d 	bmi.w	8005d28 <_svfiprintf_r+0x28>
 8005ece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ed0:	e72c      	b.n	8005d2c <_svfiprintf_r+0x2c>
 8005ed2:	ab03      	add	r3, sp, #12
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	462a      	mov	r2, r5
 8005ed8:	4b05      	ldr	r3, [pc, #20]	@ (8005ef0 <_svfiprintf_r+0x1f0>)
 8005eda:	a904      	add	r1, sp, #16
 8005edc:	4638      	mov	r0, r7
 8005ede:	f000 f9bb 	bl	8006258 <_printf_i>
 8005ee2:	e7ed      	b.n	8005ec0 <_svfiprintf_r+0x1c0>
 8005ee4:	0800693c 	.word	0x0800693c
 8005ee8:	08006946 	.word	0x08006946
 8005eec:	00000000 	.word	0x00000000
 8005ef0:	08005c49 	.word	0x08005c49
 8005ef4:	08006942 	.word	0x08006942

08005ef8 <__sfputc_r>:
 8005ef8:	6893      	ldr	r3, [r2, #8]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	b410      	push	{r4}
 8005f00:	6093      	str	r3, [r2, #8]
 8005f02:	da08      	bge.n	8005f16 <__sfputc_r+0x1e>
 8005f04:	6994      	ldr	r4, [r2, #24]
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	db01      	blt.n	8005f0e <__sfputc_r+0x16>
 8005f0a:	290a      	cmp	r1, #10
 8005f0c:	d103      	bne.n	8005f16 <__sfputc_r+0x1e>
 8005f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f12:	f7ff bc90 	b.w	8005836 <__swbuf_r>
 8005f16:	6813      	ldr	r3, [r2, #0]
 8005f18:	1c58      	adds	r0, r3, #1
 8005f1a:	6010      	str	r0, [r2, #0]
 8005f1c:	7019      	strb	r1, [r3, #0]
 8005f1e:	4608      	mov	r0, r1
 8005f20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <__sfputs_r>:
 8005f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f28:	4606      	mov	r6, r0
 8005f2a:	460f      	mov	r7, r1
 8005f2c:	4614      	mov	r4, r2
 8005f2e:	18d5      	adds	r5, r2, r3
 8005f30:	42ac      	cmp	r4, r5
 8005f32:	d101      	bne.n	8005f38 <__sfputs_r+0x12>
 8005f34:	2000      	movs	r0, #0
 8005f36:	e007      	b.n	8005f48 <__sfputs_r+0x22>
 8005f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f3c:	463a      	mov	r2, r7
 8005f3e:	4630      	mov	r0, r6
 8005f40:	f7ff ffda 	bl	8005ef8 <__sfputc_r>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d1f3      	bne.n	8005f30 <__sfputs_r+0xa>
 8005f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f4c <_vfiprintf_r>:
 8005f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f50:	460d      	mov	r5, r1
 8005f52:	b09d      	sub	sp, #116	@ 0x74
 8005f54:	4614      	mov	r4, r2
 8005f56:	4698      	mov	r8, r3
 8005f58:	4606      	mov	r6, r0
 8005f5a:	b118      	cbz	r0, 8005f64 <_vfiprintf_r+0x18>
 8005f5c:	6a03      	ldr	r3, [r0, #32]
 8005f5e:	b90b      	cbnz	r3, 8005f64 <_vfiprintf_r+0x18>
 8005f60:	f7ff fb5e 	bl	8005620 <__sinit>
 8005f64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f66:	07d9      	lsls	r1, r3, #31
 8005f68:	d405      	bmi.n	8005f76 <_vfiprintf_r+0x2a>
 8005f6a:	89ab      	ldrh	r3, [r5, #12]
 8005f6c:	059a      	lsls	r2, r3, #22
 8005f6e:	d402      	bmi.n	8005f76 <_vfiprintf_r+0x2a>
 8005f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f72:	f7ff fd6e 	bl	8005a52 <__retarget_lock_acquire_recursive>
 8005f76:	89ab      	ldrh	r3, [r5, #12]
 8005f78:	071b      	lsls	r3, r3, #28
 8005f7a:	d501      	bpl.n	8005f80 <_vfiprintf_r+0x34>
 8005f7c:	692b      	ldr	r3, [r5, #16]
 8005f7e:	b99b      	cbnz	r3, 8005fa8 <_vfiprintf_r+0x5c>
 8005f80:	4629      	mov	r1, r5
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7ff fc96 	bl	80058b4 <__swsetup_r>
 8005f88:	b170      	cbz	r0, 8005fa8 <_vfiprintf_r+0x5c>
 8005f8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f8c:	07dc      	lsls	r4, r3, #31
 8005f8e:	d504      	bpl.n	8005f9a <_vfiprintf_r+0x4e>
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295
 8005f94:	b01d      	add	sp, #116	@ 0x74
 8005f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9a:	89ab      	ldrh	r3, [r5, #12]
 8005f9c:	0598      	lsls	r0, r3, #22
 8005f9e:	d4f7      	bmi.n	8005f90 <_vfiprintf_r+0x44>
 8005fa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fa2:	f7ff fd57 	bl	8005a54 <__retarget_lock_release_recursive>
 8005fa6:	e7f3      	b.n	8005f90 <_vfiprintf_r+0x44>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fac:	2320      	movs	r3, #32
 8005fae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fb6:	2330      	movs	r3, #48	@ 0x30
 8005fb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006168 <_vfiprintf_r+0x21c>
 8005fbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fc0:	f04f 0901 	mov.w	r9, #1
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	469a      	mov	sl, r3
 8005fc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fcc:	b10a      	cbz	r2, 8005fd2 <_vfiprintf_r+0x86>
 8005fce:	2a25      	cmp	r2, #37	@ 0x25
 8005fd0:	d1f9      	bne.n	8005fc6 <_vfiprintf_r+0x7a>
 8005fd2:	ebba 0b04 	subs.w	fp, sl, r4
 8005fd6:	d00b      	beq.n	8005ff0 <_vfiprintf_r+0xa4>
 8005fd8:	465b      	mov	r3, fp
 8005fda:	4622      	mov	r2, r4
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f7ff ffa1 	bl	8005f26 <__sfputs_r>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	f000 80a7 	beq.w	8006138 <_vfiprintf_r+0x1ec>
 8005fea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fec:	445a      	add	r2, fp
 8005fee:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 809f 	beq.w	8006138 <_vfiprintf_r+0x1ec>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8006000:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006004:	f10a 0a01 	add.w	sl, sl, #1
 8006008:	9304      	str	r3, [sp, #16]
 800600a:	9307      	str	r3, [sp, #28]
 800600c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006010:	931a      	str	r3, [sp, #104]	@ 0x68
 8006012:	4654      	mov	r4, sl
 8006014:	2205      	movs	r2, #5
 8006016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800601a:	4853      	ldr	r0, [pc, #332]	@ (8006168 <_vfiprintf_r+0x21c>)
 800601c:	f7fa f8d8 	bl	80001d0 <memchr>
 8006020:	9a04      	ldr	r2, [sp, #16]
 8006022:	b9d8      	cbnz	r0, 800605c <_vfiprintf_r+0x110>
 8006024:	06d1      	lsls	r1, r2, #27
 8006026:	bf44      	itt	mi
 8006028:	2320      	movmi	r3, #32
 800602a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800602e:	0713      	lsls	r3, r2, #28
 8006030:	bf44      	itt	mi
 8006032:	232b      	movmi	r3, #43	@ 0x2b
 8006034:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006038:	f89a 3000 	ldrb.w	r3, [sl]
 800603c:	2b2a      	cmp	r3, #42	@ 0x2a
 800603e:	d015      	beq.n	800606c <_vfiprintf_r+0x120>
 8006040:	9a07      	ldr	r2, [sp, #28]
 8006042:	4654      	mov	r4, sl
 8006044:	2000      	movs	r0, #0
 8006046:	f04f 0c0a 	mov.w	ip, #10
 800604a:	4621      	mov	r1, r4
 800604c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006050:	3b30      	subs	r3, #48	@ 0x30
 8006052:	2b09      	cmp	r3, #9
 8006054:	d94b      	bls.n	80060ee <_vfiprintf_r+0x1a2>
 8006056:	b1b0      	cbz	r0, 8006086 <_vfiprintf_r+0x13a>
 8006058:	9207      	str	r2, [sp, #28]
 800605a:	e014      	b.n	8006086 <_vfiprintf_r+0x13a>
 800605c:	eba0 0308 	sub.w	r3, r0, r8
 8006060:	fa09 f303 	lsl.w	r3, r9, r3
 8006064:	4313      	orrs	r3, r2
 8006066:	9304      	str	r3, [sp, #16]
 8006068:	46a2      	mov	sl, r4
 800606a:	e7d2      	b.n	8006012 <_vfiprintf_r+0xc6>
 800606c:	9b03      	ldr	r3, [sp, #12]
 800606e:	1d19      	adds	r1, r3, #4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	9103      	str	r1, [sp, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	bfbb      	ittet	lt
 8006078:	425b      	neglt	r3, r3
 800607a:	f042 0202 	orrlt.w	r2, r2, #2
 800607e:	9307      	strge	r3, [sp, #28]
 8006080:	9307      	strlt	r3, [sp, #28]
 8006082:	bfb8      	it	lt
 8006084:	9204      	strlt	r2, [sp, #16]
 8006086:	7823      	ldrb	r3, [r4, #0]
 8006088:	2b2e      	cmp	r3, #46	@ 0x2e
 800608a:	d10a      	bne.n	80060a2 <_vfiprintf_r+0x156>
 800608c:	7863      	ldrb	r3, [r4, #1]
 800608e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006090:	d132      	bne.n	80060f8 <_vfiprintf_r+0x1ac>
 8006092:	9b03      	ldr	r3, [sp, #12]
 8006094:	1d1a      	adds	r2, r3, #4
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	9203      	str	r2, [sp, #12]
 800609a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800609e:	3402      	adds	r4, #2
 80060a0:	9305      	str	r3, [sp, #20]
 80060a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006178 <_vfiprintf_r+0x22c>
 80060a6:	7821      	ldrb	r1, [r4, #0]
 80060a8:	2203      	movs	r2, #3
 80060aa:	4650      	mov	r0, sl
 80060ac:	f7fa f890 	bl	80001d0 <memchr>
 80060b0:	b138      	cbz	r0, 80060c2 <_vfiprintf_r+0x176>
 80060b2:	9b04      	ldr	r3, [sp, #16]
 80060b4:	eba0 000a 	sub.w	r0, r0, sl
 80060b8:	2240      	movs	r2, #64	@ 0x40
 80060ba:	4082      	lsls	r2, r0
 80060bc:	4313      	orrs	r3, r2
 80060be:	3401      	adds	r4, #1
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c6:	4829      	ldr	r0, [pc, #164]	@ (800616c <_vfiprintf_r+0x220>)
 80060c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060cc:	2206      	movs	r2, #6
 80060ce:	f7fa f87f 	bl	80001d0 <memchr>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d03f      	beq.n	8006156 <_vfiprintf_r+0x20a>
 80060d6:	4b26      	ldr	r3, [pc, #152]	@ (8006170 <_vfiprintf_r+0x224>)
 80060d8:	bb1b      	cbnz	r3, 8006122 <_vfiprintf_r+0x1d6>
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	3307      	adds	r3, #7
 80060de:	f023 0307 	bic.w	r3, r3, #7
 80060e2:	3308      	adds	r3, #8
 80060e4:	9303      	str	r3, [sp, #12]
 80060e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e8:	443b      	add	r3, r7
 80060ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ec:	e76a      	b.n	8005fc4 <_vfiprintf_r+0x78>
 80060ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80060f2:	460c      	mov	r4, r1
 80060f4:	2001      	movs	r0, #1
 80060f6:	e7a8      	b.n	800604a <_vfiprintf_r+0xfe>
 80060f8:	2300      	movs	r3, #0
 80060fa:	3401      	adds	r4, #1
 80060fc:	9305      	str	r3, [sp, #20]
 80060fe:	4619      	mov	r1, r3
 8006100:	f04f 0c0a 	mov.w	ip, #10
 8006104:	4620      	mov	r0, r4
 8006106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800610a:	3a30      	subs	r2, #48	@ 0x30
 800610c:	2a09      	cmp	r2, #9
 800610e:	d903      	bls.n	8006118 <_vfiprintf_r+0x1cc>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0c6      	beq.n	80060a2 <_vfiprintf_r+0x156>
 8006114:	9105      	str	r1, [sp, #20]
 8006116:	e7c4      	b.n	80060a2 <_vfiprintf_r+0x156>
 8006118:	fb0c 2101 	mla	r1, ip, r1, r2
 800611c:	4604      	mov	r4, r0
 800611e:	2301      	movs	r3, #1
 8006120:	e7f0      	b.n	8006104 <_vfiprintf_r+0x1b8>
 8006122:	ab03      	add	r3, sp, #12
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	462a      	mov	r2, r5
 8006128:	4b12      	ldr	r3, [pc, #72]	@ (8006174 <_vfiprintf_r+0x228>)
 800612a:	a904      	add	r1, sp, #16
 800612c:	4630      	mov	r0, r6
 800612e:	f3af 8000 	nop.w
 8006132:	4607      	mov	r7, r0
 8006134:	1c78      	adds	r0, r7, #1
 8006136:	d1d6      	bne.n	80060e6 <_vfiprintf_r+0x19a>
 8006138:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800613a:	07d9      	lsls	r1, r3, #31
 800613c:	d405      	bmi.n	800614a <_vfiprintf_r+0x1fe>
 800613e:	89ab      	ldrh	r3, [r5, #12]
 8006140:	059a      	lsls	r2, r3, #22
 8006142:	d402      	bmi.n	800614a <_vfiprintf_r+0x1fe>
 8006144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006146:	f7ff fc85 	bl	8005a54 <__retarget_lock_release_recursive>
 800614a:	89ab      	ldrh	r3, [r5, #12]
 800614c:	065b      	lsls	r3, r3, #25
 800614e:	f53f af1f 	bmi.w	8005f90 <_vfiprintf_r+0x44>
 8006152:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006154:	e71e      	b.n	8005f94 <_vfiprintf_r+0x48>
 8006156:	ab03      	add	r3, sp, #12
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	462a      	mov	r2, r5
 800615c:	4b05      	ldr	r3, [pc, #20]	@ (8006174 <_vfiprintf_r+0x228>)
 800615e:	a904      	add	r1, sp, #16
 8006160:	4630      	mov	r0, r6
 8006162:	f000 f879 	bl	8006258 <_printf_i>
 8006166:	e7e4      	b.n	8006132 <_vfiprintf_r+0x1e6>
 8006168:	0800693c 	.word	0x0800693c
 800616c:	08006946 	.word	0x08006946
 8006170:	00000000 	.word	0x00000000
 8006174:	08005f27 	.word	0x08005f27
 8006178:	08006942 	.word	0x08006942

0800617c <_printf_common>:
 800617c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006180:	4616      	mov	r6, r2
 8006182:	4698      	mov	r8, r3
 8006184:	688a      	ldr	r2, [r1, #8]
 8006186:	690b      	ldr	r3, [r1, #16]
 8006188:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800618c:	4293      	cmp	r3, r2
 800618e:	bfb8      	it	lt
 8006190:	4613      	movlt	r3, r2
 8006192:	6033      	str	r3, [r6, #0]
 8006194:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006198:	4607      	mov	r7, r0
 800619a:	460c      	mov	r4, r1
 800619c:	b10a      	cbz	r2, 80061a2 <_printf_common+0x26>
 800619e:	3301      	adds	r3, #1
 80061a0:	6033      	str	r3, [r6, #0]
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	0699      	lsls	r1, r3, #26
 80061a6:	bf42      	ittt	mi
 80061a8:	6833      	ldrmi	r3, [r6, #0]
 80061aa:	3302      	addmi	r3, #2
 80061ac:	6033      	strmi	r3, [r6, #0]
 80061ae:	6825      	ldr	r5, [r4, #0]
 80061b0:	f015 0506 	ands.w	r5, r5, #6
 80061b4:	d106      	bne.n	80061c4 <_printf_common+0x48>
 80061b6:	f104 0a19 	add.w	sl, r4, #25
 80061ba:	68e3      	ldr	r3, [r4, #12]
 80061bc:	6832      	ldr	r2, [r6, #0]
 80061be:	1a9b      	subs	r3, r3, r2
 80061c0:	42ab      	cmp	r3, r5
 80061c2:	dc26      	bgt.n	8006212 <_printf_common+0x96>
 80061c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061c8:	6822      	ldr	r2, [r4, #0]
 80061ca:	3b00      	subs	r3, #0
 80061cc:	bf18      	it	ne
 80061ce:	2301      	movne	r3, #1
 80061d0:	0692      	lsls	r2, r2, #26
 80061d2:	d42b      	bmi.n	800622c <_printf_common+0xb0>
 80061d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061d8:	4641      	mov	r1, r8
 80061da:	4638      	mov	r0, r7
 80061dc:	47c8      	blx	r9
 80061de:	3001      	adds	r0, #1
 80061e0:	d01e      	beq.n	8006220 <_printf_common+0xa4>
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	6922      	ldr	r2, [r4, #16]
 80061e6:	f003 0306 	and.w	r3, r3, #6
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	bf02      	ittt	eq
 80061ee:	68e5      	ldreq	r5, [r4, #12]
 80061f0:	6833      	ldreq	r3, [r6, #0]
 80061f2:	1aed      	subeq	r5, r5, r3
 80061f4:	68a3      	ldr	r3, [r4, #8]
 80061f6:	bf0c      	ite	eq
 80061f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061fc:	2500      	movne	r5, #0
 80061fe:	4293      	cmp	r3, r2
 8006200:	bfc4      	itt	gt
 8006202:	1a9b      	subgt	r3, r3, r2
 8006204:	18ed      	addgt	r5, r5, r3
 8006206:	2600      	movs	r6, #0
 8006208:	341a      	adds	r4, #26
 800620a:	42b5      	cmp	r5, r6
 800620c:	d11a      	bne.n	8006244 <_printf_common+0xc8>
 800620e:	2000      	movs	r0, #0
 8006210:	e008      	b.n	8006224 <_printf_common+0xa8>
 8006212:	2301      	movs	r3, #1
 8006214:	4652      	mov	r2, sl
 8006216:	4641      	mov	r1, r8
 8006218:	4638      	mov	r0, r7
 800621a:	47c8      	blx	r9
 800621c:	3001      	adds	r0, #1
 800621e:	d103      	bne.n	8006228 <_printf_common+0xac>
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006228:	3501      	adds	r5, #1
 800622a:	e7c6      	b.n	80061ba <_printf_common+0x3e>
 800622c:	18e1      	adds	r1, r4, r3
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	2030      	movs	r0, #48	@ 0x30
 8006232:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006236:	4422      	add	r2, r4
 8006238:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800623c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006240:	3302      	adds	r3, #2
 8006242:	e7c7      	b.n	80061d4 <_printf_common+0x58>
 8006244:	2301      	movs	r3, #1
 8006246:	4622      	mov	r2, r4
 8006248:	4641      	mov	r1, r8
 800624a:	4638      	mov	r0, r7
 800624c:	47c8      	blx	r9
 800624e:	3001      	adds	r0, #1
 8006250:	d0e6      	beq.n	8006220 <_printf_common+0xa4>
 8006252:	3601      	adds	r6, #1
 8006254:	e7d9      	b.n	800620a <_printf_common+0x8e>
	...

08006258 <_printf_i>:
 8006258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800625c:	7e0f      	ldrb	r7, [r1, #24]
 800625e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006260:	2f78      	cmp	r7, #120	@ 0x78
 8006262:	4691      	mov	r9, r2
 8006264:	4680      	mov	r8, r0
 8006266:	460c      	mov	r4, r1
 8006268:	469a      	mov	sl, r3
 800626a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800626e:	d807      	bhi.n	8006280 <_printf_i+0x28>
 8006270:	2f62      	cmp	r7, #98	@ 0x62
 8006272:	d80a      	bhi.n	800628a <_printf_i+0x32>
 8006274:	2f00      	cmp	r7, #0
 8006276:	f000 80d1 	beq.w	800641c <_printf_i+0x1c4>
 800627a:	2f58      	cmp	r7, #88	@ 0x58
 800627c:	f000 80b8 	beq.w	80063f0 <_printf_i+0x198>
 8006280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006284:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006288:	e03a      	b.n	8006300 <_printf_i+0xa8>
 800628a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800628e:	2b15      	cmp	r3, #21
 8006290:	d8f6      	bhi.n	8006280 <_printf_i+0x28>
 8006292:	a101      	add	r1, pc, #4	@ (adr r1, 8006298 <_printf_i+0x40>)
 8006294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006298:	080062f1 	.word	0x080062f1
 800629c:	08006305 	.word	0x08006305
 80062a0:	08006281 	.word	0x08006281
 80062a4:	08006281 	.word	0x08006281
 80062a8:	08006281 	.word	0x08006281
 80062ac:	08006281 	.word	0x08006281
 80062b0:	08006305 	.word	0x08006305
 80062b4:	08006281 	.word	0x08006281
 80062b8:	08006281 	.word	0x08006281
 80062bc:	08006281 	.word	0x08006281
 80062c0:	08006281 	.word	0x08006281
 80062c4:	08006403 	.word	0x08006403
 80062c8:	0800632f 	.word	0x0800632f
 80062cc:	080063bd 	.word	0x080063bd
 80062d0:	08006281 	.word	0x08006281
 80062d4:	08006281 	.word	0x08006281
 80062d8:	08006425 	.word	0x08006425
 80062dc:	08006281 	.word	0x08006281
 80062e0:	0800632f 	.word	0x0800632f
 80062e4:	08006281 	.word	0x08006281
 80062e8:	08006281 	.word	0x08006281
 80062ec:	080063c5 	.word	0x080063c5
 80062f0:	6833      	ldr	r3, [r6, #0]
 80062f2:	1d1a      	adds	r2, r3, #4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6032      	str	r2, [r6, #0]
 80062f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006300:	2301      	movs	r3, #1
 8006302:	e09c      	b.n	800643e <_printf_i+0x1e6>
 8006304:	6833      	ldr	r3, [r6, #0]
 8006306:	6820      	ldr	r0, [r4, #0]
 8006308:	1d19      	adds	r1, r3, #4
 800630a:	6031      	str	r1, [r6, #0]
 800630c:	0606      	lsls	r6, r0, #24
 800630e:	d501      	bpl.n	8006314 <_printf_i+0xbc>
 8006310:	681d      	ldr	r5, [r3, #0]
 8006312:	e003      	b.n	800631c <_printf_i+0xc4>
 8006314:	0645      	lsls	r5, r0, #25
 8006316:	d5fb      	bpl.n	8006310 <_printf_i+0xb8>
 8006318:	f9b3 5000 	ldrsh.w	r5, [r3]
 800631c:	2d00      	cmp	r5, #0
 800631e:	da03      	bge.n	8006328 <_printf_i+0xd0>
 8006320:	232d      	movs	r3, #45	@ 0x2d
 8006322:	426d      	negs	r5, r5
 8006324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006328:	4858      	ldr	r0, [pc, #352]	@ (800648c <_printf_i+0x234>)
 800632a:	230a      	movs	r3, #10
 800632c:	e011      	b.n	8006352 <_printf_i+0xfa>
 800632e:	6821      	ldr	r1, [r4, #0]
 8006330:	6833      	ldr	r3, [r6, #0]
 8006332:	0608      	lsls	r0, r1, #24
 8006334:	f853 5b04 	ldr.w	r5, [r3], #4
 8006338:	d402      	bmi.n	8006340 <_printf_i+0xe8>
 800633a:	0649      	lsls	r1, r1, #25
 800633c:	bf48      	it	mi
 800633e:	b2ad      	uxthmi	r5, r5
 8006340:	2f6f      	cmp	r7, #111	@ 0x6f
 8006342:	4852      	ldr	r0, [pc, #328]	@ (800648c <_printf_i+0x234>)
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	bf14      	ite	ne
 8006348:	230a      	movne	r3, #10
 800634a:	2308      	moveq	r3, #8
 800634c:	2100      	movs	r1, #0
 800634e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006352:	6866      	ldr	r6, [r4, #4]
 8006354:	60a6      	str	r6, [r4, #8]
 8006356:	2e00      	cmp	r6, #0
 8006358:	db05      	blt.n	8006366 <_printf_i+0x10e>
 800635a:	6821      	ldr	r1, [r4, #0]
 800635c:	432e      	orrs	r6, r5
 800635e:	f021 0104 	bic.w	r1, r1, #4
 8006362:	6021      	str	r1, [r4, #0]
 8006364:	d04b      	beq.n	80063fe <_printf_i+0x1a6>
 8006366:	4616      	mov	r6, r2
 8006368:	fbb5 f1f3 	udiv	r1, r5, r3
 800636c:	fb03 5711 	mls	r7, r3, r1, r5
 8006370:	5dc7      	ldrb	r7, [r0, r7]
 8006372:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006376:	462f      	mov	r7, r5
 8006378:	42bb      	cmp	r3, r7
 800637a:	460d      	mov	r5, r1
 800637c:	d9f4      	bls.n	8006368 <_printf_i+0x110>
 800637e:	2b08      	cmp	r3, #8
 8006380:	d10b      	bne.n	800639a <_printf_i+0x142>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	07df      	lsls	r7, r3, #31
 8006386:	d508      	bpl.n	800639a <_printf_i+0x142>
 8006388:	6923      	ldr	r3, [r4, #16]
 800638a:	6861      	ldr	r1, [r4, #4]
 800638c:	4299      	cmp	r1, r3
 800638e:	bfde      	ittt	le
 8006390:	2330      	movle	r3, #48	@ 0x30
 8006392:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006396:	f106 36ff 	addle.w	r6, r6, #4294967295
 800639a:	1b92      	subs	r2, r2, r6
 800639c:	6122      	str	r2, [r4, #16]
 800639e:	f8cd a000 	str.w	sl, [sp]
 80063a2:	464b      	mov	r3, r9
 80063a4:	aa03      	add	r2, sp, #12
 80063a6:	4621      	mov	r1, r4
 80063a8:	4640      	mov	r0, r8
 80063aa:	f7ff fee7 	bl	800617c <_printf_common>
 80063ae:	3001      	adds	r0, #1
 80063b0:	d14a      	bne.n	8006448 <_printf_i+0x1f0>
 80063b2:	f04f 30ff 	mov.w	r0, #4294967295
 80063b6:	b004      	add	sp, #16
 80063b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	f043 0320 	orr.w	r3, r3, #32
 80063c2:	6023      	str	r3, [r4, #0]
 80063c4:	4832      	ldr	r0, [pc, #200]	@ (8006490 <_printf_i+0x238>)
 80063c6:	2778      	movs	r7, #120	@ 0x78
 80063c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	6831      	ldr	r1, [r6, #0]
 80063d0:	061f      	lsls	r7, r3, #24
 80063d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80063d6:	d402      	bmi.n	80063de <_printf_i+0x186>
 80063d8:	065f      	lsls	r7, r3, #25
 80063da:	bf48      	it	mi
 80063dc:	b2ad      	uxthmi	r5, r5
 80063de:	6031      	str	r1, [r6, #0]
 80063e0:	07d9      	lsls	r1, r3, #31
 80063e2:	bf44      	itt	mi
 80063e4:	f043 0320 	orrmi.w	r3, r3, #32
 80063e8:	6023      	strmi	r3, [r4, #0]
 80063ea:	b11d      	cbz	r5, 80063f4 <_printf_i+0x19c>
 80063ec:	2310      	movs	r3, #16
 80063ee:	e7ad      	b.n	800634c <_printf_i+0xf4>
 80063f0:	4826      	ldr	r0, [pc, #152]	@ (800648c <_printf_i+0x234>)
 80063f2:	e7e9      	b.n	80063c8 <_printf_i+0x170>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	f023 0320 	bic.w	r3, r3, #32
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	e7f6      	b.n	80063ec <_printf_i+0x194>
 80063fe:	4616      	mov	r6, r2
 8006400:	e7bd      	b.n	800637e <_printf_i+0x126>
 8006402:	6833      	ldr	r3, [r6, #0]
 8006404:	6825      	ldr	r5, [r4, #0]
 8006406:	6961      	ldr	r1, [r4, #20]
 8006408:	1d18      	adds	r0, r3, #4
 800640a:	6030      	str	r0, [r6, #0]
 800640c:	062e      	lsls	r6, r5, #24
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	d501      	bpl.n	8006416 <_printf_i+0x1be>
 8006412:	6019      	str	r1, [r3, #0]
 8006414:	e002      	b.n	800641c <_printf_i+0x1c4>
 8006416:	0668      	lsls	r0, r5, #25
 8006418:	d5fb      	bpl.n	8006412 <_printf_i+0x1ba>
 800641a:	8019      	strh	r1, [r3, #0]
 800641c:	2300      	movs	r3, #0
 800641e:	6123      	str	r3, [r4, #16]
 8006420:	4616      	mov	r6, r2
 8006422:	e7bc      	b.n	800639e <_printf_i+0x146>
 8006424:	6833      	ldr	r3, [r6, #0]
 8006426:	1d1a      	adds	r2, r3, #4
 8006428:	6032      	str	r2, [r6, #0]
 800642a:	681e      	ldr	r6, [r3, #0]
 800642c:	6862      	ldr	r2, [r4, #4]
 800642e:	2100      	movs	r1, #0
 8006430:	4630      	mov	r0, r6
 8006432:	f7f9 fecd 	bl	80001d0 <memchr>
 8006436:	b108      	cbz	r0, 800643c <_printf_i+0x1e4>
 8006438:	1b80      	subs	r0, r0, r6
 800643a:	6060      	str	r0, [r4, #4]
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	6123      	str	r3, [r4, #16]
 8006440:	2300      	movs	r3, #0
 8006442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006446:	e7aa      	b.n	800639e <_printf_i+0x146>
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	4632      	mov	r2, r6
 800644c:	4649      	mov	r1, r9
 800644e:	4640      	mov	r0, r8
 8006450:	47d0      	blx	sl
 8006452:	3001      	adds	r0, #1
 8006454:	d0ad      	beq.n	80063b2 <_printf_i+0x15a>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	079b      	lsls	r3, r3, #30
 800645a:	d413      	bmi.n	8006484 <_printf_i+0x22c>
 800645c:	68e0      	ldr	r0, [r4, #12]
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	4298      	cmp	r0, r3
 8006462:	bfb8      	it	lt
 8006464:	4618      	movlt	r0, r3
 8006466:	e7a6      	b.n	80063b6 <_printf_i+0x15e>
 8006468:	2301      	movs	r3, #1
 800646a:	4632      	mov	r2, r6
 800646c:	4649      	mov	r1, r9
 800646e:	4640      	mov	r0, r8
 8006470:	47d0      	blx	sl
 8006472:	3001      	adds	r0, #1
 8006474:	d09d      	beq.n	80063b2 <_printf_i+0x15a>
 8006476:	3501      	adds	r5, #1
 8006478:	68e3      	ldr	r3, [r4, #12]
 800647a:	9903      	ldr	r1, [sp, #12]
 800647c:	1a5b      	subs	r3, r3, r1
 800647e:	42ab      	cmp	r3, r5
 8006480:	dcf2      	bgt.n	8006468 <_printf_i+0x210>
 8006482:	e7eb      	b.n	800645c <_printf_i+0x204>
 8006484:	2500      	movs	r5, #0
 8006486:	f104 0619 	add.w	r6, r4, #25
 800648a:	e7f5      	b.n	8006478 <_printf_i+0x220>
 800648c:	0800694d 	.word	0x0800694d
 8006490:	0800695e 	.word	0x0800695e

08006494 <__sflush_r>:
 8006494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800649c:	0716      	lsls	r6, r2, #28
 800649e:	4605      	mov	r5, r0
 80064a0:	460c      	mov	r4, r1
 80064a2:	d454      	bmi.n	800654e <__sflush_r+0xba>
 80064a4:	684b      	ldr	r3, [r1, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	dc02      	bgt.n	80064b0 <__sflush_r+0x1c>
 80064aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dd48      	ble.n	8006542 <__sflush_r+0xae>
 80064b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064b2:	2e00      	cmp	r6, #0
 80064b4:	d045      	beq.n	8006542 <__sflush_r+0xae>
 80064b6:	2300      	movs	r3, #0
 80064b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064bc:	682f      	ldr	r7, [r5, #0]
 80064be:	6a21      	ldr	r1, [r4, #32]
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	d030      	beq.n	8006526 <__sflush_r+0x92>
 80064c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	0759      	lsls	r1, r3, #29
 80064ca:	d505      	bpl.n	80064d8 <__sflush_r+0x44>
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064d2:	b10b      	cbz	r3, 80064d8 <__sflush_r+0x44>
 80064d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064d6:	1ad2      	subs	r2, r2, r3
 80064d8:	2300      	movs	r3, #0
 80064da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064dc:	6a21      	ldr	r1, [r4, #32]
 80064de:	4628      	mov	r0, r5
 80064e0:	47b0      	blx	r6
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	d106      	bne.n	80064f6 <__sflush_r+0x62>
 80064e8:	6829      	ldr	r1, [r5, #0]
 80064ea:	291d      	cmp	r1, #29
 80064ec:	d82b      	bhi.n	8006546 <__sflush_r+0xb2>
 80064ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006598 <__sflush_r+0x104>)
 80064f0:	40ca      	lsrs	r2, r1
 80064f2:	07d6      	lsls	r6, r2, #31
 80064f4:	d527      	bpl.n	8006546 <__sflush_r+0xb2>
 80064f6:	2200      	movs	r2, #0
 80064f8:	6062      	str	r2, [r4, #4]
 80064fa:	04d9      	lsls	r1, r3, #19
 80064fc:	6922      	ldr	r2, [r4, #16]
 80064fe:	6022      	str	r2, [r4, #0]
 8006500:	d504      	bpl.n	800650c <__sflush_r+0x78>
 8006502:	1c42      	adds	r2, r0, #1
 8006504:	d101      	bne.n	800650a <__sflush_r+0x76>
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	b903      	cbnz	r3, 800650c <__sflush_r+0x78>
 800650a:	6560      	str	r0, [r4, #84]	@ 0x54
 800650c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800650e:	602f      	str	r7, [r5, #0]
 8006510:	b1b9      	cbz	r1, 8006542 <__sflush_r+0xae>
 8006512:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006516:	4299      	cmp	r1, r3
 8006518:	d002      	beq.n	8006520 <__sflush_r+0x8c>
 800651a:	4628      	mov	r0, r5
 800651c:	f7ff fa9c 	bl	8005a58 <_free_r>
 8006520:	2300      	movs	r3, #0
 8006522:	6363      	str	r3, [r4, #52]	@ 0x34
 8006524:	e00d      	b.n	8006542 <__sflush_r+0xae>
 8006526:	2301      	movs	r3, #1
 8006528:	4628      	mov	r0, r5
 800652a:	47b0      	blx	r6
 800652c:	4602      	mov	r2, r0
 800652e:	1c50      	adds	r0, r2, #1
 8006530:	d1c9      	bne.n	80064c6 <__sflush_r+0x32>
 8006532:	682b      	ldr	r3, [r5, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0c6      	beq.n	80064c6 <__sflush_r+0x32>
 8006538:	2b1d      	cmp	r3, #29
 800653a:	d001      	beq.n	8006540 <__sflush_r+0xac>
 800653c:	2b16      	cmp	r3, #22
 800653e:	d11e      	bne.n	800657e <__sflush_r+0xea>
 8006540:	602f      	str	r7, [r5, #0]
 8006542:	2000      	movs	r0, #0
 8006544:	e022      	b.n	800658c <__sflush_r+0xf8>
 8006546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800654a:	b21b      	sxth	r3, r3
 800654c:	e01b      	b.n	8006586 <__sflush_r+0xf2>
 800654e:	690f      	ldr	r7, [r1, #16]
 8006550:	2f00      	cmp	r7, #0
 8006552:	d0f6      	beq.n	8006542 <__sflush_r+0xae>
 8006554:	0793      	lsls	r3, r2, #30
 8006556:	680e      	ldr	r6, [r1, #0]
 8006558:	bf08      	it	eq
 800655a:	694b      	ldreq	r3, [r1, #20]
 800655c:	600f      	str	r7, [r1, #0]
 800655e:	bf18      	it	ne
 8006560:	2300      	movne	r3, #0
 8006562:	eba6 0807 	sub.w	r8, r6, r7
 8006566:	608b      	str	r3, [r1, #8]
 8006568:	f1b8 0f00 	cmp.w	r8, #0
 800656c:	dde9      	ble.n	8006542 <__sflush_r+0xae>
 800656e:	6a21      	ldr	r1, [r4, #32]
 8006570:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006572:	4643      	mov	r3, r8
 8006574:	463a      	mov	r2, r7
 8006576:	4628      	mov	r0, r5
 8006578:	47b0      	blx	r6
 800657a:	2800      	cmp	r0, #0
 800657c:	dc08      	bgt.n	8006590 <__sflush_r+0xfc>
 800657e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006586:	81a3      	strh	r3, [r4, #12]
 8006588:	f04f 30ff 	mov.w	r0, #4294967295
 800658c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006590:	4407      	add	r7, r0
 8006592:	eba8 0800 	sub.w	r8, r8, r0
 8006596:	e7e7      	b.n	8006568 <__sflush_r+0xd4>
 8006598:	20400001 	.word	0x20400001

0800659c <_fflush_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	690b      	ldr	r3, [r1, #16]
 80065a0:	4605      	mov	r5, r0
 80065a2:	460c      	mov	r4, r1
 80065a4:	b913      	cbnz	r3, 80065ac <_fflush_r+0x10>
 80065a6:	2500      	movs	r5, #0
 80065a8:	4628      	mov	r0, r5
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	b118      	cbz	r0, 80065b6 <_fflush_r+0x1a>
 80065ae:	6a03      	ldr	r3, [r0, #32]
 80065b0:	b90b      	cbnz	r3, 80065b6 <_fflush_r+0x1a>
 80065b2:	f7ff f835 	bl	8005620 <__sinit>
 80065b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f3      	beq.n	80065a6 <_fflush_r+0xa>
 80065be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065c0:	07d0      	lsls	r0, r2, #31
 80065c2:	d404      	bmi.n	80065ce <_fflush_r+0x32>
 80065c4:	0599      	lsls	r1, r3, #22
 80065c6:	d402      	bmi.n	80065ce <_fflush_r+0x32>
 80065c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ca:	f7ff fa42 	bl	8005a52 <__retarget_lock_acquire_recursive>
 80065ce:	4628      	mov	r0, r5
 80065d0:	4621      	mov	r1, r4
 80065d2:	f7ff ff5f 	bl	8006494 <__sflush_r>
 80065d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065d8:	07da      	lsls	r2, r3, #31
 80065da:	4605      	mov	r5, r0
 80065dc:	d4e4      	bmi.n	80065a8 <_fflush_r+0xc>
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	059b      	lsls	r3, r3, #22
 80065e2:	d4e1      	bmi.n	80065a8 <_fflush_r+0xc>
 80065e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065e6:	f7ff fa35 	bl	8005a54 <__retarget_lock_release_recursive>
 80065ea:	e7dd      	b.n	80065a8 <_fflush_r+0xc>

080065ec <__swhatbuf_r>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	460c      	mov	r4, r1
 80065f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f4:	2900      	cmp	r1, #0
 80065f6:	b096      	sub	sp, #88	@ 0x58
 80065f8:	4615      	mov	r5, r2
 80065fa:	461e      	mov	r6, r3
 80065fc:	da0d      	bge.n	800661a <__swhatbuf_r+0x2e>
 80065fe:	89a3      	ldrh	r3, [r4, #12]
 8006600:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006604:	f04f 0100 	mov.w	r1, #0
 8006608:	bf14      	ite	ne
 800660a:	2340      	movne	r3, #64	@ 0x40
 800660c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006610:	2000      	movs	r0, #0
 8006612:	6031      	str	r1, [r6, #0]
 8006614:	602b      	str	r3, [r5, #0]
 8006616:	b016      	add	sp, #88	@ 0x58
 8006618:	bd70      	pop	{r4, r5, r6, pc}
 800661a:	466a      	mov	r2, sp
 800661c:	f000 f862 	bl	80066e4 <_fstat_r>
 8006620:	2800      	cmp	r0, #0
 8006622:	dbec      	blt.n	80065fe <__swhatbuf_r+0x12>
 8006624:	9901      	ldr	r1, [sp, #4]
 8006626:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800662a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800662e:	4259      	negs	r1, r3
 8006630:	4159      	adcs	r1, r3
 8006632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006636:	e7eb      	b.n	8006610 <__swhatbuf_r+0x24>

08006638 <__smakebuf_r>:
 8006638:	898b      	ldrh	r3, [r1, #12]
 800663a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800663c:	079d      	lsls	r5, r3, #30
 800663e:	4606      	mov	r6, r0
 8006640:	460c      	mov	r4, r1
 8006642:	d507      	bpl.n	8006654 <__smakebuf_r+0x1c>
 8006644:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	6123      	str	r3, [r4, #16]
 800664c:	2301      	movs	r3, #1
 800664e:	6163      	str	r3, [r4, #20]
 8006650:	b003      	add	sp, #12
 8006652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006654:	ab01      	add	r3, sp, #4
 8006656:	466a      	mov	r2, sp
 8006658:	f7ff ffc8 	bl	80065ec <__swhatbuf_r>
 800665c:	9f00      	ldr	r7, [sp, #0]
 800665e:	4605      	mov	r5, r0
 8006660:	4639      	mov	r1, r7
 8006662:	4630      	mov	r0, r6
 8006664:	f7ff fa64 	bl	8005b30 <_malloc_r>
 8006668:	b948      	cbnz	r0, 800667e <__smakebuf_r+0x46>
 800666a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800666e:	059a      	lsls	r2, r3, #22
 8006670:	d4ee      	bmi.n	8006650 <__smakebuf_r+0x18>
 8006672:	f023 0303 	bic.w	r3, r3, #3
 8006676:	f043 0302 	orr.w	r3, r3, #2
 800667a:	81a3      	strh	r3, [r4, #12]
 800667c:	e7e2      	b.n	8006644 <__smakebuf_r+0xc>
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	6020      	str	r0, [r4, #0]
 8006682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006686:	81a3      	strh	r3, [r4, #12]
 8006688:	9b01      	ldr	r3, [sp, #4]
 800668a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800668e:	b15b      	cbz	r3, 80066a8 <__smakebuf_r+0x70>
 8006690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006694:	4630      	mov	r0, r6
 8006696:	f000 f837 	bl	8006708 <_isatty_r>
 800669a:	b128      	cbz	r0, 80066a8 <__smakebuf_r+0x70>
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	f023 0303 	bic.w	r3, r3, #3
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	81a3      	strh	r3, [r4, #12]
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	431d      	orrs	r5, r3
 80066ac:	81a5      	strh	r5, [r4, #12]
 80066ae:	e7cf      	b.n	8006650 <__smakebuf_r+0x18>

080066b0 <memmove>:
 80066b0:	4288      	cmp	r0, r1
 80066b2:	b510      	push	{r4, lr}
 80066b4:	eb01 0402 	add.w	r4, r1, r2
 80066b8:	d902      	bls.n	80066c0 <memmove+0x10>
 80066ba:	4284      	cmp	r4, r0
 80066bc:	4623      	mov	r3, r4
 80066be:	d807      	bhi.n	80066d0 <memmove+0x20>
 80066c0:	1e43      	subs	r3, r0, #1
 80066c2:	42a1      	cmp	r1, r4
 80066c4:	d008      	beq.n	80066d8 <memmove+0x28>
 80066c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066ce:	e7f8      	b.n	80066c2 <memmove+0x12>
 80066d0:	4402      	add	r2, r0
 80066d2:	4601      	mov	r1, r0
 80066d4:	428a      	cmp	r2, r1
 80066d6:	d100      	bne.n	80066da <memmove+0x2a>
 80066d8:	bd10      	pop	{r4, pc}
 80066da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066e2:	e7f7      	b.n	80066d4 <memmove+0x24>

080066e4 <_fstat_r>:
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	4d07      	ldr	r5, [pc, #28]	@ (8006704 <_fstat_r+0x20>)
 80066e8:	2300      	movs	r3, #0
 80066ea:	4604      	mov	r4, r0
 80066ec:	4608      	mov	r0, r1
 80066ee:	4611      	mov	r1, r2
 80066f0:	602b      	str	r3, [r5, #0]
 80066f2:	f7fb fe62 	bl	80023ba <_fstat>
 80066f6:	1c43      	adds	r3, r0, #1
 80066f8:	d102      	bne.n	8006700 <_fstat_r+0x1c>
 80066fa:	682b      	ldr	r3, [r5, #0]
 80066fc:	b103      	cbz	r3, 8006700 <_fstat_r+0x1c>
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	bd38      	pop	{r3, r4, r5, pc}
 8006702:	bf00      	nop
 8006704:	20000564 	.word	0x20000564

08006708 <_isatty_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4d06      	ldr	r5, [pc, #24]	@ (8006724 <_isatty_r+0x1c>)
 800670c:	2300      	movs	r3, #0
 800670e:	4604      	mov	r4, r0
 8006710:	4608      	mov	r0, r1
 8006712:	602b      	str	r3, [r5, #0]
 8006714:	f7fb fe61 	bl	80023da <_isatty>
 8006718:	1c43      	adds	r3, r0, #1
 800671a:	d102      	bne.n	8006722 <_isatty_r+0x1a>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	b103      	cbz	r3, 8006722 <_isatty_r+0x1a>
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	bd38      	pop	{r3, r4, r5, pc}
 8006724:	20000564 	.word	0x20000564

08006728 <_sbrk_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4d06      	ldr	r5, [pc, #24]	@ (8006744 <_sbrk_r+0x1c>)
 800672c:	2300      	movs	r3, #0
 800672e:	4604      	mov	r4, r0
 8006730:	4608      	mov	r0, r1
 8006732:	602b      	str	r3, [r5, #0]
 8006734:	f7fb fe6a 	bl	800240c <_sbrk>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d102      	bne.n	8006742 <_sbrk_r+0x1a>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	b103      	cbz	r3, 8006742 <_sbrk_r+0x1a>
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	20000564 	.word	0x20000564

08006748 <memcpy>:
 8006748:	440a      	add	r2, r1
 800674a:	4291      	cmp	r1, r2
 800674c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006750:	d100      	bne.n	8006754 <memcpy+0xc>
 8006752:	4770      	bx	lr
 8006754:	b510      	push	{r4, lr}
 8006756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800675a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800675e:	4291      	cmp	r1, r2
 8006760:	d1f9      	bne.n	8006756 <memcpy+0xe>
 8006762:	bd10      	pop	{r4, pc}

08006764 <_realloc_r>:
 8006764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006768:	4607      	mov	r7, r0
 800676a:	4614      	mov	r4, r2
 800676c:	460d      	mov	r5, r1
 800676e:	b921      	cbnz	r1, 800677a <_realloc_r+0x16>
 8006770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006774:	4611      	mov	r1, r2
 8006776:	f7ff b9db 	b.w	8005b30 <_malloc_r>
 800677a:	b92a      	cbnz	r2, 8006788 <_realloc_r+0x24>
 800677c:	f7ff f96c 	bl	8005a58 <_free_r>
 8006780:	4625      	mov	r5, r4
 8006782:	4628      	mov	r0, r5
 8006784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006788:	f000 f81a 	bl	80067c0 <_malloc_usable_size_r>
 800678c:	4284      	cmp	r4, r0
 800678e:	4606      	mov	r6, r0
 8006790:	d802      	bhi.n	8006798 <_realloc_r+0x34>
 8006792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006796:	d8f4      	bhi.n	8006782 <_realloc_r+0x1e>
 8006798:	4621      	mov	r1, r4
 800679a:	4638      	mov	r0, r7
 800679c:	f7ff f9c8 	bl	8005b30 <_malloc_r>
 80067a0:	4680      	mov	r8, r0
 80067a2:	b908      	cbnz	r0, 80067a8 <_realloc_r+0x44>
 80067a4:	4645      	mov	r5, r8
 80067a6:	e7ec      	b.n	8006782 <_realloc_r+0x1e>
 80067a8:	42b4      	cmp	r4, r6
 80067aa:	4622      	mov	r2, r4
 80067ac:	4629      	mov	r1, r5
 80067ae:	bf28      	it	cs
 80067b0:	4632      	movcs	r2, r6
 80067b2:	f7ff ffc9 	bl	8006748 <memcpy>
 80067b6:	4629      	mov	r1, r5
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7ff f94d 	bl	8005a58 <_free_r>
 80067be:	e7f1      	b.n	80067a4 <_realloc_r+0x40>

080067c0 <_malloc_usable_size_r>:
 80067c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c4:	1f18      	subs	r0, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bfbc      	itt	lt
 80067ca:	580b      	ldrlt	r3, [r1, r0]
 80067cc:	18c0      	addlt	r0, r0, r3
 80067ce:	4770      	bx	lr

080067d0 <_init>:
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d2:	bf00      	nop
 80067d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d6:	bc08      	pop	{r3}
 80067d8:	469e      	mov	lr, r3
 80067da:	4770      	bx	lr

080067dc <_fini>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	bf00      	nop
 80067e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e2:	bc08      	pop	{r3}
 80067e4:	469e      	mov	lr, r3
 80067e6:	4770      	bx	lr
