
DShot600_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009664  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080097f4  080097f4  0000a7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800998c  0800998c  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800998c  0800998c  0000a98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009994  08009994  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009994  08009994  0000a994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009998  08009998  0000a998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800999c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b070  2**0
                  CONTENTS
 10 .bss          00006134  20000070  20000070  0000b070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200061a4  200061a4  0000b070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e53  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003742  00000000  00000000  00024ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  00028638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001118  00000000  00000000  00029c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004418  00000000  00000000  0002ad50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b33  00000000  00000000  0002f168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd4de  00000000  00000000  00046c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114179  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006754  00000000  00000000  001141bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0011a910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097dc 	.word	0x080097dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080097dc 	.word	0x080097dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b988 	b.w	8000d74 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	468e      	mov	lr, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	4688      	mov	r8, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4617      	mov	r7, r2
 8000a90:	d962      	bls.n	8000b58 <__udivmoddi4+0xdc>
 8000a92:	fab2 f682 	clz	r6, r2
 8000a96:	b14e      	cbz	r6, 8000aac <__udivmoddi4+0x30>
 8000a98:	f1c6 0320 	rsb	r3, r6, #32
 8000a9c:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa0:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa4:	40b7      	lsls	r7, r6
 8000aa6:	ea43 0808 	orr.w	r8, r3, r8
 8000aaa:	40b4      	lsls	r4, r6
 8000aac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab0:	fa1f fc87 	uxth.w	ip, r7
 8000ab4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab8:	0c23      	lsrs	r3, r4, #16
 8000aba:	fb0e 8811 	mls	r8, lr, r1, r8
 8000abe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0x62>
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ad0:	f080 80ea 	bcs.w	8000ca8 <__udivmoddi4+0x22c>
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f240 80e7 	bls.w	8000ca8 <__udivmoddi4+0x22c>
 8000ada:	3902      	subs	r1, #2
 8000adc:	443b      	add	r3, r7
 8000ade:	1a9a      	subs	r2, r3, r2
 8000ae0:	b2a3      	uxth	r3, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aee:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af2:	459c      	cmp	ip, r3
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x8e>
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afc:	f080 80d6 	bcs.w	8000cac <__udivmoddi4+0x230>
 8000b00:	459c      	cmp	ip, r3
 8000b02:	f240 80d3 	bls.w	8000cac <__udivmoddi4+0x230>
 8000b06:	443b      	add	r3, r7
 8000b08:	3802      	subs	r0, #2
 8000b0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b0e:	eba3 030c 	sub.w	r3, r3, ip
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11d      	cbz	r5, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40f3      	lsrs	r3, r6
 8000b18:	2200      	movs	r2, #0
 8000b1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d905      	bls.n	8000b32 <__udivmoddi4+0xb6>
 8000b26:	b10d      	cbz	r5, 8000b2c <__udivmoddi4+0xb0>
 8000b28:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e7f5      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b32:	fab3 f183 	clz	r1, r3
 8000b36:	2900      	cmp	r1, #0
 8000b38:	d146      	bne.n	8000bc8 <__udivmoddi4+0x14c>
 8000b3a:	4573      	cmp	r3, lr
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xc8>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 8105 	bhi.w	8000d4e <__udivmoddi4+0x2d2>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4690      	mov	r8, r2
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0e5      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b52:	e9c5 4800 	strd	r4, r8, [r5]
 8000b56:	e7e2      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	f000 8090 	beq.w	8000c7e <__udivmoddi4+0x202>
 8000b5e:	fab2 f682 	clz	r6, r2
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f040 80a4 	bne.w	8000cb0 <__udivmoddi4+0x234>
 8000b68:	1a8a      	subs	r2, r1, r2
 8000b6a:	0c03      	lsrs	r3, r0, #16
 8000b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b70:	b280      	uxth	r0, r0
 8000b72:	b2bc      	uxth	r4, r7
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b82:	fb04 f20c 	mul.w	r2, r4, ip
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d907      	bls.n	8000b9a <__udivmoddi4+0x11e>
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x11c>
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f200 80e0 	bhi.w	8000d58 <__udivmoddi4+0x2dc>
 8000b98:	46c4      	mov	ip, r8
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ba4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba8:	fb02 f404 	mul.w	r4, r2, r4
 8000bac:	429c      	cmp	r4, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x144>
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x142>
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	f200 80ca 	bhi.w	8000d52 <__udivmoddi4+0x2d6>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	1b1b      	subs	r3, r3, r4
 8000bc2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bc8:	f1c1 0620 	rsb	r6, r1, #32
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd2:	431f      	orrs	r7, r3
 8000bd4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bdc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	fa1f fc87 	uxth.w	ip, r7
 8000bee:	fbbe f0f9 	udiv	r0, lr, r9
 8000bf2:	0c1c      	lsrs	r4, r3, #16
 8000bf4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bfc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x1a0>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c0e:	f080 809c 	bcs.w	8000d4a <__udivmoddi4+0x2ce>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f240 8099 	bls.w	8000d4a <__udivmoddi4+0x2ce>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	eba4 040e 	sub.w	r4, r4, lr
 8000c20:	fa1f fe83 	uxth.w	lr, r3
 8000c24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c28:	fb09 4413 	mls	r4, r9, r3, r4
 8000c2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1ce>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c3e:	f080 8082 	bcs.w	8000d46 <__udivmoddi4+0x2ca>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d97f      	bls.n	8000d46 <__udivmoddi4+0x2ca>
 8000c46:	3b02      	subs	r3, #2
 8000c48:	443c      	add	r4, r7
 8000c4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c56:	4564      	cmp	r4, ip
 8000c58:	4673      	mov	r3, lr
 8000c5a:	46e1      	mov	r9, ip
 8000c5c:	d362      	bcc.n	8000d24 <__udivmoddi4+0x2a8>
 8000c5e:	d05f      	beq.n	8000d20 <__udivmoddi4+0x2a4>
 8000c60:	b15d      	cbz	r5, 8000c7a <__udivmoddi4+0x1fe>
 8000c62:	ebb8 0203 	subs.w	r2, r8, r3
 8000c66:	eb64 0409 	sbc.w	r4, r4, r9
 8000c6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c72:	431e      	orrs	r6, r3
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	e74f      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000c7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c82:	0c01      	lsrs	r1, r0, #16
 8000c84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4638      	mov	r0, r7
 8000c92:	463c      	mov	r4, r7
 8000c94:	46b8      	mov	r8, r7
 8000c96:	46be      	mov	lr, r7
 8000c98:	2620      	movs	r6, #32
 8000c9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c9e:	eba2 0208 	sub.w	r2, r2, r8
 8000ca2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ca6:	e766      	b.n	8000b76 <__udivmoddi4+0xfa>
 8000ca8:	4601      	mov	r1, r0
 8000caa:	e718      	b.n	8000ade <__udivmoddi4+0x62>
 8000cac:	4610      	mov	r0, r2
 8000cae:	e72c      	b.n	8000b0a <__udivmoddi4+0x8e>
 8000cb0:	f1c6 0220 	rsb	r2, r6, #32
 8000cb4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb8:	40b7      	lsls	r7, r6
 8000cba:	40b1      	lsls	r1, r6
 8000cbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cca:	b2bc      	uxth	r4, r7
 8000ccc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb08 f904 	mul.w	r9, r8, r4
 8000cda:	40b0      	lsls	r0, r6
 8000cdc:	4589      	cmp	r9, r1
 8000cde:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ce2:	b280      	uxth	r0, r0
 8000ce4:	d93e      	bls.n	8000d64 <__udivmoddi4+0x2e8>
 8000ce6:	1879      	adds	r1, r7, r1
 8000ce8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cec:	d201      	bcs.n	8000cf2 <__udivmoddi4+0x276>
 8000cee:	4589      	cmp	r9, r1
 8000cf0:	d81f      	bhi.n	8000d32 <__udivmoddi4+0x2b6>
 8000cf2:	eba1 0109 	sub.w	r1, r1, r9
 8000cf6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfa:	fb09 f804 	mul.w	r8, r9, r4
 8000cfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d02:	b292      	uxth	r2, r2
 8000d04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d08:	4542      	cmp	r2, r8
 8000d0a:	d229      	bcs.n	8000d60 <__udivmoddi4+0x2e4>
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d12:	d2c4      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d14:	4542      	cmp	r2, r8
 8000d16:	d2c2      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d18:	f1a9 0102 	sub.w	r1, r9, #2
 8000d1c:	443a      	add	r2, r7
 8000d1e:	e7be      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d20:	45f0      	cmp	r8, lr
 8000d22:	d29d      	bcs.n	8000c60 <__udivmoddi4+0x1e4>
 8000d24:	ebbe 0302 	subs.w	r3, lr, r2
 8000d28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	46e1      	mov	r9, ip
 8000d30:	e796      	b.n	8000c60 <__udivmoddi4+0x1e4>
 8000d32:	eba7 0909 	sub.w	r9, r7, r9
 8000d36:	4449      	add	r1, r9
 8000d38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d40:	fb09 f804 	mul.w	r8, r9, r4
 8000d44:	e7db      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d46:	4673      	mov	r3, lr
 8000d48:	e77f      	b.n	8000c4a <__udivmoddi4+0x1ce>
 8000d4a:	4650      	mov	r0, sl
 8000d4c:	e766      	b.n	8000c1c <__udivmoddi4+0x1a0>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e6fd      	b.n	8000b4e <__udivmoddi4+0xd2>
 8000d52:	443b      	add	r3, r7
 8000d54:	3a02      	subs	r2, #2
 8000d56:	e733      	b.n	8000bc0 <__udivmoddi4+0x144>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	443b      	add	r3, r7
 8000d5e:	e71c      	b.n	8000b9a <__udivmoddi4+0x11e>
 8000d60:	4649      	mov	r1, r9
 8000d62:	e79c      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d64:	eba1 0109 	sub.w	r1, r1, r9
 8000d68:	46c4      	mov	ip, r8
 8000d6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6e:	fb09 f804 	mul.w	r8, r9, r4
 8000d72:	e7c4      	b.n	8000cfe <__udivmoddi4+0x282>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7c:	f001 fb96 	bl	80024ac <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8000d80:	f000 fcaa 	bl	80016d8 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f842 	bl	8000e0c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d88:	f000 f986 	bl	8001098 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8c:	f000 f94c 	bl	8001028 <MX_DMA_Init>
  MX_TIM5_Init();
 8000d90:	f000 f8a6 	bl	8000ee0 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8000d94:	f000 f91e 	bl	8000fd4 <MX_USART6_UART_Init>

  /* Create the thread(s) */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d98:	f004 fbbe 	bl	8005518 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  serialQueueHandle = osMessageQueueNew(SERIAL_QUEUE_LENGTH, sizeof(SerialMessage_t), NULL);  /* add queues, ... */
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2184      	movs	r1, #132	@ 0x84
 8000da0:	200a      	movs	r0, #10
 8000da2:	f004 fcb0 	bl	8005706 <osMessageQueueNew>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <main+0x6c>)
 8000daa:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dac:	4a0e      	ldr	r2, [pc, #56]	@ (8000de8 <main+0x70>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	480e      	ldr	r0, [pc, #56]	@ (8000dec <main+0x74>)
 8000db2:	f004 fbfb 	bl	80055ac <osThreadNew>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <main+0x78>)
 8000dba:	6013      	str	r3, [r2, #0]

  /* creation of DShotTask_1 */
  DShotTask_1Handle = osThreadNew(DShotTask, NULL, &DShotTask_1_attributes);
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <main+0x7c>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	480d      	ldr	r0, [pc, #52]	@ (8000df8 <main+0x80>)
 8000dc2:	f004 fbf3 	bl	80055ac <osThreadNew>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <main+0x84>)
 8000dca:	6013      	str	r3, [r2, #0]

  /* creation of SerialTask */
  SerialTaskHandle = osThreadNew(StartSerialTask, NULL, &SerialTask_attributes);
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e00 <main+0x88>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <main+0x8c>)
 8000dd2:	f004 fbeb 	bl	80055ac <osThreadNew>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e08 <main+0x90>)
 8000dda:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ddc:	f004 fbc0 	bl	8005560 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <main+0x68>
 8000de4:	200003fc 	.word	0x200003fc
 8000de8:	080098cc 	.word	0x080098cc
 8000dec:	08001b55 	.word	0x08001b55
 8000df0:	2000029c 	.word	0x2000029c
 8000df4:	080098f0 	.word	0x080098f0
 8000df8:	08001b65 	.word	0x08001b65
 8000dfc:	200002a0 	.word	0x200002a0
 8000e00:	08009914 	.word	0x08009914
 8000e04:	08001da1 	.word	0x08001da1
 8000e08:	200002a4 	.word	0x200002a4

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	@ 0x50
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	2230      	movs	r2, #48	@ 0x30
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f007 fd48 	bl	80088b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	4b28      	ldr	r3, [pc, #160]	@ (8000ed8 <SystemClock_Config+0xcc>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	4a27      	ldr	r2, [pc, #156]	@ (8000ed8 <SystemClock_Config+0xcc>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e40:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <SystemClock_Config+0xcc>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <SystemClock_Config+0xd0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a21      	ldr	r2, [pc, #132]	@ (8000edc <SystemClock_Config+0xd0>)
 8000e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <SystemClock_Config+0xd0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e70:	2310      	movs	r3, #16
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e74:	2302      	movs	r3, #2
 8000e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e80:	23a8      	movs	r3, #168	@ 0xa8
 8000e82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 f953 	bl	800313c <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e9c:	f000 ffb4 	bl	8001e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000eb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fbb4 	bl	800362c <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eca:	f000 ff9d 	bl	8001e08 <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3750      	adds	r7, #80	@ 0x50
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40007000 	.word	0x40007000

08000ee0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	@ 0x28
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f02:	4b32      	ldr	r3, [pc, #200]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f04:	4a32      	ldr	r2, [pc, #200]	@ (8000fd0 <MX_TIM5_Init+0xf0>)
 8000f06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f08:	4b30      	ldr	r3, [pc, #192]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 139;
 8000f14:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f16:	228b      	movs	r2, #139	@ 0x8b
 8000f18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f20:	4b2a      	ldr	r3, [pc, #168]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f26:	4829      	ldr	r0, [pc, #164]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f28:	f002 fe5c 	bl	8003be4 <HAL_TIM_PWM_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000f32:	f000 ff69 	bl	8001e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	4619      	mov	r1, r3
 8000f44:	4821      	ldr	r0, [pc, #132]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f46:	f003 fe07 	bl	8004b58 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000f50:	f000 ff5a 	bl	8001e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f54:	2360      	movs	r3, #96	@ 0x60
 8000f56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2200      	movs	r2, #0
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4818      	ldr	r0, [pc, #96]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f6c:	f003 f9b2 	bl	80042d4 <HAL_TIM_PWM_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f76:	f000 ff47 	bl	8001e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4812      	ldr	r0, [pc, #72]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f82:	f003 f9a7 	bl	80042d4 <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000f8c:	f000 ff3c 	bl	8001e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2208      	movs	r2, #8
 8000f94:	4619      	mov	r1, r3
 8000f96:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f98:	f003 f99c 	bl	80042d4 <HAL_TIM_PWM_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 8000fa2:	f000 ff31 	bl	8001e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	220c      	movs	r2, #12
 8000faa:	4619      	mov	r1, r3
 8000fac:	4807      	ldr	r0, [pc, #28]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000fae:	f003 f991 	bl	80042d4 <HAL_TIM_PWM_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000fb8:	f000 ff26 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fbc:	4803      	ldr	r0, [pc, #12]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000fbe:	f001 f855 	bl	800206c <HAL_TIM_MspPostInit>

}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	@ 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000008c 	.word	0x2000008c
 8000fd0:	40000c00 	.word	0x40000c00

08000fd4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <MX_USART6_UART_Init+0x50>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8000fe0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000fe4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 800100c:	f003 fe34 	bl	8004c78 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001016:	f000 fef7 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000254 	.word	0x20000254
 8001024:	40011400 	.word	0x40011400

08001028 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <MX_DMA_Init+0x6c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <MX_DMA_Init+0x6c>)
 8001038:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <MX_DMA_Init+0x6c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2105      	movs	r1, #5
 800104e:	200b      	movs	r0, #11
 8001050:	f001 fb26 	bl	80026a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001054:	200b      	movs	r0, #11
 8001056:	f001 fb3f 	bl	80026d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2105      	movs	r1, #5
 800105e:	200c      	movs	r0, #12
 8001060:	f001 fb1e 	bl	80026a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001064:	200c      	movs	r0, #12
 8001066:	f001 fb37 	bl	80026d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2105      	movs	r1, #5
 800106e:	200d      	movs	r0, #13
 8001070:	f001 fb16 	bl	80026a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001074:	200d      	movs	r0, #13
 8001076:	f001 fb2f 	bl	80026d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2105      	movs	r1, #5
 800107e:	200f      	movs	r0, #15
 8001080:	f001 fb0e 	bl	80026a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001084:	200f      	movs	r0, #15
 8001086:	f001 fb27 	bl	80026d8 <HAL_NVIC_EnableIRQ>

}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800

08001098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a16      	ldr	r2, [pc, #88]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a08      	ldr	r2, [pc, #32]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <read_telemetry_pin>:
    // Send buffer via UART
    HAL_UART_Transmit(huart, (uint8_t *)buf, idx, HAL_MAX_DELAY);
}

static inline uint8_t read_telemetry_pin(GPIO_TypeDef *port, uint16_t pin)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
    return HAL_GPIO_ReadPin(port, pin) ? 1 : 0;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	4619      	mov	r1, r3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f001 fff9 	bl	800310c <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf14      	ite	ne
 8001120:	2301      	movne	r3, #1
 8001122:	2300      	moveq	r3, #0
 8001124:	b2db      	uxtb	r3, r3
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <receive_bdshot_telemetry>:

int receive_bdshot_telemetry(uint32_t *telemetry_out, GPIO_TypeDef *port, uint16_t pin) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	4613      	mov	r3, r2
 800113c:	80fb      	strh	r3, [r7, #6]
    uint32_t value = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]

    // Wait for line to go low (start bit)
    uint32_t timeout = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
    while (read_telemetry_pin(port, pin)) {
 8001146:	e00e      	b.n	8001166 <receive_bdshot_telemetry+0x36>
        delay_us_precise(0.01f);
 8001148:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80011c8 <receive_bdshot_telemetry+0x98>
 800114c:	f000 fa6c 	bl	8001628 <delay_us_precise>
        if (++timeout > TELEMETRY_TIMEOUT_US * 25)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	3301      	adds	r3, #1
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800115c:	4293      	cmp	r3, r2
 800115e:	d902      	bls.n	8001166 <receive_bdshot_telemetry+0x36>
            return -1; // Timeout
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	e02c      	b.n	80011c0 <receive_bdshot_telemetry+0x90>
    while (read_telemetry_pin(port, pin)) {
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	4619      	mov	r1, r3
 800116a:	68b8      	ldr	r0, [r7, #8]
 800116c:	f7ff ffca 	bl	8001104 <read_telemetry_pin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1e8      	bne.n	8001148 <receive_bdshot_telemetry+0x18>
    }

    // Wait half a bit to center
    //delay_us_precise(TELEMETRY_BIT_US/2.0f);
    delay_us_precise(0.1f);
 8001176:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80011cc <receive_bdshot_telemetry+0x9c>
 800117a:	f000 fa55 	bl	8001628 <delay_us_precise>

    // LSB-first: capture 20 bits
    for (int i = 0; i < 20; i++) {
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e016      	b.n	80011b2 <receive_bdshot_telemetry+0x82>
    	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
        value |= (read_telemetry_pin(port, pin) << (19-i)); // LSB-first
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	4619      	mov	r1, r3
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	f7ff ffbb 	bl	8001104 <read_telemetry_pin>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f1c3 0313 	rsb	r3, r3, #19
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	461a      	mov	r2, r3
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61fb      	str	r3, [r7, #28]
        delay_us_precise(TELEMETRY_BIT_US);
 80011a4:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80011d0 <receive_bdshot_telemetry+0xa0>
 80011a8:	f000 fa3e 	bl	8001628 <delay_us_precise>
    for (int i = 0; i < 20; i++) {
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2b13      	cmp	r3, #19
 80011b6:	dde5      	ble.n	8001184 <receive_bdshot_telemetry+0x54>
        //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
    }

    *telemetry_out = value;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	601a      	str	r2, [r3, #0]
    return 0;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	3c23d70a 	.word	0x3c23d70a
 80011cc:	3dcccccd 	.word	0x3dcccccd
 80011d0:	3f733333 	.word	0x3f733333

080011d4 <process_bdshot_telemetry>:

void process_bdshot_telemetry(GPIO_TypeDef *port, uint16_t pin, uint8_t *packet_out) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	460b      	mov	r3, r1
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	817b      	strh	r3, [r7, #10]
	uint32_t telemetry;
	uint16_t telemetry_16bit;
	char telemetry_type;
	float telemetry_value;
    if (receive_bdshot_telemetry(&telemetry, port, pin) == 0) {
 80011e2:	897a      	ldrh	r2, [r7, #10]
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	68f9      	ldr	r1, [r7, #12]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffa0 	bl	8001130 <receive_bdshot_telemetry>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d140      	bne.n	8001278 <process_bdshot_telemetry+0xa4>
  	  uint32_t gcr = decode_gcr_mapping(telemetry);
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fb22 	bl	8001842 <decode_gcr_mapping>
 80011fe:	6278      	str	r0, [r7, #36]	@ 0x24
  	  if (!decode_gcr_20_to_16(gcr, &telemetry_16bit)) {
 8001200:	f107 031a 	add.w	r3, r7, #26
 8001204:	4619      	mov	r1, r3
 8001206:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001208:	f000 fb29 	bl	800185e <decode_gcr_20_to_16>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d104      	bne.n	800121c <process_bdshot_telemetry+0x48>
  		  //printf("Invalid GCR encoding.\r\n");
  		  delay_us_precise(10);
 8001212:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001216:	f000 fa07 	bl	8001628 <delay_us_precise>
 800121a:	e02d      	b.n	8001278 <process_bdshot_telemetry+0xa4>
  	  }
  	  else {
            int type = parse_edt_frame(telemetry_16bit, &telemetry_type, &telemetry_value);
 800121c:	8b7b      	ldrh	r3, [r7, #26]
 800121e:	f107 0214 	add.w	r2, r7, #20
 8001222:	f107 0119 	add.w	r1, r7, #25
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fb8e 	bl	8001948 <parse_edt_frame>
 800122c:	6238      	str	r0, [r7, #32]
            if (type == 2) {
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d121      	bne.n	8001278 <process_bdshot_telemetry+0xa4>
          	  rpm = (uint16_t)(telemetry_value / 7.0);
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f97e 	bl	8000538 <__aeabi_f2d>
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <process_bdshot_telemetry+0xac>)
 8001242:	f7ff fafb 	bl	800083c <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fbdd 	bl	8000a0c <__aeabi_d2uiz>
 8001252:	4603      	mov	r3, r0
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <process_bdshot_telemetry+0xb0>)
 8001258:	801a      	strh	r2, [r3, #0]
          	  uint8_t packet[3];
          	  packet[0] = 0xAA;                      // Start byte
 800125a:	23aa      	movs	r3, #170	@ 0xaa
 800125c:	743b      	strb	r3, [r7, #16]
          	  packet[1] = rpm & 0xFF;               // LSB
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <process_bdshot_telemetry+0xb0>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	747b      	strb	r3, [r7, #17]
          	  packet[2] = (rpm >> 8) & 0xFF;        // MSB
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <process_bdshot_telemetry+0xb0>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	b29b      	uxth	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	74bb      	strb	r3, [r7, #18]
          	  //char debug[32];
          	  //sprintf(debug, "RPM0: %u\r\n", rpm);
          	  //HAL_UART_Transmit(&huart6, (uint8_t*)debug, strlen(debug), HAL_MAX_DELAY);
          	  packet_out = packet;
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	607b      	str	r3, [r7, #4]
  	  }
    }
    else {
  	  //printf("Invalid Telemetry.\r\n");
    }
}
 8001278:	3728      	adds	r7, #40	@ 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	401c0000 	.word	0x401c0000
 8001284:	20000000 	.word	0x20000000

08001288 <set_pin_input>:


//Telemetry Input
void set_pin_input(GPIO_TypeDef *port, uint16_t pin)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = pin;
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4619      	mov	r1, r3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f001 fd8c 	bl	8002dd4 <HAL_GPIO_Init>
}
 80012bc:	bf00      	nop
 80012be:	3720      	adds	r7, #32
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <set_pin_pwm>:

//DShot Generation
void set_pin_pwm(GPIO_TypeDef *port, uint16_t pin, uint8_t alternate)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = pin;
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = alternate;
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4619      	mov	r1, r3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f001 fd68 	bl	8002dd4 <HAL_GPIO_Init>
}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <prepare_bdshot_buffer>:

void prepare_bdshot_buffer(uint16_t frame, uint32_t *dshot_buffer)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	80fb      	strh	r3, [r7, #6]
    uint32_t buffer_index = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

    dshot_buffer[buffer_index++] = 0;  // preload entry
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	617a      	str	r2, [r7, #20]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
    dshot_buffer[buffer_index++] = 0;  // preload entry
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	617a      	str	r2, [r7, #20]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	4413      	add	r3, r2
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
    dshot_buffer[buffer_index++] = 0;  // preload entry
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	617a      	str	r2, [r7, #20]
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	4413      	add	r3, r2
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

    //2Build the actual DSHOT waveform entries
    for (int i = 15; i >= 0; i--)
 800134c:	230f      	movs	r3, #15
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	e01e      	b.n	8001390 <prepare_bdshot_buffer+0x84>
    {
        uint8_t bit = (frame >> i) & 0x01;
 8001352:	88fa      	ldrh	r2, [r7, #6]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	fa42 f303 	asr.w	r3, r2, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
        if (bit)
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d008      	beq.n	800137a <prepare_bdshot_buffer+0x6e>
        {
            dshot_buffer[buffer_index++] = DSHOT_T1L_TICKS;  // logic 1
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	617a      	str	r2, [r7, #20]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	4413      	add	r3, r2
 8001374:	2269      	movs	r2, #105	@ 0x69
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e007      	b.n	800138a <prepare_bdshot_buffer+0x7e>
            //dshot_buffer[buffer_index++] = 0;
        }
        else
        {
            dshot_buffer[buffer_index++] = DSHOT_T0L_TICKS;  // logic 0
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	617a      	str	r2, [r7, #20]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	4413      	add	r3, r2
 8001386:	2232      	movs	r2, #50	@ 0x32
 8001388:	601a      	str	r2, [r3, #0]
    for (int i = 15; i >= 0; i--)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	3b01      	subs	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	dadd      	bge.n	8001352 <prepare_bdshot_buffer+0x46>
            //dshot_buffer[buffer_index++] = 0;
        }
    }

    dshot_buffer[buffer_index++] = 0;  // Final LOW
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	617a      	str	r2, [r7, #20]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	4413      	add	r3, r2
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <bdshot_crc>:


// value_12bit should be 0...4095
uint8_t bdshot_crc(uint16_t value_12bit)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b085      	sub	sp, #20
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	80fb      	strh	r3, [r7, #6]
    // Optional: Uncomment to assert 12-bit range in debug
    // assert(value_12bit < 4096);

    uint16_t crc = value_12bit ^ (value_12bit >> 4) ^ (value_12bit >> 8);
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	4053      	eors	r3, r2
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	0a1b      	lsrs	r3, r3, #8
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4053      	eors	r3, r2
 80013d0:	81fb      	strh	r3, [r7, #14]
    crc = ~crc;           // Bitwise NOT
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	81fb      	strh	r3, [r7, #14]
    crc = crc & 0x0F;     // Mask to 4 bits
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)crc;
 80013e0:	89fb      	ldrh	r3, [r7, #14]
 80013e2:	b2db      	uxtb	r3, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <make_bdshot_frame>:

// Create 16-bit DSHOT frame with correct CRC
uint16_t make_bdshot_frame(uint16_t value, bool telemetry) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	80fb      	strh	r3, [r7, #6]
 80013fc:	4613      	mov	r3, r2
 80013fe:	717b      	strb	r3, [r7, #5]
    if (value == 0) {
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <make_bdshot_frame+0x1a>
        return 0x000F; // hardware expects this special frame
 8001406:	230f      	movs	r3, #15
 8001408:	e01b      	b.n	8001442 <make_bdshot_frame+0x52>
    }
    value &= 0x07FF; // 11 bits
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001410:	80fb      	strh	r3, [r7, #6]
    uint16_t frame_no_crc = (value << 1) | (telemetry ? 1 : 0);
 8001412:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	b21a      	sxth	r2, r3
 800141a:	797b      	ldrb	r3, [r7, #5]
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21b      	sxth	r3, r3
 8001422:	81fb      	strh	r3, [r7, #14]
    uint8_t crc = bdshot_crc(frame_no_crc);
 8001424:	89fb      	ldrh	r3, [r7, #14]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ffc3 	bl	80013b2 <bdshot_crc>
 800142c:	4603      	mov	r3, r0
 800142e:	737b      	strb	r3, [r7, #13]
    return (frame_no_crc << 4) | crc;
 8001430:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	b21a      	sxth	r2, r3
 8001438:	7b7b      	ldrb	r3, [r7, #13]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21b      	sxth	r3, r3
 8001440:	b29b      	uxth	r3, r3
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <queue_bdshot_pulse>:

void queue_bdshot_pulse(uint16_t throttle, bool telemetry, uint32_t *dshot_buffer){
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	603a      	str	r2, [r7, #0]
 8001454:	80fb      	strh	r3, [r7, #6]
 8001456:	460b      	mov	r3, r1
 8001458:	717b      	strb	r3, [r7, #5]
	uint16_t frame = make_bdshot_frame(throttle, telemetry);
 800145a:	797a      	ldrb	r2, [r7, #5]
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ffc5 	bl	80013f0 <make_bdshot_frame>
 8001466:	4603      	mov	r3, r0
 8001468:	81fb      	strh	r3, [r7, #14]
	prepare_bdshot_buffer(frame, dshot_buffer);
 800146a:	89fb      	ldrh	r3, [r7, #14]
 800146c:	6839      	ldr	r1, [r7, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff4c 	bl	800130c <prepare_bdshot_buffer>
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <send_bdshot>:

void send_bdshot(uint32_t channel){
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	uint32_t *buffer = NULL;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
	switch(channel) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b0c      	cmp	r3, #12
 800148c:	d828      	bhi.n	80014e0 <send_bdshot+0x64>
 800148e:	a201      	add	r2, pc, #4	@ (adr r2, 8001494 <send_bdshot+0x18>)
 8001490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001494:	080014c9 	.word	0x080014c9
 8001498:	080014e1 	.word	0x080014e1
 800149c:	080014e1 	.word	0x080014e1
 80014a0:	080014e1 	.word	0x080014e1
 80014a4:	080014cf 	.word	0x080014cf
 80014a8:	080014e1 	.word	0x080014e1
 80014ac:	080014e1 	.word	0x080014e1
 80014b0:	080014e1 	.word	0x080014e1
 80014b4:	080014d5 	.word	0x080014d5
 80014b8:	080014e1 	.word	0x080014e1
 80014bc:	080014e1 	.word	0x080014e1
 80014c0:	080014e1 	.word	0x080014e1
 80014c4:	080014db 	.word	0x080014db
	  case TIM_CHANNEL_1: buffer = dshot_buffer_ch1; break;
 80014c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001600 <send_bdshot+0x184>)
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	e008      	b.n	80014e0 <send_bdshot+0x64>
	  case TIM_CHANNEL_2: buffer = dshot_buffer_ch2; break;
 80014ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001604 <send_bdshot+0x188>)
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	e005      	b.n	80014e0 <send_bdshot+0x64>
	  case TIM_CHANNEL_3: buffer = dshot_buffer_ch3; break;
 80014d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001608 <send_bdshot+0x18c>)
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e002      	b.n	80014e0 <send_bdshot+0x64>
	  case TIM_CHANNEL_4: buffer = dshot_buffer_ch4; break;
 80014da:	4b4c      	ldr	r3, [pc, #304]	@ (800160c <send_bdshot+0x190>)
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	bf00      	nop
	}
    switch (channel) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d844      	bhi.n	8001570 <send_bdshot+0xf4>
 80014e6:	a201      	add	r2, pc, #4	@ (adr r2, 80014ec <send_bdshot+0x70>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	08001529 	.word	0x08001529
 80014f0:	08001571 	.word	0x08001571
 80014f4:	08001571 	.word	0x08001571
 80014f8:	08001571 	.word	0x08001571
 80014fc:	0800153d 	.word	0x0800153d
 8001500:	08001571 	.word	0x08001571
 8001504:	08001571 	.word	0x08001571
 8001508:	08001571 	.word	0x08001571
 800150c:	08001551 	.word	0x08001551
 8001510:	08001571 	.word	0x08001571
 8001514:	08001571 	.word	0x08001571
 8001518:	08001571 	.word	0x08001571
 800151c:	08001565 	.word	0x08001565
        case TIM_CHANNEL_1: while (dshot_running_ch1) delay_us_precise(1); break;
 8001520:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001524:	f000 f880 	bl	8001628 <delay_us_precise>
 8001528:	4b39      	ldr	r3, [pc, #228]	@ (8001610 <send_bdshot+0x194>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f6      	bne.n	8001520 <send_bdshot+0xa4>
 8001532:	e01d      	b.n	8001570 <send_bdshot+0xf4>
        case TIM_CHANNEL_2: while (dshot_running_ch2) delay_us_precise(1); break;
 8001534:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001538:	f000 f876 	bl	8001628 <delay_us_precise>
 800153c:	4b35      	ldr	r3, [pc, #212]	@ (8001614 <send_bdshot+0x198>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f6      	bne.n	8001534 <send_bdshot+0xb8>
 8001546:	e013      	b.n	8001570 <send_bdshot+0xf4>
        case TIM_CHANNEL_3: while (dshot_running_ch3) delay_us_precise(1); break;
 8001548:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800154c:	f000 f86c 	bl	8001628 <delay_us_precise>
 8001550:	4b31      	ldr	r3, [pc, #196]	@ (8001618 <send_bdshot+0x19c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f6      	bne.n	8001548 <send_bdshot+0xcc>
 800155a:	e009      	b.n	8001570 <send_bdshot+0xf4>
        case TIM_CHANNEL_4: while (dshot_running_ch4) delay_us_precise(1); break;
 800155c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001560:	f000 f862 	bl	8001628 <delay_us_precise>
 8001564:	4b2d      	ldr	r3, [pc, #180]	@ (800161c <send_bdshot+0x1a0>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f6      	bne.n	800155c <send_bdshot+0xe0>
 800156e:	bf00      	nop
    }
	if (buffer == NULL) Error_Handler();
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <send_bdshot+0xfe>
 8001576:	f000 fc47 	bl	8001e08 <Error_Handler>
    if (HAL_TIM_PWM_Start_DMA(&htim5, channel, (uint32_t*)buffer, DSHOT_BUFFER_SIZE) != HAL_OK)
 800157a:	2314      	movs	r3, #20
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4827      	ldr	r0, [pc, #156]	@ (8001620 <send_bdshot+0x1a4>)
 8001582:	f002 fbef 	bl	8003d64 <HAL_TIM_PWM_Start_DMA>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d004      	beq.n	8001596 <send_bdshot+0x11a>
    {
        Error_Handler();
 800158c:	f000 fc3c 	bl	8001e08 <Error_Handler>
        printf("Error in send_bdshot()\r\n");
 8001590:	4824      	ldr	r0, [pc, #144]	@ (8001624 <send_bdshot+0x1a8>)
 8001592:	f007 f88b 	bl	80086ac <puts>
    }
    switch (channel) {
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b0c      	cmp	r3, #12
 800159a:	d82d      	bhi.n	80015f8 <send_bdshot+0x17c>
 800159c:	a201      	add	r2, pc, #4	@ (adr r2, 80015a4 <send_bdshot+0x128>)
 800159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a2:	bf00      	nop
 80015a4:	080015d9 	.word	0x080015d9
 80015a8:	080015f9 	.word	0x080015f9
 80015ac:	080015f9 	.word	0x080015f9
 80015b0:	080015f9 	.word	0x080015f9
 80015b4:	080015e1 	.word	0x080015e1
 80015b8:	080015f9 	.word	0x080015f9
 80015bc:	080015f9 	.word	0x080015f9
 80015c0:	080015f9 	.word	0x080015f9
 80015c4:	080015e9 	.word	0x080015e9
 80015c8:	080015f9 	.word	0x080015f9
 80015cc:	080015f9 	.word	0x080015f9
 80015d0:	080015f9 	.word	0x080015f9
 80015d4:	080015f1 	.word	0x080015f1
        case TIM_CHANNEL_1: dshot_running_ch1 = true; break;
 80015d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <send_bdshot+0x194>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
 80015de:	e00b      	b.n	80015f8 <send_bdshot+0x17c>
        case TIM_CHANNEL_2: dshot_running_ch2 = true; break;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <send_bdshot+0x198>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	e007      	b.n	80015f8 <send_bdshot+0x17c>
        case TIM_CHANNEL_3: dshot_running_ch3 = true; break;
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <send_bdshot+0x19c>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	e003      	b.n	80015f8 <send_bdshot+0x17c>
        case TIM_CHANNEL_4: dshot_running_ch4 = true; break;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <send_bdshot+0x1a0>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	bf00      	nop
    }
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200002a8 	.word	0x200002a8
 8001604:	200002f8 	.word	0x200002f8
 8001608:	20000348 	.word	0x20000348
 800160c:	20000398 	.word	0x20000398
 8001610:	200003e8 	.word	0x200003e8
 8001614:	200003e9 	.word	0x200003e9
 8001618:	200003ea 	.word	0x200003ea
 800161c:	200003eb 	.word	0x200003eb
 8001620:	2000008c 	.word	0x2000008c
 8001624:	08009818 	.word	0x08009818

08001628 <delay_us_precise>:


void delay_us_precise(float us) {
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t cycles = (uint32_t)(SystemCoreClock * us / 1e6f);
 8001632:	4b12      	ldr	r3, [pc, #72]	@ (800167c <delay_us_precise+0x54>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800163e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001642:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001646:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001680 <delay_us_precise+0x58>
 800164a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001652:	ee17 3a90 	vmov	r3, s15
 8001656:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <delay_us_precise+0x5c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 800165e:	bf00      	nop
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <delay_us_precise+0x5c>)
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	429a      	cmp	r2, r3
 800166c:	d8f8      	bhi.n	8001660 <delay_us_precise+0x38>
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	20000004 	.word	0x20000004
 8001680:	49742400 	.word	0x49742400
 8001684:	e0001000 	.word	0xe0001000

08001688 <_write>:

int _write(int file, char *ptr, int len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0a4      	sub	sp, #144	@ 0x90
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
    // For safety, truncate messages to queue item size
    if (len > SERIAL_QUEUE_ITEM_SIZE - 1) len = SERIAL_QUEUE_ITEM_SIZE - 1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b7f      	cmp	r3, #127	@ 0x7f
 8001698:	dd01      	ble.n	800169e <_write+0x16>
 800169a:	237f      	movs	r3, #127	@ 0x7f
 800169c:	607b      	str	r3, [r7, #4]

    char msg[SERIAL_QUEUE_ITEM_SIZE];
    memcpy(msg, ptr, len);
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f007 f9db 	bl	8008a62 <memcpy>
    msg[len] = '\0'; // Null-terminate
 80016ac:	f107 0210 	add.w	r2, r7, #16
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]

    // Send to queue (in ISR context: use osMessageQueuePutFromISR, but here normal context)
    if (osMessageQueuePut(serialQueueHandle, msg, 0, 0) != osOK) {
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <_write+0x4c>)
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	f107 0110 	add.w	r1, r7, #16
 80016c0:	2300      	movs	r3, #0
 80016c2:	2200      	movs	r2, #0
 80016c4:	f004 f892 	bl	80057ec <osMessageQueuePut>
        // Handle queue full if needed
    }

    return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3790      	adds	r7, #144	@ 0x90
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200003fc 	.word	0x200003fc

080016d8 <DWT_Init>:

void DWT_Init(void) {
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk)) {
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <DWT_Init+0x38>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10e      	bne.n	8001706 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <DWT_Init+0x3c>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4a09      	ldr	r2, [pc, #36]	@ (8001714 <DWT_Init+0x3c>)
 80016ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <DWT_Init+0x38>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80016fa:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <DWT_Init+0x38>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <DWT_Init+0x38>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6013      	str	r3, [r2, #0]
    }
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e0001000 	.word	0xe0001000
 8001714:	e000edf0 	.word	0xe000edf0

08001718 <HAL_TIM_PWM_PulseFinishedCallback>:
    }
    printf("\r\n");
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM5) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d12f      	bne.n	800178a <HAL_TIM_PWM_PulseFinishedCallback+0x72>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172a:	b672      	cpsid	i
}
 800172c:	bf00      	nop
        __disable_irq();
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7f1b      	ldrb	r3, [r3, #28]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d106      	bne.n	8001744 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001736:	2100      	movs	r1, #0
 8001738:	4817      	ldr	r0, [pc, #92]	@ (8001798 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 800173a:	f002 faa3 	bl	8003c84 <HAL_TIM_PWM_Stop>
            dshot_running_ch1 = false;
 800173e:	4b17      	ldr	r3, [pc, #92]	@ (800179c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
        }
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7f1b      	ldrb	r3, [r3, #28]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d106      	bne.n	800175a <HAL_TIM_PWM_PulseFinishedCallback+0x42>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
 800174c:	2104      	movs	r1, #4
 800174e:	4812      	ldr	r0, [pc, #72]	@ (8001798 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001750:	f002 fa98 	bl	8003c84 <HAL_TIM_PWM_Stop>
            dshot_running_ch2 = false;
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
        }
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7f1b      	ldrb	r3, [r3, #28]
 800175e:	2b04      	cmp	r3, #4
 8001760:	d106      	bne.n	8001770 <HAL_TIM_PWM_PulseFinishedCallback+0x58>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8001762:	2108      	movs	r1, #8
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001766:	f002 fa8d 	bl	8003c84 <HAL_TIM_PWM_Stop>
            dshot_running_ch3 = false;
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
        }
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7f1b      	ldrb	r3, [r3, #28]
 8001774:	2b08      	cmp	r3, #8
 8001776:	d106      	bne.n	8001786 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8001778:	210c      	movs	r1, #12
 800177a:	4807      	ldr	r0, [pc, #28]	@ (8001798 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 800177c:	f002 fa82 	bl	8003c84 <HAL_TIM_PWM_Stop>
            dshot_running_ch4 = false;
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001786:	b662      	cpsie	i
}
 8001788:	bf00      	nop
        }
        __enable_irq();
    }
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40000c00 	.word	0x40000c00
 8001798:	2000008c 	.word	0x2000008c
 800179c:	200003e8 	.word	0x200003e8
 80017a0:	200003e9 	.word	0x200003e9
 80017a4:	200003ea 	.word	0x200003ea
 80017a8:	200003eb 	.word	0x200003eb

080017ac <calculate_crc>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
    //printf("UART error callback!\r\n");
}

uint8_t calculate_crc(uint16_t value_12bit, const char *protocol) {
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	80fb      	strh	r3, [r7, #6]
    if (value_12bit > 0x0FFF) return 0xFF; // invalid input
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017be:	d301      	bcc.n	80017c4 <calculate_crc+0x18>
 80017c0:	23ff      	movs	r3, #255	@ 0xff
 80017c2:	e038      	b.n	8001836 <calculate_crc+0x8a>

    if (protocol[0] == 'B') { // BDShot
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b42      	cmp	r3, #66	@ 0x42
 80017ca:	d118      	bne.n	80017fe <calculate_crc+0x52>
        uint16_t value_16bit = value_12bit << 4;
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	817b      	strh	r3, [r7, #10]
        uint16_t csum = value_16bit;
 80017d2:	897b      	ldrh	r3, [r7, #10]
 80017d4:	813b      	strh	r3, [r7, #8]
        csum ^= (csum >> 8);
 80017d6:	893b      	ldrh	r3, [r7, #8]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	b29a      	uxth	r2, r3
 80017dc:	893b      	ldrh	r3, [r7, #8]
 80017de:	4053      	eors	r3, r2
 80017e0:	813b      	strh	r3, [r7, #8]
        csum ^= (csum >> 4);
 80017e2:	893b      	ldrh	r3, [r7, #8]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	893b      	ldrh	r3, [r7, #8]
 80017ea:	4053      	eors	r3, r2
 80017ec:	813b      	strh	r3, [r7, #8]
        return (~csum) & 0xF;
 80017ee:	893b      	ldrh	r3, [r7, #8]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	e01b      	b.n	8001836 <calculate_crc+0x8a>
    } else if (protocol[0] == 'D') { // DShot
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b44      	cmp	r3, #68	@ 0x44
 8001804:	d116      	bne.n	8001834 <calculate_crc+0x88>
        uint16_t value = value_12bit;
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	81fb      	strh	r3, [r7, #14]
        uint8_t crc = value ^ (value >> 4) ^ (value >> 8);
 800180a:	89fb      	ldrh	r3, [r7, #14]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	b29b      	uxth	r3, r3
 8001810:	b2da      	uxtb	r2, r3
 8001812:	89fb      	ldrh	r3, [r7, #14]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	4053      	eors	r3, r2
 8001818:	b2da      	uxtb	r2, r3
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	4053      	eors	r3, r2
 8001824:	737b      	strb	r3, [r7, #13]
        return (~crc) & 0xF;
 8001826:	7b7b      	ldrb	r3, [r7, #13]
 8001828:	43db      	mvns	r3, r3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	b2db      	uxtb	r3, r3
 8001832:	e000      	b.n	8001836 <calculate_crc+0x8a>
    }

    return 0xFF; // unsupported protocol
 8001834:	23ff      	movs	r3, #255	@ 0xff
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <decode_gcr_mapping>:
 * @param A value that represents a 20 bit GCR that has been mapped to 21 bits.
 * The first "starting" bit can be excluded for compatibility with a slightly cleaned 20 bit value.
 *
 * @return Returns the 20 bit GCR
 */
uint32_t decode_gcr_mapping(uint32_t value) {
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    return value ^ (value >> 1);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	085a      	lsrs	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4053      	eors	r3, r2
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <decode_gcr_20_to_16>:
 *
 * @return Returns the 20 bit GCR
 *
 * Initialized the whole map to 0xFF. This way, only explicitly defined entries are accepted
 */
int decode_gcr_20_to_16(uint32_t input_20bit, uint16_t *out_value) {
 800185e:	b480      	push	{r7}
 8001860:	b08f      	sub	sp, #60	@ 0x3c
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
    uint8_t decoding_map[32];
    for (int i = 0; i < 32; ++i) decoding_map[i] = 0xFF; // mark all invalid
 8001868:	2300      	movs	r3, #0
 800186a:	637b      	str	r3, [r7, #52]	@ 0x34
 800186c:	e008      	b.n	8001880 <decode_gcr_20_to_16+0x22>
 800186e:	f107 0208 	add.w	r2, r7, #8
 8001872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001874:	4413      	add	r3, r2
 8001876:	22ff      	movs	r2, #255	@ 0xff
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800187c:	3301      	adds	r3, #1
 800187e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001882:	2b1f      	cmp	r3, #31
 8001884:	ddf3      	ble.n	800186e <decode_gcr_20_to_16+0x10>
    decoding_map[0x19] = 0x0; decoding_map[0x1B] = 0x1; decoding_map[0x12] = 0x2;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800188c:	2301      	movs	r3, #1
 800188e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001892:	2302      	movs	r3, #2
 8001894:	76bb      	strb	r3, [r7, #26]
    decoding_map[0x13] = 0x3; decoding_map[0x1D] = 0x4; decoding_map[0x15] = 0x5;
 8001896:	2303      	movs	r3, #3
 8001898:	76fb      	strb	r3, [r7, #27]
 800189a:	2304      	movs	r3, #4
 800189c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80018a0:	2305      	movs	r3, #5
 80018a2:	777b      	strb	r3, [r7, #29]
    decoding_map[0x16] = 0x6; decoding_map[0x17] = 0x7; decoding_map[0x1A] = 0x8;
 80018a4:	2306      	movs	r3, #6
 80018a6:	77bb      	strb	r3, [r7, #30]
 80018a8:	2307      	movs	r3, #7
 80018aa:	77fb      	strb	r3, [r7, #31]
 80018ac:	2308      	movs	r3, #8
 80018ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    decoding_map[0x09] = 0x9; decoding_map[0x0A] = 0xA; decoding_map[0x0B] = 0xB;
 80018b2:	2309      	movs	r3, #9
 80018b4:	747b      	strb	r3, [r7, #17]
 80018b6:	230a      	movs	r3, #10
 80018b8:	74bb      	strb	r3, [r7, #18]
 80018ba:	230b      	movs	r3, #11
 80018bc:	74fb      	strb	r3, [r7, #19]
    decoding_map[0x1E] = 0xC; decoding_map[0x0D] = 0xD; decoding_map[0x0E] = 0xE;
 80018be:	230c      	movs	r3, #12
 80018c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018c4:	230d      	movs	r3, #13
 80018c6:	757b      	strb	r3, [r7, #21]
 80018c8:	230e      	movs	r3, #14
 80018ca:	75bb      	strb	r3, [r7, #22]
    decoding_map[0x0F] = 0xF;
 80018cc:	230f      	movs	r3, #15
 80018ce:	75fb      	strb	r3, [r7, #23]

    uint16_t result = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	867b      	strh	r3, [r7, #50]	@ 0x32

    for (int i = 0; i < 4; i++) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018d8:	e029      	b.n	800192e <decode_gcr_20_to_16+0xd0>
        uint8_t chunk = (input_20bit >> (15 - i * 5)) & 0x1F;
 80018da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018dc:	4613      	mov	r3, r2
 80018de:	079b      	lsls	r3, r3, #30
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	1a9b      	subs	r3, r3, r2
 80018e6:	330f      	adds	r3, #15
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        if (decoding_map[chunk] == 0xFF) return 0; // invalid chunk
 80018f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80018fc:	3338      	adds	r3, #56	@ 0x38
 80018fe:	443b      	add	r3, r7
 8001900:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001904:	2bff      	cmp	r3, #255	@ 0xff
 8001906:	d101      	bne.n	800190c <decode_gcr_20_to_16+0xae>
 8001908:	2300      	movs	r3, #0
 800190a:	e017      	b.n	800193c <decode_gcr_20_to_16+0xde>
        result = (result << 4) | decoding_map[chunk];
 800190c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	b21a      	sxth	r2, r3
 8001914:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001918:	3338      	adds	r3, #56	@ 0x38
 800191a:	443b      	add	r3, r7
 800191c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001920:	b21b      	sxth	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b21b      	sxth	r3, r3
 8001926:	867b      	strh	r3, [r7, #50]	@ 0x32
    for (int i = 0; i < 4; i++) {
 8001928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192a:	3301      	adds	r3, #1
 800192c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800192e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001930:	2b03      	cmp	r3, #3
 8001932:	ddd2      	ble.n	80018da <decode_gcr_20_to_16+0x7c>
    }

    *out_value = result;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001938:	801a      	strh	r2, [r3, #0]
    return 1;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	373c      	adds	r7, #60	@ 0x3c
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <parse_edt_frame>:

int parse_edt_frame(uint16_t frame, char *type_out, float *value_out) {
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b08b      	sub	sp, #44	@ 0x2c
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	81fb      	strh	r3, [r7, #14]
    if (frame > 0xFFFF || frame < 0){
    	return -1;
    }

    uint16_t data = (frame >> 4) & 0x0FFF;
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t crc_received = frame & 0x0F;
 800195c:	89fb      	ldrh	r3, [r7, #14]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t crc_calculated = calculate_crc(data, "BDShot");
 8001968:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800196a:	4960      	ldr	r1, [pc, #384]	@ (8001aec <parse_edt_frame+0x1a4>)
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff1d 	bl	80017ac <calculate_crc>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    if (crc_received != crc_calculated) return -2;
 8001978:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800197c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001980:	429a      	cmp	r2, r3
 8001982:	d002      	beq.n	800198a <parse_edt_frame+0x42>
 8001984:	f06f 0301 	mvn.w	r3, #1
 8001988:	e0ab      	b.n	8001ae2 <parse_edt_frame+0x19a>

    uint8_t exponent = (data >> 9) & 0x07;
 800198a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800198c:	0a5b      	lsrs	r3, r3, #9
 800198e:	b29b      	uxth	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint16_t base_period = data & 0x1FF;
 800199a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800199c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a0:	843b      	strh	r3, [r7, #32]
    if (exponent > 12) return -3;
 80019a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d902      	bls.n	80019b0 <parse_edt_frame+0x68>
 80019aa:	f06f 0302 	mvn.w	r3, #2
 80019ae:	e098      	b.n	8001ae2 <parse_edt_frame+0x19a>

    uint32_t period_us = base_period << exponent;
 80019b0:	8c3a      	ldrh	r2, [r7, #32]
 80019b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	61fb      	str	r3, [r7, #28]
    if (period_us == 0) return -3;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <parse_edt_frame+0x80>
 80019c2:	f06f 0302 	mvn.w	r3, #2
 80019c6:	e08c      	b.n	8001ae2 <parse_edt_frame+0x19a>

    bool is_edt = ((exponent & 1) == 0) && ((base_period & 0x100) == 0);
 80019c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d106      	bne.n	80019e2 <parse_edt_frame+0x9a>
 80019d4:	8c3b      	ldrh	r3, [r7, #32]
 80019d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <parse_edt_frame+0x9a>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <parse_edt_frame+0x9c>
 80019e2:	2300      	movs	r3, #0
 80019e4:	76fb      	strb	r3, [r7, #27]
 80019e6:	7efb      	ldrb	r3, [r7, #27]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	76fb      	strb	r3, [r7, #27]

    if (is_edt) {
 80019ee:	7efb      	ldrb	r3, [r7, #27]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d051      	beq.n	8001a98 <parse_edt_frame+0x150>
        uint8_t telemetry_type = (data >> 8) & 0xF;
 80019f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	74fb      	strb	r3, [r7, #19]
        uint8_t telemetry_value = data & 0xFF;
 8001a02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a04:	74bb      	strb	r3, [r7, #18]

        switch (telemetry_type) {
 8001a06:	7cfb      	ldrb	r3, [r7, #19]
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d002      	beq.n	8001a12 <parse_edt_frame+0xca>
 8001a0c:	2b0e      	cmp	r3, #14
 8001a0e:	d018      	beq.n	8001a42 <parse_edt_frame+0xfa>
 8001a10:	e02d      	b.n	8001a6e <parse_edt_frame+0x126>
            case 0x04:
                *value_out = (float)(telemetry_value) / 0.25f;
 8001a12:	7cbb      	ldrb	r3, [r7, #18]
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a1c:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8001a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	edc3 7a00 	vstr	s15, [r3]
                if (type_out) strcpy(type_out, "Voltage (V)");
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d030      	beq.n	8001a92 <parse_edt_frame+0x14a>
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4a2f      	ldr	r2, [pc, #188]	@ (8001af0 <parse_edt_frame+0x1a8>)
 8001a34:	461c      	mov	r4, r3
 8001a36:	4613      	mov	r3, r2
 8001a38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a3a:	6020      	str	r0, [r4, #0]
 8001a3c:	6061      	str	r1, [r4, #4]
 8001a3e:	60a2      	str	r2, [r4, #8]
                break;
 8001a40:	e027      	b.n	8001a92 <parse_edt_frame+0x14a>
            case 0x0E:
                if (type_out) strcpy(type_out, "Status Frame");
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d009      	beq.n	8001a5c <parse_edt_frame+0x114>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8001af4 <parse_edt_frame+0x1ac>)
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	4613      	mov	r3, r2
 8001a50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a52:	6020      	str	r0, [r4, #0]
 8001a54:	6061      	str	r1, [r4, #4]
 8001a56:	60a2      	str	r2, [r4, #8]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	7323      	strb	r3, [r4, #12]
                *value_out = telemetry_value; // raw value, parse later if needed
 8001a5c:	7cbb      	ldrb	r3, [r7, #18]
 8001a5e:	ee07 3a90 	vmov	s15, r3
 8001a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	edc3 7a00 	vstr	s15, [r3]
                break;
 8001a6c:	e012      	b.n	8001a94 <parse_edt_frame+0x14c>
            default:
                *value_out = telemetry_value;
 8001a6e:	7cbb      	ldrb	r3, [r7, #18]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	edc3 7a00 	vstr	s15, [r3]
                if (type_out) sprintf(type_out, "Unknown (0x%X)", telemetry_type);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d007      	beq.n	8001a94 <parse_edt_frame+0x14c>
 8001a84:	7cfb      	ldrb	r3, [r7, #19]
 8001a86:	461a      	mov	r2, r3
 8001a88:	491b      	ldr	r1, [pc, #108]	@ (8001af8 <parse_edt_frame+0x1b0>)
 8001a8a:	68b8      	ldr	r0, [r7, #8]
 8001a8c:	f006 fe16 	bl	80086bc <siprintf>
 8001a90:	e000      	b.n	8001a94 <parse_edt_frame+0x14c>
                break;
 8001a92:	bf00      	nop
        }

        return 1; // EDT frame
 8001a94:	2301      	movs	r3, #1
 8001a96:	e024      	b.n	8001ae2 <parse_edt_frame+0x19a>
    } else {
        if (base_period == 0 || base_period == 0x1FF) {
 8001a98:	8c3b      	ldrh	r3, [r7, #32]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d004      	beq.n	8001aa8 <parse_edt_frame+0x160>
 8001a9e:	8c3b      	ldrh	r3, [r7, #32]
 8001aa0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d104      	bne.n	8001ab2 <parse_edt_frame+0x16a>
            *value_out = 0;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e00d      	b.n	8001ace <parse_edt_frame+0x186>
        } else {
            float erpm = 60000000.0f / (float)period_us;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001abc:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001afc <parse_edt_frame+0x1b4>
 8001ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac4:	edc7 7a05 	vstr	s15, [r7, #20]
            *value_out = erpm;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	601a      	str	r2, [r3, #0]
        }

        if (type_out) strcpy(type_out, "eRPM");
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <parse_edt_frame+0x198>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <parse_edt_frame+0x1b8>)
 8001ad8:	6810      	ldr	r0, [r2, #0]
 8001ada:	6018      	str	r0, [r3, #0]
 8001adc:	7912      	ldrb	r2, [r2, #4]
 8001ade:	711a      	strb	r2, [r3, #4]
        return 2; // eRPM frame
 8001ae0:	2302      	movs	r3, #2
    }

    return -3;
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	372c      	adds	r7, #44	@ 0x2c
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	08009834 	.word	0x08009834
 8001af0:	0800983c 	.word	0x0800983c
 8001af4:	08009848 	.word	0x08009848
 8001af8:	08009858 	.word	0x08009858
 8001afc:	4c64e1c0 	.word	0x4c64e1c0
 8001b00:	08009868 	.word	0x08009868

08001b04 <send_binary_uart6>:

int send_binary_uart6(const void* data, size_t len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b0a4      	sub	sp, #144	@ 0x90
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
    if (len > SERIAL_QUEUE_ITEM_SIZE)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b80      	cmp	r3, #128	@ 0x80
 8001b12:	d901      	bls.n	8001b18 <send_binary_uart6+0x14>
        len = SERIAL_QUEUE_ITEM_SIZE;
 8001b14:	2380      	movs	r3, #128	@ 0x80
 8001b16:	603b      	str	r3, [r7, #0]

    SerialMessage_t msg;
    memcpy(msg.data, data, len);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f006 ff9e 	bl	8008a62 <memcpy>
    msg.length = len;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    if (osMessageQueuePut(serialQueueHandle, &msg, 0, 0) != osOK) {
 8001b2c:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <send_binary_uart6+0x4c>)
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	f107 010c 	add.w	r1, r7, #12
 8001b34:	2300      	movs	r3, #0
 8001b36:	2200      	movs	r2, #0
 8001b38:	f003 fe58 	bl	80057ec <osMessageQueuePut>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <send_binary_uart6+0x42>
        return 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <send_binary_uart6+0x44>
    }

    return len;
 8001b46:	683b      	ldr	r3, [r7, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3790      	adds	r7, #144	@ 0x90
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200003fc 	.word	0x200003fc

08001b54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f003 fdb7 	bl	80056d0 <osDelay>
 8001b62:	e7fb      	b.n	8001b5c <StartDefaultTask+0x8>

08001b64 <DShotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DShotTask */
void DShotTask(void *argument)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DShotTask */
	printf("\nDShotTask Begin.\r\n");
 8001b6c:	4878      	ldr	r0, [pc, #480]	@ (8001d50 <DShotTask+0x1ec>)
 8001b6e:	f006 fd9d 	bl	80086ac <puts>
	printf("SystemCoreClock=%lu\r\n", SystemCoreClock);
 8001b72:	4b78      	ldr	r3, [pc, #480]	@ (8001d54 <DShotTask+0x1f0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	4877      	ldr	r0, [pc, #476]	@ (8001d58 <DShotTask+0x1f4>)
 8001b7a:	f006 fd2f 	bl	80085dc <iprintf>
	uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b7e:	f001 ff0d 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8001b82:	60f8      	str	r0, [r7, #12]
	uint32_t tim5_clk = pclk1;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	617b      	str	r3, [r7, #20]
	if ((RCC->CFGR & RCC_CFGR_PPRE1) != RCC_CFGR_PPRE1_DIV1)
 8001b88:	4b74      	ldr	r3, [pc, #464]	@ (8001d5c <DShotTask+0x1f8>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <DShotTask+0x36>
	    tim5_clk *= 2;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
	printf("TIM5 actual clk: %lu\r\n", tim5_clk);
 8001b9a:	6979      	ldr	r1, [r7, #20]
 8001b9c:	4870      	ldr	r0, [pc, #448]	@ (8001d60 <DShotTask+0x1fc>)
 8001b9e:	f006 fd1d 	bl	80085dc <iprintf>

	queue_bdshot_pulse(0, true, dshot_buffer_ch1);
 8001ba2:	4a70      	ldr	r2, [pc, #448]	@ (8001d64 <DShotTask+0x200>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fc4f 	bl	800144a <queue_bdshot_pulse>
	queue_bdshot_pulse(0, true, dshot_buffer_ch2);
 8001bac:	4a6e      	ldr	r2, [pc, #440]	@ (8001d68 <DShotTask+0x204>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff fc4a 	bl	800144a <queue_bdshot_pulse>
	queue_bdshot_pulse(0, true, dshot_buffer_ch3);
 8001bb6:	4a6d      	ldr	r2, [pc, #436]	@ (8001d6c <DShotTask+0x208>)
 8001bb8:	2101      	movs	r1, #1
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f7ff fc45 	bl	800144a <queue_bdshot_pulse>
	queue_bdshot_pulse(0, true, dshot_buffer_ch4);
 8001bc0:	4a6b      	ldr	r2, [pc, #428]	@ (8001d70 <DShotTask+0x20c>)
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff fc40 	bl	800144a <queue_bdshot_pulse>
	for (int i = 0; i < 3000; i++){
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	e011      	b.n	8001bf4 <DShotTask+0x90>
		send_bdshot(TIM_CHANNEL_1);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff fc53 	bl	800147c <send_bdshot>
		send_bdshot(TIM_CHANNEL_2);
 8001bd6:	2004      	movs	r0, #4
 8001bd8:	f7ff fc50 	bl	800147c <send_bdshot>
	    send_bdshot(TIM_CHANNEL_3);
 8001bdc:	2008      	movs	r0, #8
 8001bde:	f7ff fc4d 	bl	800147c <send_bdshot>
	    send_bdshot(TIM_CHANNEL_4);
 8001be2:	200c      	movs	r0, #12
 8001be4:	f7ff fc4a 	bl	800147c <send_bdshot>
		vTaskDelay(1);
 8001be8:	2001      	movs	r0, #1
 8001bea:	f004 ff1b 	bl	8006a24 <vTaskDelay>
	for (int i = 0; i < 3000; i++){
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	dde8      	ble.n	8001bd0 <DShotTask+0x6c>
	}
	vTaskDelay(50);
 8001bfe:	2032      	movs	r0, #50	@ 0x32
 8001c00:	f004 ff10 	bl	8006a24 <vTaskDelay>

	queue_bdshot_pulse(100, true, dshot_buffer_ch1);
 8001c04:	4a57      	ldr	r2, [pc, #348]	@ (8001d64 <DShotTask+0x200>)
 8001c06:	2101      	movs	r1, #1
 8001c08:	2064      	movs	r0, #100	@ 0x64
 8001c0a:	f7ff fc1e 	bl	800144a <queue_bdshot_pulse>
	queue_bdshot_pulse(200, true, dshot_buffer_ch2);
 8001c0e:	4a56      	ldr	r2, [pc, #344]	@ (8001d68 <DShotTask+0x204>)
 8001c10:	2101      	movs	r1, #1
 8001c12:	20c8      	movs	r0, #200	@ 0xc8
 8001c14:	f7ff fc19 	bl	800144a <queue_bdshot_pulse>
	queue_bdshot_pulse(300, true, dshot_buffer_ch3);
 8001c18:	4a54      	ldr	r2, [pc, #336]	@ (8001d6c <DShotTask+0x208>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c20:	f7ff fc13 	bl	800144a <queue_bdshot_pulse>
	queue_bdshot_pulse(400, true, dshot_buffer_ch4);
 8001c24:	4a52      	ldr	r2, [pc, #328]	@ (8001d70 <DShotTask+0x20c>)
 8001c26:	2101      	movs	r1, #1
 8001c28:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001c2c:	f7ff fc0d 	bl	800144a <queue_bdshot_pulse>
    for (;;){
      while(dshot_running_ch1){delay_us_precise(5);}
 8001c30:	e003      	b.n	8001c3a <DShotTask+0xd6>
 8001c32:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001c36:	f7ff fcf7 	bl	8001628 <delay_us_precise>
 8001c3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d74 <DShotTask+0x210>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f6      	bne.n	8001c32 <DShotTask+0xce>
      send_bdshot(TIM_CHANNEL_1);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7ff fc19 	bl	800147c <send_bdshot>
      delay_us_precise(40);
 8001c4a:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8001d78 <DShotTask+0x214>
 8001c4e:	f7ff fceb 	bl	8001628 <delay_us_precise>
      set_pin_input(GPIOA, GPIO_PIN_0);
 8001c52:	2101      	movs	r1, #1
 8001c54:	4849      	ldr	r0, [pc, #292]	@ (8001d7c <DShotTask+0x218>)
 8001c56:	f7ff fb17 	bl	8001288 <set_pin_input>
      process_bdshot_telemetry(GPIOA, GPIO_PIN_0, packet_PA0);
 8001c5a:	4a49      	ldr	r2, [pc, #292]	@ (8001d80 <DShotTask+0x21c>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4847      	ldr	r0, [pc, #284]	@ (8001d7c <DShotTask+0x218>)
 8001c60:	f7ff fab8 	bl	80011d4 <process_bdshot_telemetry>
      set_pin_pwm(GPIOA, GPIO_PIN_0, GPIO_AF2_TIM5);
 8001c64:	2202      	movs	r2, #2
 8001c66:	2101      	movs	r1, #1
 8001c68:	4844      	ldr	r0, [pc, #272]	@ (8001d7c <DShotTask+0x218>)
 8001c6a:	f7ff fb2b 	bl	80012c4 <set_pin_pwm>
      delay_us_precise(60);
 8001c6e:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8001d84 <DShotTask+0x220>
 8001c72:	f7ff fcd9 	bl	8001628 <delay_us_precise>

      while(dshot_running_ch2){delay_us_precise(5);}
 8001c76:	e003      	b.n	8001c80 <DShotTask+0x11c>
 8001c78:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001c7c:	f7ff fcd4 	bl	8001628 <delay_us_precise>
 8001c80:	4b41      	ldr	r3, [pc, #260]	@ (8001d88 <DShotTask+0x224>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f6      	bne.n	8001c78 <DShotTask+0x114>
      send_bdshot(TIM_CHANNEL_2);
 8001c8a:	2004      	movs	r0, #4
 8001c8c:	f7ff fbf6 	bl	800147c <send_bdshot>
      delay_us_precise(40);
 8001c90:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8001d78 <DShotTask+0x214>
 8001c94:	f7ff fcc8 	bl	8001628 <delay_us_precise>
      set_pin_input(GPIOA, GPIO_PIN_1);
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4838      	ldr	r0, [pc, #224]	@ (8001d7c <DShotTask+0x218>)
 8001c9c:	f7ff faf4 	bl	8001288 <set_pin_input>
      process_bdshot_telemetry(GPIOA, GPIO_PIN_1, packet_PA1);
 8001ca0:	4a3a      	ldr	r2, [pc, #232]	@ (8001d8c <DShotTask+0x228>)
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	4835      	ldr	r0, [pc, #212]	@ (8001d7c <DShotTask+0x218>)
 8001ca6:	f7ff fa95 	bl	80011d4 <process_bdshot_telemetry>
      set_pin_pwm(GPIOA, GPIO_PIN_1, GPIO_AF2_TIM5);
 8001caa:	2202      	movs	r2, #2
 8001cac:	2102      	movs	r1, #2
 8001cae:	4833      	ldr	r0, [pc, #204]	@ (8001d7c <DShotTask+0x218>)
 8001cb0:	f7ff fb08 	bl	80012c4 <set_pin_pwm>
      delay_us_precise(60);
 8001cb4:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001d84 <DShotTask+0x220>
 8001cb8:	f7ff fcb6 	bl	8001628 <delay_us_precise>

      while(dshot_running_ch3){delay_us_precise(5);}
 8001cbc:	e003      	b.n	8001cc6 <DShotTask+0x162>
 8001cbe:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001cc2:	f7ff fcb1 	bl	8001628 <delay_us_precise>
 8001cc6:	4b32      	ldr	r3, [pc, #200]	@ (8001d90 <DShotTask+0x22c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f6      	bne.n	8001cbe <DShotTask+0x15a>
      send_bdshot(TIM_CHANNEL_3);
 8001cd0:	2008      	movs	r0, #8
 8001cd2:	f7ff fbd3 	bl	800147c <send_bdshot>
      delay_us_precise(40);
 8001cd6:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001d78 <DShotTask+0x214>
 8001cda:	f7ff fca5 	bl	8001628 <delay_us_precise>
      set_pin_input(GPIOA, GPIO_PIN_2);
 8001cde:	2104      	movs	r1, #4
 8001ce0:	4826      	ldr	r0, [pc, #152]	@ (8001d7c <DShotTask+0x218>)
 8001ce2:	f7ff fad1 	bl	8001288 <set_pin_input>
      process_bdshot_telemetry(GPIOA, GPIO_PIN_2, packet_PA2);
 8001ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8001d94 <DShotTask+0x230>)
 8001ce8:	2104      	movs	r1, #4
 8001cea:	4824      	ldr	r0, [pc, #144]	@ (8001d7c <DShotTask+0x218>)
 8001cec:	f7ff fa72 	bl	80011d4 <process_bdshot_telemetry>
      set_pin_pwm(GPIOA, GPIO_PIN_2, GPIO_AF2_TIM5);
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	4821      	ldr	r0, [pc, #132]	@ (8001d7c <DShotTask+0x218>)
 8001cf6:	f7ff fae5 	bl	80012c4 <set_pin_pwm>
      delay_us_precise(60);
 8001cfa:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001d84 <DShotTask+0x220>
 8001cfe:	f7ff fc93 	bl	8001628 <delay_us_precise>

      while(dshot_running_ch4){delay_us_precise(5);}
 8001d02:	e003      	b.n	8001d0c <DShotTask+0x1a8>
 8001d04:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001d08:	f7ff fc8e 	bl	8001628 <delay_us_precise>
 8001d0c:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <DShotTask+0x234>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f6      	bne.n	8001d04 <DShotTask+0x1a0>
      send_bdshot(TIM_CHANNEL_4);
 8001d16:	200c      	movs	r0, #12
 8001d18:	f7ff fbb0 	bl	800147c <send_bdshot>
      set_pin_input(GPIOA, GPIO_PIN_3);
 8001d1c:	2108      	movs	r1, #8
 8001d1e:	4817      	ldr	r0, [pc, #92]	@ (8001d7c <DShotTask+0x218>)
 8001d20:	f7ff fab2 	bl	8001288 <set_pin_input>
      process_bdshot_telemetry(GPIOA, GPIO_PIN_3, packet_PA3);
 8001d24:	4a1d      	ldr	r2, [pc, #116]	@ (8001d9c <DShotTask+0x238>)
 8001d26:	2108      	movs	r1, #8
 8001d28:	4814      	ldr	r0, [pc, #80]	@ (8001d7c <DShotTask+0x218>)
 8001d2a:	f7ff fa53 	bl	80011d4 <process_bdshot_telemetry>
      set_pin_pwm(GPIOA, GPIO_PIN_3, GPIO_AF2_TIM5);
 8001d2e:	2202      	movs	r2, #2
 8001d30:	2108      	movs	r1, #8
 8001d32:	4812      	ldr	r0, [pc, #72]	@ (8001d7c <DShotTask+0x218>)
 8001d34:	f7ff fac6 	bl	80012c4 <set_pin_pwm>
      delay_us_precise(60);
 8001d38:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8001d84 <DShotTask+0x220>
 8001d3c:	f7ff fc74 	bl	8001628 <delay_us_precise>

	  send_binary_uart6(packet_PA0, sizeof(packet_PA0));
 8001d40:	2103      	movs	r1, #3
 8001d42:	480f      	ldr	r0, [pc, #60]	@ (8001d80 <DShotTask+0x21c>)
 8001d44:	f7ff fede 	bl	8001b04 <send_binary_uart6>

      vTaskDelay(1);
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f004 fe6b 	bl	8006a24 <vTaskDelay>
      while(dshot_running_ch1){delay_us_precise(5);}
 8001d4e:	e774      	b.n	8001c3a <DShotTask+0xd6>
 8001d50:	08009870 	.word	0x08009870
 8001d54:	20000004 	.word	0x20000004
 8001d58:	08009884 	.word	0x08009884
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	0800989c 	.word	0x0800989c
 8001d64:	200002a8 	.word	0x200002a8
 8001d68:	200002f8 	.word	0x200002f8
 8001d6c:	20000348 	.word	0x20000348
 8001d70:	20000398 	.word	0x20000398
 8001d74:	200003e8 	.word	0x200003e8
 8001d78:	42200000 	.word	0x42200000
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	200003ec 	.word	0x200003ec
 8001d84:	42700000 	.word	0x42700000
 8001d88:	200003e9 	.word	0x200003e9
 8001d8c:	200003f0 	.word	0x200003f0
 8001d90:	200003ea 	.word	0x200003ea
 8001d94:	200003f4 	.word	0x200003f4
 8001d98:	200003eb 	.word	0x200003eb
 8001d9c:	200003f8 	.word	0x200003f8

08001da0 <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void *argument)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0a4      	sub	sp, #144	@ 0x90
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    SerialMessage_t msg;

  for (;;)
  {
      // 1️⃣ Process serial debug messages
      if (osMessageQueueGet(serialQueueHandle, &msg, NULL, osWaitForever) == osOK) {
 8001da8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <StartSerialTask+0x3c>)
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	f107 010c 	add.w	r1, r7, #12
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	2200      	movs	r2, #0
 8001db6:	f003 fd79 	bl	80058ac <osMessageQueueGet>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d109      	bne.n	8001dd4 <StartSerialTask+0x34>
          HAL_UART_Transmit(&huart6, msg.data, msg.length, HAL_MAX_DELAY);
 8001dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	f107 010c 	add.w	r1, r7, #12
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	4804      	ldr	r0, [pc, #16]	@ (8001de0 <StartSerialTask+0x40>)
 8001dd0:	f002 ffa2 	bl	8004d18 <HAL_UART_Transmit>
      }
      //HAL_UART_Transmit(&huart6, (uint8_t *)"SerialTask alive\r\n", 18, HAL_MAX_DELAY);
      //osDelay(1000);  // Only for debugging; remove later

      osDelay(1); // Let other tasks run
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f003 fc7b 	bl	80056d0 <osDelay>
      if (osMessageQueueGet(serialQueueHandle, &msg, NULL, osWaitForever) == osOK) {
 8001dda:	e7e5      	b.n	8001da8 <StartSerialTask+0x8>
 8001ddc:	200003fc 	.word	0x200003fc
 8001de0:	20000254 	.word	0x20000254

08001de4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001df6:	f000 fb7b 	bl	80024f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  //printf("PeriodElapsedCallback\r\n");
  /* USER CODE END Callback 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40001c00 	.word	0x40001c00

08001e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e0c:	b672      	cpsid	i
}
 8001e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <Error_Handler+0x8>

08001e14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_MspInit+0x54>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	4a11      	ldr	r2, [pc, #68]	@ (8001e68 <HAL_MspInit+0x54>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <HAL_MspInit+0x54>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_MspInit+0x54>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <HAL_MspInit+0x54>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e46:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_MspInit+0x54>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	210f      	movs	r1, #15
 8001e56:	f06f 0001 	mvn.w	r0, #1
 8001e5a:	f000 fc21 	bl	80026a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a72      	ldr	r2, [pc, #456]	@ (8002044 <HAL_TIM_PWM_MspInit+0x1d8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	f040 80de 	bne.w	800203c <HAL_TIM_PWM_MspInit+0x1d0>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	4b70      	ldr	r3, [pc, #448]	@ (8002048 <HAL_TIM_PWM_MspInit+0x1dc>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	4a6f      	ldr	r2, [pc, #444]	@ (8002048 <HAL_TIM_PWM_MspInit+0x1dc>)
 8001e8a:	f043 0308 	orr.w	r3, r3, #8
 8001e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e90:	4b6d      	ldr	r3, [pc, #436]	@ (8002048 <HAL_TIM_PWM_MspInit+0x1dc>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8001e9c:	4b6b      	ldr	r3, [pc, #428]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001e9e:	4a6c      	ldr	r2, [pc, #432]	@ (8002050 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001ea0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8001ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ea4:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001ea8:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eaa:	4b68      	ldr	r3, [pc, #416]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001eac:	2240      	movs	r2, #64	@ 0x40
 8001eae:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb0:	4b66      	ldr	r3, [pc, #408]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001eb6:	4b65      	ldr	r3, [pc, #404]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001eb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ebc:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ebe:	4b63      	ldr	r3, [pc, #396]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ec0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ec4:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ec6:	4b61      	ldr	r3, [pc, #388]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ec8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ecc:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8001ece:	4b5f      	ldr	r3, [pc, #380]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001ed4:	4b5d      	ldr	r3, [pc, #372]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ed6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001eda:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001edc:	4b5b      	ldr	r3, [pc, #364]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001ee2:	485a      	ldr	r0, [pc, #360]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ee4:	f000 fc06 	bl	80026f4 <HAL_DMA_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8001eee:	f7ff ff8b 	bl	8001e08 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a55      	ldr	r2, [pc, #340]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ef8:	4a54      	ldr	r2, [pc, #336]	@ (800204c <HAL_TIM_PWM_MspInit+0x1e0>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5_CH2 Init */
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8001efe:	4b55      	ldr	r3, [pc, #340]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f00:	4a55      	ldr	r2, [pc, #340]	@ (8002058 <HAL_TIM_PWM_MspInit+0x1ec>)
 8001f02:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8001f04:	4b53      	ldr	r3, [pc, #332]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f06:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001f0a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f0c:	4b51      	ldr	r3, [pc, #324]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f0e:	2240      	movs	r2, #64	@ 0x40
 8001f10:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f12:	4b50      	ldr	r3, [pc, #320]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001f18:	4b4e      	ldr	r3, [pc, #312]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f1e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f20:	4b4c      	ldr	r3, [pc, #304]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f26:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f28:	4b4a      	ldr	r3, [pc, #296]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f2e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001f30:	4b48      	ldr	r3, [pc, #288]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001f36:	4b47      	ldr	r3, [pc, #284]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f3c:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f3e:	4b45      	ldr	r3, [pc, #276]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8001f44:	4843      	ldr	r0, [pc, #268]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f46:	f000 fbd5 	bl	80026f4 <HAL_DMA_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_TIM_PWM_MspInit+0xe8>
    {
      Error_Handler();
 8001f50:	f7ff ff5a 	bl	8001e08 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3f      	ldr	r2, [pc, #252]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f58:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f5a:	4a3e      	ldr	r2, [pc, #248]	@ (8002054 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5_CH3_UP Init */
    hdma_tim5_ch3_up.Instance = DMA1_Stream0;
 8001f60:	4b3e      	ldr	r3, [pc, #248]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f62:	4a3f      	ldr	r2, [pc, #252]	@ (8002060 <HAL_TIM_PWM_MspInit+0x1f4>)
 8001f64:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Channel = DMA_CHANNEL_6;
 8001f66:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f68:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001f6c:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f70:	2240      	movs	r2, #64	@ 0x40
 8001f72:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f74:	4b39      	ldr	r3, [pc, #228]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001f7a:	4b38      	ldr	r3, [pc, #224]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f80:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f82:	4b36      	ldr	r3, [pc, #216]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f88:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f8a:	4b34      	ldr	r3, [pc, #208]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f90:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 8001f92:	4b32      	ldr	r3, [pc, #200]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001f98:	4b30      	ldr	r3, [pc, #192]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001f9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f9e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8001fa6:	482d      	ldr	r0, [pc, #180]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fa8:	f000 fba4 	bl	80026f4 <HAL_DMA_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_TIM_PWM_MspInit+0x14a>
    {
      Error_Handler();
 8001fb2:	f7ff ff29 	bl	8001e08 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a28      	ldr	r2, [pc, #160]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fba:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fbc:	4a27      	ldr	r2, [pc, #156]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a25      	ldr	r2, [pc, #148]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fc6:	621a      	str	r2, [r3, #32]
 8001fc8:	4a24      	ldr	r2, [pc, #144]	@ (800205c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5_CH4_TRIG Init */
    hdma_tim5_ch4_trig.Instance = DMA1_Stream1;
 8001fce:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001fd0:	4a25      	ldr	r2, [pc, #148]	@ (8002068 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001fd2:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8001fd4:	4b23      	ldr	r3, [pc, #140]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001fd6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001fda:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fdc:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001fde:	2240      	movs	r2, #64	@ 0x40
 8001fe0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe2:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001fea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fee:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001ff2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ff6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001ffa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ffe:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8002000:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002006:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002008:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800200c:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002010:	2200      	movs	r2, #0
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8002014:	4813      	ldr	r0, [pc, #76]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002016:	f000 fb6d 	bl	80026f4 <HAL_DMA_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_TIM_PWM_MspInit+0x1b8>
    {
      Error_Handler();
 8002020:	f7ff fef2 	bl	8001e08 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a0f      	ldr	r2, [pc, #60]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002028:	631a      	str	r2, [r3, #48]	@ 0x30
 800202a:	4a0e      	ldr	r2, [pc, #56]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a0c      	ldr	r2, [pc, #48]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002034:	639a      	str	r2, [r3, #56]	@ 0x38
 8002036:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <HAL_TIM_PWM_MspInit+0x1f8>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40000c00 	.word	0x40000c00
 8002048:	40023800 	.word	0x40023800
 800204c:	200000d4 	.word	0x200000d4
 8002050:	40026040 	.word	0x40026040
 8002054:	20000134 	.word	0x20000134
 8002058:	40026070 	.word	0x40026070
 800205c:	20000194 	.word	0x20000194
 8002060:	40026010 	.word	0x40026010
 8002064:	200001f4 	.word	0x200001f4
 8002068:	40026028 	.word	0x40026028

0800206c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1a      	ldr	r2, [pc, #104]	@ (80020f4 <HAL_TIM_MspPostInit+0x88>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d12d      	bne.n	80020ea <HAL_TIM_MspPostInit+0x7e>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	4b19      	ldr	r3, [pc, #100]	@ (80020f8 <HAL_TIM_MspPostInit+0x8c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a18      	ldr	r2, [pc, #96]	@ (80020f8 <HAL_TIM_MspPostInit+0x8c>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <HAL_TIM_MspPostInit+0x8c>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020aa:	2301      	movs	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	4619      	mov	r1, r3
 80020c4:	480d      	ldr	r0, [pc, #52]	@ (80020fc <HAL_TIM_MspPostInit+0x90>)
 80020c6:	f000 fe85 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80020ca:	230e      	movs	r3, #14
 80020cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020da:	2302      	movs	r3, #2
 80020dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4619      	mov	r1, r3
 80020e4:	4805      	ldr	r0, [pc, #20]	@ (80020fc <HAL_TIM_MspPostInit+0x90>)
 80020e6:	f000 fe75 	bl	8002dd4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80020ea:	bf00      	nop
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40000c00 	.word	0x40000c00
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000

08002100 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	@ 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a19      	ldr	r2, [pc, #100]	@ (8002184 <HAL_UART_MspInit+0x84>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12b      	bne.n	800217a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	4a17      	ldr	r2, [pc, #92]	@ (8002188 <HAL_UART_MspInit+0x88>)
 800212c:	f043 0320 	orr.w	r3, r3, #32
 8002130:	6453      	str	r3, [r2, #68]	@ 0x44
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4a10      	ldr	r2, [pc, #64]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800215a:	23c0      	movs	r3, #192	@ 0xc0
 800215c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002166:	2303      	movs	r3, #3
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800216a:	2308      	movs	r3, #8
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	@ (800218c <HAL_UART_MspInit+0x8c>)
 8002176:	f000 fe2d 	bl	8002dd4 <HAL_GPIO_Init>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	@ 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40011400 	.word	0x40011400
 8002188:	40023800 	.word	0x40023800
 800218c:	40020800 	.word	0x40020800

08002190 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08e      	sub	sp, #56	@ 0x38
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	4b33      	ldr	r3, [pc, #204]	@ (8002274 <HAL_InitTick+0xe4>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	4a32      	ldr	r2, [pc, #200]	@ (8002274 <HAL_InitTick+0xe4>)
 80021aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b0:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <HAL_InitTick+0xe4>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021bc:	f107 0210 	add.w	r2, r7, #16
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f001 fc10 	bl	80039ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d103      	bne.n	80021de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021d6:	f001 fbe1 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 80021da:	6378      	str	r0, [r7, #52]	@ 0x34
 80021dc:	e004      	b.n	80021e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021de:	f001 fbdd 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 80021e2:	4603      	mov	r3, r0
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ea:	4a23      	ldr	r2, [pc, #140]	@ (8002278 <HAL_InitTick+0xe8>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	0c9b      	lsrs	r3, r3, #18
 80021f2:	3b01      	subs	r3, #1
 80021f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80021f6:	4b21      	ldr	r3, [pc, #132]	@ (800227c <HAL_InitTick+0xec>)
 80021f8:	4a21      	ldr	r2, [pc, #132]	@ (8002280 <HAL_InitTick+0xf0>)
 80021fa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 80021fc:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <HAL_InitTick+0xec>)
 80021fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002202:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8002204:	4a1d      	ldr	r2, [pc, #116]	@ (800227c <HAL_InitTick+0xec>)
 8002206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002208:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 800220a:	4b1c      	ldr	r3, [pc, #112]	@ (800227c <HAL_InitTick+0xec>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <HAL_InitTick+0xec>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002216:	4b19      	ldr	r3, [pc, #100]	@ (800227c <HAL_InitTick+0xec>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 800221c:	4817      	ldr	r0, [pc, #92]	@ (800227c <HAL_InitTick+0xec>)
 800221e:	f001 fc17 	bl	8003a50 <HAL_TIM_Base_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002228:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800222c:	2b00      	cmp	r3, #0
 800222e:	d11b      	bne.n	8002268 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 8002230:	4812      	ldr	r0, [pc, #72]	@ (800227c <HAL_InitTick+0xec>)
 8002232:	f001 fc67 	bl	8003b04 <HAL_TIM_Base_Start_IT>
 8002236:	4603      	mov	r3, r0
 8002238:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800223c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002240:	2b00      	cmp	r3, #0
 8002242:	d111      	bne.n	8002268 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002244:	202c      	movs	r0, #44	@ 0x2c
 8002246:	f000 fa47 	bl	80026d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b0f      	cmp	r3, #15
 800224e:	d808      	bhi.n	8002262 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 8002250:	2200      	movs	r2, #0
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	202c      	movs	r0, #44	@ 0x2c
 8002256:	f000 fa23 	bl	80026a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800225a:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <HAL_InitTick+0xf4>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e002      	b.n	8002268 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002268:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800226c:	4618      	mov	r0, r3
 800226e:	3738      	adds	r7, #56	@ 0x38
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	431bde83 	.word	0x431bde83
 800227c:	20000400 	.word	0x20000400
 8002280:	40001c00 	.word	0x40001c00
 8002284:	20000008 	.word	0x20000008

08002288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <NMI_Handler+0x4>

08002290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <HardFault_Handler+0x4>

08002298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <MemManage_Handler+0x4>

080022a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <BusFault_Handler+0x4>

080022a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <UsageFault_Handler+0x4>

080022b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <DMA1_Stream0_IRQHandler+0x10>)
 80022c6:	f000 fb1b 	bl	8002900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000194 	.word	0x20000194

080022d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <DMA1_Stream1_IRQHandler+0x10>)
 80022da:	f000 fb11 	bl	8002900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200001f4 	.word	0x200001f4

080022e8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <DMA1_Stream2_IRQHandler+0x10>)
 80022ee:	f000 fb07 	bl	8002900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200000d4 	.word	0x200000d4

080022fc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8002300:	4802      	ldr	r0, [pc, #8]	@ (800230c <DMA1_Stream4_IRQHandler+0x10>)
 8002302:	f000 fafd 	bl	8002900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000134 	.word	0x20000134

08002310 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002314:	4802      	ldr	r0, [pc, #8]	@ (8002320 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002316:	f001 feed 	bl	80040f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000400 	.word	0x20000400

08002324 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e00a      	b.n	800234c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002336:	f3af 8000 	nop.w
 800233a:	4601      	mov	r1, r0
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	60ba      	str	r2, [r7, #8]
 8002342:	b2ca      	uxtb	r2, r1
 8002344:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbf0      	blt.n	8002336 <_read+0x12>
  }

  return len;
 8002354:	687b      	ldr	r3, [r7, #4]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_close>:

int _close(int file)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002386:	605a      	str	r2, [r3, #4]
  return 0;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <_isatty>:

int _isatty(int file)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d0:	4a14      	ldr	r2, [pc, #80]	@ (8002424 <_sbrk+0x5c>)
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <_sbrk+0x60>)
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023dc:	4b13      	ldr	r3, [pc, #76]	@ (800242c <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <_sbrk+0x64>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	@ (8002430 <_sbrk+0x68>)
 80023e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ea:	4b10      	ldr	r3, [pc, #64]	@ (800242c <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d207      	bcs.n	8002408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f8:	f006 fb06 	bl	8008a08 <__errno>
 80023fc:	4603      	mov	r3, r0
 80023fe:	220c      	movs	r2, #12
 8002400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	e009      	b.n	800241c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002408:	4b08      	ldr	r3, [pc, #32]	@ (800242c <_sbrk+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800240e:	4b07      	ldr	r3, [pc, #28]	@ (800242c <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	4a05      	ldr	r2, [pc, #20]	@ (800242c <_sbrk+0x64>)
 8002418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20020000 	.word	0x20020000
 8002428:	00000400 	.word	0x00000400
 800242c:	20000448 	.word	0x20000448
 8002430:	200061a8 	.word	0x200061a8

08002434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <SystemInit+0x20>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	4a05      	ldr	r2, [pc, #20]	@ (8002454 <SystemInit+0x20>)
 8002440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002458:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002490 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800245c:	f7ff ffea 	bl	8002434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002460:	480c      	ldr	r0, [pc, #48]	@ (8002494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002462:	490d      	ldr	r1, [pc, #52]	@ (8002498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002464:	4a0d      	ldr	r2, [pc, #52]	@ (800249c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800246c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002476:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002478:	4c0a      	ldr	r4, [pc, #40]	@ (80024a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002486:	f006 fac5 	bl	8008a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800248a:	f7fe fc75 	bl	8000d78 <main>
  bx  lr    
 800248e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002498:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800249c:	0800999c 	.word	0x0800999c
  ldr r2, =_sbss
 80024a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80024a4:	200061a4 	.word	0x200061a4

080024a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC_IRQHandler>
	...

080024ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024b0:	4b0e      	ldr	r3, [pc, #56]	@ (80024ec <HAL_Init+0x40>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <HAL_Init+0x40>)
 80024b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024bc:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <HAL_Init+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <HAL_Init+0x40>)
 80024c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <HAL_Init+0x40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a07      	ldr	r2, [pc, #28]	@ (80024ec <HAL_Init+0x40>)
 80024ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d4:	2003      	movs	r0, #3
 80024d6:	f000 f8d8 	bl	800268a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024da:	200f      	movs	r0, #15
 80024dc:	f7ff fe58 	bl	8002190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e0:	f7ff fc98 	bl	8001e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023c00 	.word	0x40023c00

080024f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_IncTick+0x20>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_IncTick+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	@ (8002514 <HAL_IncTick+0x24>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	2000000c 	.word	0x2000000c
 8002514:	2000044c 	.word	0x2000044c

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	@ (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	2000044c 	.word	0x2000044c

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	@ (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	@ (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4907      	ldr	r1, [pc, #28]	@ (80025cc <__NVIC_EnableIRQ+0x38>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db0a      	blt.n	80025fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	490c      	ldr	r1, [pc, #48]	@ (800261c <__NVIC_SetPriority+0x4c>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	440b      	add	r3, r1
 80025f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f8:	e00a      	b.n	8002610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4908      	ldr	r1, [pc, #32]	@ (8002620 <__NVIC_SetPriority+0x50>)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3b04      	subs	r3, #4
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	440b      	add	r3, r1
 800260e:	761a      	strb	r2, [r3, #24]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	@ 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f1c3 0307 	rsb	r3, r3, #7
 800263e:	2b04      	cmp	r3, #4
 8002640:	bf28      	it	cs
 8002642:	2304      	movcs	r3, #4
 8002644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3304      	adds	r3, #4
 800264a:	2b06      	cmp	r3, #6
 800264c:	d902      	bls.n	8002654 <NVIC_EncodePriority+0x30>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3b03      	subs	r3, #3
 8002652:	e000      	b.n	8002656 <NVIC_EncodePriority+0x32>
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	f04f 32ff 	mov.w	r2, #4294967295
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	401a      	ands	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800266c:	f04f 31ff 	mov.w	r1, #4294967295
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43d9      	mvns	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	4313      	orrs	r3, r2
         );
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	@ 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ff4c 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b2:	f7ff ff61 	bl	8002578 <__NVIC_GetPriorityGrouping>
 80026b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	6978      	ldr	r0, [r7, #20]
 80026be:	f7ff ffb1 	bl	8002624 <NVIC_EncodePriority>
 80026c2:	4602      	mov	r2, r0
 80026c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff80 	bl	80025d0 <__NVIC_SetPriority>
}
 80026d0:	bf00      	nop
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff54 	bl	8002594 <__NVIC_EnableIRQ>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002700:	f7ff ff0a 	bl	8002518 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e099      	b.n	8002844 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002730:	e00f      	b.n	8002752 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002732:	f7ff fef1 	bl	8002518 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b05      	cmp	r3, #5
 800273e:	d908      	bls.n	8002752 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2220      	movs	r2, #32
 8002744:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2203      	movs	r2, #3
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e078      	b.n	8002844 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e8      	bne.n	8002732 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4b38      	ldr	r3, [pc, #224]	@ (800284c <HAL_DMA_Init+0x158>)
 800276c:	4013      	ands	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800277e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002796:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d107      	bne.n	80027bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	4313      	orrs	r3, r2
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f023 0307 	bic.w	r3, r3, #7
 80027d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d117      	bne.n	8002816 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00e      	beq.n	8002816 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fa6f 	bl	8002cdc <DMA_CheckFifoParam>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2240      	movs	r2, #64	@ 0x40
 8002808:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002812:	2301      	movs	r3, #1
 8002814:	e016      	b.n	8002844 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fa26 	bl	8002c70 <DMA_CalcBaseAndBitshift>
 8002824:	4603      	mov	r3, r0
 8002826:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282c:	223f      	movs	r2, #63	@ 0x3f
 800282e:	409a      	lsls	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	f010803f 	.word	0xf010803f

08002850 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002866:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_DMA_Start_IT+0x26>
 8002872:	2302      	movs	r3, #2
 8002874:	e040      	b.n	80028f8 <HAL_DMA_Start_IT+0xa8>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d12f      	bne.n	80028ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2202      	movs	r2, #2
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f9b8 	bl	8002c14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a8:	223f      	movs	r2, #63	@ 0x3f
 80028aa:	409a      	lsls	r2, r3
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0216 	orr.w	r2, r2, #22
 80028be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0208 	orr.w	r2, r2, #8
 80028d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e005      	b.n	80028f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
 80028f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800290c:	4b8e      	ldr	r3, [pc, #568]	@ (8002b48 <HAL_DMA_IRQHandler+0x248>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a8e      	ldr	r2, [pc, #568]	@ (8002b4c <HAL_DMA_IRQHandler+0x24c>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0a9b      	lsrs	r3, r3, #10
 8002918:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292a:	2208      	movs	r2, #8
 800292c:	409a      	lsls	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d01a      	beq.n	800296c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0204 	bic.w	r2, r2, #4
 8002952:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002958:	2208      	movs	r2, #8
 800295a:	409a      	lsls	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002964:	f043 0201 	orr.w	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002970:	2201      	movs	r2, #1
 8002972:	409a      	lsls	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d012      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298e:	2201      	movs	r2, #1
 8002990:	409a      	lsls	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299a:	f043 0202 	orr.w	r2, r3, #2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a6:	2204      	movs	r2, #4
 80029a8:	409a      	lsls	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d012      	beq.n	80029d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c4:	2204      	movs	r2, #4
 80029c6:	409a      	lsls	r2, r3
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d0:	f043 0204 	orr.w	r2, r3, #4
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	2210      	movs	r2, #16
 80029de:	409a      	lsls	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d043      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d03c      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fa:	2210      	movs	r2, #16
 80029fc:	409a      	lsls	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d018      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d108      	bne.n	8002a30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d024      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4798      	blx	r3
 8002a2e:	e01f      	b.n	8002a70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01b      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
 8002a40:	e016      	b.n	8002a70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d107      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0208 	bic.w	r2, r2, #8
 8002a5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a74:	2220      	movs	r2, #32
 8002a76:	409a      	lsls	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 808f 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8087 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a96:	2220      	movs	r2, #32
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d136      	bne.n	8002b18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0216 	bic.w	r2, r2, #22
 8002ab8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ac8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <HAL_DMA_IRQHandler+0x1da>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0208 	bic.w	r2, r2, #8
 8002ae8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aee:	223f      	movs	r2, #63	@ 0x3f
 8002af0:	409a      	lsls	r2, r3
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d07e      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
        }
        return;
 8002b16:	e079      	b.n	8002c0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01d      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10d      	bne.n	8002b50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d031      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
 8002b44:	e02c      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x2a0>
 8002b46:	bf00      	nop
 8002b48:	20000004 	.word	0x20000004
 8002b4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d023      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
 8002b60:	e01e      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10f      	bne.n	8002b90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0210 	bic.w	r2, r2, #16
 8002b7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d032      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d022      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2205      	movs	r2, #5
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d307      	bcc.n	8002be8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f2      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x2cc>
 8002be6:	e000      	b.n	8002bea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002be8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
 8002c0a:	e000      	b.n	8002c0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c0c:	bf00      	nop
    }
  }
}
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b40      	cmp	r3, #64	@ 0x40
 8002c40:	d108      	bne.n	8002c54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c52:	e007      	b.n	8002c64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	60da      	str	r2, [r3, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	3b10      	subs	r3, #16
 8002c80:	4a14      	ldr	r2, [pc, #80]	@ (8002cd4 <DMA_CalcBaseAndBitshift+0x64>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c8a:	4a13      	ldr	r2, [pc, #76]	@ (8002cd8 <DMA_CalcBaseAndBitshift+0x68>)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d909      	bls.n	8002cb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	1d1a      	adds	r2, r3, #4
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cb0:	e007      	b.n	8002cc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cba:	f023 0303 	bic.w	r3, r3, #3
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	aaaaaaab 	.word	0xaaaaaaab
 8002cd8:	08009950 	.word	0x08009950

08002cdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11f      	bne.n	8002d36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d856      	bhi.n	8002daa <DMA_CheckFifoParam+0xce>
 8002cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002d04 <DMA_CheckFifoParam+0x28>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d15 	.word	0x08002d15
 8002d08:	08002d27 	.word	0x08002d27
 8002d0c:	08002d15 	.word	0x08002d15
 8002d10:	08002dab 	.word	0x08002dab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d046      	beq.n	8002dae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d24:	e043      	b.n	8002dae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d2e:	d140      	bne.n	8002db2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d34:	e03d      	b.n	8002db2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d3e:	d121      	bne.n	8002d84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d837      	bhi.n	8002db6 <DMA_CheckFifoParam+0xda>
 8002d46:	a201      	add	r2, pc, #4	@ (adr r2, 8002d4c <DMA_CheckFifoParam+0x70>)
 8002d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4c:	08002d5d 	.word	0x08002d5d
 8002d50:	08002d63 	.word	0x08002d63
 8002d54:	08002d5d 	.word	0x08002d5d
 8002d58:	08002d75 	.word	0x08002d75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d60:	e030      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d025      	beq.n	8002dba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d72:	e022      	b.n	8002dba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d7c:	d11f      	bne.n	8002dbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d82:	e01c      	b.n	8002dbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d903      	bls.n	8002d92 <DMA_CheckFifoParam+0xb6>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d003      	beq.n	8002d98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d90:	e018      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
      break;
 8002d96:	e015      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      break;
 8002da8:	e00b      	b.n	8002dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8002daa:	bf00      	nop
 8002dac:	e00a      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e008      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002db2:	bf00      	nop
 8002db4:	e006      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002db6:	bf00      	nop
 8002db8:	e004      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e002      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dbe:	bf00      	nop
 8002dc0:	e000      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dc2:	bf00      	nop
    }
  } 
  
  return status; 
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	@ 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	e16b      	b.n	80030c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	f040 815a 	bne.w	80030c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d005      	beq.n	8002e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d130      	bne.n	8002e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	2203      	movs	r2, #3
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 0201 	and.w	r2, r3, #1
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d017      	beq.n	8002ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d123      	bne.n	8002f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	08da      	lsrs	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3208      	adds	r2, #8
 8002ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	08da      	lsrs	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3208      	adds	r2, #8
 8002f12:	69b9      	ldr	r1, [r7, #24]
 8002f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0203 	and.w	r2, r3, #3
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80b4 	beq.w	80030c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b60      	ldr	r3, [pc, #384]	@ (80030e0 <HAL_GPIO_Init+0x30c>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	4a5f      	ldr	r2, [pc, #380]	@ (80030e0 <HAL_GPIO_Init+0x30c>)
 8002f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80030e0 <HAL_GPIO_Init+0x30c>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f76:	4a5b      	ldr	r2, [pc, #364]	@ (80030e4 <HAL_GPIO_Init+0x310>)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a52      	ldr	r2, [pc, #328]	@ (80030e8 <HAL_GPIO_Init+0x314>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d02b      	beq.n	8002ffa <HAL_GPIO_Init+0x226>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a51      	ldr	r2, [pc, #324]	@ (80030ec <HAL_GPIO_Init+0x318>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d025      	beq.n	8002ff6 <HAL_GPIO_Init+0x222>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a50      	ldr	r2, [pc, #320]	@ (80030f0 <HAL_GPIO_Init+0x31c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01f      	beq.n	8002ff2 <HAL_GPIO_Init+0x21e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80030f4 <HAL_GPIO_Init+0x320>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d019      	beq.n	8002fee <HAL_GPIO_Init+0x21a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a4e      	ldr	r2, [pc, #312]	@ (80030f8 <HAL_GPIO_Init+0x324>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_GPIO_Init+0x216>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a4d      	ldr	r2, [pc, #308]	@ (80030fc <HAL_GPIO_Init+0x328>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00d      	beq.n	8002fe6 <HAL_GPIO_Init+0x212>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a4c      	ldr	r2, [pc, #304]	@ (8003100 <HAL_GPIO_Init+0x32c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d007      	beq.n	8002fe2 <HAL_GPIO_Init+0x20e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8003104 <HAL_GPIO_Init+0x330>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_GPIO_Init+0x20a>
 8002fda:	2307      	movs	r3, #7
 8002fdc:	e00e      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fde:	2308      	movs	r3, #8
 8002fe0:	e00c      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fe2:	2306      	movs	r3, #6
 8002fe4:	e00a      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fe6:	2305      	movs	r3, #5
 8002fe8:	e008      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fea:	2304      	movs	r3, #4
 8002fec:	e006      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e004      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e002      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f002 0203 	and.w	r2, r2, #3
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	4093      	lsls	r3, r2
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800300c:	4935      	ldr	r1, [pc, #212]	@ (80030e4 <HAL_GPIO_Init+0x310>)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301a:	4b3b      	ldr	r3, [pc, #236]	@ (8003108 <HAL_GPIO_Init+0x334>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303e:	4a32      	ldr	r2, [pc, #200]	@ (8003108 <HAL_GPIO_Init+0x334>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003044:	4b30      	ldr	r3, [pc, #192]	@ (8003108 <HAL_GPIO_Init+0x334>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003068:	4a27      	ldr	r2, [pc, #156]	@ (8003108 <HAL_GPIO_Init+0x334>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800306e:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <HAL_GPIO_Init+0x334>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003092:	4a1d      	ldr	r2, [pc, #116]	@ (8003108 <HAL_GPIO_Init+0x334>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003098:	4b1b      	ldr	r3, [pc, #108]	@ (8003108 <HAL_GPIO_Init+0x334>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030bc:	4a12      	ldr	r2, [pc, #72]	@ (8003108 <HAL_GPIO_Init+0x334>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3301      	adds	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	f67f ae90 	bls.w	8002df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40013800 	.word	0x40013800
 80030e8:	40020000 	.word	0x40020000
 80030ec:	40020400 	.word	0x40020400
 80030f0:	40020800 	.word	0x40020800
 80030f4:	40020c00 	.word	0x40020c00
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40021400 	.word	0x40021400
 8003100:	40021800 	.word	0x40021800
 8003104:	40021c00 	.word	0x40021c00
 8003108:	40013c00 	.word	0x40013c00

0800310c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	e001      	b.n	800312e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e267      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d075      	beq.n	8003246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800315a:	4b88      	ldr	r3, [pc, #544]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b04      	cmp	r3, #4
 8003164:	d00c      	beq.n	8003180 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003166:	4b85      	ldr	r3, [pc, #532]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800316e:	2b08      	cmp	r3, #8
 8003170:	d112      	bne.n	8003198 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003172:	4b82      	ldr	r3, [pc, #520]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800317e:	d10b      	bne.n	8003198 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	4b7e      	ldr	r3, [pc, #504]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d05b      	beq.n	8003244 <HAL_RCC_OscConfig+0x108>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d157      	bne.n	8003244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e242      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_OscConfig+0x74>
 80031a2:	4b76      	ldr	r3, [pc, #472]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a75      	ldr	r2, [pc, #468]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e01d      	b.n	80031ec <HAL_RCC_OscConfig+0xb0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x98>
 80031ba:	4b70      	ldr	r3, [pc, #448]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6f      	ldr	r2, [pc, #444]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b6d      	ldr	r3, [pc, #436]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6c      	ldr	r2, [pc, #432]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0xb0>
 80031d4:	4b69      	ldr	r3, [pc, #420]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a68      	ldr	r2, [pc, #416]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b66      	ldr	r3, [pc, #408]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a65      	ldr	r2, [pc, #404]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7ff f990 	bl	8002518 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fc:	f7ff f98c 	bl	8002518 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	@ 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e207      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	4b5b      	ldr	r3, [pc, #364]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0xc0>
 800321a:	e014      	b.n	8003246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7ff f97c 	bl	8002518 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003224:	f7ff f978 	bl	8002518 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	@ 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1f3      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	4b51      	ldr	r3, [pc, #324]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0xe8>
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d063      	beq.n	800331a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003252:	4b4a      	ldr	r3, [pc, #296]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003266:	2b08      	cmp	r3, #8
 8003268:	d11c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326a:	4b44      	ldr	r3, [pc, #272]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d116      	bne.n	80032a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	4b41      	ldr	r3, [pc, #260]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_RCC_OscConfig+0x152>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d001      	beq.n	800328e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e1c7      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328e:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4937      	ldr	r1, [pc, #220]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a2:	e03a      	b.n	800331a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d020      	beq.n	80032ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ac:	4b34      	ldr	r3, [pc, #208]	@ (8003380 <HAL_RCC_OscConfig+0x244>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7ff f931 	bl	8002518 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ba:	f7ff f92d 	bl	8002518 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1a8      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	4b2b      	ldr	r3, [pc, #172]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d8:	4b28      	ldr	r3, [pc, #160]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4925      	ldr	r1, [pc, #148]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
 80032ec:	e015      	b.n	800331a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ee:	4b24      	ldr	r3, [pc, #144]	@ (8003380 <HAL_RCC_OscConfig+0x244>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7ff f910 	bl	8002518 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fc:	f7ff f90c 	bl	8002518 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e187      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d036      	beq.n	8003394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d016      	beq.n	800335c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332e:	4b15      	ldr	r3, [pc, #84]	@ (8003384 <HAL_RCC_OscConfig+0x248>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7ff f8f0 	bl	8002518 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333c:	f7ff f8ec 	bl	8002518 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e167      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x200>
 800335a:	e01b      	b.n	8003394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335c:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <HAL_RCC_OscConfig+0x248>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003362:	f7ff f8d9 	bl	8002518 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	e00e      	b.n	8003388 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336a:	f7ff f8d5 	bl	8002518 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d907      	bls.n	8003388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e150      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
 800337c:	40023800 	.word	0x40023800
 8003380:	42470000 	.word	0x42470000
 8003384:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	4b88      	ldr	r3, [pc, #544]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800338a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ea      	bne.n	800336a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8097 	beq.w	80034d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a6:	4b81      	ldr	r3, [pc, #516]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10f      	bne.n	80033d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	4b7d      	ldr	r3, [pc, #500]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	4a7c      	ldr	r2, [pc, #496]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c2:	4b7a      	ldr	r3, [pc, #488]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d2:	4b77      	ldr	r3, [pc, #476]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d118      	bne.n	8003410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033de:	4b74      	ldr	r3, [pc, #464]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a73      	ldr	r2, [pc, #460]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ea:	f7ff f895 	bl	8002518 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f2:	f7ff f891 	bl	8002518 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e10c      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	4b6a      	ldr	r3, [pc, #424]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x2ea>
 8003418:	4b64      	ldr	r3, [pc, #400]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341c:	4a63      	ldr	r2, [pc, #396]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6713      	str	r3, [r2, #112]	@ 0x70
 8003424:	e01c      	b.n	8003460 <HAL_RCC_OscConfig+0x324>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b05      	cmp	r3, #5
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x30c>
 800342e:	4b5f      	ldr	r3, [pc, #380]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003432:	4a5e      	ldr	r2, [pc, #376]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6713      	str	r3, [r2, #112]	@ 0x70
 800343a:	4b5c      	ldr	r3, [pc, #368]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	4a5b      	ldr	r2, [pc, #364]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6713      	str	r3, [r2, #112]	@ 0x70
 8003446:	e00b      	b.n	8003460 <HAL_RCC_OscConfig+0x324>
 8003448:	4b58      	ldr	r3, [pc, #352]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344c:	4a57      	ldr	r2, [pc, #348]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	6713      	str	r3, [r2, #112]	@ 0x70
 8003454:	4b55      	ldr	r3, [pc, #340]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	4a54      	ldr	r2, [pc, #336]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800345a:	f023 0304 	bic.w	r3, r3, #4
 800345e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d015      	beq.n	8003494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7ff f856 	bl	8002518 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7ff f852 	bl	8002518 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0cb      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003486:	4b49      	ldr	r3, [pc, #292]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0ee      	beq.n	8003470 <HAL_RCC_OscConfig+0x334>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003494:	f7ff f840 	bl	8002518 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7ff f83c 	bl	8002518 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0b5      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b2:	4b3e      	ldr	r3, [pc, #248]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1ee      	bne.n	800349c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b39      	ldr	r3, [pc, #228]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	4a38      	ldr	r2, [pc, #224]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80a1 	beq.w	800361c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034da:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d05c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d141      	bne.n	8003572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b31      	ldr	r3, [pc, #196]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7ff f810 	bl	8002518 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7ff f80c 	bl	8002518 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e087      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	4b27      	ldr	r3, [pc, #156]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	019b      	lsls	r3, r3, #6
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	3b01      	subs	r3, #1
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	061b      	lsls	r3, r3, #24
 800353e:	491b      	ldr	r1, [pc, #108]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003544:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7fe ffe5 	bl	8002518 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003552:	f7fe ffe1 	bl	8002518 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e05c      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003564:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x416>
 8003570:	e054      	b.n	800361c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe ffce 	bl	8002518 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fe ffca 	bl	8002518 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e045      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x444>
 800359e:	e03d      	b.n	800361c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e038      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40007000 	.word	0x40007000
 80035b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x4ec>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d028      	beq.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d121      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d11a      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d111      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	3b01      	subs	r3, #1
 8003602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d107      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800

0800362c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0cc      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b68      	ldr	r3, [pc, #416]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d90c      	bls.n	8003668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b65      	ldr	r3, [pc, #404]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b63      	ldr	r3, [pc, #396]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0b8      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003680:	4b59      	ldr	r3, [pc, #356]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a58      	ldr	r2, [pc, #352]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800368a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003698:	4b53      	ldr	r3, [pc, #332]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a52      	ldr	r2, [pc, #328]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	4b50      	ldr	r3, [pc, #320]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	494d      	ldr	r1, [pc, #308]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d044      	beq.n	800374c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b47      	ldr	r3, [pc, #284]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d119      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e07f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	4b3f      	ldr	r3, [pc, #252]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e06f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	4b3b      	ldr	r3, [pc, #236]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e067      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370a:	4b37      	ldr	r3, [pc, #220]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0203 	bic.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4934      	ldr	r1, [pc, #208]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800371c:	f7fe fefc 	bl	8002518 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	e00a      	b.n	800373a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003724:	f7fe fef8 	bl	8002518 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e04f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	4b2b      	ldr	r3, [pc, #172]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 020c 	and.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	429a      	cmp	r2, r3
 800374a:	d1eb      	bne.n	8003724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800374c:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d20c      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b22      	ldr	r3, [pc, #136]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b20      	ldr	r3, [pc, #128]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e032      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003780:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4916      	ldr	r1, [pc, #88]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379e:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	490e      	ldr	r1, [pc, #56]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037b2:	f000 f821 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	490a      	ldr	r1, [pc, #40]	@ (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	5ccb      	ldrb	r3, [r1, r3]
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037ce:	4b09      	ldr	r3, [pc, #36]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fcdc 	bl	8002190 <HAL_InitTick>

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00
 80037e8:	40023800 	.word	0x40023800
 80037ec:	08009938 	.word	0x08009938
 80037f0:	20000004 	.word	0x20000004
 80037f4:	20000008 	.word	0x20000008

080037f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037fc:	b090      	sub	sp, #64	@ 0x40
 80037fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003810:	4b59      	ldr	r3, [pc, #356]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d00d      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x40>
 800381c:	2b08      	cmp	r3, #8
 800381e:	f200 80a1 	bhi.w	8003964 <HAL_RCC_GetSysClockFreq+0x16c>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x34>
 8003826:	2b04      	cmp	r3, #4
 8003828:	d003      	beq.n	8003832 <HAL_RCC_GetSysClockFreq+0x3a>
 800382a:	e09b      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b53      	ldr	r3, [pc, #332]	@ (800397c <HAL_RCC_GetSysClockFreq+0x184>)
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003830:	e09b      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003832:	4b53      	ldr	r3, [pc, #332]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x188>)
 8003834:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003836:	e098      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003838:	4b4f      	ldr	r3, [pc, #316]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003840:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003842:	4b4d      	ldr	r3, [pc, #308]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d028      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384e:	4b4a      	ldr	r3, [pc, #296]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	2200      	movs	r2, #0
 8003856:	623b      	str	r3, [r7, #32]
 8003858:	627a      	str	r2, [r7, #36]	@ 0x24
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003860:	2100      	movs	r1, #0
 8003862:	4b47      	ldr	r3, [pc, #284]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x188>)
 8003864:	fb03 f201 	mul.w	r2, r3, r1
 8003868:	2300      	movs	r3, #0
 800386a:	fb00 f303 	mul.w	r3, r0, r3
 800386e:	4413      	add	r3, r2
 8003870:	4a43      	ldr	r2, [pc, #268]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x188>)
 8003872:	fba0 1202 	umull	r1, r2, r0, r2
 8003876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003878:	460a      	mov	r2, r1
 800387a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800387c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800387e:	4413      	add	r3, r2
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003884:	2200      	movs	r2, #0
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	61fa      	str	r2, [r7, #28]
 800388a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800388e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003892:	f7fd f8db 	bl	8000a4c <__aeabi_uldivmod>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4613      	mov	r3, r2
 800389c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800389e:	e053      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a0:	4b35      	ldr	r3, [pc, #212]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	099b      	lsrs	r3, r3, #6
 80038a6:	2200      	movs	r2, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	617a      	str	r2, [r7, #20]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038b2:	f04f 0b00 	mov.w	fp, #0
 80038b6:	4652      	mov	r2, sl
 80038b8:	465b      	mov	r3, fp
 80038ba:	f04f 0000 	mov.w	r0, #0
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	0159      	lsls	r1, r3, #5
 80038c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c8:	0150      	lsls	r0, r2, #5
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	ebb2 080a 	subs.w	r8, r2, sl
 80038d2:	eb63 090b 	sbc.w	r9, r3, fp
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038ea:	ebb2 0408 	subs.w	r4, r2, r8
 80038ee:	eb63 0509 	sbc.w	r5, r3, r9
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	00eb      	lsls	r3, r5, #3
 80038fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003900:	00e2      	lsls	r2, r4, #3
 8003902:	4614      	mov	r4, r2
 8003904:	461d      	mov	r5, r3
 8003906:	eb14 030a 	adds.w	r3, r4, sl
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	eb45 030b 	adc.w	r3, r5, fp
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800391e:	4629      	mov	r1, r5
 8003920:	028b      	lsls	r3, r1, #10
 8003922:	4621      	mov	r1, r4
 8003924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003928:	4621      	mov	r1, r4
 800392a:	028a      	lsls	r2, r1, #10
 800392c:	4610      	mov	r0, r2
 800392e:	4619      	mov	r1, r3
 8003930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003932:	2200      	movs	r2, #0
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	60fa      	str	r2, [r7, #12]
 8003938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800393c:	f7fd f886 	bl	8000a4c <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4613      	mov	r3, r2
 8003946:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003948:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	3301      	adds	r3, #1
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003958:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003962:	e002      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_RCC_GetSysClockFreq+0x184>)
 8003966:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800396c:	4618      	mov	r0, r3
 800396e:	3740      	adds	r7, #64	@ 0x40
 8003970:	46bd      	mov	sp, r7
 8003972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	00f42400 	.word	0x00f42400
 8003980:	00b71b00 	.word	0x00b71b00

08003984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003988:	4b03      	ldr	r3, [pc, #12]	@ (8003998 <HAL_RCC_GetHCLKFreq+0x14>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000004 	.word	0x20000004

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a0:	f7ff fff0 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0a9b      	lsrs	r3, r3, #10
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	@ (80039c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	08009948 	.word	0x08009948

080039c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039c8:	f7ff ffdc 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	0b5b      	lsrs	r3, r3, #13
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4903      	ldr	r1, [pc, #12]	@ (80039e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40023800 	.word	0x40023800
 80039e8:	08009948 	.word	0x08009948

080039ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	220f      	movs	r2, #15
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039fc:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <HAL_RCC_GetClockConfig+0x5c>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0203 	and.w	r2, r3, #3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a08:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <HAL_RCC_GetClockConfig+0x5c>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a20:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <HAL_RCC_GetClockConfig+0x5c>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	08db      	lsrs	r3, r3, #3
 8003a26:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a2e:	4b07      	ldr	r3, [pc, #28]	@ (8003a4c <HAL_RCC_GetClockConfig+0x60>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0207 	and.w	r2, r3, #7
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	601a      	str	r2, [r3, #0]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40023c00 	.word	0x40023c00

08003a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e041      	b.n	8003ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f839 	bl	8003aee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f000 fde6 	bl	8004660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d001      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e04e      	b.n	8003bba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a23      	ldr	r2, [pc, #140]	@ (8003bc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d022      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b46:	d01d      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bcc <HAL_TIM_Base_Start_IT+0xc8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d018      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00e      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a19      	ldr	r2, [pc, #100]	@ (8003bdc <HAL_TIM_Base_Start_IT+0xd8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x80>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a18      	ldr	r2, [pc, #96]	@ (8003be0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d111      	bne.n	8003ba8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b06      	cmp	r3, #6
 8003b94:	d010      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba6:	e007      	b.n	8003bb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40010000 	.word	0x40010000
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40000c00 	.word	0x40000c00
 8003bd8:	40010400 	.word	0x40010400
 8003bdc:	40014000 	.word	0x40014000
 8003be0:	40001800 	.word	0x40001800

08003be4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e041      	b.n	8003c7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fe f92e 	bl	8001e6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f000 fd1c 	bl	8004660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2200      	movs	r2, #0
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 ff38 	bl	8004b0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8003d5c <HAL_TIM_PWM_Stop+0xd8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_TIM_PWM_Stop+0x2c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2d      	ldr	r2, [pc, #180]	@ (8003d60 <HAL_TIM_PWM_Stop+0xdc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d101      	bne.n	8003cb4 <HAL_TIM_PWM_Stop+0x30>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <HAL_TIM_PWM_Stop+0x32>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d017      	beq.n	8003cea <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a1a      	ldr	r2, [r3, #32]
 8003cc0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10f      	bne.n	8003cea <HAL_TIM_PWM_Stop+0x66>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6a1a      	ldr	r2, [r3, #32]
 8003cd0:	f240 4344 	movw	r3, #1092	@ 0x444
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <HAL_TIM_PWM_Stop+0x66>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10f      	bne.n	8003d1a <HAL_TIM_PWM_Stop+0x96>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d107      	bne.n	8003d1a <HAL_TIM_PWM_Stop+0x96>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d104      	bne.n	8003d2a <HAL_TIM_PWM_Stop+0xa6>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d28:	e013      	b.n	8003d52 <HAL_TIM_PWM_Stop+0xce>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d104      	bne.n	8003d3a <HAL_TIM_PWM_Stop+0xb6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d38:	e00b      	b.n	8003d52 <HAL_TIM_PWM_Stop+0xce>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_PWM_Stop+0xc6>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d48:	e003      	b.n	8003d52 <HAL_TIM_PWM_Stop+0xce>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40010400 	.word	0x40010400

08003d64 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d109      	bne.n	8003d90 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	e022      	b.n	8003dd6 <HAL_TIM_PWM_Start_DMA+0x72>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d109      	bne.n	8003daa <HAL_TIM_PWM_Start_DMA+0x46>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	bf0c      	ite	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	2300      	movne	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	e015      	b.n	8003dd6 <HAL_TIM_PWM_Start_DMA+0x72>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d109      	bne.n	8003dc4 <HAL_TIM_PWM_Start_DMA+0x60>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e008      	b.n	8003dd6 <HAL_TIM_PWM_Start_DMA+0x72>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e171      	b.n	80040c2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <HAL_TIM_PWM_Start_DMA+0x94>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	e022      	b.n	8003e3e <HAL_TIM_PWM_Start_DMA+0xda>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d109      	bne.n	8003e12 <HAL_TIM_PWM_Start_DMA+0xae>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	e015      	b.n	8003e3e <HAL_TIM_PWM_Start_DMA+0xda>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d109      	bne.n	8003e2c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e008      	b.n	8003e3e <HAL_TIM_PWM_Start_DMA+0xda>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d024      	beq.n	8003e8c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_TIM_PWM_Start_DMA+0xea>
 8003e48:	887b      	ldrh	r3, [r7, #2]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e137      	b.n	80040c2 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e60:	e016      	b.n	8003e90 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e70:	e00e      	b.n	8003e90 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d104      	bne.n	8003e82 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e80:	e006      	b.n	8003e90 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e8a:	e001      	b.n	8003e90 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e118      	b.n	80040c2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	f200 80ae 	bhi.w	8003ff4 <HAL_TIM_PWM_Start_DMA+0x290>
 8003e98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003ed5 	.word	0x08003ed5
 8003ea4:	08003ff5 	.word	0x08003ff5
 8003ea8:	08003ff5 	.word	0x08003ff5
 8003eac:	08003ff5 	.word	0x08003ff5
 8003eb0:	08003f1d 	.word	0x08003f1d
 8003eb4:	08003ff5 	.word	0x08003ff5
 8003eb8:	08003ff5 	.word	0x08003ff5
 8003ebc:	08003ff5 	.word	0x08003ff5
 8003ec0:	08003f65 	.word	0x08003f65
 8003ec4:	08003ff5 	.word	0x08003ff5
 8003ec8:	08003ff5 	.word	0x08003ff5
 8003ecc:	08003ff5 	.word	0x08003ff5
 8003ed0:	08003fad 	.word	0x08003fad
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	4a7c      	ldr	r2, [pc, #496]	@ (80040cc <HAL_TIM_PWM_Start_DMA+0x368>)
 8003eda:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	4a7b      	ldr	r2, [pc, #492]	@ (80040d0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003ee2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	4a7a      	ldr	r2, [pc, #488]	@ (80040d4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003eea:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3334      	adds	r3, #52	@ 0x34
 8003ef8:	461a      	mov	r2, r3
 8003efa:	887b      	ldrh	r3, [r7, #2]
 8003efc:	f7fe fca8 	bl	8002850 <HAL_DMA_Start_IT>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e0db      	b.n	80040c2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f18:	60da      	str	r2, [r3, #12]
      break;
 8003f1a:	e06e      	b.n	8003ffa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	4a6a      	ldr	r2, [pc, #424]	@ (80040cc <HAL_TIM_PWM_Start_DMA+0x368>)
 8003f22:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	4a69      	ldr	r2, [pc, #420]	@ (80040d0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003f2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	4a68      	ldr	r2, [pc, #416]	@ (80040d4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003f32:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3338      	adds	r3, #56	@ 0x38
 8003f40:	461a      	mov	r2, r3
 8003f42:	887b      	ldrh	r3, [r7, #2]
 8003f44:	f7fe fc84 	bl	8002850 <HAL_DMA_Start_IT>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e0b7      	b.n	80040c2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f60:	60da      	str	r2, [r3, #12]
      break;
 8003f62:	e04a      	b.n	8003ffa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	4a58      	ldr	r2, [pc, #352]	@ (80040cc <HAL_TIM_PWM_Start_DMA+0x368>)
 8003f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f70:	4a57      	ldr	r2, [pc, #348]	@ (80040d0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003f72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	4a56      	ldr	r2, [pc, #344]	@ (80040d4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003f7a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	333c      	adds	r3, #60	@ 0x3c
 8003f88:	461a      	mov	r2, r3
 8003f8a:	887b      	ldrh	r3, [r7, #2]
 8003f8c:	f7fe fc60 	bl	8002850 <HAL_DMA_Start_IT>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e093      	b.n	80040c2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fa8:	60da      	str	r2, [r3, #12]
      break;
 8003faa:	e026      	b.n	8003ffa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb0:	4a46      	ldr	r2, [pc, #280]	@ (80040cc <HAL_TIM_PWM_Start_DMA+0x368>)
 8003fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	4a45      	ldr	r2, [pc, #276]	@ (80040d0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003fba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc0:	4a44      	ldr	r2, [pc, #272]	@ (80040d4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003fc2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3340      	adds	r3, #64	@ 0x40
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	887b      	ldrh	r3, [r7, #2]
 8003fd4:	f7fe fc3c 	bl	8002850 <HAL_DMA_Start_IT>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e06f      	b.n	80040c2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ff0:	60da      	str	r2, [r3, #12]
      break;
 8003ff2:	e002      	b.n	8003ffa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d15f      	bne.n	80040c0 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2201      	movs	r2, #1
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fd7f 	bl	8004b0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a31      	ldr	r2, [pc, #196]	@ (80040d8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_TIM_PWM_Start_DMA+0x2be>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2f      	ldr	r2, [pc, #188]	@ (80040dc <HAL_TIM_PWM_Start_DMA+0x378>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004026:	2300      	movs	r3, #0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800403a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a25      	ldr	r2, [pc, #148]	@ (80040d8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d022      	beq.n	800408c <HAL_TIM_PWM_Start_DMA+0x328>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800404e:	d01d      	beq.n	800408c <HAL_TIM_PWM_Start_DMA+0x328>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a22      	ldr	r2, [pc, #136]	@ (80040e0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d018      	beq.n	800408c <HAL_TIM_PWM_Start_DMA+0x328>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a21      	ldr	r2, [pc, #132]	@ (80040e4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d013      	beq.n	800408c <HAL_TIM_PWM_Start_DMA+0x328>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1f      	ldr	r2, [pc, #124]	@ (80040e8 <HAL_TIM_PWM_Start_DMA+0x384>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_TIM_PWM_Start_DMA+0x328>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1a      	ldr	r2, [pc, #104]	@ (80040dc <HAL_TIM_PWM_Start_DMA+0x378>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_TIM_PWM_Start_DMA+0x328>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1b      	ldr	r2, [pc, #108]	@ (80040ec <HAL_TIM_PWM_Start_DMA+0x388>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_TIM_PWM_Start_DMA+0x328>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1a      	ldr	r2, [pc, #104]	@ (80040f0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d111      	bne.n	80040b0 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b06      	cmp	r3, #6
 800409c:	d010      	beq.n	80040c0 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	e007      	b.n	80040c0 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	0800454f 	.word	0x0800454f
 80040d0:	080045f7 	.word	0x080045f7
 80040d4:	080044bd 	.word	0x080044bd
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40010400 	.word	0x40010400
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40014000 	.word	0x40014000
 80040f0:	40001800 	.word	0x40001800

080040f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d020      	beq.n	8004158 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01b      	beq.n	8004158 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0202 	mvn.w	r2, #2
 8004128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f994 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f986 	bl	8004458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7fd fae3 	bl	8001718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d020      	beq.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01b      	beq.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0204 	mvn.w	r2, #4
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f96e 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f960 	bl	8004458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fd fabd 	bl	8001718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d020      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01b      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0208 	mvn.w	r2, #8
 80041c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2204      	movs	r2, #4
 80041c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f948 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 80041dc:	e005      	b.n	80041ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f93a 	bl	8004458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7fd fa97 	bl	8001718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d020      	beq.n	800423c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01b      	beq.n	800423c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0210 	mvn.w	r2, #16
 800420c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2208      	movs	r2, #8
 8004212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f922 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f914 	bl	8004458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7fd fa71 	bl	8001718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0201 	mvn.w	r2, #1
 8004258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fd fdc2 	bl	8001de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00c      	beq.n	8004284 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fcf0 	bl	8004c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00c      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8f6 	bl	8004494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00c      	beq.n	80042cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0220 	mvn.w	r2, #32
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fcc2 	bl	8004c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e0ae      	b.n	8004450 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b0c      	cmp	r3, #12
 80042fe:	f200 809f 	bhi.w	8004440 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004302:	a201      	add	r2, pc, #4	@ (adr r2, 8004308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	0800433d 	.word	0x0800433d
 800430c:	08004441 	.word	0x08004441
 8004310:	08004441 	.word	0x08004441
 8004314:	08004441 	.word	0x08004441
 8004318:	0800437d 	.word	0x0800437d
 800431c:	08004441 	.word	0x08004441
 8004320:	08004441 	.word	0x08004441
 8004324:	08004441 	.word	0x08004441
 8004328:	080043bf 	.word	0x080043bf
 800432c:	08004441 	.word	0x08004441
 8004330:	08004441 	.word	0x08004441
 8004334:	08004441 	.word	0x08004441
 8004338:	080043ff 	.word	0x080043ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fa32 	bl	80047ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0208 	orr.w	r2, r2, #8
 8004356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0204 	bic.w	r2, r2, #4
 8004366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6999      	ldr	r1, [r3, #24]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	619a      	str	r2, [r3, #24]
      break;
 800437a:	e064      	b.n	8004446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fa82 	bl	800488c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6999      	ldr	r1, [r3, #24]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	021a      	lsls	r2, r3, #8
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	619a      	str	r2, [r3, #24]
      break;
 80043bc:	e043      	b.n	8004446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fad7 	bl	8004978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69da      	ldr	r2, [r3, #28]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0208 	orr.w	r2, r2, #8
 80043d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0204 	bic.w	r2, r2, #4
 80043e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69d9      	ldr	r1, [r3, #28]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	61da      	str	r2, [r3, #28]
      break;
 80043fc:	e023      	b.n	8004446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fb2b 	bl	8004a60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69d9      	ldr	r1, [r3, #28]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	021a      	lsls	r2, r3, #8
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	61da      	str	r2, [r3, #28]
      break;
 800443e:	e002      	b.n	8004446 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	75fb      	strb	r3, [r7, #23]
      break;
 8004444:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800444e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d107      	bne.n	80044e4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044e2:	e02a      	b.n	800453a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d107      	bne.n	80044fe <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2202      	movs	r2, #2
 80044f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044fc:	e01d      	b.n	800453a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	429a      	cmp	r2, r3
 8004506:	d107      	bne.n	8004518 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2204      	movs	r2, #4
 800450c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004516:	e010      	b.n	800453a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d107      	bne.n	8004532 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2208      	movs	r2, #8
 8004526:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004530:	e003      	b.n	800453a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f7ff ffb4 	bl	80044a8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	771a      	strb	r2, [r3, #28]
}
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d10b      	bne.n	800457e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d136      	bne.n	80045e2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800457c:	e031      	b.n	80045e2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	429a      	cmp	r2, r3
 8004586:	d10b      	bne.n	80045a0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2202      	movs	r2, #2
 800458c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d125      	bne.n	80045e2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800459e:	e020      	b.n	80045e2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d10b      	bne.n	80045c2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2204      	movs	r2, #4
 80045ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d114      	bne.n	80045e2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045c0:	e00f      	b.n	80045e2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d10a      	bne.n	80045e2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2208      	movs	r2, #8
 80045d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7fd f898 	bl	8001718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	771a      	strb	r2, [r3, #28]
}
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004602:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	429a      	cmp	r2, r3
 800460c:	d103      	bne.n	8004616 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	771a      	strb	r2, [r3, #28]
 8004614:	e019      	b.n	800464a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	d103      	bne.n	8004628 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2202      	movs	r2, #2
 8004624:	771a      	strb	r2, [r3, #28]
 8004626:	e010      	b.n	800464a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	429a      	cmp	r2, r3
 8004630:	d103      	bne.n	800463a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2204      	movs	r2, #4
 8004636:	771a      	strb	r2, [r3, #28]
 8004638:	e007      	b.n	800464a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d102      	bne.n	800464a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2208      	movs	r2, #8
 8004648:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff ff18 	bl	8004480 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	771a      	strb	r2, [r3, #28]
}
 8004656:	bf00      	nop
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a43      	ldr	r2, [pc, #268]	@ (8004780 <TIM_Base_SetConfig+0x120>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d013      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800467e:	d00f      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a40      	ldr	r2, [pc, #256]	@ (8004784 <TIM_Base_SetConfig+0x124>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00b      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a3f      	ldr	r2, [pc, #252]	@ (8004788 <TIM_Base_SetConfig+0x128>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d007      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a3e      	ldr	r2, [pc, #248]	@ (800478c <TIM_Base_SetConfig+0x12c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a3d      	ldr	r2, [pc, #244]	@ (8004790 <TIM_Base_SetConfig+0x130>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d108      	bne.n	80046b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a32      	ldr	r2, [pc, #200]	@ (8004780 <TIM_Base_SetConfig+0x120>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d02b      	beq.n	8004712 <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c0:	d027      	beq.n	8004712 <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a2f      	ldr	r2, [pc, #188]	@ (8004784 <TIM_Base_SetConfig+0x124>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d023      	beq.n	8004712 <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004788 <TIM_Base_SetConfig+0x128>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d01f      	beq.n	8004712 <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2d      	ldr	r2, [pc, #180]	@ (800478c <TIM_Base_SetConfig+0x12c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01b      	beq.n	8004712 <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004790 <TIM_Base_SetConfig+0x130>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d017      	beq.n	8004712 <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004794 <TIM_Base_SetConfig+0x134>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004798 <TIM_Base_SetConfig+0x138>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00f      	beq.n	8004712 <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a29      	ldr	r2, [pc, #164]	@ (800479c <TIM_Base_SetConfig+0x13c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00b      	beq.n	8004712 <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a28      	ldr	r2, [pc, #160]	@ (80047a0 <TIM_Base_SetConfig+0x140>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d007      	beq.n	8004712 <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a27      	ldr	r2, [pc, #156]	@ (80047a4 <TIM_Base_SetConfig+0x144>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d003      	beq.n	8004712 <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a26      	ldr	r2, [pc, #152]	@ (80047a8 <TIM_Base_SetConfig+0x148>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d108      	bne.n	8004724 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a0e      	ldr	r2, [pc, #56]	@ (8004780 <TIM_Base_SetConfig+0x120>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_Base_SetConfig+0xf2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a10      	ldr	r2, [pc, #64]	@ (8004790 <TIM_Base_SetConfig+0x130>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d103      	bne.n	800475a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f043 0204 	orr.w	r2, r3, #4
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	601a      	str	r2, [r3, #0]
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40010000 	.word	0x40010000
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40000c00 	.word	0x40000c00
 8004790:	40010400 	.word	0x40010400
 8004794:	40014000 	.word	0x40014000
 8004798:	40014400 	.word	0x40014400
 800479c:	40014800 	.word	0x40014800
 80047a0:	40001800 	.word	0x40001800
 80047a4:	40001c00 	.word	0x40001c00
 80047a8:	40002000 	.word	0x40002000

080047ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	f023 0201 	bic.w	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f023 0302 	bic.w	r3, r3, #2
 80047f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a20      	ldr	r2, [pc, #128]	@ (8004884 <TIM_OC1_SetConfig+0xd8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_OC1_SetConfig+0x64>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a1f      	ldr	r2, [pc, #124]	@ (8004888 <TIM_OC1_SetConfig+0xdc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d10c      	bne.n	800482a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f023 0308 	bic.w	r3, r3, #8
 8004816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f023 0304 	bic.w	r3, r3, #4
 8004828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a15      	ldr	r2, [pc, #84]	@ (8004884 <TIM_OC1_SetConfig+0xd8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d003      	beq.n	800483a <TIM_OC1_SetConfig+0x8e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a14      	ldr	r2, [pc, #80]	@ (8004888 <TIM_OC1_SetConfig+0xdc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d111      	bne.n	800485e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	621a      	str	r2, [r3, #32]
}
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	40010000 	.word	0x40010000
 8004888:	40010400 	.word	0x40010400

0800488c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f023 0210 	bic.w	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f023 0320 	bic.w	r3, r3, #32
 80048d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a22      	ldr	r2, [pc, #136]	@ (8004970 <TIM_OC2_SetConfig+0xe4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_OC2_SetConfig+0x68>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a21      	ldr	r2, [pc, #132]	@ (8004974 <TIM_OC2_SetConfig+0xe8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d10d      	bne.n	8004910 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800490e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a17      	ldr	r2, [pc, #92]	@ (8004970 <TIM_OC2_SetConfig+0xe4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_OC2_SetConfig+0x94>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a16      	ldr	r2, [pc, #88]	@ (8004974 <TIM_OC2_SetConfig+0xe8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d113      	bne.n	8004948 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800492e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40010000 	.word	0x40010000
 8004974:	40010400 	.word	0x40010400

08004978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0303 	bic.w	r3, r3, #3
 80049ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a21      	ldr	r2, [pc, #132]	@ (8004a58 <TIM_OC3_SetConfig+0xe0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_OC3_SetConfig+0x66>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a20      	ldr	r2, [pc, #128]	@ (8004a5c <TIM_OC3_SetConfig+0xe4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d10d      	bne.n	80049fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a16      	ldr	r2, [pc, #88]	@ (8004a58 <TIM_OC3_SetConfig+0xe0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_OC3_SetConfig+0x92>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a15      	ldr	r2, [pc, #84]	@ (8004a5c <TIM_OC3_SetConfig+0xe4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d113      	bne.n	8004a32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40010400 	.word	0x40010400

08004a60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	031b      	lsls	r3, r3, #12
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a12      	ldr	r2, [pc, #72]	@ (8004b04 <TIM_OC4_SetConfig+0xa4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_OC4_SetConfig+0x68>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a11      	ldr	r2, [pc, #68]	@ (8004b08 <TIM_OC4_SetConfig+0xa8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d109      	bne.n	8004adc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ace:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40010000 	.word	0x40010000
 8004b08:	40010400 	.word	0x40010400

08004b0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	2201      	movs	r2, #1
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a1a      	ldr	r2, [r3, #32]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	401a      	ands	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a1a      	ldr	r2, [r3, #32]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	fa01 f303 	lsl.w	r3, r1, r3
 8004b44:	431a      	orrs	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	621a      	str	r2, [r3, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e05a      	b.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a21      	ldr	r2, [pc, #132]	@ (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bbc:	d01d      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d018      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a18      	ldr	r2, [pc, #96]	@ (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a17      	ldr	r2, [pc, #92]	@ (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a15      	ldr	r2, [pc, #84]	@ (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d10c      	bne.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40010000 	.word	0x40010000
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800
 8004c40:	40000c00 	.word	0x40000c00
 8004c44:	40010400 	.word	0x40010400
 8004c48:	40014000 	.word	0x40014000
 8004c4c:	40001800 	.word	0x40001800

08004c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e042      	b.n	8004d10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fd fa2e 	bl	8002100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2224      	movs	r2, #36	@ 0x24
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f973 	bl	8004fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695a      	ldr	r2, [r3, #20]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ce0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	@ 0x28
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	4613      	mov	r3, r2
 8004d26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d175      	bne.n	8004e24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_UART_Transmit+0x2c>
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e06e      	b.n	8004e26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2221      	movs	r2, #33	@ 0x21
 8004d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d56:	f7fd fbdf 	bl	8002518 <HAL_GetTick>
 8004d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	88fa      	ldrh	r2, [r7, #6]
 8004d66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d70:	d108      	bne.n	8004d84 <HAL_UART_Transmit+0x6c>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e003      	b.n	8004d8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d8c:	e02e      	b.n	8004dec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	2180      	movs	r1, #128	@ 0x80
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f848 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e03a      	b.n	8004e26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10b      	bne.n	8004dce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	3302      	adds	r3, #2
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	e007      	b.n	8004dde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	781a      	ldrb	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1cb      	bne.n	8004d8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2140      	movs	r1, #64	@ 0x40
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f814 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e006      	b.n	8004e26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e000      	b.n	8004e26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e24:	2302      	movs	r3, #2
  }
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b086      	sub	sp, #24
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3e:	e03b      	b.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d037      	beq.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e48:	f7fd fb66 	bl	8002518 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	6a3a      	ldr	r2, [r7, #32]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d302      	bcc.n	8004e5e <UART_WaitOnFlagUntilTimeout+0x30>
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e03a      	b.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d023      	beq.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b80      	cmp	r3, #128	@ 0x80
 8004e74:	d020      	beq.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b40      	cmp	r3, #64	@ 0x40
 8004e7a:	d01d      	beq.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d116      	bne.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f81d 	bl	8004ee0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e00f      	b.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d0b4      	beq.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b095      	sub	sp, #84	@ 0x54
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f08:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e5      	bne.n	8004ee8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3314      	adds	r3, #20
 8004f22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3314      	adds	r3, #20
 8004f3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e5      	bne.n	8004f1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d119      	bne.n	8004f8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f023 0310 	bic.w	r3, r3, #16
 8004f6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f78:	61ba      	str	r2, [r7, #24]
 8004f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	613b      	str	r3, [r7, #16]
   return(result);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e5      	bne.n	8004f58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f9a:	bf00      	nop
 8004f9c:	3754      	adds	r7, #84	@ 0x54
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
	...

08004fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fac:	b0c0      	sub	sp, #256	@ 0x100
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc4:	68d9      	ldr	r1, [r3, #12]
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	ea40 0301 	orr.w	r3, r0, r1
 8004fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005000:	f021 010c 	bic.w	r1, r1, #12
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800500e:	430b      	orrs	r3, r1
 8005010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005022:	6999      	ldr	r1, [r3, #24]
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	ea40 0301 	orr.w	r3, r0, r1
 800502e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b8f      	ldr	r3, [pc, #572]	@ (8005274 <UART_SetConfig+0x2cc>)
 8005038:	429a      	cmp	r2, r3
 800503a:	d005      	beq.n	8005048 <UART_SetConfig+0xa0>
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4b8d      	ldr	r3, [pc, #564]	@ (8005278 <UART_SetConfig+0x2d0>)
 8005044:	429a      	cmp	r2, r3
 8005046:	d104      	bne.n	8005052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005048:	f7fe fcbc 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 800504c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005050:	e003      	b.n	800505a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005052:	f7fe fca3 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8005056:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005064:	f040 810c 	bne.w	8005280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800506c:	2200      	movs	r2, #0
 800506e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005072:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800507a:	4622      	mov	r2, r4
 800507c:	462b      	mov	r3, r5
 800507e:	1891      	adds	r1, r2, r2
 8005080:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005082:	415b      	adcs	r3, r3
 8005084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800508a:	4621      	mov	r1, r4
 800508c:	eb12 0801 	adds.w	r8, r2, r1
 8005090:	4629      	mov	r1, r5
 8005092:	eb43 0901 	adc.w	r9, r3, r1
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050aa:	4690      	mov	r8, r2
 80050ac:	4699      	mov	r9, r3
 80050ae:	4623      	mov	r3, r4
 80050b0:	eb18 0303 	adds.w	r3, r8, r3
 80050b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050b8:	462b      	mov	r3, r5
 80050ba:	eb49 0303 	adc.w	r3, r9, r3
 80050be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050d6:	460b      	mov	r3, r1
 80050d8:	18db      	adds	r3, r3, r3
 80050da:	653b      	str	r3, [r7, #80]	@ 0x50
 80050dc:	4613      	mov	r3, r2
 80050de:	eb42 0303 	adc.w	r3, r2, r3
 80050e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80050e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050ec:	f7fb fcae 	bl	8000a4c <__aeabi_uldivmod>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4b61      	ldr	r3, [pc, #388]	@ (800527c <UART_SetConfig+0x2d4>)
 80050f6:	fba3 2302 	umull	r2, r3, r3, r2
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	011c      	lsls	r4, r3, #4
 80050fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005102:	2200      	movs	r2, #0
 8005104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005108:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800510c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005110:	4642      	mov	r2, r8
 8005112:	464b      	mov	r3, r9
 8005114:	1891      	adds	r1, r2, r2
 8005116:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005118:	415b      	adcs	r3, r3
 800511a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800511c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005120:	4641      	mov	r1, r8
 8005122:	eb12 0a01 	adds.w	sl, r2, r1
 8005126:	4649      	mov	r1, r9
 8005128:	eb43 0b01 	adc.w	fp, r3, r1
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800513c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005140:	4692      	mov	sl, r2
 8005142:	469b      	mov	fp, r3
 8005144:	4643      	mov	r3, r8
 8005146:	eb1a 0303 	adds.w	r3, sl, r3
 800514a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800514e:	464b      	mov	r3, r9
 8005150:	eb4b 0303 	adc.w	r3, fp, r3
 8005154:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005164:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800516c:	460b      	mov	r3, r1
 800516e:	18db      	adds	r3, r3, r3
 8005170:	643b      	str	r3, [r7, #64]	@ 0x40
 8005172:	4613      	mov	r3, r2
 8005174:	eb42 0303 	adc.w	r3, r2, r3
 8005178:	647b      	str	r3, [r7, #68]	@ 0x44
 800517a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800517e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005182:	f7fb fc63 	bl	8000a4c <__aeabi_uldivmod>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4611      	mov	r1, r2
 800518c:	4b3b      	ldr	r3, [pc, #236]	@ (800527c <UART_SetConfig+0x2d4>)
 800518e:	fba3 2301 	umull	r2, r3, r3, r1
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2264      	movs	r2, #100	@ 0x64
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	1acb      	subs	r3, r1, r3
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051a2:	4b36      	ldr	r3, [pc, #216]	@ (800527c <UART_SetConfig+0x2d4>)
 80051a4:	fba3 2302 	umull	r2, r3, r3, r2
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051b0:	441c      	add	r4, r3
 80051b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051c4:	4642      	mov	r2, r8
 80051c6:	464b      	mov	r3, r9
 80051c8:	1891      	adds	r1, r2, r2
 80051ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051cc:	415b      	adcs	r3, r3
 80051ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051d4:	4641      	mov	r1, r8
 80051d6:	1851      	adds	r1, r2, r1
 80051d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80051da:	4649      	mov	r1, r9
 80051dc:	414b      	adcs	r3, r1
 80051de:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051ec:	4659      	mov	r1, fp
 80051ee:	00cb      	lsls	r3, r1, #3
 80051f0:	4651      	mov	r1, sl
 80051f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051f6:	4651      	mov	r1, sl
 80051f8:	00ca      	lsls	r2, r1, #3
 80051fa:	4610      	mov	r0, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	4603      	mov	r3, r0
 8005200:	4642      	mov	r2, r8
 8005202:	189b      	adds	r3, r3, r2
 8005204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005208:	464b      	mov	r3, r9
 800520a:	460a      	mov	r2, r1
 800520c:	eb42 0303 	adc.w	r3, r2, r3
 8005210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005220:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005228:	460b      	mov	r3, r1
 800522a:	18db      	adds	r3, r3, r3
 800522c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800522e:	4613      	mov	r3, r2
 8005230:	eb42 0303 	adc.w	r3, r2, r3
 8005234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800523a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800523e:	f7fb fc05 	bl	8000a4c <__aeabi_uldivmod>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4b0d      	ldr	r3, [pc, #52]	@ (800527c <UART_SetConfig+0x2d4>)
 8005248:	fba3 1302 	umull	r1, r3, r3, r2
 800524c:	095b      	lsrs	r3, r3, #5
 800524e:	2164      	movs	r1, #100	@ 0x64
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	3332      	adds	r3, #50	@ 0x32
 800525a:	4a08      	ldr	r2, [pc, #32]	@ (800527c <UART_SetConfig+0x2d4>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	f003 0207 	and.w	r2, r3, #7
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4422      	add	r2, r4
 800526e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005270:	e106      	b.n	8005480 <UART_SetConfig+0x4d8>
 8005272:	bf00      	nop
 8005274:	40011000 	.word	0x40011000
 8005278:	40011400 	.word	0x40011400
 800527c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005284:	2200      	movs	r2, #0
 8005286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800528a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800528e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005292:	4642      	mov	r2, r8
 8005294:	464b      	mov	r3, r9
 8005296:	1891      	adds	r1, r2, r2
 8005298:	6239      	str	r1, [r7, #32]
 800529a:	415b      	adcs	r3, r3
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
 800529e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052a2:	4641      	mov	r1, r8
 80052a4:	1854      	adds	r4, r2, r1
 80052a6:	4649      	mov	r1, r9
 80052a8:	eb43 0501 	adc.w	r5, r3, r1
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	00eb      	lsls	r3, r5, #3
 80052b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ba:	00e2      	lsls	r2, r4, #3
 80052bc:	4614      	mov	r4, r2
 80052be:	461d      	mov	r5, r3
 80052c0:	4643      	mov	r3, r8
 80052c2:	18e3      	adds	r3, r4, r3
 80052c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052c8:	464b      	mov	r3, r9
 80052ca:	eb45 0303 	adc.w	r3, r5, r3
 80052ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052ee:	4629      	mov	r1, r5
 80052f0:	008b      	lsls	r3, r1, #2
 80052f2:	4621      	mov	r1, r4
 80052f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052f8:	4621      	mov	r1, r4
 80052fa:	008a      	lsls	r2, r1, #2
 80052fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005300:	f7fb fba4 	bl	8000a4c <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4b60      	ldr	r3, [pc, #384]	@ (800548c <UART_SetConfig+0x4e4>)
 800530a:	fba3 2302 	umull	r2, r3, r3, r2
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	011c      	lsls	r4, r3, #4
 8005312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005316:	2200      	movs	r2, #0
 8005318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800531c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005324:	4642      	mov	r2, r8
 8005326:	464b      	mov	r3, r9
 8005328:	1891      	adds	r1, r2, r2
 800532a:	61b9      	str	r1, [r7, #24]
 800532c:	415b      	adcs	r3, r3
 800532e:	61fb      	str	r3, [r7, #28]
 8005330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005334:	4641      	mov	r1, r8
 8005336:	1851      	adds	r1, r2, r1
 8005338:	6139      	str	r1, [r7, #16]
 800533a:	4649      	mov	r1, r9
 800533c:	414b      	adcs	r3, r1
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800534c:	4659      	mov	r1, fp
 800534e:	00cb      	lsls	r3, r1, #3
 8005350:	4651      	mov	r1, sl
 8005352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005356:	4651      	mov	r1, sl
 8005358:	00ca      	lsls	r2, r1, #3
 800535a:	4610      	mov	r0, r2
 800535c:	4619      	mov	r1, r3
 800535e:	4603      	mov	r3, r0
 8005360:	4642      	mov	r2, r8
 8005362:	189b      	adds	r3, r3, r2
 8005364:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005368:	464b      	mov	r3, r9
 800536a:	460a      	mov	r2, r1
 800536c:	eb42 0303 	adc.w	r3, r2, r3
 8005370:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800537e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800538c:	4649      	mov	r1, r9
 800538e:	008b      	lsls	r3, r1, #2
 8005390:	4641      	mov	r1, r8
 8005392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005396:	4641      	mov	r1, r8
 8005398:	008a      	lsls	r2, r1, #2
 800539a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800539e:	f7fb fb55 	bl	8000a4c <__aeabi_uldivmod>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	4b38      	ldr	r3, [pc, #224]	@ (800548c <UART_SetConfig+0x4e4>)
 80053aa:	fba3 2301 	umull	r2, r3, r3, r1
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	2264      	movs	r2, #100	@ 0x64
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	1acb      	subs	r3, r1, r3
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	3332      	adds	r3, #50	@ 0x32
 80053bc:	4a33      	ldr	r2, [pc, #204]	@ (800548c <UART_SetConfig+0x4e4>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053c8:	441c      	add	r4, r3
 80053ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ce:	2200      	movs	r2, #0
 80053d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80053d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80053d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053d8:	4642      	mov	r2, r8
 80053da:	464b      	mov	r3, r9
 80053dc:	1891      	adds	r1, r2, r2
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	415b      	adcs	r3, r3
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053e8:	4641      	mov	r1, r8
 80053ea:	1851      	adds	r1, r2, r1
 80053ec:	6039      	str	r1, [r7, #0]
 80053ee:	4649      	mov	r1, r9
 80053f0:	414b      	adcs	r3, r1
 80053f2:	607b      	str	r3, [r7, #4]
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005400:	4659      	mov	r1, fp
 8005402:	00cb      	lsls	r3, r1, #3
 8005404:	4651      	mov	r1, sl
 8005406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800540a:	4651      	mov	r1, sl
 800540c:	00ca      	lsls	r2, r1, #3
 800540e:	4610      	mov	r0, r2
 8005410:	4619      	mov	r1, r3
 8005412:	4603      	mov	r3, r0
 8005414:	4642      	mov	r2, r8
 8005416:	189b      	adds	r3, r3, r2
 8005418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800541a:	464b      	mov	r3, r9
 800541c:	460a      	mov	r2, r1
 800541e:	eb42 0303 	adc.w	r3, r2, r3
 8005422:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	663b      	str	r3, [r7, #96]	@ 0x60
 800542e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800543c:	4649      	mov	r1, r9
 800543e:	008b      	lsls	r3, r1, #2
 8005440:	4641      	mov	r1, r8
 8005442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005446:	4641      	mov	r1, r8
 8005448:	008a      	lsls	r2, r1, #2
 800544a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800544e:	f7fb fafd 	bl	8000a4c <__aeabi_uldivmod>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4b0d      	ldr	r3, [pc, #52]	@ (800548c <UART_SetConfig+0x4e4>)
 8005458:	fba3 1302 	umull	r1, r3, r3, r2
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	2164      	movs	r1, #100	@ 0x64
 8005460:	fb01 f303 	mul.w	r3, r1, r3
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	3332      	adds	r3, #50	@ 0x32
 800546a:	4a08      	ldr	r2, [pc, #32]	@ (800548c <UART_SetConfig+0x4e4>)
 800546c:	fba2 2303 	umull	r2, r3, r2, r3
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	f003 020f 	and.w	r2, r3, #15
 8005476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4422      	add	r2, r4
 800547e:	609a      	str	r2, [r3, #8]
}
 8005480:	bf00      	nop
 8005482:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005486:	46bd      	mov	sp, r7
 8005488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800548c:	51eb851f 	.word	0x51eb851f

08005490 <__NVIC_SetPriority>:
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	6039      	str	r1, [r7, #0]
 800549a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800549c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	db0a      	blt.n	80054ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	490c      	ldr	r1, [pc, #48]	@ (80054dc <__NVIC_SetPriority+0x4c>)
 80054aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ae:	0112      	lsls	r2, r2, #4
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	440b      	add	r3, r1
 80054b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80054b8:	e00a      	b.n	80054d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	4908      	ldr	r1, [pc, #32]	@ (80054e0 <__NVIC_SetPriority+0x50>)
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	3b04      	subs	r3, #4
 80054c8:	0112      	lsls	r2, r2, #4
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	440b      	add	r3, r1
 80054ce:	761a      	strb	r2, [r3, #24]
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	e000e100 	.word	0xe000e100
 80054e0:	e000ed00 	.word	0xe000ed00

080054e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80054e8:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <SysTick_Handler+0x1c>)
 80054ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80054ec:	f001 ff34 	bl	8007358 <xTaskGetSchedulerState>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d001      	beq.n	80054fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80054f6:	f002 fd2f 	bl	8007f58 <xPortSysTickHandler>
  }
}
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	e000e010 	.word	0xe000e010

08005504 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005508:	2100      	movs	r1, #0
 800550a:	f06f 0004 	mvn.w	r0, #4
 800550e:	f7ff ffbf 	bl	8005490 <__NVIC_SetPriority>
#endif
}
 8005512:	bf00      	nop
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800551e:	f3ef 8305 	mrs	r3, IPSR
 8005522:	603b      	str	r3, [r7, #0]
  return(result);
 8005524:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800552a:	f06f 0305 	mvn.w	r3, #5
 800552e:	607b      	str	r3, [r7, #4]
 8005530:	e00c      	b.n	800554c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005532:	4b0a      	ldr	r3, [pc, #40]	@ (800555c <osKernelInitialize+0x44>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d105      	bne.n	8005546 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800553a:	4b08      	ldr	r3, [pc, #32]	@ (800555c <osKernelInitialize+0x44>)
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005540:	2300      	movs	r3, #0
 8005542:	607b      	str	r3, [r7, #4]
 8005544:	e002      	b.n	800554c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005546:	f04f 33ff 	mov.w	r3, #4294967295
 800554a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800554c:	687b      	ldr	r3, [r7, #4]
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000450 	.word	0x20000450

08005560 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005566:	f3ef 8305 	mrs	r3, IPSR
 800556a:	603b      	str	r3, [r7, #0]
  return(result);
 800556c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005572:	f06f 0305 	mvn.w	r3, #5
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	e010      	b.n	800559c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800557a:	4b0b      	ldr	r3, [pc, #44]	@ (80055a8 <osKernelStart+0x48>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d109      	bne.n	8005596 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005582:	f7ff ffbf 	bl	8005504 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005586:	4b08      	ldr	r3, [pc, #32]	@ (80055a8 <osKernelStart+0x48>)
 8005588:	2202      	movs	r2, #2
 800558a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800558c:	f001 fa80 	bl	8006a90 <vTaskStartScheduler>
      stat = osOK;
 8005590:	2300      	movs	r3, #0
 8005592:	607b      	str	r3, [r7, #4]
 8005594:	e002      	b.n	800559c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005596:	f04f 33ff 	mov.w	r3, #4294967295
 800559a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800559c:	687b      	ldr	r3, [r7, #4]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000450 	.word	0x20000450

080055ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08e      	sub	sp, #56	@ 0x38
 80055b0:	af04      	add	r7, sp, #16
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055bc:	f3ef 8305 	mrs	r3, IPSR
 80055c0:	617b      	str	r3, [r7, #20]
  return(result);
 80055c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d17e      	bne.n	80056c6 <osThreadNew+0x11a>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d07b      	beq.n	80056c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80055ce:	2380      	movs	r3, #128	@ 0x80
 80055d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055d2:	2318      	movs	r3, #24
 80055d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80055da:	f04f 33ff 	mov.w	r3, #4294967295
 80055de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d045      	beq.n	8005672 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <osThreadNew+0x48>
        name = attr->name;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <osThreadNew+0x6e>
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	2b38      	cmp	r3, #56	@ 0x38
 800560c:	d805      	bhi.n	800561a <osThreadNew+0x6e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <osThreadNew+0x72>
        return (NULL);
 800561a:	2300      	movs	r3, #0
 800561c:	e054      	b.n	80056c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	089b      	lsrs	r3, r3, #2
 800562c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00e      	beq.n	8005654 <osThreadNew+0xa8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	2ba7      	cmp	r3, #167	@ 0xa7
 800563c:	d90a      	bls.n	8005654 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005642:	2b00      	cmp	r3, #0
 8005644:	d006      	beq.n	8005654 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <osThreadNew+0xa8>
        mem = 1;
 800564e:	2301      	movs	r3, #1
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e010      	b.n	8005676 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10c      	bne.n	8005676 <osThreadNew+0xca>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d108      	bne.n	8005676 <osThreadNew+0xca>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <osThreadNew+0xca>
          mem = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e001      	b.n	8005676 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d110      	bne.n	800569e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005684:	9202      	str	r2, [sp, #8]
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	6a3a      	ldr	r2, [r7, #32]
 8005690:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f001 f808 	bl	80066a8 <xTaskCreateStatic>
 8005698:	4603      	mov	r3, r0
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	e013      	b.n	80056c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d110      	bne.n	80056c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	f107 0310 	add.w	r3, r7, #16
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f001 f856 	bl	8006768 <xTaskCreate>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d001      	beq.n	80056c6 <osThreadNew+0x11a>
            hTask = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056c6:	693b      	ldr	r3, [r7, #16]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3728      	adds	r7, #40	@ 0x28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056d8:	f3ef 8305 	mrs	r3, IPSR
 80056dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80056de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <osDelay+0x1c>
    stat = osErrorISR;
 80056e4:	f06f 0305 	mvn.w	r3, #5
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	e007      	b.n	80056fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 f994 	bl	8006a24 <vTaskDelay>
    }
  }

  return (stat);
 80056fc:	68fb      	ldr	r3, [r7, #12]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005706:	b580      	push	{r7, lr}
 8005708:	b08a      	sub	sp, #40	@ 0x28
 800570a:	af02      	add	r7, sp, #8
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005716:	f3ef 8305 	mrs	r3, IPSR
 800571a:	613b      	str	r3, [r7, #16]
  return(result);
 800571c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800571e:	2b00      	cmp	r3, #0
 8005720:	d15f      	bne.n	80057e2 <osMessageQueueNew+0xdc>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d05c      	beq.n	80057e2 <osMessageQueueNew+0xdc>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d059      	beq.n	80057e2 <osMessageQueueNew+0xdc>
    mem = -1;
 800572e:	f04f 33ff 	mov.w	r3, #4294967295
 8005732:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d029      	beq.n	800578e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d012      	beq.n	8005768 <osMessageQueueNew+0x62>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	2b4f      	cmp	r3, #79	@ 0x4f
 8005748:	d90e      	bls.n	8005768 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695a      	ldr	r2, [r3, #20]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	fb01 f303 	mul.w	r3, r1, r3
 800575e:	429a      	cmp	r2, r3
 8005760:	d302      	bcc.n	8005768 <osMessageQueueNew+0x62>
        mem = 1;
 8005762:	2301      	movs	r3, #1
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	e014      	b.n	8005792 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d110      	bne.n	8005792 <osMessageQueueNew+0x8c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10c      	bne.n	8005792 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800577c:	2b00      	cmp	r3, #0
 800577e:	d108      	bne.n	8005792 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d104      	bne.n	8005792 <osMessageQueueNew+0x8c>
          mem = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e001      	b.n	8005792 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d10b      	bne.n	80057b0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2100      	movs	r1, #0
 80057a2:	9100      	str	r1, [sp, #0]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fa30 	bl	8005c0c <xQueueGenericCreateStatic>
 80057ac:	61f8      	str	r0, [r7, #28]
 80057ae:	e008      	b.n	80057c2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d105      	bne.n	80057c2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80057b6:	2200      	movs	r2, #0
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 faa3 	bl	8005d06 <xQueueGenericCreate>
 80057c0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00c      	beq.n	80057e2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	e001      	b.n	80057da <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80057da:	6979      	ldr	r1, [r7, #20]
 80057dc:	69f8      	ldr	r0, [r7, #28]
 80057de:	f000 ff05 	bl	80065ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80057e2:	69fb      	ldr	r3, [r7, #28]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005800:	2300      	movs	r3, #0
 8005802:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005804:	f3ef 8305 	mrs	r3, IPSR
 8005808:	617b      	str	r3, [r7, #20]
  return(result);
 800580a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800580c:	2b00      	cmp	r3, #0
 800580e:	d028      	beq.n	8005862 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <osMessageQueuePut+0x36>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <osMessageQueuePut+0x36>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005822:	f06f 0303 	mvn.w	r3, #3
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	e038      	b.n	800589c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800582a:	2300      	movs	r3, #0
 800582c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800582e:	f107 0210 	add.w	r2, r7, #16
 8005832:	2300      	movs	r3, #0
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	69b8      	ldr	r0, [r7, #24]
 8005838:	f000 fbc6 	bl	8005fc8 <xQueueGenericSendFromISR>
 800583c:	4603      	mov	r3, r0
 800583e:	2b01      	cmp	r3, #1
 8005840:	d003      	beq.n	800584a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005842:	f06f 0302 	mvn.w	r3, #2
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	e028      	b.n	800589c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d025      	beq.n	800589c <osMessageQueuePut+0xb0>
 8005850:	4b15      	ldr	r3, [pc, #84]	@ (80058a8 <osMessageQueuePut+0xbc>)
 8005852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	e01c      	b.n	800589c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <osMessageQueuePut+0x82>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800586e:	f06f 0303 	mvn.w	r3, #3
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	e012      	b.n	800589c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005876:	2300      	movs	r3, #0
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	69b8      	ldr	r0, [r7, #24]
 800587e:	f000 faa1 	bl	8005dc4 <xQueueGenericSend>
 8005882:	4603      	mov	r3, r0
 8005884:	2b01      	cmp	r3, #1
 8005886:	d009      	beq.n	800589c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800588e:	f06f 0301 	mvn.w	r3, #1
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e002      	b.n	800589c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005896:	f06f 0302 	mvn.w	r3, #2
 800589a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800589c:	69fb      	ldr	r3, [r7, #28]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3720      	adds	r7, #32
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058c2:	f3ef 8305 	mrs	r3, IPSR
 80058c6:	617b      	str	r3, [r7, #20]
  return(result);
 80058c8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d028      	beq.n	8005920 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <osMessageQueueGet+0x34>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <osMessageQueueGet+0x34>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80058e0:	f06f 0303 	mvn.w	r3, #3
 80058e4:	61fb      	str	r3, [r7, #28]
 80058e6:	e037      	b.n	8005958 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80058ec:	f107 0310 	add.w	r3, r7, #16
 80058f0:	461a      	mov	r2, r3
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	69b8      	ldr	r0, [r7, #24]
 80058f6:	f000 fce7 	bl	80062c8 <xQueueReceiveFromISR>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d003      	beq.n	8005908 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005900:	f06f 0302 	mvn.w	r3, #2
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	e027      	b.n	8005958 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d024      	beq.n	8005958 <osMessageQueueGet+0xac>
 800590e:	4b15      	ldr	r3, [pc, #84]	@ (8005964 <osMessageQueueGet+0xb8>)
 8005910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	e01b      	b.n	8005958 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <osMessageQueueGet+0x80>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800592c:	f06f 0303 	mvn.w	r3, #3
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	e011      	b.n	8005958 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	69b8      	ldr	r0, [r7, #24]
 800593a:	f000 fbe3 	bl	8006104 <xQueueReceive>
 800593e:	4603      	mov	r3, r0
 8005940:	2b01      	cmp	r3, #1
 8005942:	d009      	beq.n	8005958 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800594a:	f06f 0301 	mvn.w	r3, #1
 800594e:	61fb      	str	r3, [r7, #28]
 8005950:	e002      	b.n	8005958 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005952:	f06f 0302 	mvn.w	r3, #2
 8005956:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005958:	69fb      	ldr	r3, [r7, #28]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a07      	ldr	r2, [pc, #28]	@ (8005994 <vApplicationGetIdleTaskMemory+0x2c>)
 8005978:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4a06      	ldr	r2, [pc, #24]	@ (8005998 <vApplicationGetIdleTaskMemory+0x30>)
 800597e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2280      	movs	r2, #128	@ 0x80
 8005984:	601a      	str	r2, [r3, #0]
}
 8005986:	bf00      	nop
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20000454 	.word	0x20000454
 8005998:	200004fc 	.word	0x200004fc

0800599c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a07      	ldr	r2, [pc, #28]	@ (80059c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80059ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4a06      	ldr	r2, [pc, #24]	@ (80059cc <vApplicationGetTimerTaskMemory+0x30>)
 80059b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059ba:	601a      	str	r2, [r3, #0]
}
 80059bc:	bf00      	nop
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	200006fc 	.word	0x200006fc
 80059cc:	200007a4 	.word	0x200007a4

080059d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f103 0208 	add.w	r2, r3, #8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f04f 32ff 	mov.w	r2, #4294967295
 80059e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f103 0208 	add.w	r2, r3, #8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f103 0208 	add.w	r2, r3, #8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
}
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d103      	bne.n	8005a92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	e00c      	b.n	8005aac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3308      	adds	r3, #8
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	e002      	b.n	8005aa0 <vListInsert+0x2e>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d2f6      	bcs.n	8005a9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6892      	ldr	r2, [r2, #8]
 8005afa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6852      	ldr	r2, [r2, #4]
 8005b04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d103      	bne.n	8005b18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	1e5a      	subs	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10b      	bne.n	8005b64 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b64:	f002 f968 	bl	8007e38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b70:	68f9      	ldr	r1, [r7, #12]
 8005b72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b94:	3b01      	subs	r3, #1
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b9a:	fb01 f303 	mul.w	r3, r1, r3
 8005b9e:	441a      	add	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	22ff      	movs	r2, #255	@ 0xff
 8005ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	22ff      	movs	r2, #255	@ 0xff
 8005bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d114      	bne.n	8005be4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d01a      	beq.n	8005bf8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3310      	adds	r3, #16
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 fa00 	bl	8006fcc <xTaskRemoveFromEventList>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d012      	beq.n	8005bf8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c08 <xQueueGenericReset+0xd0>)
 8005bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	e009      	b.n	8005bf8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3310      	adds	r3, #16
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff fef1 	bl	80059d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3324      	adds	r3, #36	@ 0x24
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff feec 	bl	80059d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bf8:	f002 f950 	bl	8007e9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bfc:	2301      	movs	r3, #1
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08e      	sub	sp, #56	@ 0x38
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c32:	bf00      	nop
 8005c34:	bf00      	nop
 8005c36:	e7fd      	b.n	8005c34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <xQueueGenericCreateStatic+0x56>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <xQueueGenericCreateStatic+0x5a>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueGenericCreateStatic+0x5c>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10b      	bne.n	8005c84 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	623b      	str	r3, [r7, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <xQueueGenericCreateStatic+0x84>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <xQueueGenericCreateStatic+0x88>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e000      	b.n	8005c96 <xQueueGenericCreateStatic+0x8a>
 8005c94:	2300      	movs	r3, #0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10b      	bne.n	8005cb2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	61fb      	str	r3, [r7, #28]
}
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
 8005cb0:	e7fd      	b.n	8005cae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005cb2:	2350      	movs	r3, #80	@ 0x50
 8005cb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b50      	cmp	r3, #80	@ 0x50
 8005cba:	d00b      	beq.n	8005cd4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	61bb      	str	r3, [r7, #24]
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	e7fd      	b.n	8005cd0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cd4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00d      	beq.n	8005cfc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ce8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 f840 	bl	8005d7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3730      	adds	r7, #48	@ 0x30
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b08a      	sub	sp, #40	@ 0x28
 8005d0a:	af02      	add	r7, sp, #8
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	4613      	mov	r3, r2
 8005d12:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10b      	bne.n	8005d32 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	613b      	str	r3, [r7, #16]
}
 8005d2c:	bf00      	nop
 8005d2e:	bf00      	nop
 8005d30:	e7fd      	b.n	8005d2e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	fb02 f303 	mul.w	r3, r2, r3
 8005d3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	3350      	adds	r3, #80	@ 0x50
 8005d40:	4618      	mov	r0, r3
 8005d42:	f002 f99b 	bl	800807c <pvPortMalloc>
 8005d46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d011      	beq.n	8005d72 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	3350      	adds	r3, #80	@ 0x50
 8005d56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d60:	79fa      	ldrb	r2, [r7, #7]
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	4613      	mov	r3, r2
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f805 	bl	8005d7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d72:	69bb      	ldr	r3, [r7, #24]
	}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3720      	adds	r7, #32
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d103      	bne.n	8005d98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e002      	b.n	8005d9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005daa:	2101      	movs	r1, #1
 8005dac:	69b8      	ldr	r0, [r7, #24]
 8005dae:	f7ff fec3 	bl	8005b38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	78fa      	ldrb	r2, [r7, #3]
 8005db6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08e      	sub	sp, #56	@ 0x38
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10b      	bne.n	8005df8 <xQueueGenericSend+0x34>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005df2:	bf00      	nop
 8005df4:	bf00      	nop
 8005df6:	e7fd      	b.n	8005df4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d103      	bne.n	8005e06 <xQueueGenericSend+0x42>
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <xQueueGenericSend+0x46>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <xQueueGenericSend+0x48>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <xQueueGenericSend+0x64>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d103      	bne.n	8005e36 <xQueueGenericSend+0x72>
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <xQueueGenericSend+0x76>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <xQueueGenericSend+0x78>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <xQueueGenericSend+0x94>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	623b      	str	r3, [r7, #32]
}
 8005e52:	bf00      	nop
 8005e54:	bf00      	nop
 8005e56:	e7fd      	b.n	8005e54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e58:	f001 fa7e 	bl	8007358 <xTaskGetSchedulerState>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <xQueueGenericSend+0xa4>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <xQueueGenericSend+0xa8>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <xQueueGenericSend+0xaa>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10b      	bne.n	8005e8a <xQueueGenericSend+0xc6>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	61fb      	str	r3, [r7, #28]
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	e7fd      	b.n	8005e86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e8a:	f001 ffd5 	bl	8007e38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d302      	bcc.n	8005ea0 <xQueueGenericSend+0xdc>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d129      	bne.n	8005ef4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ea6:	f000 fa91 	bl	80063cc <prvCopyDataToQueue>
 8005eaa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d010      	beq.n	8005ed6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	3324      	adds	r3, #36	@ 0x24
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 f887 	bl	8006fcc <xTaskRemoveFromEventList>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d013      	beq.n	8005eec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8005fc4 <xQueueGenericSend+0x200>)
 8005ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	e00a      	b.n	8005eec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005edc:	4b39      	ldr	r3, [pc, #228]	@ (8005fc4 <xQueueGenericSend+0x200>)
 8005ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005eec:	f001 ffd6 	bl	8007e9c <vPortExitCritical>
				return pdPASS;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e063      	b.n	8005fbc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005efa:	f001 ffcf 	bl	8007e9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e05c      	b.n	8005fbc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f08:	f107 0314 	add.w	r3, r7, #20
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f001 f8c1 	bl	8007094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f12:	2301      	movs	r3, #1
 8005f14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f16:	f001 ffc1 	bl	8007e9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f1a:	f000 fe29 	bl	8006b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f1e:	f001 ff8b 	bl	8007e38 <vPortEnterCritical>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f28:	b25b      	sxtb	r3, r3
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d103      	bne.n	8005f38 <xQueueGenericSend+0x174>
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f3e:	b25b      	sxtb	r3, r3
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d103      	bne.n	8005f4e <xQueueGenericSend+0x18a>
 8005f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f4e:	f001 ffa5 	bl	8007e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f52:	1d3a      	adds	r2, r7, #4
 8005f54:	f107 0314 	add.w	r3, r7, #20
 8005f58:	4611      	mov	r1, r2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 f8b0 	bl	80070c0 <xTaskCheckForTimeOut>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d124      	bne.n	8005fb0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f68:	f000 fb28 	bl	80065bc <prvIsQueueFull>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d018      	beq.n	8005fa4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	3310      	adds	r3, #16
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4611      	mov	r1, r2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 ffd4 	bl	8006f28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f82:	f000 fab3 	bl	80064ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f86:	f000 fe01 	bl	8006b8c <xTaskResumeAll>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f47f af7c 	bne.w	8005e8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005f92:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc4 <xQueueGenericSend+0x200>)
 8005f94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	e772      	b.n	8005e8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fa6:	f000 faa1 	bl	80064ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005faa:	f000 fdef 	bl	8006b8c <xTaskResumeAll>
 8005fae:	e76c      	b.n	8005e8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fb2:	f000 fa9b 	bl	80064ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fb6:	f000 fde9 	bl	8006b8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005fba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3738      	adds	r7, #56	@ 0x38
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	e000ed04 	.word	0xe000ed04

08005fc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b090      	sub	sp, #64	@ 0x40
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10b      	bne.n	8005ff8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	e7fd      	b.n	8005ff4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d103      	bne.n	8006006 <xQueueGenericSendFromISR+0x3e>
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <xQueueGenericSendFromISR+0x42>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <xQueueGenericSendFromISR+0x44>
 800600a:	2300      	movs	r3, #0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10b      	bne.n	8006028 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d103      	bne.n	8006036 <xQueueGenericSendFromISR+0x6e>
 800602e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <xQueueGenericSendFromISR+0x72>
 8006036:	2301      	movs	r3, #1
 8006038:	e000      	b.n	800603c <xQueueGenericSendFromISR+0x74>
 800603a:	2300      	movs	r3, #0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10b      	bne.n	8006058 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	623b      	str	r3, [r7, #32]
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	e7fd      	b.n	8006054 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006058:	f001 ffce 	bl	8007ff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800605c:	f3ef 8211 	mrs	r2, BASEPRI
 8006060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	61fa      	str	r2, [r7, #28]
 8006072:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006074:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006076:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800607c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006080:	429a      	cmp	r2, r3
 8006082:	d302      	bcc.n	800608a <xQueueGenericSendFromISR+0xc2>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b02      	cmp	r3, #2
 8006088:	d12f      	bne.n	80060ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800608a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006090:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006098:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80060a0:	f000 f994 	bl	80063cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80060a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ac:	d112      	bne.n	80060d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d016      	beq.n	80060e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b8:	3324      	adds	r3, #36	@ 0x24
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 ff86 	bl	8006fcc <xTaskRemoveFromEventList>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00e      	beq.n	80060e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	e007      	b.n	80060e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80060d8:	3301      	adds	r3, #1
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	b25a      	sxtb	r2, r3
 80060de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80060e4:	2301      	movs	r3, #1
 80060e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80060e8:	e001      	b.n	80060ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3740      	adds	r7, #64	@ 0x40
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08c      	sub	sp, #48	@ 0x30
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006110:	2300      	movs	r3, #0
 8006112:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10b      	bne.n	8006136 <xQueueReceive+0x32>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	623b      	str	r3, [r7, #32]
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d103      	bne.n	8006144 <xQueueReceive+0x40>
 800613c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <xQueueReceive+0x44>
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <xQueueReceive+0x46>
 8006148:	2300      	movs	r3, #0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10b      	bne.n	8006166 <xQueueReceive+0x62>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	61fb      	str	r3, [r7, #28]
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	e7fd      	b.n	8006162 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006166:	f001 f8f7 	bl	8007358 <xTaskGetSchedulerState>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d102      	bne.n	8006176 <xQueueReceive+0x72>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <xQueueReceive+0x76>
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <xQueueReceive+0x78>
 800617a:	2300      	movs	r3, #0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10b      	bne.n	8006198 <xQueueReceive+0x94>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	61bb      	str	r3, [r7, #24]
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006198:	f001 fe4e 	bl	8007e38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01f      	beq.n	80061e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061ac:	f000 f978 	bl	80064a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	1e5a      	subs	r2, r3, #1
 80061b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00f      	beq.n	80061e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c2:	3310      	adds	r3, #16
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 ff01 	bl	8006fcc <xTaskRemoveFromEventList>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061d0:	4b3c      	ldr	r3, [pc, #240]	@ (80062c4 <xQueueReceive+0x1c0>)
 80061d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061e0:	f001 fe5c 	bl	8007e9c <vPortExitCritical>
				return pdPASS;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e069      	b.n	80062bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061ee:	f001 fe55 	bl	8007e9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e062      	b.n	80062bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d106      	bne.n	800620a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061fc:	f107 0310 	add.w	r3, r7, #16
 8006200:	4618      	mov	r0, r3
 8006202:	f000 ff47 	bl	8007094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006206:	2301      	movs	r3, #1
 8006208:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800620a:	f001 fe47 	bl	8007e9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800620e:	f000 fcaf 	bl	8006b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006212:	f001 fe11 	bl	8007e38 <vPortEnterCritical>
 8006216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006218:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800621c:	b25b      	sxtb	r3, r3
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d103      	bne.n	800622c <xQueueReceive+0x128>
 8006224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006232:	b25b      	sxtb	r3, r3
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d103      	bne.n	8006242 <xQueueReceive+0x13e>
 800623a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006242:	f001 fe2b 	bl	8007e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006246:	1d3a      	adds	r2, r7, #4
 8006248:	f107 0310 	add.w	r3, r7, #16
 800624c:	4611      	mov	r1, r2
 800624e:	4618      	mov	r0, r3
 8006250:	f000 ff36 	bl	80070c0 <xTaskCheckForTimeOut>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d123      	bne.n	80062a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800625a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800625c:	f000 f998 	bl	8006590 <prvIsQueueEmpty>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d017      	beq.n	8006296 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	3324      	adds	r3, #36	@ 0x24
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	4611      	mov	r1, r2
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fe5a 	bl	8006f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006274:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006276:	f000 f939 	bl	80064ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800627a:	f000 fc87 	bl	8006b8c <xTaskResumeAll>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d189      	bne.n	8006198 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006284:	4b0f      	ldr	r3, [pc, #60]	@ (80062c4 <xQueueReceive+0x1c0>)
 8006286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	e780      	b.n	8006198 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006298:	f000 f928 	bl	80064ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800629c:	f000 fc76 	bl	8006b8c <xTaskResumeAll>
 80062a0:	e77a      	b.n	8006198 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062a4:	f000 f922 	bl	80064ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062a8:	f000 fc70 	bl	8006b8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ae:	f000 f96f 	bl	8006590 <prvIsQueueEmpty>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f43f af6f 	beq.w	8006198 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3730      	adds	r7, #48	@ 0x30
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	e000ed04 	.word	0xe000ed04

080062c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08e      	sub	sp, #56	@ 0x38
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80062d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10b      	bne.n	80062f6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	623b      	str	r3, [r7, #32]
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	e7fd      	b.n	80062f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d103      	bne.n	8006304 <xQueueReceiveFromISR+0x3c>
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <xQueueReceiveFromISR+0x40>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <xQueueReceiveFromISR+0x42>
 8006308:	2300      	movs	r3, #0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10b      	bne.n	8006326 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	61fb      	str	r3, [r7, #28]
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	e7fd      	b.n	8006322 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006326:	f001 fe67 	bl	8007ff8 <vPortValidateInterruptPriority>
	__asm volatile
 800632a:	f3ef 8211 	mrs	r2, BASEPRI
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	61ba      	str	r2, [r7, #24]
 8006340:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006342:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006344:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800634c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634e:	2b00      	cmp	r3, #0
 8006350:	d02f      	beq.n	80063b2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006360:	f000 f89e 	bl	80064a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006366:	1e5a      	subs	r2, r3, #1
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800636c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006374:	d112      	bne.n	800639c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d016      	beq.n	80063ac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800637e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006380:	3310      	adds	r3, #16
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fe22 	bl	8006fcc <xTaskRemoveFromEventList>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00e      	beq.n	80063ac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	e007      	b.n	80063ac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800639c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063a0:	3301      	adds	r3, #1
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	b25a      	sxtb	r2, r3
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80063ac:	2301      	movs	r3, #1
 80063ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b0:	e001      	b.n	80063b6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f383 8811 	msr	BASEPRI, r3
}
 80063c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3738      	adds	r7, #56	@ 0x38
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10d      	bne.n	8006406 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d14d      	bne.n	800648e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 ffcc 	bl	8007394 <xTaskPriorityDisinherit>
 80063fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	609a      	str	r2, [r3, #8]
 8006404:	e043      	b.n	800648e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d119      	bne.n	8006440 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6858      	ldr	r0, [r3, #4]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006414:	461a      	mov	r2, r3
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	f002 fb23 	bl	8008a62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006424:	441a      	add	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	429a      	cmp	r2, r3
 8006434:	d32b      	bcc.n	800648e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	605a      	str	r2, [r3, #4]
 800643e:	e026      	b.n	800648e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68d8      	ldr	r0, [r3, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006448:	461a      	mov	r2, r3
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	f002 fb09 	bl	8008a62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006458:	425b      	negs	r3, r3
 800645a:	441a      	add	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d207      	bcs.n	800647c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006474:	425b      	negs	r3, r3
 8006476:	441a      	add	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d105      	bne.n	800648e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	3b01      	subs	r3, #1
 800648c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006496:	697b      	ldr	r3, [r7, #20]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d018      	beq.n	80064e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ba:	441a      	add	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d303      	bcc.n	80064d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68d9      	ldr	r1, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064dc:	461a      	mov	r2, r3
 80064de:	6838      	ldr	r0, [r7, #0]
 80064e0:	f002 fabf 	bl	8008a62 <memcpy>
	}
}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064f4:	f001 fca0 	bl	8007e38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006500:	e011      	b.n	8006526 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	d012      	beq.n	8006530 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3324      	adds	r3, #36	@ 0x24
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fd5c 	bl	8006fcc <xTaskRemoveFromEventList>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800651a:	f000 fe35 	bl	8007188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	3b01      	subs	r3, #1
 8006522:	b2db      	uxtb	r3, r3
 8006524:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dce9      	bgt.n	8006502 <prvUnlockQueue+0x16>
 800652e:	e000      	b.n	8006532 <prvUnlockQueue+0x46>
					break;
 8006530:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	22ff      	movs	r2, #255	@ 0xff
 8006536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800653a:	f001 fcaf 	bl	8007e9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800653e:	f001 fc7b 	bl	8007e38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006548:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800654a:	e011      	b.n	8006570 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d012      	beq.n	800657a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3310      	adds	r3, #16
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fd37 	bl	8006fcc <xTaskRemoveFromEventList>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006564:	f000 fe10 	bl	8007188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	3b01      	subs	r3, #1
 800656c:	b2db      	uxtb	r3, r3
 800656e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006574:	2b00      	cmp	r3, #0
 8006576:	dce9      	bgt.n	800654c <prvUnlockQueue+0x60>
 8006578:	e000      	b.n	800657c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800657a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	22ff      	movs	r2, #255	@ 0xff
 8006580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006584:	f001 fc8a 	bl	8007e9c <vPortExitCritical>
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006598:	f001 fc4e 	bl	8007e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e001      	b.n	80065ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065ae:	f001 fc75 	bl	8007e9c <vPortExitCritical>

	return xReturn;
 80065b2:	68fb      	ldr	r3, [r7, #12]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065c4:	f001 fc38 	bl	8007e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d102      	bne.n	80065da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	e001      	b.n	80065de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065de:	f001 fc5d 	bl	8007e9c <vPortExitCritical>

	return xReturn;
 80065e2:	68fb      	ldr	r3, [r7, #12]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	e014      	b.n	8006626 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065fc:	4a0f      	ldr	r2, [pc, #60]	@ (800663c <vQueueAddToRegistry+0x50>)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006608:	490c      	ldr	r1, [pc, #48]	@ (800663c <vQueueAddToRegistry+0x50>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006612:	4a0a      	ldr	r2, [pc, #40]	@ (800663c <vQueueAddToRegistry+0x50>)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	4413      	add	r3, r2
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800661e:	e006      	b.n	800662e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3301      	adds	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b07      	cmp	r3, #7
 800662a:	d9e7      	bls.n	80065fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000ba4 	.word	0x20000ba4

08006640 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006650:	f001 fbf2 	bl	8007e38 <vPortEnterCritical>
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800665a:	b25b      	sxtb	r3, r3
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006660:	d103      	bne.n	800666a <vQueueWaitForMessageRestricted+0x2a>
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006670:	b25b      	sxtb	r3, r3
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d103      	bne.n	8006680 <vQueueWaitForMessageRestricted+0x40>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006680:	f001 fc0c 	bl	8007e9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	3324      	adds	r3, #36	@ 0x24
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fc6d 	bl	8006f74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800669a:	6978      	ldr	r0, [r7, #20]
 800669c:	f7ff ff26 	bl	80064ec <prvUnlockQueue>
	}
 80066a0:	bf00      	nop
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08e      	sub	sp, #56	@ 0x38
 80066ac:	af04      	add	r7, sp, #16
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10b      	bne.n	80066d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	623b      	str	r3, [r7, #32]
}
 80066ce:	bf00      	nop
 80066d0:	bf00      	nop
 80066d2:	e7fd      	b.n	80066d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	61fb      	str	r3, [r7, #28]
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066f2:	23a8      	movs	r3, #168	@ 0xa8
 80066f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2ba8      	cmp	r3, #168	@ 0xa8
 80066fa:	d00b      	beq.n	8006714 <xTaskCreateStatic+0x6c>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	61bb      	str	r3, [r7, #24]
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006714:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006718:	2b00      	cmp	r3, #0
 800671a:	d01e      	beq.n	800675a <xTaskCreateStatic+0xb2>
 800671c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800671e:	2b00      	cmp	r3, #0
 8006720:	d01b      	beq.n	800675a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800672a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	2202      	movs	r2, #2
 8006730:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006734:	2300      	movs	r3, #0
 8006736:	9303      	str	r3, [sp, #12]
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673a:	9302      	str	r3, [sp, #8]
 800673c:	f107 0314 	add.w	r3, r7, #20
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f851 	bl	80067f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006752:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006754:	f000 f8f6 	bl	8006944 <prvAddNewTaskToReadyList>
 8006758:	e001      	b.n	800675e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800675e:	697b      	ldr	r3, [r7, #20]
	}
 8006760:	4618      	mov	r0, r3
 8006762:	3728      	adds	r7, #40	@ 0x28
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08c      	sub	sp, #48	@ 0x30
 800676c:	af04      	add	r7, sp, #16
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	4613      	mov	r3, r2
 8006776:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006778:	88fb      	ldrh	r3, [r7, #6]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fc7d 	bl	800807c <pvPortMalloc>
 8006782:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00e      	beq.n	80067a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800678a:	20a8      	movs	r0, #168	@ 0xa8
 800678c:	f001 fc76 	bl	800807c <pvPortMalloc>
 8006790:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	631a      	str	r2, [r3, #48]	@ 0x30
 800679e:	e005      	b.n	80067ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067a0:	6978      	ldr	r0, [r7, #20]
 80067a2:	f001 fd39 	bl	8008218 <vPortFree>
 80067a6:	e001      	b.n	80067ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d017      	beq.n	80067e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067ba:	88fa      	ldrh	r2, [r7, #6]
 80067bc:	2300      	movs	r3, #0
 80067be:	9303      	str	r3, [sp, #12]
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	9302      	str	r3, [sp, #8]
 80067c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f80f 	bl	80067f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067d6:	69f8      	ldr	r0, [r7, #28]
 80067d8:	f000 f8b4 	bl	8006944 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067dc:	2301      	movs	r3, #1
 80067de:	61bb      	str	r3, [r7, #24]
 80067e0:	e002      	b.n	80067e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067e2:	f04f 33ff 	mov.w	r3, #4294967295
 80067e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067e8:	69bb      	ldr	r3, [r7, #24]
	}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3720      	adds	r7, #32
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	461a      	mov	r2, r3
 800680c:	21a5      	movs	r1, #165	@ 0xa5
 800680e:	f002 f84f 	bl	80088b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800681c:	3b01      	subs	r3, #1
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	f023 0307 	bic.w	r3, r3, #7
 800682a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	617b      	str	r3, [r7, #20]
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	e7fd      	b.n	800684a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01f      	beq.n	8006894 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	e012      	b.n	8006880 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	7819      	ldrb	r1, [r3, #0]
 8006862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	4413      	add	r3, r2
 8006868:	3334      	adds	r3, #52	@ 0x34
 800686a:	460a      	mov	r2, r1
 800686c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	4413      	add	r3, r2
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d006      	beq.n	8006888 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	3301      	adds	r3, #1
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	2b0f      	cmp	r3, #15
 8006884:	d9e9      	bls.n	800685a <prvInitialiseNewTask+0x66>
 8006886:	e000      	b.n	800688a <prvInitialiseNewTask+0x96>
			{
				break;
 8006888:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006892:	e003      	b.n	800689c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689e:	2b37      	cmp	r3, #55	@ 0x37
 80068a0:	d901      	bls.n	80068a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068a2:	2337      	movs	r3, #55	@ 0x37
 80068a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	2200      	movs	r2, #0
 80068b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ba:	3304      	adds	r3, #4
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff f8a7 	bl	8005a10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	3318      	adds	r3, #24
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff f8a2 	bl	8005a10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f4:	3354      	adds	r3, #84	@ 0x54
 80068f6:	224c      	movs	r2, #76	@ 0x4c
 80068f8:	2100      	movs	r1, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 ffd8 	bl	80088b0 <memset>
 8006900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006902:	4a0d      	ldr	r2, [pc, #52]	@ (8006938 <prvInitialiseNewTask+0x144>)
 8006904:	659a      	str	r2, [r3, #88]	@ 0x58
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	4a0c      	ldr	r2, [pc, #48]	@ (800693c <prvInitialiseNewTask+0x148>)
 800690a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690e:	4a0c      	ldr	r2, [pc, #48]	@ (8006940 <prvInitialiseNewTask+0x14c>)
 8006910:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	68f9      	ldr	r1, [r7, #12]
 8006916:	69b8      	ldr	r0, [r7, #24]
 8006918:	f001 f95a 	bl	8007bd0 <pxPortInitialiseStack>
 800691c:	4602      	mov	r2, r0
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800692c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800692e:	bf00      	nop
 8006930:	3720      	adds	r7, #32
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20006058 	.word	0x20006058
 800693c:	200060c0 	.word	0x200060c0
 8006940:	20006128 	.word	0x20006128

08006944 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800694c:	f001 fa74 	bl	8007e38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006950:	4b2d      	ldr	r3, [pc, #180]	@ (8006a08 <prvAddNewTaskToReadyList+0xc4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a2c      	ldr	r2, [pc, #176]	@ (8006a08 <prvAddNewTaskToReadyList+0xc4>)
 8006958:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800695a:	4b2c      	ldr	r3, [pc, #176]	@ (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006962:	4a2a      	ldr	r2, [pc, #168]	@ (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006968:	4b27      	ldr	r3, [pc, #156]	@ (8006a08 <prvAddNewTaskToReadyList+0xc4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d110      	bne.n	8006992 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006970:	f000 fc2e 	bl	80071d0 <prvInitialiseTaskLists>
 8006974:	e00d      	b.n	8006992 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006976:	4b26      	ldr	r3, [pc, #152]	@ (8006a10 <prvAddNewTaskToReadyList+0xcc>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800697e:	4b23      	ldr	r3, [pc, #140]	@ (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	429a      	cmp	r2, r3
 800698a:	d802      	bhi.n	8006992 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800698c:	4a1f      	ldr	r2, [pc, #124]	@ (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006992:	4b20      	ldr	r3, [pc, #128]	@ (8006a14 <prvAddNewTaskToReadyList+0xd0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	4a1e      	ldr	r2, [pc, #120]	@ (8006a14 <prvAddNewTaskToReadyList+0xd0>)
 800699a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800699c:	4b1d      	ldr	r3, [pc, #116]	@ (8006a14 <prvAddNewTaskToReadyList+0xd0>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a18 <prvAddNewTaskToReadyList+0xd4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d903      	bls.n	80069b8 <prvAddNewTaskToReadyList+0x74>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	4a18      	ldr	r2, [pc, #96]	@ (8006a18 <prvAddNewTaskToReadyList+0xd4>)
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4a15      	ldr	r2, [pc, #84]	@ (8006a1c <prvAddNewTaskToReadyList+0xd8>)
 80069c6:	441a      	add	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f7ff f82b 	bl	8005a2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069d4:	f001 fa62 	bl	8007e9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <prvAddNewTaskToReadyList+0xcc>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00e      	beq.n	80069fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069e0:	4b0a      	ldr	r3, [pc, #40]	@ (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d207      	bcs.n	80069fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006a20 <prvAddNewTaskToReadyList+0xdc>)
 80069f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069fe:	bf00      	nop
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	200010b8 	.word	0x200010b8
 8006a0c:	20000be4 	.word	0x20000be4
 8006a10:	200010c4 	.word	0x200010c4
 8006a14:	200010d4 	.word	0x200010d4
 8006a18:	200010c0 	.word	0x200010c0
 8006a1c:	20000be8 	.word	0x20000be8
 8006a20:	e000ed04 	.word	0xe000ed04

08006a24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d018      	beq.n	8006a68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a36:	4b14      	ldr	r3, [pc, #80]	@ (8006a88 <vTaskDelay+0x64>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <vTaskDelay+0x32>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	60bb      	str	r3, [r7, #8]
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	e7fd      	b.n	8006a52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a56:	f000 f88b 	bl	8006b70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fd09 	bl	8007474 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a62:	f000 f893 	bl	8006b8c <xTaskResumeAll>
 8006a66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d107      	bne.n	8006a7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006a6e:	4b07      	ldr	r3, [pc, #28]	@ (8006a8c <vTaskDelay+0x68>)
 8006a70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	200010e0 	.word	0x200010e0
 8006a8c:	e000ed04 	.word	0xe000ed04

08006a90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	@ 0x28
 8006a94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a9e:	463a      	mov	r2, r7
 8006aa0:	1d39      	adds	r1, r7, #4
 8006aa2:	f107 0308 	add.w	r3, r7, #8
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe ff5e 	bl	8005968 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	9202      	str	r2, [sp, #8]
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	2300      	movs	r3, #0
 8006abc:	460a      	mov	r2, r1
 8006abe:	4924      	ldr	r1, [pc, #144]	@ (8006b50 <vTaskStartScheduler+0xc0>)
 8006ac0:	4824      	ldr	r0, [pc, #144]	@ (8006b54 <vTaskStartScheduler+0xc4>)
 8006ac2:	f7ff fdf1 	bl	80066a8 <xTaskCreateStatic>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4a23      	ldr	r2, [pc, #140]	@ (8006b58 <vTaskStartScheduler+0xc8>)
 8006aca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006acc:	4b22      	ldr	r3, [pc, #136]	@ (8006b58 <vTaskStartScheduler+0xc8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e001      	b.n	8006ade <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d102      	bne.n	8006aea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ae4:	f000 fd1a 	bl	800751c <xTimerCreateTimerTask>
 8006ae8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d11b      	bne.n	8006b28 <vTaskStartScheduler+0x98>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	613b      	str	r3, [r7, #16]
}
 8006b02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b04:	4b15      	ldr	r3, [pc, #84]	@ (8006b5c <vTaskStartScheduler+0xcc>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3354      	adds	r3, #84	@ 0x54
 8006b0a:	4a15      	ldr	r2, [pc, #84]	@ (8006b60 <vTaskStartScheduler+0xd0>)
 8006b0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b0e:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <vTaskStartScheduler+0xd4>)
 8006b10:	f04f 32ff 	mov.w	r2, #4294967295
 8006b14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b16:	4b14      	ldr	r3, [pc, #80]	@ (8006b68 <vTaskStartScheduler+0xd8>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b1c:	4b13      	ldr	r3, [pc, #76]	@ (8006b6c <vTaskStartScheduler+0xdc>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b22:	f001 f8e5 	bl	8007cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b26:	e00f      	b.n	8006b48 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2e:	d10b      	bne.n	8006b48 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	60fb      	str	r3, [r7, #12]
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	e7fd      	b.n	8006b44 <vTaskStartScheduler+0xb4>
}
 8006b48:	bf00      	nop
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	080098b4 	.word	0x080098b4
 8006b54:	080071a1 	.word	0x080071a1
 8006b58:	200010dc 	.word	0x200010dc
 8006b5c:	20000be4 	.word	0x20000be4
 8006b60:	20000020 	.word	0x20000020
 8006b64:	200010d8 	.word	0x200010d8
 8006b68:	200010c4 	.word	0x200010c4
 8006b6c:	200010bc 	.word	0x200010bc

08006b70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b74:	4b04      	ldr	r3, [pc, #16]	@ (8006b88 <vTaskSuspendAll+0x18>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	4a03      	ldr	r2, [pc, #12]	@ (8006b88 <vTaskSuspendAll+0x18>)
 8006b7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b7e:	bf00      	nop
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	200010e0 	.word	0x200010e0

08006b8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b9a:	4b42      	ldr	r3, [pc, #264]	@ (8006ca4 <xTaskResumeAll+0x118>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10b      	bne.n	8006bba <xTaskResumeAll+0x2e>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	603b      	str	r3, [r7, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	e7fd      	b.n	8006bb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bba:	f001 f93d 	bl	8007e38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bbe:	4b39      	ldr	r3, [pc, #228]	@ (8006ca4 <xTaskResumeAll+0x118>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	4a37      	ldr	r2, [pc, #220]	@ (8006ca4 <xTaskResumeAll+0x118>)
 8006bc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bc8:	4b36      	ldr	r3, [pc, #216]	@ (8006ca4 <xTaskResumeAll+0x118>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d162      	bne.n	8006c96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bd0:	4b35      	ldr	r3, [pc, #212]	@ (8006ca8 <xTaskResumeAll+0x11c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d05e      	beq.n	8006c96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bd8:	e02f      	b.n	8006c3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bda:	4b34      	ldr	r3, [pc, #208]	@ (8006cac <xTaskResumeAll+0x120>)
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3318      	adds	r3, #24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe ff7c 	bl	8005ae4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fe ff77 	bl	8005ae4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8006cb0 <xTaskResumeAll+0x124>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d903      	bls.n	8006c0a <xTaskResumeAll+0x7e>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c06:	4a2a      	ldr	r2, [pc, #168]	@ (8006cb0 <xTaskResumeAll+0x124>)
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4a27      	ldr	r2, [pc, #156]	@ (8006cb4 <xTaskResumeAll+0x128>)
 8006c18:	441a      	add	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4610      	mov	r0, r2
 8006c22:	f7fe ff02 	bl	8005a2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c2a:	4b23      	ldr	r3, [pc, #140]	@ (8006cb8 <xTaskResumeAll+0x12c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d302      	bcc.n	8006c3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006c34:	4b21      	ldr	r3, [pc, #132]	@ (8006cbc <xTaskResumeAll+0x130>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8006cac <xTaskResumeAll+0x120>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1cb      	bne.n	8006bda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c48:	f000 fb66 	bl	8007318 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006cc0 <xTaskResumeAll+0x134>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d010      	beq.n	8006c7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c58:	f000 f846 	bl	8006ce8 <xTaskIncrementTick>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006c62:	4b16      	ldr	r3, [pc, #88]	@ (8006cbc <xTaskResumeAll+0x130>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1f1      	bne.n	8006c58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006c74:	4b12      	ldr	r3, [pc, #72]	@ (8006cc0 <xTaskResumeAll+0x134>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c7a:	4b10      	ldr	r3, [pc, #64]	@ (8006cbc <xTaskResumeAll+0x130>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c82:	2301      	movs	r3, #1
 8006c84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c86:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc4 <xTaskResumeAll+0x138>)
 8006c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c96:	f001 f901 	bl	8007e9c <vPortExitCritical>

	return xAlreadyYielded;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	200010e0 	.word	0x200010e0
 8006ca8:	200010b8 	.word	0x200010b8
 8006cac:	20001078 	.word	0x20001078
 8006cb0:	200010c0 	.word	0x200010c0
 8006cb4:	20000be8 	.word	0x20000be8
 8006cb8:	20000be4 	.word	0x20000be4
 8006cbc:	200010cc 	.word	0x200010cc
 8006cc0:	200010c8 	.word	0x200010c8
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cce:	4b05      	ldr	r3, [pc, #20]	@ (8006ce4 <xTaskGetTickCount+0x1c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006cd4:	687b      	ldr	r3, [r7, #4]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	200010bc 	.word	0x200010bc

08006ce8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8006e30 <xTaskIncrementTick+0x148>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f040 8090 	bne.w	8006e1c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8006e34 <xTaskIncrementTick+0x14c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3301      	adds	r3, #1
 8006d02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d04:	4a4b      	ldr	r2, [pc, #300]	@ (8006e34 <xTaskIncrementTick+0x14c>)
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d121      	bne.n	8006d54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d10:	4b49      	ldr	r3, [pc, #292]	@ (8006e38 <xTaskIncrementTick+0x150>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00b      	beq.n	8006d32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	603b      	str	r3, [r7, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	bf00      	nop
 8006d30:	e7fd      	b.n	8006d2e <xTaskIncrementTick+0x46>
 8006d32:	4b41      	ldr	r3, [pc, #260]	@ (8006e38 <xTaskIncrementTick+0x150>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	4b40      	ldr	r3, [pc, #256]	@ (8006e3c <xTaskIncrementTick+0x154>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e38 <xTaskIncrementTick+0x150>)
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	4a3e      	ldr	r2, [pc, #248]	@ (8006e3c <xTaskIncrementTick+0x154>)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	4b3e      	ldr	r3, [pc, #248]	@ (8006e40 <xTaskIncrementTick+0x158>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e40 <xTaskIncrementTick+0x158>)
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	f000 fae2 	bl	8007318 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d54:	4b3b      	ldr	r3, [pc, #236]	@ (8006e44 <xTaskIncrementTick+0x15c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d349      	bcc.n	8006df2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d5e:	4b36      	ldr	r3, [pc, #216]	@ (8006e38 <xTaskIncrementTick+0x150>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d68:	4b36      	ldr	r3, [pc, #216]	@ (8006e44 <xTaskIncrementTick+0x15c>)
 8006d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6e:	601a      	str	r2, [r3, #0]
					break;
 8006d70:	e03f      	b.n	8006df2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d72:	4b31      	ldr	r3, [pc, #196]	@ (8006e38 <xTaskIncrementTick+0x150>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d203      	bcs.n	8006d92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8006e44 <xTaskIncrementTick+0x15c>)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d90:	e02f      	b.n	8006df2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	3304      	adds	r3, #4
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe fea4 	bl	8005ae4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	3318      	adds	r3, #24
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fe fe9b 	bl	8005ae4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db2:	4b25      	ldr	r3, [pc, #148]	@ (8006e48 <xTaskIncrementTick+0x160>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d903      	bls.n	8006dc2 <xTaskIncrementTick+0xda>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbe:	4a22      	ldr	r2, [pc, #136]	@ (8006e48 <xTaskIncrementTick+0x160>)
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4a1f      	ldr	r2, [pc, #124]	@ (8006e4c <xTaskIncrementTick+0x164>)
 8006dd0:	441a      	add	r2, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4610      	mov	r0, r2
 8006dda:	f7fe fe26 	bl	8005a2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e50 <xTaskIncrementTick+0x168>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d3b8      	bcc.n	8006d5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006dec:	2301      	movs	r3, #1
 8006dee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006df0:	e7b5      	b.n	8006d5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006df2:	4b17      	ldr	r3, [pc, #92]	@ (8006e50 <xTaskIncrementTick+0x168>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df8:	4914      	ldr	r1, [pc, #80]	@ (8006e4c <xTaskIncrementTick+0x164>)
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d901      	bls.n	8006e0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e0e:	4b11      	ldr	r3, [pc, #68]	@ (8006e54 <xTaskIncrementTick+0x16c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006e16:	2301      	movs	r3, #1
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	e004      	b.n	8006e26 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e58 <xTaskIncrementTick+0x170>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	4a0d      	ldr	r2, [pc, #52]	@ (8006e58 <xTaskIncrementTick+0x170>)
 8006e24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e26:	697b      	ldr	r3, [r7, #20]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	200010e0 	.word	0x200010e0
 8006e34:	200010bc 	.word	0x200010bc
 8006e38:	20001070 	.word	0x20001070
 8006e3c:	20001074 	.word	0x20001074
 8006e40:	200010d0 	.word	0x200010d0
 8006e44:	200010d8 	.word	0x200010d8
 8006e48:	200010c0 	.word	0x200010c0
 8006e4c:	20000be8 	.word	0x20000be8
 8006e50:	20000be4 	.word	0x20000be4
 8006e54:	200010cc 	.word	0x200010cc
 8006e58:	200010c8 	.word	0x200010c8

08006e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e62:	4b2b      	ldr	r3, [pc, #172]	@ (8006f10 <vTaskSwitchContext+0xb4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8006f14 <vTaskSwitchContext+0xb8>)
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e70:	e047      	b.n	8006f02 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006e72:	4b28      	ldr	r3, [pc, #160]	@ (8006f14 <vTaskSwitchContext+0xb8>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e78:	4b27      	ldr	r3, [pc, #156]	@ (8006f18 <vTaskSwitchContext+0xbc>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	e011      	b.n	8006ea4 <vTaskSwitchContext+0x48>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <vTaskSwitchContext+0x42>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	607b      	str	r3, [r7, #4]
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <vTaskSwitchContext+0x3e>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	491d      	ldr	r1, [pc, #116]	@ (8006f1c <vTaskSwitchContext+0xc0>)
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0e3      	beq.n	8006e80 <vTaskSwitchContext+0x24>
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4a16      	ldr	r2, [pc, #88]	@ (8006f1c <vTaskSwitchContext+0xc0>)
 8006ec4:	4413      	add	r3, r2
 8006ec6:	60bb      	str	r3, [r7, #8]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	605a      	str	r2, [r3, #4]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d104      	bne.n	8006ee8 <vTaskSwitchContext+0x8c>
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	605a      	str	r2, [r3, #4]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	4a0c      	ldr	r2, [pc, #48]	@ (8006f20 <vTaskSwitchContext+0xc4>)
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	4a09      	ldr	r2, [pc, #36]	@ (8006f18 <vTaskSwitchContext+0xbc>)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ef8:	4b09      	ldr	r3, [pc, #36]	@ (8006f20 <vTaskSwitchContext+0xc4>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3354      	adds	r3, #84	@ 0x54
 8006efe:	4a09      	ldr	r2, [pc, #36]	@ (8006f24 <vTaskSwitchContext+0xc8>)
 8006f00:	6013      	str	r3, [r2, #0]
}
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	200010e0 	.word	0x200010e0
 8006f14:	200010cc 	.word	0x200010cc
 8006f18:	200010c0 	.word	0x200010c0
 8006f1c:	20000be8 	.word	0x20000be8
 8006f20:	20000be4 	.word	0x20000be4
 8006f24:	20000020 	.word	0x20000020

08006f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10b      	bne.n	8006f50 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	60fb      	str	r3, [r7, #12]
}
 8006f4a:	bf00      	nop
 8006f4c:	bf00      	nop
 8006f4e:	e7fd      	b.n	8006f4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f50:	4b07      	ldr	r3, [pc, #28]	@ (8006f70 <vTaskPlaceOnEventList+0x48>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3318      	adds	r3, #24
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fe fd8a 	bl	8005a72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f5e:	2101      	movs	r1, #1
 8006f60:	6838      	ldr	r0, [r7, #0]
 8006f62:	f000 fa87 	bl	8007474 <prvAddCurrentTaskToDelayedList>
}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000be4 	.word	0x20000be4

08006f74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10b      	bne.n	8006f9e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	617b      	str	r3, [r7, #20]
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	e7fd      	b.n	8006f9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3318      	adds	r3, #24
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f7fe fd3f 	bl	8005a2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	68b8      	ldr	r0, [r7, #8]
 8006fbc:	f000 fa5a 	bl	8007474 <prvAddCurrentTaskToDelayedList>
	}
 8006fc0:	bf00      	nop
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000be4 	.word	0x20000be4

08006fcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10b      	bne.n	8006ffa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	60fb      	str	r3, [r7, #12]
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	e7fd      	b.n	8006ff6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	3318      	adds	r3, #24
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fd70 	bl	8005ae4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007004:	4b1d      	ldr	r3, [pc, #116]	@ (800707c <xTaskRemoveFromEventList+0xb0>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d11d      	bne.n	8007048 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe fd67 	bl	8005ae4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701a:	4b19      	ldr	r3, [pc, #100]	@ (8007080 <xTaskRemoveFromEventList+0xb4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d903      	bls.n	800702a <xTaskRemoveFromEventList+0x5e>
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007026:	4a16      	ldr	r2, [pc, #88]	@ (8007080 <xTaskRemoveFromEventList+0xb4>)
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4a13      	ldr	r2, [pc, #76]	@ (8007084 <xTaskRemoveFromEventList+0xb8>)
 8007038:	441a      	add	r2, r3
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fe fcf2 	bl	8005a2a <vListInsertEnd>
 8007046:	e005      	b.n	8007054 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	3318      	adds	r3, #24
 800704c:	4619      	mov	r1, r3
 800704e:	480e      	ldr	r0, [pc, #56]	@ (8007088 <xTaskRemoveFromEventList+0xbc>)
 8007050:	f7fe fceb 	bl	8005a2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007058:	4b0c      	ldr	r3, [pc, #48]	@ (800708c <xTaskRemoveFromEventList+0xc0>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	429a      	cmp	r2, r3
 8007060:	d905      	bls.n	800706e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007062:	2301      	movs	r3, #1
 8007064:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007066:	4b0a      	ldr	r3, [pc, #40]	@ (8007090 <xTaskRemoveFromEventList+0xc4>)
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	e001      	b.n	8007072 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007072:	697b      	ldr	r3, [r7, #20]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	200010e0 	.word	0x200010e0
 8007080:	200010c0 	.word	0x200010c0
 8007084:	20000be8 	.word	0x20000be8
 8007088:	20001078 	.word	0x20001078
 800708c:	20000be4 	.word	0x20000be4
 8007090:	200010cc 	.word	0x200010cc

08007094 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800709c:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <vTaskInternalSetTimeOutState+0x24>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070a4:	4b05      	ldr	r3, [pc, #20]	@ (80070bc <vTaskInternalSetTimeOutState+0x28>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	605a      	str	r2, [r3, #4]
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	200010d0 	.word	0x200010d0
 80070bc:	200010bc 	.word	0x200010bc

080070c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	613b      	str	r3, [r7, #16]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10b      	bne.n	8007106 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	60fb      	str	r3, [r7, #12]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007106:	f000 fe97 	bl	8007e38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800710a:	4b1d      	ldr	r3, [pc, #116]	@ (8007180 <xTaskCheckForTimeOut+0xc0>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007122:	d102      	bne.n	800712a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	e023      	b.n	8007172 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b15      	ldr	r3, [pc, #84]	@ (8007184 <xTaskCheckForTimeOut+0xc4>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d007      	beq.n	8007146 <xTaskCheckForTimeOut+0x86>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	429a      	cmp	r2, r3
 800713e:	d302      	bcc.n	8007146 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007140:	2301      	movs	r3, #1
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	e015      	b.n	8007172 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	429a      	cmp	r2, r3
 800714e:	d20b      	bcs.n	8007168 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff99 	bl	8007094 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007162:	2300      	movs	r3, #0
 8007164:	61fb      	str	r3, [r7, #28]
 8007166:	e004      	b.n	8007172 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800716e:	2301      	movs	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007172:	f000 fe93 	bl	8007e9c <vPortExitCritical>

	return xReturn;
 8007176:	69fb      	ldr	r3, [r7, #28]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	200010bc 	.word	0x200010bc
 8007184:	200010d0 	.word	0x200010d0

08007188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800718c:	4b03      	ldr	r3, [pc, #12]	@ (800719c <vTaskMissedYield+0x14>)
 800718e:	2201      	movs	r2, #1
 8007190:	601a      	str	r2, [r3, #0]
}
 8007192:	bf00      	nop
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	200010cc 	.word	0x200010cc

080071a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071a8:	f000 f852 	bl	8007250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071ac:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <prvIdleTask+0x28>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d9f9      	bls.n	80071a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071b4:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <prvIdleTask+0x2c>)
 80071b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071c4:	e7f0      	b.n	80071a8 <prvIdleTask+0x8>
 80071c6:	bf00      	nop
 80071c8:	20000be8 	.word	0x20000be8
 80071cc:	e000ed04 	.word	0xe000ed04

080071d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071d6:	2300      	movs	r3, #0
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	e00c      	b.n	80071f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4a12      	ldr	r2, [pc, #72]	@ (8007230 <prvInitialiseTaskLists+0x60>)
 80071e8:	4413      	add	r3, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fbf0 	bl	80059d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3301      	adds	r3, #1
 80071f4:	607b      	str	r3, [r7, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b37      	cmp	r3, #55	@ 0x37
 80071fa:	d9ef      	bls.n	80071dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071fc:	480d      	ldr	r0, [pc, #52]	@ (8007234 <prvInitialiseTaskLists+0x64>)
 80071fe:	f7fe fbe7 	bl	80059d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007202:	480d      	ldr	r0, [pc, #52]	@ (8007238 <prvInitialiseTaskLists+0x68>)
 8007204:	f7fe fbe4 	bl	80059d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007208:	480c      	ldr	r0, [pc, #48]	@ (800723c <prvInitialiseTaskLists+0x6c>)
 800720a:	f7fe fbe1 	bl	80059d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800720e:	480c      	ldr	r0, [pc, #48]	@ (8007240 <prvInitialiseTaskLists+0x70>)
 8007210:	f7fe fbde 	bl	80059d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007214:	480b      	ldr	r0, [pc, #44]	@ (8007244 <prvInitialiseTaskLists+0x74>)
 8007216:	f7fe fbdb 	bl	80059d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800721a:	4b0b      	ldr	r3, [pc, #44]	@ (8007248 <prvInitialiseTaskLists+0x78>)
 800721c:	4a05      	ldr	r2, [pc, #20]	@ (8007234 <prvInitialiseTaskLists+0x64>)
 800721e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007220:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <prvInitialiseTaskLists+0x7c>)
 8007222:	4a05      	ldr	r2, [pc, #20]	@ (8007238 <prvInitialiseTaskLists+0x68>)
 8007224:	601a      	str	r2, [r3, #0]
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20000be8 	.word	0x20000be8
 8007234:	20001048 	.word	0x20001048
 8007238:	2000105c 	.word	0x2000105c
 800723c:	20001078 	.word	0x20001078
 8007240:	2000108c 	.word	0x2000108c
 8007244:	200010a4 	.word	0x200010a4
 8007248:	20001070 	.word	0x20001070
 800724c:	20001074 	.word	0x20001074

08007250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007256:	e019      	b.n	800728c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007258:	f000 fdee 	bl	8007e38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800725c:	4b10      	ldr	r3, [pc, #64]	@ (80072a0 <prvCheckTasksWaitingTermination+0x50>)
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3304      	adds	r3, #4
 8007268:	4618      	mov	r0, r3
 800726a:	f7fe fc3b 	bl	8005ae4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800726e:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <prvCheckTasksWaitingTermination+0x54>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3b01      	subs	r3, #1
 8007274:	4a0b      	ldr	r2, [pc, #44]	@ (80072a4 <prvCheckTasksWaitingTermination+0x54>)
 8007276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007278:	4b0b      	ldr	r3, [pc, #44]	@ (80072a8 <prvCheckTasksWaitingTermination+0x58>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3b01      	subs	r3, #1
 800727e:	4a0a      	ldr	r2, [pc, #40]	@ (80072a8 <prvCheckTasksWaitingTermination+0x58>)
 8007280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007282:	f000 fe0b 	bl	8007e9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f810 	bl	80072ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800728c:	4b06      	ldr	r3, [pc, #24]	@ (80072a8 <prvCheckTasksWaitingTermination+0x58>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e1      	bne.n	8007258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	2000108c 	.word	0x2000108c
 80072a4:	200010b8 	.word	0x200010b8
 80072a8:	200010a0 	.word	0x200010a0

080072ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3354      	adds	r3, #84	@ 0x54
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 fb11 	bl	80088e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d108      	bne.n	80072da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 ffa3 	bl	8008218 <vPortFree>
				vPortFree( pxTCB );
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 ffa0 	bl	8008218 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072d8:	e019      	b.n	800730e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d103      	bne.n	80072ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 ff97 	bl	8008218 <vPortFree>
	}
 80072ea:	e010      	b.n	800730e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d00b      	beq.n	800730e <prvDeleteTCB+0x62>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	60fb      	str	r3, [r7, #12]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <prvDeleteTCB+0x5e>
	}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800731e:	4b0c      	ldr	r3, [pc, #48]	@ (8007350 <prvResetNextTaskUnblockTime+0x38>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007328:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <prvResetNextTaskUnblockTime+0x3c>)
 800732a:	f04f 32ff 	mov.w	r2, #4294967295
 800732e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007330:	e008      	b.n	8007344 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007332:	4b07      	ldr	r3, [pc, #28]	@ (8007350 <prvResetNextTaskUnblockTime+0x38>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	4a04      	ldr	r2, [pc, #16]	@ (8007354 <prvResetNextTaskUnblockTime+0x3c>)
 8007342:	6013      	str	r3, [r2, #0]
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20001070 	.word	0x20001070
 8007354:	200010d8 	.word	0x200010d8

08007358 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800735e:	4b0b      	ldr	r3, [pc, #44]	@ (800738c <xTaskGetSchedulerState+0x34>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007366:	2301      	movs	r3, #1
 8007368:	607b      	str	r3, [r7, #4]
 800736a:	e008      	b.n	800737e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800736c:	4b08      	ldr	r3, [pc, #32]	@ (8007390 <xTaskGetSchedulerState+0x38>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d102      	bne.n	800737a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007374:	2302      	movs	r3, #2
 8007376:	607b      	str	r3, [r7, #4]
 8007378:	e001      	b.n	800737e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800737a:	2300      	movs	r3, #0
 800737c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800737e:	687b      	ldr	r3, [r7, #4]
	}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	200010c4 	.word	0x200010c4
 8007390:	200010e0 	.word	0x200010e0

08007394 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d058      	beq.n	800745c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007468 <xTaskPriorityDisinherit+0xd4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d00b      	beq.n	80073cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	60fb      	str	r3, [r7, #12]
}
 80073c6:	bf00      	nop
 80073c8:	bf00      	nop
 80073ca:	e7fd      	b.n	80073c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10b      	bne.n	80073ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	60bb      	str	r3, [r7, #8]
}
 80073e6:	bf00      	nop
 80073e8:	bf00      	nop
 80073ea:	e7fd      	b.n	80073e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f0:	1e5a      	subs	r2, r3, #1
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073fe:	429a      	cmp	r2, r3
 8007400:	d02c      	beq.n	800745c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007406:	2b00      	cmp	r3, #0
 8007408:	d128      	bne.n	800745c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3304      	adds	r3, #4
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fb68 	bl	8005ae4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742c:	4b0f      	ldr	r3, [pc, #60]	@ (800746c <xTaskPriorityDisinherit+0xd8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d903      	bls.n	800743c <xTaskPriorityDisinherit+0xa8>
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007438:	4a0c      	ldr	r2, [pc, #48]	@ (800746c <xTaskPriorityDisinherit+0xd8>)
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4a09      	ldr	r2, [pc, #36]	@ (8007470 <xTaskPriorityDisinherit+0xdc>)
 800744a:	441a      	add	r2, r3
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	3304      	adds	r3, #4
 8007450:	4619      	mov	r1, r3
 8007452:	4610      	mov	r0, r2
 8007454:	f7fe fae9 	bl	8005a2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007458:	2301      	movs	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800745c:	697b      	ldr	r3, [r7, #20]
	}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20000be4 	.word	0x20000be4
 800746c:	200010c0 	.word	0x200010c0
 8007470:	20000be8 	.word	0x20000be8

08007474 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800747e:	4b21      	ldr	r3, [pc, #132]	@ (8007504 <prvAddCurrentTaskToDelayedList+0x90>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007484:	4b20      	ldr	r3, [pc, #128]	@ (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3304      	adds	r3, #4
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fb2a 	bl	8005ae4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d10a      	bne.n	80074ae <prvAddCurrentTaskToDelayedList+0x3a>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d007      	beq.n	80074ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800749e:	4b1a      	ldr	r3, [pc, #104]	@ (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3304      	adds	r3, #4
 80074a4:	4619      	mov	r1, r3
 80074a6:	4819      	ldr	r0, [pc, #100]	@ (800750c <prvAddCurrentTaskToDelayedList+0x98>)
 80074a8:	f7fe fabf 	bl	8005a2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074ac:	e026      	b.n	80074fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4413      	add	r3, r2
 80074b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074b6:	4b14      	ldr	r3, [pc, #80]	@ (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d209      	bcs.n	80074da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074c6:	4b12      	ldr	r3, [pc, #72]	@ (8007510 <prvAddCurrentTaskToDelayedList+0x9c>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3304      	adds	r3, #4
 80074d0:	4619      	mov	r1, r3
 80074d2:	4610      	mov	r0, r2
 80074d4:	f7fe facd 	bl	8005a72 <vListInsert>
}
 80074d8:	e010      	b.n	80074fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074da:	4b0e      	ldr	r3, [pc, #56]	@ (8007514 <prvAddCurrentTaskToDelayedList+0xa0>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4b0a      	ldr	r3, [pc, #40]	@ (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3304      	adds	r3, #4
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f7fe fac3 	bl	8005a72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d202      	bcs.n	80074fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80074f6:	4a08      	ldr	r2, [pc, #32]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	6013      	str	r3, [r2, #0]
}
 80074fc:	bf00      	nop
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	200010bc 	.word	0x200010bc
 8007508:	20000be4 	.word	0x20000be4
 800750c:	200010a4 	.word	0x200010a4
 8007510:	20001074 	.word	0x20001074
 8007514:	20001070 	.word	0x20001070
 8007518:	200010d8 	.word	0x200010d8

0800751c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	@ 0x28
 8007520:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007522:	2300      	movs	r3, #0
 8007524:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007526:	f000 fb13 	bl	8007b50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800752a:	4b1d      	ldr	r3, [pc, #116]	@ (80075a0 <xTimerCreateTimerTask+0x84>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d021      	beq.n	8007576 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007536:	2300      	movs	r3, #0
 8007538:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800753a:	1d3a      	adds	r2, r7, #4
 800753c:	f107 0108 	add.w	r1, r7, #8
 8007540:	f107 030c 	add.w	r3, r7, #12
 8007544:	4618      	mov	r0, r3
 8007546:	f7fe fa29 	bl	800599c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	9202      	str	r2, [sp, #8]
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	2302      	movs	r3, #2
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	2300      	movs	r3, #0
 800755a:	460a      	mov	r2, r1
 800755c:	4911      	ldr	r1, [pc, #68]	@ (80075a4 <xTimerCreateTimerTask+0x88>)
 800755e:	4812      	ldr	r0, [pc, #72]	@ (80075a8 <xTimerCreateTimerTask+0x8c>)
 8007560:	f7ff f8a2 	bl	80066a8 <xTaskCreateStatic>
 8007564:	4603      	mov	r3, r0
 8007566:	4a11      	ldr	r2, [pc, #68]	@ (80075ac <xTimerCreateTimerTask+0x90>)
 8007568:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800756a:	4b10      	ldr	r3, [pc, #64]	@ (80075ac <xTimerCreateTimerTask+0x90>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007572:	2301      	movs	r3, #1
 8007574:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10b      	bne.n	8007594 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	613b      	str	r3, [r7, #16]
}
 800758e:	bf00      	nop
 8007590:	bf00      	nop
 8007592:	e7fd      	b.n	8007590 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007594:	697b      	ldr	r3, [r7, #20]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20001114 	.word	0x20001114
 80075a4:	080098bc 	.word	0x080098bc
 80075a8:	080076e9 	.word	0x080076e9
 80075ac:	20001118 	.word	0x20001118

080075b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08a      	sub	sp, #40	@ 0x28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80075be:	2300      	movs	r3, #0
 80075c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	623b      	str	r3, [r7, #32]
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80075e0:	4b19      	ldr	r3, [pc, #100]	@ (8007648 <xTimerGenericCommand+0x98>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d02a      	beq.n	800763e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b05      	cmp	r3, #5
 80075f8:	dc18      	bgt.n	800762c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80075fa:	f7ff fead 	bl	8007358 <xTaskGetSchedulerState>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b02      	cmp	r3, #2
 8007602:	d109      	bne.n	8007618 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007604:	4b10      	ldr	r3, [pc, #64]	@ (8007648 <xTimerGenericCommand+0x98>)
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	f107 0110 	add.w	r1, r7, #16
 800760c:	2300      	movs	r3, #0
 800760e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007610:	f7fe fbd8 	bl	8005dc4 <xQueueGenericSend>
 8007614:	6278      	str	r0, [r7, #36]	@ 0x24
 8007616:	e012      	b.n	800763e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007618:	4b0b      	ldr	r3, [pc, #44]	@ (8007648 <xTimerGenericCommand+0x98>)
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	f107 0110 	add.w	r1, r7, #16
 8007620:	2300      	movs	r3, #0
 8007622:	2200      	movs	r2, #0
 8007624:	f7fe fbce 	bl	8005dc4 <xQueueGenericSend>
 8007628:	6278      	str	r0, [r7, #36]	@ 0x24
 800762a:	e008      	b.n	800763e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800762c:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <xTimerGenericCommand+0x98>)
 800762e:	6818      	ldr	r0, [r3, #0]
 8007630:	f107 0110 	add.w	r1, r7, #16
 8007634:	2300      	movs	r3, #0
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	f7fe fcc6 	bl	8005fc8 <xQueueGenericSendFromISR>
 800763c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007640:	4618      	mov	r0, r3
 8007642:	3728      	adds	r7, #40	@ 0x28
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20001114 	.word	0x20001114

0800764c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af02      	add	r7, sp, #8
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007656:	4b23      	ldr	r3, [pc, #140]	@ (80076e4 <prvProcessExpiredTimer+0x98>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	3304      	adds	r3, #4
 8007664:	4618      	mov	r0, r3
 8007666:	f7fe fa3d 	bl	8005ae4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b00      	cmp	r3, #0
 8007676:	d023      	beq.n	80076c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	18d1      	adds	r1, r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	6978      	ldr	r0, [r7, #20]
 8007686:	f000 f8d5 	bl	8007834 <prvInsertTimerInActiveList>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d020      	beq.n	80076d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007690:	2300      	movs	r3, #0
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	2100      	movs	r1, #0
 800769a:	6978      	ldr	r0, [r7, #20]
 800769c:	f7ff ff88 	bl	80075b0 <xTimerGenericCommand>
 80076a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d114      	bne.n	80076d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	60fb      	str	r3, [r7, #12]
}
 80076ba:	bf00      	nop
 80076bc:	bf00      	nop
 80076be:	e7fd      	b.n	80076bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076c6:	f023 0301 	bic.w	r3, r3, #1
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	6978      	ldr	r0, [r7, #20]
 80076d8:	4798      	blx	r3
}
 80076da:	bf00      	nop
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	2000110c 	.word	0x2000110c

080076e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076f0:	f107 0308 	add.w	r3, r7, #8
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 f859 	bl	80077ac <prvGetNextExpireTime>
 80076fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	4619      	mov	r1, r3
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f805 	bl	8007710 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007706:	f000 f8d7 	bl	80078b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800770a:	bf00      	nop
 800770c:	e7f0      	b.n	80076f0 <prvTimerTask+0x8>
	...

08007710 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800771a:	f7ff fa29 	bl	8006b70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800771e:	f107 0308 	add.w	r3, r7, #8
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f866 	bl	80077f4 <prvSampleTimeNow>
 8007728:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d130      	bne.n	8007792 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <prvProcessTimerOrBlockTask+0x3c>
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	429a      	cmp	r2, r3
 800773c:	d806      	bhi.n	800774c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800773e:	f7ff fa25 	bl	8006b8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7ff ff81 	bl	800764c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800774a:	e024      	b.n	8007796 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d008      	beq.n	8007764 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007752:	4b13      	ldr	r3, [pc, #76]	@ (80077a0 <prvProcessTimerOrBlockTask+0x90>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <prvProcessTimerOrBlockTask+0x50>
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <prvProcessTimerOrBlockTask+0x52>
 8007760:	2300      	movs	r3, #0
 8007762:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007764:	4b0f      	ldr	r3, [pc, #60]	@ (80077a4 <prvProcessTimerOrBlockTask+0x94>)
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	4619      	mov	r1, r3
 8007772:	f7fe ff65 	bl	8006640 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007776:	f7ff fa09 	bl	8006b8c <xTaskResumeAll>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10a      	bne.n	8007796 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007780:	4b09      	ldr	r3, [pc, #36]	@ (80077a8 <prvProcessTimerOrBlockTask+0x98>)
 8007782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	f3bf 8f6f 	isb	sy
}
 8007790:	e001      	b.n	8007796 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007792:	f7ff f9fb 	bl	8006b8c <xTaskResumeAll>
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20001110 	.word	0x20001110
 80077a4:	20001114 	.word	0x20001114
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80077b4:	4b0e      	ldr	r3, [pc, #56]	@ (80077f0 <prvGetNextExpireTime+0x44>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <prvGetNextExpireTime+0x16>
 80077be:	2201      	movs	r2, #1
 80077c0:	e000      	b.n	80077c4 <prvGetNextExpireTime+0x18>
 80077c2:	2200      	movs	r2, #0
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d105      	bne.n	80077dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077d0:	4b07      	ldr	r3, [pc, #28]	@ (80077f0 <prvGetNextExpireTime+0x44>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	e001      	b.n	80077e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80077e0:	68fb      	ldr	r3, [r7, #12]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	2000110c 	.word	0x2000110c

080077f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80077fc:	f7ff fa64 	bl	8006cc8 <xTaskGetTickCount>
 8007800:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007802:	4b0b      	ldr	r3, [pc, #44]	@ (8007830 <prvSampleTimeNow+0x3c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	429a      	cmp	r2, r3
 800780a:	d205      	bcs.n	8007818 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800780c:	f000 f93a 	bl	8007a84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	e002      	b.n	800781e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800781e:	4a04      	ldr	r2, [pc, #16]	@ (8007830 <prvSampleTimeNow+0x3c>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007824:	68fb      	ldr	r3, [r7, #12]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	2000111c 	.word	0x2000111c

08007834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	429a      	cmp	r2, r3
 8007858:	d812      	bhi.n	8007880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	1ad2      	subs	r2, r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	429a      	cmp	r2, r3
 8007866:	d302      	bcc.n	800786e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e01b      	b.n	80078a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800786e:	4b10      	ldr	r3, [pc, #64]	@ (80078b0 <prvInsertTimerInActiveList+0x7c>)
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3304      	adds	r3, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f7fe f8fa 	bl	8005a72 <vListInsert>
 800787e:	e012      	b.n	80078a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d206      	bcs.n	8007896 <prvInsertTimerInActiveList+0x62>
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	429a      	cmp	r2, r3
 800788e:	d302      	bcc.n	8007896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007890:	2301      	movs	r3, #1
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	e007      	b.n	80078a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007896:	4b07      	ldr	r3, [pc, #28]	@ (80078b4 <prvInsertTimerInActiveList+0x80>)
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3304      	adds	r3, #4
 800789e:	4619      	mov	r1, r3
 80078a0:	4610      	mov	r0, r2
 80078a2:	f7fe f8e6 	bl	8005a72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80078a6:	697b      	ldr	r3, [r7, #20]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	20001110 	.word	0x20001110
 80078b4:	2000110c 	.word	0x2000110c

080078b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08e      	sub	sp, #56	@ 0x38
 80078bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078be:	e0ce      	b.n	8007a5e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	da19      	bge.n	80078fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80078c6:	1d3b      	adds	r3, r7, #4
 80078c8:	3304      	adds	r3, #4
 80078ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80078cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10b      	bne.n	80078ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	61fb      	str	r3, [r7, #28]
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	e7fd      	b.n	80078e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80078ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078f0:	6850      	ldr	r0, [r2, #4]
 80078f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078f4:	6892      	ldr	r2, [r2, #8]
 80078f6:	4611      	mov	r1, r2
 80078f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f2c0 80ae 	blt.w	8007a5e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d004      	beq.n	8007918 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800790e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007910:	3304      	adds	r3, #4
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe f8e6 	bl	8005ae4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007918:	463b      	mov	r3, r7
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff ff6a 	bl	80077f4 <prvSampleTimeNow>
 8007920:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b09      	cmp	r3, #9
 8007926:	f200 8097 	bhi.w	8007a58 <prvProcessReceivedCommands+0x1a0>
 800792a:	a201      	add	r2, pc, #4	@ (adr r2, 8007930 <prvProcessReceivedCommands+0x78>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007959 	.word	0x08007959
 8007934:	08007959 	.word	0x08007959
 8007938:	08007959 	.word	0x08007959
 800793c:	080079cf 	.word	0x080079cf
 8007940:	080079e3 	.word	0x080079e3
 8007944:	08007a2f 	.word	0x08007a2f
 8007948:	08007959 	.word	0x08007959
 800794c:	08007959 	.word	0x08007959
 8007950:	080079cf 	.word	0x080079cf
 8007954:	080079e3 	.word	0x080079e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800795e:	f043 0301 	orr.w	r3, r3, #1
 8007962:	b2da      	uxtb	r2, r3
 8007964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	18d1      	adds	r1, r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007978:	f7ff ff5c 	bl	8007834 <prvInsertTimerInActiveList>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d06c      	beq.n	8007a5c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007988:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800798a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d061      	beq.n	8007a5c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	441a      	add	r2, r3
 80079a0:	2300      	movs	r3, #0
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	2300      	movs	r3, #0
 80079a6:	2100      	movs	r1, #0
 80079a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079aa:	f7ff fe01 	bl	80075b0 <xTimerGenericCommand>
 80079ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d152      	bne.n	8007a5c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	61bb      	str	r3, [r7, #24]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079d4:	f023 0301 	bic.w	r3, r3, #1
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80079e0:	e03d      	b.n	8007a5e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079e8:	f043 0301 	orr.w	r3, r3, #1
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80079fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10b      	bne.n	8007a1a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	617b      	str	r3, [r7, #20]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1c:	699a      	ldr	r2, [r3, #24]
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	18d1      	adds	r1, r2, r3
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a28:	f7ff ff04 	bl	8007834 <prvInsertTimerInActiveList>
					break;
 8007a2c:	e017      	b.n	8007a5e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d103      	bne.n	8007a44 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007a3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a3e:	f000 fbeb 	bl	8008218 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a42:	e00c      	b.n	8007a5e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a4a:	f023 0301 	bic.w	r3, r3, #1
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007a56:	e002      	b.n	8007a5e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007a58:	bf00      	nop
 8007a5a:	e000      	b.n	8007a5e <prvProcessReceivedCommands+0x1a6>
					break;
 8007a5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a5e:	4b08      	ldr	r3, [pc, #32]	@ (8007a80 <prvProcessReceivedCommands+0x1c8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	1d39      	adds	r1, r7, #4
 8007a64:	2200      	movs	r2, #0
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fb4c 	bl	8006104 <xQueueReceive>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f47f af26 	bne.w	80078c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	3730      	adds	r7, #48	@ 0x30
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20001114 	.word	0x20001114

08007a84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a8a:	e049      	b.n	8007b20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8007b48 <prvSwitchTimerLists+0xc4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a96:	4b2c      	ldr	r3, [pc, #176]	@ (8007b48 <prvSwitchTimerLists+0xc4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fe f81d 	bl	8005ae4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d02f      	beq.n	8007b20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d90e      	bls.n	8007af0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ade:	4b1a      	ldr	r3, [pc, #104]	@ (8007b48 <prvSwitchTimerLists+0xc4>)
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f7fd ffc2 	bl	8005a72 <vListInsert>
 8007aee:	e017      	b.n	8007b20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007af0:	2300      	movs	r3, #0
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	2100      	movs	r1, #0
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7ff fd58 	bl	80075b0 <xTimerGenericCommand>
 8007b00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10b      	bne.n	8007b20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	603b      	str	r3, [r7, #0]
}
 8007b1a:	bf00      	nop
 8007b1c:	bf00      	nop
 8007b1e:	e7fd      	b.n	8007b1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b20:	4b09      	ldr	r3, [pc, #36]	@ (8007b48 <prvSwitchTimerLists+0xc4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1b0      	bne.n	8007a8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b2a:	4b07      	ldr	r3, [pc, #28]	@ (8007b48 <prvSwitchTimerLists+0xc4>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b30:	4b06      	ldr	r3, [pc, #24]	@ (8007b4c <prvSwitchTimerLists+0xc8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a04      	ldr	r2, [pc, #16]	@ (8007b48 <prvSwitchTimerLists+0xc4>)
 8007b36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b38:	4a04      	ldr	r2, [pc, #16]	@ (8007b4c <prvSwitchTimerLists+0xc8>)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	6013      	str	r3, [r2, #0]
}
 8007b3e:	bf00      	nop
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	2000110c 	.word	0x2000110c
 8007b4c:	20001110 	.word	0x20001110

08007b50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007b56:	f000 f96f 	bl	8007e38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b5a:	4b15      	ldr	r3, [pc, #84]	@ (8007bb0 <prvCheckForValidListAndQueue+0x60>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d120      	bne.n	8007ba4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b62:	4814      	ldr	r0, [pc, #80]	@ (8007bb4 <prvCheckForValidListAndQueue+0x64>)
 8007b64:	f7fd ff34 	bl	80059d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b68:	4813      	ldr	r0, [pc, #76]	@ (8007bb8 <prvCheckForValidListAndQueue+0x68>)
 8007b6a:	f7fd ff31 	bl	80059d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b6e:	4b13      	ldr	r3, [pc, #76]	@ (8007bbc <prvCheckForValidListAndQueue+0x6c>)
 8007b70:	4a10      	ldr	r2, [pc, #64]	@ (8007bb4 <prvCheckForValidListAndQueue+0x64>)
 8007b72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b74:	4b12      	ldr	r3, [pc, #72]	@ (8007bc0 <prvCheckForValidListAndQueue+0x70>)
 8007b76:	4a10      	ldr	r2, [pc, #64]	@ (8007bb8 <prvCheckForValidListAndQueue+0x68>)
 8007b78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	4b11      	ldr	r3, [pc, #68]	@ (8007bc4 <prvCheckForValidListAndQueue+0x74>)
 8007b80:	4a11      	ldr	r2, [pc, #68]	@ (8007bc8 <prvCheckForValidListAndQueue+0x78>)
 8007b82:	2110      	movs	r1, #16
 8007b84:	200a      	movs	r0, #10
 8007b86:	f7fe f841 	bl	8005c0c <xQueueGenericCreateStatic>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4a08      	ldr	r2, [pc, #32]	@ (8007bb0 <prvCheckForValidListAndQueue+0x60>)
 8007b8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b90:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <prvCheckForValidListAndQueue+0x60>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b98:	4b05      	ldr	r3, [pc, #20]	@ (8007bb0 <prvCheckForValidListAndQueue+0x60>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	490b      	ldr	r1, [pc, #44]	@ (8007bcc <prvCheckForValidListAndQueue+0x7c>)
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fd24 	bl	80065ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ba4:	f000 f97a 	bl	8007e9c <vPortExitCritical>
}
 8007ba8:	bf00      	nop
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20001114 	.word	0x20001114
 8007bb4:	200010e4 	.word	0x200010e4
 8007bb8:	200010f8 	.word	0x200010f8
 8007bbc:	2000110c 	.word	0x2000110c
 8007bc0:	20001110 	.word	0x20001110
 8007bc4:	200011c0 	.word	0x200011c0
 8007bc8:	20001120 	.word	0x20001120
 8007bcc:	080098c4 	.word	0x080098c4

08007bd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3b04      	subs	r3, #4
 8007be0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3b04      	subs	r3, #4
 8007bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f023 0201 	bic.w	r2, r3, #1
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3b04      	subs	r3, #4
 8007bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c00:	4a0c      	ldr	r2, [pc, #48]	@ (8007c34 <pxPortInitialiseStack+0x64>)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3b14      	subs	r3, #20
 8007c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3b04      	subs	r3, #4
 8007c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f06f 0202 	mvn.w	r2, #2
 8007c1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3b20      	subs	r3, #32
 8007c24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c26:	68fb      	ldr	r3, [r7, #12]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	08007c39 	.word	0x08007c39

08007c38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c42:	4b13      	ldr	r3, [pc, #76]	@ (8007c90 <prvTaskExitError+0x58>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d00b      	beq.n	8007c64 <prvTaskExitError+0x2c>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	60fb      	str	r3, [r7, #12]
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	e7fd      	b.n	8007c60 <prvTaskExitError+0x28>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	60bb      	str	r3, [r7, #8]
}
 8007c76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c78:	bf00      	nop
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0fc      	beq.n	8007c7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20000010 	.word	0x20000010
	...

08007ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ca0:	4b07      	ldr	r3, [pc, #28]	@ (8007cc0 <pxCurrentTCBConst2>)
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	6808      	ldr	r0, [r1, #0]
 8007ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007caa:	f380 8809 	msr	PSP, r0
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f04f 0000 	mov.w	r0, #0
 8007cb6:	f380 8811 	msr	BASEPRI, r0
 8007cba:	4770      	bx	lr
 8007cbc:	f3af 8000 	nop.w

08007cc0 <pxCurrentTCBConst2>:
 8007cc0:	20000be4 	.word	0x20000be4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop

08007cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007cc8:	4808      	ldr	r0, [pc, #32]	@ (8007cec <prvPortStartFirstTask+0x24>)
 8007cca:	6800      	ldr	r0, [r0, #0]
 8007ccc:	6800      	ldr	r0, [r0, #0]
 8007cce:	f380 8808 	msr	MSP, r0
 8007cd2:	f04f 0000 	mov.w	r0, #0
 8007cd6:	f380 8814 	msr	CONTROL, r0
 8007cda:	b662      	cpsie	i
 8007cdc:	b661      	cpsie	f
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	df00      	svc	0
 8007ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cea:	bf00      	nop
 8007cec:	e000ed08 	.word	0xe000ed08

08007cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cf6:	4b47      	ldr	r3, [pc, #284]	@ (8007e14 <xPortStartScheduler+0x124>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a47      	ldr	r2, [pc, #284]	@ (8007e18 <xPortStartScheduler+0x128>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d10b      	bne.n	8007d18 <xPortStartScheduler+0x28>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	60fb      	str	r3, [r7, #12]
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	e7fd      	b.n	8007d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d18:	4b3e      	ldr	r3, [pc, #248]	@ (8007e14 <xPortStartScheduler+0x124>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a3f      	ldr	r2, [pc, #252]	@ (8007e1c <xPortStartScheduler+0x12c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d10b      	bne.n	8007d3a <xPortStartScheduler+0x4a>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	613b      	str	r3, [r7, #16]
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d3a:	4b39      	ldr	r3, [pc, #228]	@ (8007e20 <xPortStartScheduler+0x130>)
 8007d3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	22ff      	movs	r2, #255	@ 0xff
 8007d4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	4b31      	ldr	r3, [pc, #196]	@ (8007e24 <xPortStartScheduler+0x134>)
 8007d60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d62:	4b31      	ldr	r3, [pc, #196]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007d64:	2207      	movs	r2, #7
 8007d66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d68:	e009      	b.n	8007d7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	4a2d      	ldr	r2, [pc, #180]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007d72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d86:	2b80      	cmp	r3, #128	@ 0x80
 8007d88:	d0ef      	beq.n	8007d6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d8a:	4b27      	ldr	r3, [pc, #156]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f1c3 0307 	rsb	r3, r3, #7
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d00b      	beq.n	8007dae <xPortStartScheduler+0xbe>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	60bb      	str	r3, [r7, #8]
}
 8007da8:	bf00      	nop
 8007daa:	bf00      	nop
 8007dac:	e7fd      	b.n	8007daa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007dae:	4b1e      	ldr	r3, [pc, #120]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007db6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007db8:	4b1b      	ldr	r3, [pc, #108]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007dc0:	4a19      	ldr	r2, [pc, #100]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007dc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007dcc:	4b17      	ldr	r3, [pc, #92]	@ (8007e2c <xPortStartScheduler+0x13c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a16      	ldr	r2, [pc, #88]	@ (8007e2c <xPortStartScheduler+0x13c>)
 8007dd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007dd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007dd8:	4b14      	ldr	r3, [pc, #80]	@ (8007e2c <xPortStartScheduler+0x13c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a13      	ldr	r2, [pc, #76]	@ (8007e2c <xPortStartScheduler+0x13c>)
 8007dde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007de2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007de4:	f000 f8da 	bl	8007f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007de8:	4b11      	ldr	r3, [pc, #68]	@ (8007e30 <xPortStartScheduler+0x140>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007dee:	f000 f8f9 	bl	8007fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007df2:	4b10      	ldr	r3, [pc, #64]	@ (8007e34 <xPortStartScheduler+0x144>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a0f      	ldr	r2, [pc, #60]	@ (8007e34 <xPortStartScheduler+0x144>)
 8007df8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007dfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007dfe:	f7ff ff63 	bl	8007cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e02:	f7ff f82b 	bl	8006e5c <vTaskSwitchContext>
	prvTaskExitError();
 8007e06:	f7ff ff17 	bl	8007c38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	e000ed00 	.word	0xe000ed00
 8007e18:	410fc271 	.word	0x410fc271
 8007e1c:	410fc270 	.word	0x410fc270
 8007e20:	e000e400 	.word	0xe000e400
 8007e24:	20001210 	.word	0x20001210
 8007e28:	20001214 	.word	0x20001214
 8007e2c:	e000ed20 	.word	0xe000ed20
 8007e30:	20000010 	.word	0x20000010
 8007e34:	e000ef34 	.word	0xe000ef34

08007e38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	607b      	str	r3, [r7, #4]
}
 8007e50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e52:	4b10      	ldr	r3, [pc, #64]	@ (8007e94 <vPortEnterCritical+0x5c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3301      	adds	r3, #1
 8007e58:	4a0e      	ldr	r2, [pc, #56]	@ (8007e94 <vPortEnterCritical+0x5c>)
 8007e5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e94 <vPortEnterCritical+0x5c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d110      	bne.n	8007e86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e64:	4b0c      	ldr	r3, [pc, #48]	@ (8007e98 <vPortEnterCritical+0x60>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00b      	beq.n	8007e86 <vPortEnterCritical+0x4e>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	603b      	str	r3, [r7, #0]
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <vPortEnterCritical+0x4a>
	}
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20000010 	.word	0x20000010
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ea2:	4b12      	ldr	r3, [pc, #72]	@ (8007eec <vPortExitCritical+0x50>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10b      	bne.n	8007ec2 <vPortExitCritical+0x26>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	607b      	str	r3, [r7, #4]
}
 8007ebc:	bf00      	nop
 8007ebe:	bf00      	nop
 8007ec0:	e7fd      	b.n	8007ebe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8007eec <vPortExitCritical+0x50>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	4a08      	ldr	r2, [pc, #32]	@ (8007eec <vPortExitCritical+0x50>)
 8007eca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ecc:	4b07      	ldr	r3, [pc, #28]	@ (8007eec <vPortExitCritical+0x50>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d105      	bne.n	8007ee0 <vPortExitCritical+0x44>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	f383 8811 	msr	BASEPRI, r3
}
 8007ede:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	20000010 	.word	0x20000010

08007ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ef0:	f3ef 8009 	mrs	r0, PSP
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	4b15      	ldr	r3, [pc, #84]	@ (8007f50 <pxCurrentTCBConst>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	f01e 0f10 	tst.w	lr, #16
 8007f00:	bf08      	it	eq
 8007f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0a:	6010      	str	r0, [r2, #0]
 8007f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007f14:	f380 8811 	msr	BASEPRI, r0
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f7fe ff9c 	bl	8006e5c <vTaskSwitchContext>
 8007f24:	f04f 0000 	mov.w	r0, #0
 8007f28:	f380 8811 	msr	BASEPRI, r0
 8007f2c:	bc09      	pop	{r0, r3}
 8007f2e:	6819      	ldr	r1, [r3, #0]
 8007f30:	6808      	ldr	r0, [r1, #0]
 8007f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f36:	f01e 0f10 	tst.w	lr, #16
 8007f3a:	bf08      	it	eq
 8007f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f40:	f380 8809 	msr	PSP, r0
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	f3af 8000 	nop.w

08007f50 <pxCurrentTCBConst>:
 8007f50:	20000be4 	.word	0x20000be4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	607b      	str	r3, [r7, #4]
}
 8007f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f72:	f7fe feb9 	bl	8006ce8 <xTaskIncrementTick>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f7c:	4b06      	ldr	r3, [pc, #24]	@ (8007f98 <xPortSysTickHandler+0x40>)
 8007f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	2300      	movs	r3, #0
 8007f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f383 8811 	msr	BASEPRI, r3
}
 8007f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	e000ed04 	.word	0xe000ed04

08007f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd0 <vPortSetupTimerInterrupt+0x34>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd4 <vPortSetupTimerInterrupt+0x38>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007fac:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd8 <vPortSetupTimerInterrupt+0x3c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8007fdc <vPortSetupTimerInterrupt+0x40>)
 8007fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb6:	099b      	lsrs	r3, r3, #6
 8007fb8:	4a09      	ldr	r2, [pc, #36]	@ (8007fe0 <vPortSetupTimerInterrupt+0x44>)
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007fbe:	4b04      	ldr	r3, [pc, #16]	@ (8007fd0 <vPortSetupTimerInterrupt+0x34>)
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	601a      	str	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	e000e010 	.word	0xe000e010
 8007fd4:	e000e018 	.word	0xe000e018
 8007fd8:	20000004 	.word	0x20000004
 8007fdc:	10624dd3 	.word	0x10624dd3
 8007fe0:	e000e014 	.word	0xe000e014

08007fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ff4 <vPortEnableVFP+0x10>
 8007fe8:	6801      	ldr	r1, [r0, #0]
 8007fea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007fee:	6001      	str	r1, [r0, #0]
 8007ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ff2:	bf00      	nop
 8007ff4:	e000ed88 	.word	0xe000ed88

08007ff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ffe:	f3ef 8305 	mrs	r3, IPSR
 8008002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b0f      	cmp	r3, #15
 8008008:	d915      	bls.n	8008036 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800800a:	4a18      	ldr	r2, [pc, #96]	@ (800806c <vPortValidateInterruptPriority+0x74>)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008014:	4b16      	ldr	r3, [pc, #88]	@ (8008070 <vPortValidateInterruptPriority+0x78>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	7afa      	ldrb	r2, [r7, #11]
 800801a:	429a      	cmp	r2, r3
 800801c:	d20b      	bcs.n	8008036 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	607b      	str	r3, [r7, #4]
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	e7fd      	b.n	8008032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008036:	4b0f      	ldr	r3, [pc, #60]	@ (8008074 <vPortValidateInterruptPriority+0x7c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800803e:	4b0e      	ldr	r3, [pc, #56]	@ (8008078 <vPortValidateInterruptPriority+0x80>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d90b      	bls.n	800805e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	603b      	str	r3, [r7, #0]
}
 8008058:	bf00      	nop
 800805a:	bf00      	nop
 800805c:	e7fd      	b.n	800805a <vPortValidateInterruptPriority+0x62>
	}
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	e000e3f0 	.word	0xe000e3f0
 8008070:	20001210 	.word	0x20001210
 8008074:	e000ed0c 	.word	0xe000ed0c
 8008078:	20001214 	.word	0x20001214

0800807c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	@ 0x28
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008084:	2300      	movs	r3, #0
 8008086:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008088:	f7fe fd72 	bl	8006b70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800808c:	4b5c      	ldr	r3, [pc, #368]	@ (8008200 <pvPortMalloc+0x184>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008094:	f000 f924 	bl	80082e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008098:	4b5a      	ldr	r3, [pc, #360]	@ (8008204 <pvPortMalloc+0x188>)
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4013      	ands	r3, r2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f040 8095 	bne.w	80081d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01e      	beq.n	80080ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80080ac:	2208      	movs	r2, #8
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f003 0307 	and.w	r3, r3, #7
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d015      	beq.n	80080ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f023 0307 	bic.w	r3, r3, #7
 80080c4:	3308      	adds	r3, #8
 80080c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00b      	beq.n	80080ea <pvPortMalloc+0x6e>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	617b      	str	r3, [r7, #20]
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	e7fd      	b.n	80080e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d06f      	beq.n	80081d0 <pvPortMalloc+0x154>
 80080f0:	4b45      	ldr	r3, [pc, #276]	@ (8008208 <pvPortMalloc+0x18c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d86a      	bhi.n	80081d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080fa:	4b44      	ldr	r3, [pc, #272]	@ (800820c <pvPortMalloc+0x190>)
 80080fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080fe:	4b43      	ldr	r3, [pc, #268]	@ (800820c <pvPortMalloc+0x190>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008104:	e004      	b.n	8008110 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008108:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	429a      	cmp	r2, r3
 8008118:	d903      	bls.n	8008122 <pvPortMalloc+0xa6>
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f1      	bne.n	8008106 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008122:	4b37      	ldr	r3, [pc, #220]	@ (8008200 <pvPortMalloc+0x184>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008128:	429a      	cmp	r2, r3
 800812a:	d051      	beq.n	80081d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2208      	movs	r2, #8
 8008132:	4413      	add	r3, r2
 8008134:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800813e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	1ad2      	subs	r2, r2, r3
 8008146:	2308      	movs	r3, #8
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	429a      	cmp	r2, r3
 800814c:	d920      	bls.n	8008190 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800814e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4413      	add	r3, r2
 8008154:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <pvPortMalloc+0xfc>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	613b      	str	r3, [r7, #16]
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	e7fd      	b.n	8008174 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800818a:	69b8      	ldr	r0, [r7, #24]
 800818c:	f000 f90a 	bl	80083a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008190:	4b1d      	ldr	r3, [pc, #116]	@ (8008208 <pvPortMalloc+0x18c>)
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	4a1b      	ldr	r2, [pc, #108]	@ (8008208 <pvPortMalloc+0x18c>)
 800819c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800819e:	4b1a      	ldr	r3, [pc, #104]	@ (8008208 <pvPortMalloc+0x18c>)
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008210 <pvPortMalloc+0x194>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d203      	bcs.n	80081b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081aa:	4b17      	ldr	r3, [pc, #92]	@ (8008208 <pvPortMalloc+0x18c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a18      	ldr	r2, [pc, #96]	@ (8008210 <pvPortMalloc+0x194>)
 80081b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	4b13      	ldr	r3, [pc, #76]	@ (8008204 <pvPortMalloc+0x188>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	431a      	orrs	r2, r3
 80081bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80081c6:	4b13      	ldr	r3, [pc, #76]	@ (8008214 <pvPortMalloc+0x198>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3301      	adds	r3, #1
 80081cc:	4a11      	ldr	r2, [pc, #68]	@ (8008214 <pvPortMalloc+0x198>)
 80081ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80081d0:	f7fe fcdc 	bl	8006b8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <pvPortMalloc+0x17a>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	60fb      	str	r3, [r7, #12]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <pvPortMalloc+0x176>
	return pvReturn;
 80081f6:	69fb      	ldr	r3, [r7, #28]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3728      	adds	r7, #40	@ 0x28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20006040 	.word	0x20006040
 8008204:	20006054 	.word	0x20006054
 8008208:	20006044 	.word	0x20006044
 800820c:	20006038 	.word	0x20006038
 8008210:	20006048 	.word	0x20006048
 8008214:	2000604c 	.word	0x2000604c

08008218 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d04f      	beq.n	80082ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800822a:	2308      	movs	r3, #8
 800822c:	425b      	negs	r3, r3
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	4413      	add	r3, r2
 8008232:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	4b25      	ldr	r3, [pc, #148]	@ (80082d4 <vPortFree+0xbc>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4013      	ands	r3, r2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <vPortFree+0x46>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	60fb      	str	r3, [r7, #12]
}
 8008258:	bf00      	nop
 800825a:	bf00      	nop
 800825c:	e7fd      	b.n	800825a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <vPortFree+0x66>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	60bb      	str	r3, [r7, #8]
}
 8008278:	bf00      	nop
 800827a:	bf00      	nop
 800827c:	e7fd      	b.n	800827a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	4b14      	ldr	r3, [pc, #80]	@ (80082d4 <vPortFree+0xbc>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4013      	ands	r3, r2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01e      	beq.n	80082ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d11a      	bne.n	80082ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	4b0e      	ldr	r3, [pc, #56]	@ (80082d4 <vPortFree+0xbc>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	43db      	mvns	r3, r3
 800829e:	401a      	ands	r2, r3
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082a4:	f7fe fc64 	bl	8006b70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	4b0a      	ldr	r3, [pc, #40]	@ (80082d8 <vPortFree+0xc0>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4413      	add	r3, r2
 80082b2:	4a09      	ldr	r2, [pc, #36]	@ (80082d8 <vPortFree+0xc0>)
 80082b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082b6:	6938      	ldr	r0, [r7, #16]
 80082b8:	f000 f874 	bl	80083a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80082bc:	4b07      	ldr	r3, [pc, #28]	@ (80082dc <vPortFree+0xc4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3301      	adds	r3, #1
 80082c2:	4a06      	ldr	r2, [pc, #24]	@ (80082dc <vPortFree+0xc4>)
 80082c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80082c6:	f7fe fc61 	bl	8006b8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082ca:	bf00      	nop
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20006054 	.word	0x20006054
 80082d8:	20006044 	.word	0x20006044
 80082dc:	20006050 	.word	0x20006050

080082e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082e6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80082ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082ec:	4b27      	ldr	r3, [pc, #156]	@ (800838c <prvHeapInit+0xac>)
 80082ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f003 0307 	and.w	r3, r3, #7
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00c      	beq.n	8008314 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3307      	adds	r3, #7
 80082fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0307 	bic.w	r3, r3, #7
 8008306:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	4a1f      	ldr	r2, [pc, #124]	@ (800838c <prvHeapInit+0xac>)
 8008310:	4413      	add	r3, r2
 8008312:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008318:	4a1d      	ldr	r2, [pc, #116]	@ (8008390 <prvHeapInit+0xb0>)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800831e:	4b1c      	ldr	r3, [pc, #112]	@ (8008390 <prvHeapInit+0xb0>)
 8008320:	2200      	movs	r2, #0
 8008322:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	4413      	add	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800832c:	2208      	movs	r2, #8
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0307 	bic.w	r3, r3, #7
 800833a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4a15      	ldr	r2, [pc, #84]	@ (8008394 <prvHeapInit+0xb4>)
 8008340:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008342:	4b14      	ldr	r3, [pc, #80]	@ (8008394 <prvHeapInit+0xb4>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2200      	movs	r2, #0
 8008348:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800834a:	4b12      	ldr	r3, [pc, #72]	@ (8008394 <prvHeapInit+0xb4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2200      	movs	r2, #0
 8008350:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	1ad2      	subs	r2, r2, r3
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008360:	4b0c      	ldr	r3, [pc, #48]	@ (8008394 <prvHeapInit+0xb4>)
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	4a0a      	ldr	r2, [pc, #40]	@ (8008398 <prvHeapInit+0xb8>)
 800836e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	4a09      	ldr	r2, [pc, #36]	@ (800839c <prvHeapInit+0xbc>)
 8008376:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008378:	4b09      	ldr	r3, [pc, #36]	@ (80083a0 <prvHeapInit+0xc0>)
 800837a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800837e:	601a      	str	r2, [r3, #0]
}
 8008380:	bf00      	nop
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	20001218 	.word	0x20001218
 8008390:	20006038 	.word	0x20006038
 8008394:	20006040 	.word	0x20006040
 8008398:	20006048 	.word	0x20006048
 800839c:	20006044 	.word	0x20006044
 80083a0:	20006054 	.word	0x20006054

080083a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083ac:	4b28      	ldr	r3, [pc, #160]	@ (8008450 <prvInsertBlockIntoFreeList+0xac>)
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	e002      	b.n	80083b8 <prvInsertBlockIntoFreeList+0x14>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d8f7      	bhi.n	80083b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	4413      	add	r3, r2
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d108      	bne.n	80083e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	441a      	add	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	441a      	add	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d118      	bne.n	800842c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	4b15      	ldr	r3, [pc, #84]	@ (8008454 <prvInsertBlockIntoFreeList+0xb0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d00d      	beq.n	8008422 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	441a      	add	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	e008      	b.n	8008434 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008422:	4b0c      	ldr	r3, [pc, #48]	@ (8008454 <prvInsertBlockIntoFreeList+0xb0>)
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	e003      	b.n	8008434 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	429a      	cmp	r2, r3
 800843a:	d002      	beq.n	8008442 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	20006038 	.word	0x20006038
 8008454:	20006040 	.word	0x20006040

08008458 <std>:
 8008458:	2300      	movs	r3, #0
 800845a:	b510      	push	{r4, lr}
 800845c:	4604      	mov	r4, r0
 800845e:	e9c0 3300 	strd	r3, r3, [r0]
 8008462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008466:	6083      	str	r3, [r0, #8]
 8008468:	8181      	strh	r1, [r0, #12]
 800846a:	6643      	str	r3, [r0, #100]	@ 0x64
 800846c:	81c2      	strh	r2, [r0, #14]
 800846e:	6183      	str	r3, [r0, #24]
 8008470:	4619      	mov	r1, r3
 8008472:	2208      	movs	r2, #8
 8008474:	305c      	adds	r0, #92	@ 0x5c
 8008476:	f000 fa1b 	bl	80088b0 <memset>
 800847a:	4b0d      	ldr	r3, [pc, #52]	@ (80084b0 <std+0x58>)
 800847c:	6263      	str	r3, [r4, #36]	@ 0x24
 800847e:	4b0d      	ldr	r3, [pc, #52]	@ (80084b4 <std+0x5c>)
 8008480:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008482:	4b0d      	ldr	r3, [pc, #52]	@ (80084b8 <std+0x60>)
 8008484:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008486:	4b0d      	ldr	r3, [pc, #52]	@ (80084bc <std+0x64>)
 8008488:	6323      	str	r3, [r4, #48]	@ 0x30
 800848a:	4b0d      	ldr	r3, [pc, #52]	@ (80084c0 <std+0x68>)
 800848c:	6224      	str	r4, [r4, #32]
 800848e:	429c      	cmp	r4, r3
 8008490:	d006      	beq.n	80084a0 <std+0x48>
 8008492:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008496:	4294      	cmp	r4, r2
 8008498:	d002      	beq.n	80084a0 <std+0x48>
 800849a:	33d0      	adds	r3, #208	@ 0xd0
 800849c:	429c      	cmp	r4, r3
 800849e:	d105      	bne.n	80084ac <std+0x54>
 80084a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a8:	f000 bad8 	b.w	8008a5c <__retarget_lock_init_recursive>
 80084ac:	bd10      	pop	{r4, pc}
 80084ae:	bf00      	nop
 80084b0:	08008701 	.word	0x08008701
 80084b4:	08008723 	.word	0x08008723
 80084b8:	0800875b 	.word	0x0800875b
 80084bc:	0800877f 	.word	0x0800877f
 80084c0:	20006058 	.word	0x20006058

080084c4 <stdio_exit_handler>:
 80084c4:	4a02      	ldr	r2, [pc, #8]	@ (80084d0 <stdio_exit_handler+0xc>)
 80084c6:	4903      	ldr	r1, [pc, #12]	@ (80084d4 <stdio_exit_handler+0x10>)
 80084c8:	4803      	ldr	r0, [pc, #12]	@ (80084d8 <stdio_exit_handler+0x14>)
 80084ca:	f000 b869 	b.w	80085a0 <_fwalk_sglue>
 80084ce:	bf00      	nop
 80084d0:	20000014 	.word	0x20000014
 80084d4:	080095c5 	.word	0x080095c5
 80084d8:	20000024 	.word	0x20000024

080084dc <cleanup_stdio>:
 80084dc:	6841      	ldr	r1, [r0, #4]
 80084de:	4b0c      	ldr	r3, [pc, #48]	@ (8008510 <cleanup_stdio+0x34>)
 80084e0:	4299      	cmp	r1, r3
 80084e2:	b510      	push	{r4, lr}
 80084e4:	4604      	mov	r4, r0
 80084e6:	d001      	beq.n	80084ec <cleanup_stdio+0x10>
 80084e8:	f001 f86c 	bl	80095c4 <_fflush_r>
 80084ec:	68a1      	ldr	r1, [r4, #8]
 80084ee:	4b09      	ldr	r3, [pc, #36]	@ (8008514 <cleanup_stdio+0x38>)
 80084f0:	4299      	cmp	r1, r3
 80084f2:	d002      	beq.n	80084fa <cleanup_stdio+0x1e>
 80084f4:	4620      	mov	r0, r4
 80084f6:	f001 f865 	bl	80095c4 <_fflush_r>
 80084fa:	68e1      	ldr	r1, [r4, #12]
 80084fc:	4b06      	ldr	r3, [pc, #24]	@ (8008518 <cleanup_stdio+0x3c>)
 80084fe:	4299      	cmp	r1, r3
 8008500:	d004      	beq.n	800850c <cleanup_stdio+0x30>
 8008502:	4620      	mov	r0, r4
 8008504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008508:	f001 b85c 	b.w	80095c4 <_fflush_r>
 800850c:	bd10      	pop	{r4, pc}
 800850e:	bf00      	nop
 8008510:	20006058 	.word	0x20006058
 8008514:	200060c0 	.word	0x200060c0
 8008518:	20006128 	.word	0x20006128

0800851c <global_stdio_init.part.0>:
 800851c:	b510      	push	{r4, lr}
 800851e:	4b0b      	ldr	r3, [pc, #44]	@ (800854c <global_stdio_init.part.0+0x30>)
 8008520:	4c0b      	ldr	r4, [pc, #44]	@ (8008550 <global_stdio_init.part.0+0x34>)
 8008522:	4a0c      	ldr	r2, [pc, #48]	@ (8008554 <global_stdio_init.part.0+0x38>)
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	4620      	mov	r0, r4
 8008528:	2200      	movs	r2, #0
 800852a:	2104      	movs	r1, #4
 800852c:	f7ff ff94 	bl	8008458 <std>
 8008530:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008534:	2201      	movs	r2, #1
 8008536:	2109      	movs	r1, #9
 8008538:	f7ff ff8e 	bl	8008458 <std>
 800853c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008540:	2202      	movs	r2, #2
 8008542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008546:	2112      	movs	r1, #18
 8008548:	f7ff bf86 	b.w	8008458 <std>
 800854c:	20006190 	.word	0x20006190
 8008550:	20006058 	.word	0x20006058
 8008554:	080084c5 	.word	0x080084c5

08008558 <__sfp_lock_acquire>:
 8008558:	4801      	ldr	r0, [pc, #4]	@ (8008560 <__sfp_lock_acquire+0x8>)
 800855a:	f000 ba80 	b.w	8008a5e <__retarget_lock_acquire_recursive>
 800855e:	bf00      	nop
 8008560:	20006199 	.word	0x20006199

08008564 <__sfp_lock_release>:
 8008564:	4801      	ldr	r0, [pc, #4]	@ (800856c <__sfp_lock_release+0x8>)
 8008566:	f000 ba7b 	b.w	8008a60 <__retarget_lock_release_recursive>
 800856a:	bf00      	nop
 800856c:	20006199 	.word	0x20006199

08008570 <__sinit>:
 8008570:	b510      	push	{r4, lr}
 8008572:	4604      	mov	r4, r0
 8008574:	f7ff fff0 	bl	8008558 <__sfp_lock_acquire>
 8008578:	6a23      	ldr	r3, [r4, #32]
 800857a:	b11b      	cbz	r3, 8008584 <__sinit+0x14>
 800857c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008580:	f7ff bff0 	b.w	8008564 <__sfp_lock_release>
 8008584:	4b04      	ldr	r3, [pc, #16]	@ (8008598 <__sinit+0x28>)
 8008586:	6223      	str	r3, [r4, #32]
 8008588:	4b04      	ldr	r3, [pc, #16]	@ (800859c <__sinit+0x2c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1f5      	bne.n	800857c <__sinit+0xc>
 8008590:	f7ff ffc4 	bl	800851c <global_stdio_init.part.0>
 8008594:	e7f2      	b.n	800857c <__sinit+0xc>
 8008596:	bf00      	nop
 8008598:	080084dd 	.word	0x080084dd
 800859c:	20006190 	.word	0x20006190

080085a0 <_fwalk_sglue>:
 80085a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	4607      	mov	r7, r0
 80085a6:	4688      	mov	r8, r1
 80085a8:	4614      	mov	r4, r2
 80085aa:	2600      	movs	r6, #0
 80085ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085b0:	f1b9 0901 	subs.w	r9, r9, #1
 80085b4:	d505      	bpl.n	80085c2 <_fwalk_sglue+0x22>
 80085b6:	6824      	ldr	r4, [r4, #0]
 80085b8:	2c00      	cmp	r4, #0
 80085ba:	d1f7      	bne.n	80085ac <_fwalk_sglue+0xc>
 80085bc:	4630      	mov	r0, r6
 80085be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d907      	bls.n	80085d8 <_fwalk_sglue+0x38>
 80085c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085cc:	3301      	adds	r3, #1
 80085ce:	d003      	beq.n	80085d8 <_fwalk_sglue+0x38>
 80085d0:	4629      	mov	r1, r5
 80085d2:	4638      	mov	r0, r7
 80085d4:	47c0      	blx	r8
 80085d6:	4306      	orrs	r6, r0
 80085d8:	3568      	adds	r5, #104	@ 0x68
 80085da:	e7e9      	b.n	80085b0 <_fwalk_sglue+0x10>

080085dc <iprintf>:
 80085dc:	b40f      	push	{r0, r1, r2, r3}
 80085de:	b507      	push	{r0, r1, r2, lr}
 80085e0:	4906      	ldr	r1, [pc, #24]	@ (80085fc <iprintf+0x20>)
 80085e2:	ab04      	add	r3, sp, #16
 80085e4:	6808      	ldr	r0, [r1, #0]
 80085e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ea:	6881      	ldr	r1, [r0, #8]
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	f000 fcc1 	bl	8008f74 <_vfiprintf_r>
 80085f2:	b003      	add	sp, #12
 80085f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085f8:	b004      	add	sp, #16
 80085fa:	4770      	bx	lr
 80085fc:	20000020 	.word	0x20000020

08008600 <_puts_r>:
 8008600:	6a03      	ldr	r3, [r0, #32]
 8008602:	b570      	push	{r4, r5, r6, lr}
 8008604:	6884      	ldr	r4, [r0, #8]
 8008606:	4605      	mov	r5, r0
 8008608:	460e      	mov	r6, r1
 800860a:	b90b      	cbnz	r3, 8008610 <_puts_r+0x10>
 800860c:	f7ff ffb0 	bl	8008570 <__sinit>
 8008610:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008612:	07db      	lsls	r3, r3, #31
 8008614:	d405      	bmi.n	8008622 <_puts_r+0x22>
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	0598      	lsls	r0, r3, #22
 800861a:	d402      	bmi.n	8008622 <_puts_r+0x22>
 800861c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800861e:	f000 fa1e 	bl	8008a5e <__retarget_lock_acquire_recursive>
 8008622:	89a3      	ldrh	r3, [r4, #12]
 8008624:	0719      	lsls	r1, r3, #28
 8008626:	d502      	bpl.n	800862e <_puts_r+0x2e>
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d135      	bne.n	800869a <_puts_r+0x9a>
 800862e:	4621      	mov	r1, r4
 8008630:	4628      	mov	r0, r5
 8008632:	f000 f8e7 	bl	8008804 <__swsetup_r>
 8008636:	b380      	cbz	r0, 800869a <_puts_r+0x9a>
 8008638:	f04f 35ff 	mov.w	r5, #4294967295
 800863c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800863e:	07da      	lsls	r2, r3, #31
 8008640:	d405      	bmi.n	800864e <_puts_r+0x4e>
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	059b      	lsls	r3, r3, #22
 8008646:	d402      	bmi.n	800864e <_puts_r+0x4e>
 8008648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800864a:	f000 fa09 	bl	8008a60 <__retarget_lock_release_recursive>
 800864e:	4628      	mov	r0, r5
 8008650:	bd70      	pop	{r4, r5, r6, pc}
 8008652:	2b00      	cmp	r3, #0
 8008654:	da04      	bge.n	8008660 <_puts_r+0x60>
 8008656:	69a2      	ldr	r2, [r4, #24]
 8008658:	429a      	cmp	r2, r3
 800865a:	dc17      	bgt.n	800868c <_puts_r+0x8c>
 800865c:	290a      	cmp	r1, #10
 800865e:	d015      	beq.n	800868c <_puts_r+0x8c>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	6022      	str	r2, [r4, #0]
 8008666:	7019      	strb	r1, [r3, #0]
 8008668:	68a3      	ldr	r3, [r4, #8]
 800866a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800866e:	3b01      	subs	r3, #1
 8008670:	60a3      	str	r3, [r4, #8]
 8008672:	2900      	cmp	r1, #0
 8008674:	d1ed      	bne.n	8008652 <_puts_r+0x52>
 8008676:	2b00      	cmp	r3, #0
 8008678:	da11      	bge.n	800869e <_puts_r+0x9e>
 800867a:	4622      	mov	r2, r4
 800867c:	210a      	movs	r1, #10
 800867e:	4628      	mov	r0, r5
 8008680:	f000 f881 	bl	8008786 <__swbuf_r>
 8008684:	3001      	adds	r0, #1
 8008686:	d0d7      	beq.n	8008638 <_puts_r+0x38>
 8008688:	250a      	movs	r5, #10
 800868a:	e7d7      	b.n	800863c <_puts_r+0x3c>
 800868c:	4622      	mov	r2, r4
 800868e:	4628      	mov	r0, r5
 8008690:	f000 f879 	bl	8008786 <__swbuf_r>
 8008694:	3001      	adds	r0, #1
 8008696:	d1e7      	bne.n	8008668 <_puts_r+0x68>
 8008698:	e7ce      	b.n	8008638 <_puts_r+0x38>
 800869a:	3e01      	subs	r6, #1
 800869c:	e7e4      	b.n	8008668 <_puts_r+0x68>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	6022      	str	r2, [r4, #0]
 80086a4:	220a      	movs	r2, #10
 80086a6:	701a      	strb	r2, [r3, #0]
 80086a8:	e7ee      	b.n	8008688 <_puts_r+0x88>
	...

080086ac <puts>:
 80086ac:	4b02      	ldr	r3, [pc, #8]	@ (80086b8 <puts+0xc>)
 80086ae:	4601      	mov	r1, r0
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	f7ff bfa5 	b.w	8008600 <_puts_r>
 80086b6:	bf00      	nop
 80086b8:	20000020 	.word	0x20000020

080086bc <siprintf>:
 80086bc:	b40e      	push	{r1, r2, r3}
 80086be:	b510      	push	{r4, lr}
 80086c0:	b09d      	sub	sp, #116	@ 0x74
 80086c2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80086c4:	9002      	str	r0, [sp, #8]
 80086c6:	9006      	str	r0, [sp, #24]
 80086c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80086cc:	480a      	ldr	r0, [pc, #40]	@ (80086f8 <siprintf+0x3c>)
 80086ce:	9107      	str	r1, [sp, #28]
 80086d0:	9104      	str	r1, [sp, #16]
 80086d2:	490a      	ldr	r1, [pc, #40]	@ (80086fc <siprintf+0x40>)
 80086d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d8:	9105      	str	r1, [sp, #20]
 80086da:	2400      	movs	r4, #0
 80086dc:	a902      	add	r1, sp, #8
 80086de:	6800      	ldr	r0, [r0, #0]
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80086e4:	f000 fb20 	bl	8008d28 <_svfiprintf_r>
 80086e8:	9b02      	ldr	r3, [sp, #8]
 80086ea:	701c      	strb	r4, [r3, #0]
 80086ec:	b01d      	add	sp, #116	@ 0x74
 80086ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f2:	b003      	add	sp, #12
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	20000020 	.word	0x20000020
 80086fc:	ffff0208 	.word	0xffff0208

08008700 <__sread>:
 8008700:	b510      	push	{r4, lr}
 8008702:	460c      	mov	r4, r1
 8008704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008708:	f000 f95a 	bl	80089c0 <_read_r>
 800870c:	2800      	cmp	r0, #0
 800870e:	bfab      	itete	ge
 8008710:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008712:	89a3      	ldrhlt	r3, [r4, #12]
 8008714:	181b      	addge	r3, r3, r0
 8008716:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800871a:	bfac      	ite	ge
 800871c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800871e:	81a3      	strhlt	r3, [r4, #12]
 8008720:	bd10      	pop	{r4, pc}

08008722 <__swrite>:
 8008722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008726:	461f      	mov	r7, r3
 8008728:	898b      	ldrh	r3, [r1, #12]
 800872a:	05db      	lsls	r3, r3, #23
 800872c:	4605      	mov	r5, r0
 800872e:	460c      	mov	r4, r1
 8008730:	4616      	mov	r6, r2
 8008732:	d505      	bpl.n	8008740 <__swrite+0x1e>
 8008734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008738:	2302      	movs	r3, #2
 800873a:	2200      	movs	r2, #0
 800873c:	f000 f92e 	bl	800899c <_lseek_r>
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008746:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800874a:	81a3      	strh	r3, [r4, #12]
 800874c:	4632      	mov	r2, r6
 800874e:	463b      	mov	r3, r7
 8008750:	4628      	mov	r0, r5
 8008752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008756:	f000 b945 	b.w	80089e4 <_write_r>

0800875a <__sseek>:
 800875a:	b510      	push	{r4, lr}
 800875c:	460c      	mov	r4, r1
 800875e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008762:	f000 f91b 	bl	800899c <_lseek_r>
 8008766:	1c43      	adds	r3, r0, #1
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	bf15      	itete	ne
 800876c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800876e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008772:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008776:	81a3      	strheq	r3, [r4, #12]
 8008778:	bf18      	it	ne
 800877a:	81a3      	strhne	r3, [r4, #12]
 800877c:	bd10      	pop	{r4, pc}

0800877e <__sclose>:
 800877e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008782:	f000 b89d 	b.w	80088c0 <_close_r>

08008786 <__swbuf_r>:
 8008786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008788:	460e      	mov	r6, r1
 800878a:	4614      	mov	r4, r2
 800878c:	4605      	mov	r5, r0
 800878e:	b118      	cbz	r0, 8008798 <__swbuf_r+0x12>
 8008790:	6a03      	ldr	r3, [r0, #32]
 8008792:	b90b      	cbnz	r3, 8008798 <__swbuf_r+0x12>
 8008794:	f7ff feec 	bl	8008570 <__sinit>
 8008798:	69a3      	ldr	r3, [r4, #24]
 800879a:	60a3      	str	r3, [r4, #8]
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	071a      	lsls	r2, r3, #28
 80087a0:	d501      	bpl.n	80087a6 <__swbuf_r+0x20>
 80087a2:	6923      	ldr	r3, [r4, #16]
 80087a4:	b943      	cbnz	r3, 80087b8 <__swbuf_r+0x32>
 80087a6:	4621      	mov	r1, r4
 80087a8:	4628      	mov	r0, r5
 80087aa:	f000 f82b 	bl	8008804 <__swsetup_r>
 80087ae:	b118      	cbz	r0, 80087b8 <__swbuf_r+0x32>
 80087b0:	f04f 37ff 	mov.w	r7, #4294967295
 80087b4:	4638      	mov	r0, r7
 80087b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	6922      	ldr	r2, [r4, #16]
 80087bc:	1a98      	subs	r0, r3, r2
 80087be:	6963      	ldr	r3, [r4, #20]
 80087c0:	b2f6      	uxtb	r6, r6
 80087c2:	4283      	cmp	r3, r0
 80087c4:	4637      	mov	r7, r6
 80087c6:	dc05      	bgt.n	80087d4 <__swbuf_r+0x4e>
 80087c8:	4621      	mov	r1, r4
 80087ca:	4628      	mov	r0, r5
 80087cc:	f000 fefa 	bl	80095c4 <_fflush_r>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d1ed      	bne.n	80087b0 <__swbuf_r+0x2a>
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	60a3      	str	r3, [r4, #8]
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	6022      	str	r2, [r4, #0]
 80087e0:	701e      	strb	r6, [r3, #0]
 80087e2:	6962      	ldr	r2, [r4, #20]
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d004      	beq.n	80087f4 <__swbuf_r+0x6e>
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	07db      	lsls	r3, r3, #31
 80087ee:	d5e1      	bpl.n	80087b4 <__swbuf_r+0x2e>
 80087f0:	2e0a      	cmp	r6, #10
 80087f2:	d1df      	bne.n	80087b4 <__swbuf_r+0x2e>
 80087f4:	4621      	mov	r1, r4
 80087f6:	4628      	mov	r0, r5
 80087f8:	f000 fee4 	bl	80095c4 <_fflush_r>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d0d9      	beq.n	80087b4 <__swbuf_r+0x2e>
 8008800:	e7d6      	b.n	80087b0 <__swbuf_r+0x2a>
	...

08008804 <__swsetup_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4b29      	ldr	r3, [pc, #164]	@ (80088ac <__swsetup_r+0xa8>)
 8008808:	4605      	mov	r5, r0
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	460c      	mov	r4, r1
 800880e:	b118      	cbz	r0, 8008818 <__swsetup_r+0x14>
 8008810:	6a03      	ldr	r3, [r0, #32]
 8008812:	b90b      	cbnz	r3, 8008818 <__swsetup_r+0x14>
 8008814:	f7ff feac 	bl	8008570 <__sinit>
 8008818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881c:	0719      	lsls	r1, r3, #28
 800881e:	d422      	bmi.n	8008866 <__swsetup_r+0x62>
 8008820:	06da      	lsls	r2, r3, #27
 8008822:	d407      	bmi.n	8008834 <__swsetup_r+0x30>
 8008824:	2209      	movs	r2, #9
 8008826:	602a      	str	r2, [r5, #0]
 8008828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	f04f 30ff 	mov.w	r0, #4294967295
 8008832:	e033      	b.n	800889c <__swsetup_r+0x98>
 8008834:	0758      	lsls	r0, r3, #29
 8008836:	d512      	bpl.n	800885e <__swsetup_r+0x5a>
 8008838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800883a:	b141      	cbz	r1, 800884e <__swsetup_r+0x4a>
 800883c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008840:	4299      	cmp	r1, r3
 8008842:	d002      	beq.n	800884a <__swsetup_r+0x46>
 8008844:	4628      	mov	r0, r5
 8008846:	f000 f91b 	bl	8008a80 <_free_r>
 800884a:	2300      	movs	r3, #0
 800884c:	6363      	str	r3, [r4, #52]	@ 0x34
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	2300      	movs	r3, #0
 8008858:	6063      	str	r3, [r4, #4]
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	f043 0308 	orr.w	r3, r3, #8
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	b94b      	cbnz	r3, 800887e <__swsetup_r+0x7a>
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008874:	d003      	beq.n	800887e <__swsetup_r+0x7a>
 8008876:	4621      	mov	r1, r4
 8008878:	4628      	mov	r0, r5
 800887a:	f000 fef1 	bl	8009660 <__smakebuf_r>
 800887e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008882:	f013 0201 	ands.w	r2, r3, #1
 8008886:	d00a      	beq.n	800889e <__swsetup_r+0x9a>
 8008888:	2200      	movs	r2, #0
 800888a:	60a2      	str	r2, [r4, #8]
 800888c:	6962      	ldr	r2, [r4, #20]
 800888e:	4252      	negs	r2, r2
 8008890:	61a2      	str	r2, [r4, #24]
 8008892:	6922      	ldr	r2, [r4, #16]
 8008894:	b942      	cbnz	r2, 80088a8 <__swsetup_r+0xa4>
 8008896:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800889a:	d1c5      	bne.n	8008828 <__swsetup_r+0x24>
 800889c:	bd38      	pop	{r3, r4, r5, pc}
 800889e:	0799      	lsls	r1, r3, #30
 80088a0:	bf58      	it	pl
 80088a2:	6962      	ldrpl	r2, [r4, #20]
 80088a4:	60a2      	str	r2, [r4, #8]
 80088a6:	e7f4      	b.n	8008892 <__swsetup_r+0x8e>
 80088a8:	2000      	movs	r0, #0
 80088aa:	e7f7      	b.n	800889c <__swsetup_r+0x98>
 80088ac:	20000020 	.word	0x20000020

080088b0 <memset>:
 80088b0:	4402      	add	r2, r0
 80088b2:	4603      	mov	r3, r0
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d100      	bne.n	80088ba <memset+0xa>
 80088b8:	4770      	bx	lr
 80088ba:	f803 1b01 	strb.w	r1, [r3], #1
 80088be:	e7f9      	b.n	80088b4 <memset+0x4>

080088c0 <_close_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4d06      	ldr	r5, [pc, #24]	@ (80088dc <_close_r+0x1c>)
 80088c4:	2300      	movs	r3, #0
 80088c6:	4604      	mov	r4, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	f7f9 fd47 	bl	800235e <_close>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_close_r+0x1a>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_close_r+0x1a>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	20006194 	.word	0x20006194

080088e0 <_reclaim_reent>:
 80088e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008998 <_reclaim_reent+0xb8>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4283      	cmp	r3, r0
 80088e6:	b570      	push	{r4, r5, r6, lr}
 80088e8:	4604      	mov	r4, r0
 80088ea:	d053      	beq.n	8008994 <_reclaim_reent+0xb4>
 80088ec:	69c3      	ldr	r3, [r0, #28]
 80088ee:	b31b      	cbz	r3, 8008938 <_reclaim_reent+0x58>
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	b163      	cbz	r3, 800890e <_reclaim_reent+0x2e>
 80088f4:	2500      	movs	r5, #0
 80088f6:	69e3      	ldr	r3, [r4, #28]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	5959      	ldr	r1, [r3, r5]
 80088fc:	b9b1      	cbnz	r1, 800892c <_reclaim_reent+0x4c>
 80088fe:	3504      	adds	r5, #4
 8008900:	2d80      	cmp	r5, #128	@ 0x80
 8008902:	d1f8      	bne.n	80088f6 <_reclaim_reent+0x16>
 8008904:	69e3      	ldr	r3, [r4, #28]
 8008906:	4620      	mov	r0, r4
 8008908:	68d9      	ldr	r1, [r3, #12]
 800890a:	f000 f8b9 	bl	8008a80 <_free_r>
 800890e:	69e3      	ldr	r3, [r4, #28]
 8008910:	6819      	ldr	r1, [r3, #0]
 8008912:	b111      	cbz	r1, 800891a <_reclaim_reent+0x3a>
 8008914:	4620      	mov	r0, r4
 8008916:	f000 f8b3 	bl	8008a80 <_free_r>
 800891a:	69e3      	ldr	r3, [r4, #28]
 800891c:	689d      	ldr	r5, [r3, #8]
 800891e:	b15d      	cbz	r5, 8008938 <_reclaim_reent+0x58>
 8008920:	4629      	mov	r1, r5
 8008922:	4620      	mov	r0, r4
 8008924:	682d      	ldr	r5, [r5, #0]
 8008926:	f000 f8ab 	bl	8008a80 <_free_r>
 800892a:	e7f8      	b.n	800891e <_reclaim_reent+0x3e>
 800892c:	680e      	ldr	r6, [r1, #0]
 800892e:	4620      	mov	r0, r4
 8008930:	f000 f8a6 	bl	8008a80 <_free_r>
 8008934:	4631      	mov	r1, r6
 8008936:	e7e1      	b.n	80088fc <_reclaim_reent+0x1c>
 8008938:	6961      	ldr	r1, [r4, #20]
 800893a:	b111      	cbz	r1, 8008942 <_reclaim_reent+0x62>
 800893c:	4620      	mov	r0, r4
 800893e:	f000 f89f 	bl	8008a80 <_free_r>
 8008942:	69e1      	ldr	r1, [r4, #28]
 8008944:	b111      	cbz	r1, 800894c <_reclaim_reent+0x6c>
 8008946:	4620      	mov	r0, r4
 8008948:	f000 f89a 	bl	8008a80 <_free_r>
 800894c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800894e:	b111      	cbz	r1, 8008956 <_reclaim_reent+0x76>
 8008950:	4620      	mov	r0, r4
 8008952:	f000 f895 	bl	8008a80 <_free_r>
 8008956:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008958:	b111      	cbz	r1, 8008960 <_reclaim_reent+0x80>
 800895a:	4620      	mov	r0, r4
 800895c:	f000 f890 	bl	8008a80 <_free_r>
 8008960:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008962:	b111      	cbz	r1, 800896a <_reclaim_reent+0x8a>
 8008964:	4620      	mov	r0, r4
 8008966:	f000 f88b 	bl	8008a80 <_free_r>
 800896a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800896c:	b111      	cbz	r1, 8008974 <_reclaim_reent+0x94>
 800896e:	4620      	mov	r0, r4
 8008970:	f000 f886 	bl	8008a80 <_free_r>
 8008974:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008976:	b111      	cbz	r1, 800897e <_reclaim_reent+0x9e>
 8008978:	4620      	mov	r0, r4
 800897a:	f000 f881 	bl	8008a80 <_free_r>
 800897e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008980:	b111      	cbz	r1, 8008988 <_reclaim_reent+0xa8>
 8008982:	4620      	mov	r0, r4
 8008984:	f000 f87c 	bl	8008a80 <_free_r>
 8008988:	6a23      	ldr	r3, [r4, #32]
 800898a:	b11b      	cbz	r3, 8008994 <_reclaim_reent+0xb4>
 800898c:	4620      	mov	r0, r4
 800898e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008992:	4718      	bx	r3
 8008994:	bd70      	pop	{r4, r5, r6, pc}
 8008996:	bf00      	nop
 8008998:	20000020 	.word	0x20000020

0800899c <_lseek_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d07      	ldr	r5, [pc, #28]	@ (80089bc <_lseek_r+0x20>)
 80089a0:	4604      	mov	r4, r0
 80089a2:	4608      	mov	r0, r1
 80089a4:	4611      	mov	r1, r2
 80089a6:	2200      	movs	r2, #0
 80089a8:	602a      	str	r2, [r5, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	f7f9 fcfe 	bl	80023ac <_lseek>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	d102      	bne.n	80089ba <_lseek_r+0x1e>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	b103      	cbz	r3, 80089ba <_lseek_r+0x1e>
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	20006194 	.word	0x20006194

080089c0 <_read_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d07      	ldr	r5, [pc, #28]	@ (80089e0 <_read_r+0x20>)
 80089c4:	4604      	mov	r4, r0
 80089c6:	4608      	mov	r0, r1
 80089c8:	4611      	mov	r1, r2
 80089ca:	2200      	movs	r2, #0
 80089cc:	602a      	str	r2, [r5, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f7f9 fca8 	bl	8002324 <_read>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_read_r+0x1e>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b103      	cbz	r3, 80089de <_read_r+0x1e>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	20006194 	.word	0x20006194

080089e4 <_write_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	4d07      	ldr	r5, [pc, #28]	@ (8008a04 <_write_r+0x20>)
 80089e8:	4604      	mov	r4, r0
 80089ea:	4608      	mov	r0, r1
 80089ec:	4611      	mov	r1, r2
 80089ee:	2200      	movs	r2, #0
 80089f0:	602a      	str	r2, [r5, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	f7f8 fe48 	bl	8001688 <_write>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d102      	bne.n	8008a02 <_write_r+0x1e>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	b103      	cbz	r3, 8008a02 <_write_r+0x1e>
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	20006194 	.word	0x20006194

08008a08 <__errno>:
 8008a08:	4b01      	ldr	r3, [pc, #4]	@ (8008a10 <__errno+0x8>)
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	20000020 	.word	0x20000020

08008a14 <__libc_init_array>:
 8008a14:	b570      	push	{r4, r5, r6, lr}
 8008a16:	4d0d      	ldr	r5, [pc, #52]	@ (8008a4c <__libc_init_array+0x38>)
 8008a18:	4c0d      	ldr	r4, [pc, #52]	@ (8008a50 <__libc_init_array+0x3c>)
 8008a1a:	1b64      	subs	r4, r4, r5
 8008a1c:	10a4      	asrs	r4, r4, #2
 8008a1e:	2600      	movs	r6, #0
 8008a20:	42a6      	cmp	r6, r4
 8008a22:	d109      	bne.n	8008a38 <__libc_init_array+0x24>
 8008a24:	4d0b      	ldr	r5, [pc, #44]	@ (8008a54 <__libc_init_array+0x40>)
 8008a26:	4c0c      	ldr	r4, [pc, #48]	@ (8008a58 <__libc_init_array+0x44>)
 8008a28:	f000 fed8 	bl	80097dc <_init>
 8008a2c:	1b64      	subs	r4, r4, r5
 8008a2e:	10a4      	asrs	r4, r4, #2
 8008a30:	2600      	movs	r6, #0
 8008a32:	42a6      	cmp	r6, r4
 8008a34:	d105      	bne.n	8008a42 <__libc_init_array+0x2e>
 8008a36:	bd70      	pop	{r4, r5, r6, pc}
 8008a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a3c:	4798      	blx	r3
 8008a3e:	3601      	adds	r6, #1
 8008a40:	e7ee      	b.n	8008a20 <__libc_init_array+0xc>
 8008a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a46:	4798      	blx	r3
 8008a48:	3601      	adds	r6, #1
 8008a4a:	e7f2      	b.n	8008a32 <__libc_init_array+0x1e>
 8008a4c:	08009994 	.word	0x08009994
 8008a50:	08009994 	.word	0x08009994
 8008a54:	08009994 	.word	0x08009994
 8008a58:	08009998 	.word	0x08009998

08008a5c <__retarget_lock_init_recursive>:
 8008a5c:	4770      	bx	lr

08008a5e <__retarget_lock_acquire_recursive>:
 8008a5e:	4770      	bx	lr

08008a60 <__retarget_lock_release_recursive>:
 8008a60:	4770      	bx	lr

08008a62 <memcpy>:
 8008a62:	440a      	add	r2, r1
 8008a64:	4291      	cmp	r1, r2
 8008a66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a6a:	d100      	bne.n	8008a6e <memcpy+0xc>
 8008a6c:	4770      	bx	lr
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a78:	4291      	cmp	r1, r2
 8008a7a:	d1f9      	bne.n	8008a70 <memcpy+0xe>
 8008a7c:	bd10      	pop	{r4, pc}
	...

08008a80 <_free_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4605      	mov	r5, r0
 8008a84:	2900      	cmp	r1, #0
 8008a86:	d041      	beq.n	8008b0c <_free_r+0x8c>
 8008a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a8c:	1f0c      	subs	r4, r1, #4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	bfb8      	it	lt
 8008a92:	18e4      	addlt	r4, r4, r3
 8008a94:	f000 f8e0 	bl	8008c58 <__malloc_lock>
 8008a98:	4a1d      	ldr	r2, [pc, #116]	@ (8008b10 <_free_r+0x90>)
 8008a9a:	6813      	ldr	r3, [r2, #0]
 8008a9c:	b933      	cbnz	r3, 8008aac <_free_r+0x2c>
 8008a9e:	6063      	str	r3, [r4, #4]
 8008aa0:	6014      	str	r4, [r2, #0]
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aa8:	f000 b8dc 	b.w	8008c64 <__malloc_unlock>
 8008aac:	42a3      	cmp	r3, r4
 8008aae:	d908      	bls.n	8008ac2 <_free_r+0x42>
 8008ab0:	6820      	ldr	r0, [r4, #0]
 8008ab2:	1821      	adds	r1, r4, r0
 8008ab4:	428b      	cmp	r3, r1
 8008ab6:	bf01      	itttt	eq
 8008ab8:	6819      	ldreq	r1, [r3, #0]
 8008aba:	685b      	ldreq	r3, [r3, #4]
 8008abc:	1809      	addeq	r1, r1, r0
 8008abe:	6021      	streq	r1, [r4, #0]
 8008ac0:	e7ed      	b.n	8008a9e <_free_r+0x1e>
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	b10b      	cbz	r3, 8008acc <_free_r+0x4c>
 8008ac8:	42a3      	cmp	r3, r4
 8008aca:	d9fa      	bls.n	8008ac2 <_free_r+0x42>
 8008acc:	6811      	ldr	r1, [r2, #0]
 8008ace:	1850      	adds	r0, r2, r1
 8008ad0:	42a0      	cmp	r0, r4
 8008ad2:	d10b      	bne.n	8008aec <_free_r+0x6c>
 8008ad4:	6820      	ldr	r0, [r4, #0]
 8008ad6:	4401      	add	r1, r0
 8008ad8:	1850      	adds	r0, r2, r1
 8008ada:	4283      	cmp	r3, r0
 8008adc:	6011      	str	r1, [r2, #0]
 8008ade:	d1e0      	bne.n	8008aa2 <_free_r+0x22>
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	6053      	str	r3, [r2, #4]
 8008ae6:	4408      	add	r0, r1
 8008ae8:	6010      	str	r0, [r2, #0]
 8008aea:	e7da      	b.n	8008aa2 <_free_r+0x22>
 8008aec:	d902      	bls.n	8008af4 <_free_r+0x74>
 8008aee:	230c      	movs	r3, #12
 8008af0:	602b      	str	r3, [r5, #0]
 8008af2:	e7d6      	b.n	8008aa2 <_free_r+0x22>
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	1821      	adds	r1, r4, r0
 8008af8:	428b      	cmp	r3, r1
 8008afa:	bf04      	itt	eq
 8008afc:	6819      	ldreq	r1, [r3, #0]
 8008afe:	685b      	ldreq	r3, [r3, #4]
 8008b00:	6063      	str	r3, [r4, #4]
 8008b02:	bf04      	itt	eq
 8008b04:	1809      	addeq	r1, r1, r0
 8008b06:	6021      	streq	r1, [r4, #0]
 8008b08:	6054      	str	r4, [r2, #4]
 8008b0a:	e7ca      	b.n	8008aa2 <_free_r+0x22>
 8008b0c:	bd38      	pop	{r3, r4, r5, pc}
 8008b0e:	bf00      	nop
 8008b10:	200061a0 	.word	0x200061a0

08008b14 <sbrk_aligned>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	4e0f      	ldr	r6, [pc, #60]	@ (8008b54 <sbrk_aligned+0x40>)
 8008b18:	460c      	mov	r4, r1
 8008b1a:	6831      	ldr	r1, [r6, #0]
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	b911      	cbnz	r1, 8008b26 <sbrk_aligned+0x12>
 8008b20:	f000 fe16 	bl	8009750 <_sbrk_r>
 8008b24:	6030      	str	r0, [r6, #0]
 8008b26:	4621      	mov	r1, r4
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f000 fe11 	bl	8009750 <_sbrk_r>
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	d103      	bne.n	8008b3a <sbrk_aligned+0x26>
 8008b32:	f04f 34ff 	mov.w	r4, #4294967295
 8008b36:	4620      	mov	r0, r4
 8008b38:	bd70      	pop	{r4, r5, r6, pc}
 8008b3a:	1cc4      	adds	r4, r0, #3
 8008b3c:	f024 0403 	bic.w	r4, r4, #3
 8008b40:	42a0      	cmp	r0, r4
 8008b42:	d0f8      	beq.n	8008b36 <sbrk_aligned+0x22>
 8008b44:	1a21      	subs	r1, r4, r0
 8008b46:	4628      	mov	r0, r5
 8008b48:	f000 fe02 	bl	8009750 <_sbrk_r>
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d1f2      	bne.n	8008b36 <sbrk_aligned+0x22>
 8008b50:	e7ef      	b.n	8008b32 <sbrk_aligned+0x1e>
 8008b52:	bf00      	nop
 8008b54:	2000619c 	.word	0x2000619c

08008b58 <_malloc_r>:
 8008b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b5c:	1ccd      	adds	r5, r1, #3
 8008b5e:	f025 0503 	bic.w	r5, r5, #3
 8008b62:	3508      	adds	r5, #8
 8008b64:	2d0c      	cmp	r5, #12
 8008b66:	bf38      	it	cc
 8008b68:	250c      	movcc	r5, #12
 8008b6a:	2d00      	cmp	r5, #0
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	db01      	blt.n	8008b74 <_malloc_r+0x1c>
 8008b70:	42a9      	cmp	r1, r5
 8008b72:	d904      	bls.n	8008b7e <_malloc_r+0x26>
 8008b74:	230c      	movs	r3, #12
 8008b76:	6033      	str	r3, [r6, #0]
 8008b78:	2000      	movs	r0, #0
 8008b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c54 <_malloc_r+0xfc>
 8008b82:	f000 f869 	bl	8008c58 <__malloc_lock>
 8008b86:	f8d8 3000 	ldr.w	r3, [r8]
 8008b8a:	461c      	mov	r4, r3
 8008b8c:	bb44      	cbnz	r4, 8008be0 <_malloc_r+0x88>
 8008b8e:	4629      	mov	r1, r5
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7ff ffbf 	bl	8008b14 <sbrk_aligned>
 8008b96:	1c43      	adds	r3, r0, #1
 8008b98:	4604      	mov	r4, r0
 8008b9a:	d158      	bne.n	8008c4e <_malloc_r+0xf6>
 8008b9c:	f8d8 4000 	ldr.w	r4, [r8]
 8008ba0:	4627      	mov	r7, r4
 8008ba2:	2f00      	cmp	r7, #0
 8008ba4:	d143      	bne.n	8008c2e <_malloc_r+0xd6>
 8008ba6:	2c00      	cmp	r4, #0
 8008ba8:	d04b      	beq.n	8008c42 <_malloc_r+0xea>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	4639      	mov	r1, r7
 8008bae:	4630      	mov	r0, r6
 8008bb0:	eb04 0903 	add.w	r9, r4, r3
 8008bb4:	f000 fdcc 	bl	8009750 <_sbrk_r>
 8008bb8:	4581      	cmp	r9, r0
 8008bba:	d142      	bne.n	8008c42 <_malloc_r+0xea>
 8008bbc:	6821      	ldr	r1, [r4, #0]
 8008bbe:	1a6d      	subs	r5, r5, r1
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f7ff ffa6 	bl	8008b14 <sbrk_aligned>
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d03a      	beq.n	8008c42 <_malloc_r+0xea>
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	442b      	add	r3, r5
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	bb62      	cbnz	r2, 8008c34 <_malloc_r+0xdc>
 8008bda:	f8c8 7000 	str.w	r7, [r8]
 8008bde:	e00f      	b.n	8008c00 <_malloc_r+0xa8>
 8008be0:	6822      	ldr	r2, [r4, #0]
 8008be2:	1b52      	subs	r2, r2, r5
 8008be4:	d420      	bmi.n	8008c28 <_malloc_r+0xd0>
 8008be6:	2a0b      	cmp	r2, #11
 8008be8:	d917      	bls.n	8008c1a <_malloc_r+0xc2>
 8008bea:	1961      	adds	r1, r4, r5
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	6025      	str	r5, [r4, #0]
 8008bf0:	bf18      	it	ne
 8008bf2:	6059      	strne	r1, [r3, #4]
 8008bf4:	6863      	ldr	r3, [r4, #4]
 8008bf6:	bf08      	it	eq
 8008bf8:	f8c8 1000 	streq.w	r1, [r8]
 8008bfc:	5162      	str	r2, [r4, r5]
 8008bfe:	604b      	str	r3, [r1, #4]
 8008c00:	4630      	mov	r0, r6
 8008c02:	f000 f82f 	bl	8008c64 <__malloc_unlock>
 8008c06:	f104 000b 	add.w	r0, r4, #11
 8008c0a:	1d23      	adds	r3, r4, #4
 8008c0c:	f020 0007 	bic.w	r0, r0, #7
 8008c10:	1ac2      	subs	r2, r0, r3
 8008c12:	bf1c      	itt	ne
 8008c14:	1a1b      	subne	r3, r3, r0
 8008c16:	50a3      	strne	r3, [r4, r2]
 8008c18:	e7af      	b.n	8008b7a <_malloc_r+0x22>
 8008c1a:	6862      	ldr	r2, [r4, #4]
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	bf0c      	ite	eq
 8008c20:	f8c8 2000 	streq.w	r2, [r8]
 8008c24:	605a      	strne	r2, [r3, #4]
 8008c26:	e7eb      	b.n	8008c00 <_malloc_r+0xa8>
 8008c28:	4623      	mov	r3, r4
 8008c2a:	6864      	ldr	r4, [r4, #4]
 8008c2c:	e7ae      	b.n	8008b8c <_malloc_r+0x34>
 8008c2e:	463c      	mov	r4, r7
 8008c30:	687f      	ldr	r7, [r7, #4]
 8008c32:	e7b6      	b.n	8008ba2 <_malloc_r+0x4a>
 8008c34:	461a      	mov	r2, r3
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	d1fb      	bne.n	8008c34 <_malloc_r+0xdc>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	6053      	str	r3, [r2, #4]
 8008c40:	e7de      	b.n	8008c00 <_malloc_r+0xa8>
 8008c42:	230c      	movs	r3, #12
 8008c44:	6033      	str	r3, [r6, #0]
 8008c46:	4630      	mov	r0, r6
 8008c48:	f000 f80c 	bl	8008c64 <__malloc_unlock>
 8008c4c:	e794      	b.n	8008b78 <_malloc_r+0x20>
 8008c4e:	6005      	str	r5, [r0, #0]
 8008c50:	e7d6      	b.n	8008c00 <_malloc_r+0xa8>
 8008c52:	bf00      	nop
 8008c54:	200061a0 	.word	0x200061a0

08008c58 <__malloc_lock>:
 8008c58:	4801      	ldr	r0, [pc, #4]	@ (8008c60 <__malloc_lock+0x8>)
 8008c5a:	f7ff bf00 	b.w	8008a5e <__retarget_lock_acquire_recursive>
 8008c5e:	bf00      	nop
 8008c60:	20006198 	.word	0x20006198

08008c64 <__malloc_unlock>:
 8008c64:	4801      	ldr	r0, [pc, #4]	@ (8008c6c <__malloc_unlock+0x8>)
 8008c66:	f7ff befb 	b.w	8008a60 <__retarget_lock_release_recursive>
 8008c6a:	bf00      	nop
 8008c6c:	20006198 	.word	0x20006198

08008c70 <__ssputs_r>:
 8008c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c74:	688e      	ldr	r6, [r1, #8]
 8008c76:	461f      	mov	r7, r3
 8008c78:	42be      	cmp	r6, r7
 8008c7a:	680b      	ldr	r3, [r1, #0]
 8008c7c:	4682      	mov	sl, r0
 8008c7e:	460c      	mov	r4, r1
 8008c80:	4690      	mov	r8, r2
 8008c82:	d82d      	bhi.n	8008ce0 <__ssputs_r+0x70>
 8008c84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c8c:	d026      	beq.n	8008cdc <__ssputs_r+0x6c>
 8008c8e:	6965      	ldr	r5, [r4, #20]
 8008c90:	6909      	ldr	r1, [r1, #16]
 8008c92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c96:	eba3 0901 	sub.w	r9, r3, r1
 8008c9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c9e:	1c7b      	adds	r3, r7, #1
 8008ca0:	444b      	add	r3, r9
 8008ca2:	106d      	asrs	r5, r5, #1
 8008ca4:	429d      	cmp	r5, r3
 8008ca6:	bf38      	it	cc
 8008ca8:	461d      	movcc	r5, r3
 8008caa:	0553      	lsls	r3, r2, #21
 8008cac:	d527      	bpl.n	8008cfe <__ssputs_r+0x8e>
 8008cae:	4629      	mov	r1, r5
 8008cb0:	f7ff ff52 	bl	8008b58 <_malloc_r>
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	b360      	cbz	r0, 8008d12 <__ssputs_r+0xa2>
 8008cb8:	6921      	ldr	r1, [r4, #16]
 8008cba:	464a      	mov	r2, r9
 8008cbc:	f7ff fed1 	bl	8008a62 <memcpy>
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cca:	81a3      	strh	r3, [r4, #12]
 8008ccc:	6126      	str	r6, [r4, #16]
 8008cce:	6165      	str	r5, [r4, #20]
 8008cd0:	444e      	add	r6, r9
 8008cd2:	eba5 0509 	sub.w	r5, r5, r9
 8008cd6:	6026      	str	r6, [r4, #0]
 8008cd8:	60a5      	str	r5, [r4, #8]
 8008cda:	463e      	mov	r6, r7
 8008cdc:	42be      	cmp	r6, r7
 8008cde:	d900      	bls.n	8008ce2 <__ssputs_r+0x72>
 8008ce0:	463e      	mov	r6, r7
 8008ce2:	6820      	ldr	r0, [r4, #0]
 8008ce4:	4632      	mov	r2, r6
 8008ce6:	4641      	mov	r1, r8
 8008ce8:	f000 fcf6 	bl	80096d8 <memmove>
 8008cec:	68a3      	ldr	r3, [r4, #8]
 8008cee:	1b9b      	subs	r3, r3, r6
 8008cf0:	60a3      	str	r3, [r4, #8]
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	4433      	add	r3, r6
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfe:	462a      	mov	r2, r5
 8008d00:	f000 fd36 	bl	8009770 <_realloc_r>
 8008d04:	4606      	mov	r6, r0
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d1e0      	bne.n	8008ccc <__ssputs_r+0x5c>
 8008d0a:	6921      	ldr	r1, [r4, #16]
 8008d0c:	4650      	mov	r0, sl
 8008d0e:	f7ff feb7 	bl	8008a80 <_free_r>
 8008d12:	230c      	movs	r3, #12
 8008d14:	f8ca 3000 	str.w	r3, [sl]
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	e7e9      	b.n	8008cfa <__ssputs_r+0x8a>
	...

08008d28 <_svfiprintf_r>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	4698      	mov	r8, r3
 8008d2e:	898b      	ldrh	r3, [r1, #12]
 8008d30:	061b      	lsls	r3, r3, #24
 8008d32:	b09d      	sub	sp, #116	@ 0x74
 8008d34:	4607      	mov	r7, r0
 8008d36:	460d      	mov	r5, r1
 8008d38:	4614      	mov	r4, r2
 8008d3a:	d510      	bpl.n	8008d5e <_svfiprintf_r+0x36>
 8008d3c:	690b      	ldr	r3, [r1, #16]
 8008d3e:	b973      	cbnz	r3, 8008d5e <_svfiprintf_r+0x36>
 8008d40:	2140      	movs	r1, #64	@ 0x40
 8008d42:	f7ff ff09 	bl	8008b58 <_malloc_r>
 8008d46:	6028      	str	r0, [r5, #0]
 8008d48:	6128      	str	r0, [r5, #16]
 8008d4a:	b930      	cbnz	r0, 8008d5a <_svfiprintf_r+0x32>
 8008d4c:	230c      	movs	r3, #12
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	b01d      	add	sp, #116	@ 0x74
 8008d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5a:	2340      	movs	r3, #64	@ 0x40
 8008d5c:	616b      	str	r3, [r5, #20]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d62:	2320      	movs	r3, #32
 8008d64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d6c:	2330      	movs	r3, #48	@ 0x30
 8008d6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f0c <_svfiprintf_r+0x1e4>
 8008d72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d76:	f04f 0901 	mov.w	r9, #1
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	469a      	mov	sl, r3
 8008d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d82:	b10a      	cbz	r2, 8008d88 <_svfiprintf_r+0x60>
 8008d84:	2a25      	cmp	r2, #37	@ 0x25
 8008d86:	d1f9      	bne.n	8008d7c <_svfiprintf_r+0x54>
 8008d88:	ebba 0b04 	subs.w	fp, sl, r4
 8008d8c:	d00b      	beq.n	8008da6 <_svfiprintf_r+0x7e>
 8008d8e:	465b      	mov	r3, fp
 8008d90:	4622      	mov	r2, r4
 8008d92:	4629      	mov	r1, r5
 8008d94:	4638      	mov	r0, r7
 8008d96:	f7ff ff6b 	bl	8008c70 <__ssputs_r>
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f000 80a7 	beq.w	8008eee <_svfiprintf_r+0x1c6>
 8008da0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008da2:	445a      	add	r2, fp
 8008da4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008da6:	f89a 3000 	ldrb.w	r3, [sl]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 809f 	beq.w	8008eee <_svfiprintf_r+0x1c6>
 8008db0:	2300      	movs	r3, #0
 8008db2:	f04f 32ff 	mov.w	r2, #4294967295
 8008db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dba:	f10a 0a01 	add.w	sl, sl, #1
 8008dbe:	9304      	str	r3, [sp, #16]
 8008dc0:	9307      	str	r3, [sp, #28]
 8008dc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dc8:	4654      	mov	r4, sl
 8008dca:	2205      	movs	r2, #5
 8008dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd0:	484e      	ldr	r0, [pc, #312]	@ (8008f0c <_svfiprintf_r+0x1e4>)
 8008dd2:	f7f7 f9fd 	bl	80001d0 <memchr>
 8008dd6:	9a04      	ldr	r2, [sp, #16]
 8008dd8:	b9d8      	cbnz	r0, 8008e12 <_svfiprintf_r+0xea>
 8008dda:	06d0      	lsls	r0, r2, #27
 8008ddc:	bf44      	itt	mi
 8008dde:	2320      	movmi	r3, #32
 8008de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008de4:	0711      	lsls	r1, r2, #28
 8008de6:	bf44      	itt	mi
 8008de8:	232b      	movmi	r3, #43	@ 0x2b
 8008dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dee:	f89a 3000 	ldrb.w	r3, [sl]
 8008df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008df4:	d015      	beq.n	8008e22 <_svfiprintf_r+0xfa>
 8008df6:	9a07      	ldr	r2, [sp, #28]
 8008df8:	4654      	mov	r4, sl
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	f04f 0c0a 	mov.w	ip, #10
 8008e00:	4621      	mov	r1, r4
 8008e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e06:	3b30      	subs	r3, #48	@ 0x30
 8008e08:	2b09      	cmp	r3, #9
 8008e0a:	d94b      	bls.n	8008ea4 <_svfiprintf_r+0x17c>
 8008e0c:	b1b0      	cbz	r0, 8008e3c <_svfiprintf_r+0x114>
 8008e0e:	9207      	str	r2, [sp, #28]
 8008e10:	e014      	b.n	8008e3c <_svfiprintf_r+0x114>
 8008e12:	eba0 0308 	sub.w	r3, r0, r8
 8008e16:	fa09 f303 	lsl.w	r3, r9, r3
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	46a2      	mov	sl, r4
 8008e20:	e7d2      	b.n	8008dc8 <_svfiprintf_r+0xa0>
 8008e22:	9b03      	ldr	r3, [sp, #12]
 8008e24:	1d19      	adds	r1, r3, #4
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	9103      	str	r1, [sp, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	bfbb      	ittet	lt
 8008e2e:	425b      	neglt	r3, r3
 8008e30:	f042 0202 	orrlt.w	r2, r2, #2
 8008e34:	9307      	strge	r3, [sp, #28]
 8008e36:	9307      	strlt	r3, [sp, #28]
 8008e38:	bfb8      	it	lt
 8008e3a:	9204      	strlt	r2, [sp, #16]
 8008e3c:	7823      	ldrb	r3, [r4, #0]
 8008e3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e40:	d10a      	bne.n	8008e58 <_svfiprintf_r+0x130>
 8008e42:	7863      	ldrb	r3, [r4, #1]
 8008e44:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e46:	d132      	bne.n	8008eae <_svfiprintf_r+0x186>
 8008e48:	9b03      	ldr	r3, [sp, #12]
 8008e4a:	1d1a      	adds	r2, r3, #4
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	9203      	str	r2, [sp, #12]
 8008e50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e54:	3402      	adds	r4, #2
 8008e56:	9305      	str	r3, [sp, #20]
 8008e58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f1c <_svfiprintf_r+0x1f4>
 8008e5c:	7821      	ldrb	r1, [r4, #0]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	4650      	mov	r0, sl
 8008e62:	f7f7 f9b5 	bl	80001d0 <memchr>
 8008e66:	b138      	cbz	r0, 8008e78 <_svfiprintf_r+0x150>
 8008e68:	9b04      	ldr	r3, [sp, #16]
 8008e6a:	eba0 000a 	sub.w	r0, r0, sl
 8008e6e:	2240      	movs	r2, #64	@ 0x40
 8008e70:	4082      	lsls	r2, r0
 8008e72:	4313      	orrs	r3, r2
 8008e74:	3401      	adds	r4, #1
 8008e76:	9304      	str	r3, [sp, #16]
 8008e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7c:	4824      	ldr	r0, [pc, #144]	@ (8008f10 <_svfiprintf_r+0x1e8>)
 8008e7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e82:	2206      	movs	r2, #6
 8008e84:	f7f7 f9a4 	bl	80001d0 <memchr>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d036      	beq.n	8008efa <_svfiprintf_r+0x1d2>
 8008e8c:	4b21      	ldr	r3, [pc, #132]	@ (8008f14 <_svfiprintf_r+0x1ec>)
 8008e8e:	bb1b      	cbnz	r3, 8008ed8 <_svfiprintf_r+0x1b0>
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	3307      	adds	r3, #7
 8008e94:	f023 0307 	bic.w	r3, r3, #7
 8008e98:	3308      	adds	r3, #8
 8008e9a:	9303      	str	r3, [sp, #12]
 8008e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e9e:	4433      	add	r3, r6
 8008ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea2:	e76a      	b.n	8008d7a <_svfiprintf_r+0x52>
 8008ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	2001      	movs	r0, #1
 8008eac:	e7a8      	b.n	8008e00 <_svfiprintf_r+0xd8>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	3401      	adds	r4, #1
 8008eb2:	9305      	str	r3, [sp, #20]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	f04f 0c0a 	mov.w	ip, #10
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ec0:	3a30      	subs	r2, #48	@ 0x30
 8008ec2:	2a09      	cmp	r2, #9
 8008ec4:	d903      	bls.n	8008ece <_svfiprintf_r+0x1a6>
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0c6      	beq.n	8008e58 <_svfiprintf_r+0x130>
 8008eca:	9105      	str	r1, [sp, #20]
 8008ecc:	e7c4      	b.n	8008e58 <_svfiprintf_r+0x130>
 8008ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e7f0      	b.n	8008eba <_svfiprintf_r+0x192>
 8008ed8:	ab03      	add	r3, sp, #12
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	462a      	mov	r2, r5
 8008ede:	4b0e      	ldr	r3, [pc, #56]	@ (8008f18 <_svfiprintf_r+0x1f0>)
 8008ee0:	a904      	add	r1, sp, #16
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f3af 8000 	nop.w
 8008ee8:	1c42      	adds	r2, r0, #1
 8008eea:	4606      	mov	r6, r0
 8008eec:	d1d6      	bne.n	8008e9c <_svfiprintf_r+0x174>
 8008eee:	89ab      	ldrh	r3, [r5, #12]
 8008ef0:	065b      	lsls	r3, r3, #25
 8008ef2:	f53f af2d 	bmi.w	8008d50 <_svfiprintf_r+0x28>
 8008ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ef8:	e72c      	b.n	8008d54 <_svfiprintf_r+0x2c>
 8008efa:	ab03      	add	r3, sp, #12
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	462a      	mov	r2, r5
 8008f00:	4b05      	ldr	r3, [pc, #20]	@ (8008f18 <_svfiprintf_r+0x1f0>)
 8008f02:	a904      	add	r1, sp, #16
 8008f04:	4638      	mov	r0, r7
 8008f06:	f000 f9bb 	bl	8009280 <_printf_i>
 8008f0a:	e7ed      	b.n	8008ee8 <_svfiprintf_r+0x1c0>
 8008f0c:	08009958 	.word	0x08009958
 8008f10:	08009962 	.word	0x08009962
 8008f14:	00000000 	.word	0x00000000
 8008f18:	08008c71 	.word	0x08008c71
 8008f1c:	0800995e 	.word	0x0800995e

08008f20 <__sfputc_r>:
 8008f20:	6893      	ldr	r3, [r2, #8]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	b410      	push	{r4}
 8008f28:	6093      	str	r3, [r2, #8]
 8008f2a:	da08      	bge.n	8008f3e <__sfputc_r+0x1e>
 8008f2c:	6994      	ldr	r4, [r2, #24]
 8008f2e:	42a3      	cmp	r3, r4
 8008f30:	db01      	blt.n	8008f36 <__sfputc_r+0x16>
 8008f32:	290a      	cmp	r1, #10
 8008f34:	d103      	bne.n	8008f3e <__sfputc_r+0x1e>
 8008f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f3a:	f7ff bc24 	b.w	8008786 <__swbuf_r>
 8008f3e:	6813      	ldr	r3, [r2, #0]
 8008f40:	1c58      	adds	r0, r3, #1
 8008f42:	6010      	str	r0, [r2, #0]
 8008f44:	7019      	strb	r1, [r3, #0]
 8008f46:	4608      	mov	r0, r1
 8008f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <__sfputs_r>:
 8008f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f50:	4606      	mov	r6, r0
 8008f52:	460f      	mov	r7, r1
 8008f54:	4614      	mov	r4, r2
 8008f56:	18d5      	adds	r5, r2, r3
 8008f58:	42ac      	cmp	r4, r5
 8008f5a:	d101      	bne.n	8008f60 <__sfputs_r+0x12>
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	e007      	b.n	8008f70 <__sfputs_r+0x22>
 8008f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f64:	463a      	mov	r2, r7
 8008f66:	4630      	mov	r0, r6
 8008f68:	f7ff ffda 	bl	8008f20 <__sfputc_r>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	d1f3      	bne.n	8008f58 <__sfputs_r+0xa>
 8008f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f74 <_vfiprintf_r>:
 8008f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f78:	460d      	mov	r5, r1
 8008f7a:	b09d      	sub	sp, #116	@ 0x74
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	4698      	mov	r8, r3
 8008f80:	4606      	mov	r6, r0
 8008f82:	b118      	cbz	r0, 8008f8c <_vfiprintf_r+0x18>
 8008f84:	6a03      	ldr	r3, [r0, #32]
 8008f86:	b90b      	cbnz	r3, 8008f8c <_vfiprintf_r+0x18>
 8008f88:	f7ff faf2 	bl	8008570 <__sinit>
 8008f8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f8e:	07d9      	lsls	r1, r3, #31
 8008f90:	d405      	bmi.n	8008f9e <_vfiprintf_r+0x2a>
 8008f92:	89ab      	ldrh	r3, [r5, #12]
 8008f94:	059a      	lsls	r2, r3, #22
 8008f96:	d402      	bmi.n	8008f9e <_vfiprintf_r+0x2a>
 8008f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f9a:	f7ff fd60 	bl	8008a5e <__retarget_lock_acquire_recursive>
 8008f9e:	89ab      	ldrh	r3, [r5, #12]
 8008fa0:	071b      	lsls	r3, r3, #28
 8008fa2:	d501      	bpl.n	8008fa8 <_vfiprintf_r+0x34>
 8008fa4:	692b      	ldr	r3, [r5, #16]
 8008fa6:	b99b      	cbnz	r3, 8008fd0 <_vfiprintf_r+0x5c>
 8008fa8:	4629      	mov	r1, r5
 8008faa:	4630      	mov	r0, r6
 8008fac:	f7ff fc2a 	bl	8008804 <__swsetup_r>
 8008fb0:	b170      	cbz	r0, 8008fd0 <_vfiprintf_r+0x5c>
 8008fb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fb4:	07dc      	lsls	r4, r3, #31
 8008fb6:	d504      	bpl.n	8008fc2 <_vfiprintf_r+0x4e>
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbc:	b01d      	add	sp, #116	@ 0x74
 8008fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc2:	89ab      	ldrh	r3, [r5, #12]
 8008fc4:	0598      	lsls	r0, r3, #22
 8008fc6:	d4f7      	bmi.n	8008fb8 <_vfiprintf_r+0x44>
 8008fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fca:	f7ff fd49 	bl	8008a60 <__retarget_lock_release_recursive>
 8008fce:	e7f3      	b.n	8008fb8 <_vfiprintf_r+0x44>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd4:	2320      	movs	r3, #32
 8008fd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fde:	2330      	movs	r3, #48	@ 0x30
 8008fe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009190 <_vfiprintf_r+0x21c>
 8008fe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fe8:	f04f 0901 	mov.w	r9, #1
 8008fec:	4623      	mov	r3, r4
 8008fee:	469a      	mov	sl, r3
 8008ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff4:	b10a      	cbz	r2, 8008ffa <_vfiprintf_r+0x86>
 8008ff6:	2a25      	cmp	r2, #37	@ 0x25
 8008ff8:	d1f9      	bne.n	8008fee <_vfiprintf_r+0x7a>
 8008ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8008ffe:	d00b      	beq.n	8009018 <_vfiprintf_r+0xa4>
 8009000:	465b      	mov	r3, fp
 8009002:	4622      	mov	r2, r4
 8009004:	4629      	mov	r1, r5
 8009006:	4630      	mov	r0, r6
 8009008:	f7ff ffa1 	bl	8008f4e <__sfputs_r>
 800900c:	3001      	adds	r0, #1
 800900e:	f000 80a7 	beq.w	8009160 <_vfiprintf_r+0x1ec>
 8009012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009014:	445a      	add	r2, fp
 8009016:	9209      	str	r2, [sp, #36]	@ 0x24
 8009018:	f89a 3000 	ldrb.w	r3, [sl]
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 809f 	beq.w	8009160 <_vfiprintf_r+0x1ec>
 8009022:	2300      	movs	r3, #0
 8009024:	f04f 32ff 	mov.w	r2, #4294967295
 8009028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800902c:	f10a 0a01 	add.w	sl, sl, #1
 8009030:	9304      	str	r3, [sp, #16]
 8009032:	9307      	str	r3, [sp, #28]
 8009034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009038:	931a      	str	r3, [sp, #104]	@ 0x68
 800903a:	4654      	mov	r4, sl
 800903c:	2205      	movs	r2, #5
 800903e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009042:	4853      	ldr	r0, [pc, #332]	@ (8009190 <_vfiprintf_r+0x21c>)
 8009044:	f7f7 f8c4 	bl	80001d0 <memchr>
 8009048:	9a04      	ldr	r2, [sp, #16]
 800904a:	b9d8      	cbnz	r0, 8009084 <_vfiprintf_r+0x110>
 800904c:	06d1      	lsls	r1, r2, #27
 800904e:	bf44      	itt	mi
 8009050:	2320      	movmi	r3, #32
 8009052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009056:	0713      	lsls	r3, r2, #28
 8009058:	bf44      	itt	mi
 800905a:	232b      	movmi	r3, #43	@ 0x2b
 800905c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009060:	f89a 3000 	ldrb.w	r3, [sl]
 8009064:	2b2a      	cmp	r3, #42	@ 0x2a
 8009066:	d015      	beq.n	8009094 <_vfiprintf_r+0x120>
 8009068:	9a07      	ldr	r2, [sp, #28]
 800906a:	4654      	mov	r4, sl
 800906c:	2000      	movs	r0, #0
 800906e:	f04f 0c0a 	mov.w	ip, #10
 8009072:	4621      	mov	r1, r4
 8009074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009078:	3b30      	subs	r3, #48	@ 0x30
 800907a:	2b09      	cmp	r3, #9
 800907c:	d94b      	bls.n	8009116 <_vfiprintf_r+0x1a2>
 800907e:	b1b0      	cbz	r0, 80090ae <_vfiprintf_r+0x13a>
 8009080:	9207      	str	r2, [sp, #28]
 8009082:	e014      	b.n	80090ae <_vfiprintf_r+0x13a>
 8009084:	eba0 0308 	sub.w	r3, r0, r8
 8009088:	fa09 f303 	lsl.w	r3, r9, r3
 800908c:	4313      	orrs	r3, r2
 800908e:	9304      	str	r3, [sp, #16]
 8009090:	46a2      	mov	sl, r4
 8009092:	e7d2      	b.n	800903a <_vfiprintf_r+0xc6>
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	1d19      	adds	r1, r3, #4
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	9103      	str	r1, [sp, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	bfbb      	ittet	lt
 80090a0:	425b      	neglt	r3, r3
 80090a2:	f042 0202 	orrlt.w	r2, r2, #2
 80090a6:	9307      	strge	r3, [sp, #28]
 80090a8:	9307      	strlt	r3, [sp, #28]
 80090aa:	bfb8      	it	lt
 80090ac:	9204      	strlt	r2, [sp, #16]
 80090ae:	7823      	ldrb	r3, [r4, #0]
 80090b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80090b2:	d10a      	bne.n	80090ca <_vfiprintf_r+0x156>
 80090b4:	7863      	ldrb	r3, [r4, #1]
 80090b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80090b8:	d132      	bne.n	8009120 <_vfiprintf_r+0x1ac>
 80090ba:	9b03      	ldr	r3, [sp, #12]
 80090bc:	1d1a      	adds	r2, r3, #4
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	9203      	str	r2, [sp, #12]
 80090c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090c6:	3402      	adds	r4, #2
 80090c8:	9305      	str	r3, [sp, #20]
 80090ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091a0 <_vfiprintf_r+0x22c>
 80090ce:	7821      	ldrb	r1, [r4, #0]
 80090d0:	2203      	movs	r2, #3
 80090d2:	4650      	mov	r0, sl
 80090d4:	f7f7 f87c 	bl	80001d0 <memchr>
 80090d8:	b138      	cbz	r0, 80090ea <_vfiprintf_r+0x176>
 80090da:	9b04      	ldr	r3, [sp, #16]
 80090dc:	eba0 000a 	sub.w	r0, r0, sl
 80090e0:	2240      	movs	r2, #64	@ 0x40
 80090e2:	4082      	lsls	r2, r0
 80090e4:	4313      	orrs	r3, r2
 80090e6:	3401      	adds	r4, #1
 80090e8:	9304      	str	r3, [sp, #16]
 80090ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ee:	4829      	ldr	r0, [pc, #164]	@ (8009194 <_vfiprintf_r+0x220>)
 80090f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090f4:	2206      	movs	r2, #6
 80090f6:	f7f7 f86b 	bl	80001d0 <memchr>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d03f      	beq.n	800917e <_vfiprintf_r+0x20a>
 80090fe:	4b26      	ldr	r3, [pc, #152]	@ (8009198 <_vfiprintf_r+0x224>)
 8009100:	bb1b      	cbnz	r3, 800914a <_vfiprintf_r+0x1d6>
 8009102:	9b03      	ldr	r3, [sp, #12]
 8009104:	3307      	adds	r3, #7
 8009106:	f023 0307 	bic.w	r3, r3, #7
 800910a:	3308      	adds	r3, #8
 800910c:	9303      	str	r3, [sp, #12]
 800910e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009110:	443b      	add	r3, r7
 8009112:	9309      	str	r3, [sp, #36]	@ 0x24
 8009114:	e76a      	b.n	8008fec <_vfiprintf_r+0x78>
 8009116:	fb0c 3202 	mla	r2, ip, r2, r3
 800911a:	460c      	mov	r4, r1
 800911c:	2001      	movs	r0, #1
 800911e:	e7a8      	b.n	8009072 <_vfiprintf_r+0xfe>
 8009120:	2300      	movs	r3, #0
 8009122:	3401      	adds	r4, #1
 8009124:	9305      	str	r3, [sp, #20]
 8009126:	4619      	mov	r1, r3
 8009128:	f04f 0c0a 	mov.w	ip, #10
 800912c:	4620      	mov	r0, r4
 800912e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009132:	3a30      	subs	r2, #48	@ 0x30
 8009134:	2a09      	cmp	r2, #9
 8009136:	d903      	bls.n	8009140 <_vfiprintf_r+0x1cc>
 8009138:	2b00      	cmp	r3, #0
 800913a:	d0c6      	beq.n	80090ca <_vfiprintf_r+0x156>
 800913c:	9105      	str	r1, [sp, #20]
 800913e:	e7c4      	b.n	80090ca <_vfiprintf_r+0x156>
 8009140:	fb0c 2101 	mla	r1, ip, r1, r2
 8009144:	4604      	mov	r4, r0
 8009146:	2301      	movs	r3, #1
 8009148:	e7f0      	b.n	800912c <_vfiprintf_r+0x1b8>
 800914a:	ab03      	add	r3, sp, #12
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	462a      	mov	r2, r5
 8009150:	4b12      	ldr	r3, [pc, #72]	@ (800919c <_vfiprintf_r+0x228>)
 8009152:	a904      	add	r1, sp, #16
 8009154:	4630      	mov	r0, r6
 8009156:	f3af 8000 	nop.w
 800915a:	4607      	mov	r7, r0
 800915c:	1c78      	adds	r0, r7, #1
 800915e:	d1d6      	bne.n	800910e <_vfiprintf_r+0x19a>
 8009160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009162:	07d9      	lsls	r1, r3, #31
 8009164:	d405      	bmi.n	8009172 <_vfiprintf_r+0x1fe>
 8009166:	89ab      	ldrh	r3, [r5, #12]
 8009168:	059a      	lsls	r2, r3, #22
 800916a:	d402      	bmi.n	8009172 <_vfiprintf_r+0x1fe>
 800916c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800916e:	f7ff fc77 	bl	8008a60 <__retarget_lock_release_recursive>
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	065b      	lsls	r3, r3, #25
 8009176:	f53f af1f 	bmi.w	8008fb8 <_vfiprintf_r+0x44>
 800917a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800917c:	e71e      	b.n	8008fbc <_vfiprintf_r+0x48>
 800917e:	ab03      	add	r3, sp, #12
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	462a      	mov	r2, r5
 8009184:	4b05      	ldr	r3, [pc, #20]	@ (800919c <_vfiprintf_r+0x228>)
 8009186:	a904      	add	r1, sp, #16
 8009188:	4630      	mov	r0, r6
 800918a:	f000 f879 	bl	8009280 <_printf_i>
 800918e:	e7e4      	b.n	800915a <_vfiprintf_r+0x1e6>
 8009190:	08009958 	.word	0x08009958
 8009194:	08009962 	.word	0x08009962
 8009198:	00000000 	.word	0x00000000
 800919c:	08008f4f 	.word	0x08008f4f
 80091a0:	0800995e 	.word	0x0800995e

080091a4 <_printf_common>:
 80091a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a8:	4616      	mov	r6, r2
 80091aa:	4698      	mov	r8, r3
 80091ac:	688a      	ldr	r2, [r1, #8]
 80091ae:	690b      	ldr	r3, [r1, #16]
 80091b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091b4:	4293      	cmp	r3, r2
 80091b6:	bfb8      	it	lt
 80091b8:	4613      	movlt	r3, r2
 80091ba:	6033      	str	r3, [r6, #0]
 80091bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091c0:	4607      	mov	r7, r0
 80091c2:	460c      	mov	r4, r1
 80091c4:	b10a      	cbz	r2, 80091ca <_printf_common+0x26>
 80091c6:	3301      	adds	r3, #1
 80091c8:	6033      	str	r3, [r6, #0]
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	0699      	lsls	r1, r3, #26
 80091ce:	bf42      	ittt	mi
 80091d0:	6833      	ldrmi	r3, [r6, #0]
 80091d2:	3302      	addmi	r3, #2
 80091d4:	6033      	strmi	r3, [r6, #0]
 80091d6:	6825      	ldr	r5, [r4, #0]
 80091d8:	f015 0506 	ands.w	r5, r5, #6
 80091dc:	d106      	bne.n	80091ec <_printf_common+0x48>
 80091de:	f104 0a19 	add.w	sl, r4, #25
 80091e2:	68e3      	ldr	r3, [r4, #12]
 80091e4:	6832      	ldr	r2, [r6, #0]
 80091e6:	1a9b      	subs	r3, r3, r2
 80091e8:	42ab      	cmp	r3, r5
 80091ea:	dc26      	bgt.n	800923a <_printf_common+0x96>
 80091ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091f0:	6822      	ldr	r2, [r4, #0]
 80091f2:	3b00      	subs	r3, #0
 80091f4:	bf18      	it	ne
 80091f6:	2301      	movne	r3, #1
 80091f8:	0692      	lsls	r2, r2, #26
 80091fa:	d42b      	bmi.n	8009254 <_printf_common+0xb0>
 80091fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009200:	4641      	mov	r1, r8
 8009202:	4638      	mov	r0, r7
 8009204:	47c8      	blx	r9
 8009206:	3001      	adds	r0, #1
 8009208:	d01e      	beq.n	8009248 <_printf_common+0xa4>
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	6922      	ldr	r2, [r4, #16]
 800920e:	f003 0306 	and.w	r3, r3, #6
 8009212:	2b04      	cmp	r3, #4
 8009214:	bf02      	ittt	eq
 8009216:	68e5      	ldreq	r5, [r4, #12]
 8009218:	6833      	ldreq	r3, [r6, #0]
 800921a:	1aed      	subeq	r5, r5, r3
 800921c:	68a3      	ldr	r3, [r4, #8]
 800921e:	bf0c      	ite	eq
 8009220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009224:	2500      	movne	r5, #0
 8009226:	4293      	cmp	r3, r2
 8009228:	bfc4      	itt	gt
 800922a:	1a9b      	subgt	r3, r3, r2
 800922c:	18ed      	addgt	r5, r5, r3
 800922e:	2600      	movs	r6, #0
 8009230:	341a      	adds	r4, #26
 8009232:	42b5      	cmp	r5, r6
 8009234:	d11a      	bne.n	800926c <_printf_common+0xc8>
 8009236:	2000      	movs	r0, #0
 8009238:	e008      	b.n	800924c <_printf_common+0xa8>
 800923a:	2301      	movs	r3, #1
 800923c:	4652      	mov	r2, sl
 800923e:	4641      	mov	r1, r8
 8009240:	4638      	mov	r0, r7
 8009242:	47c8      	blx	r9
 8009244:	3001      	adds	r0, #1
 8009246:	d103      	bne.n	8009250 <_printf_common+0xac>
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009250:	3501      	adds	r5, #1
 8009252:	e7c6      	b.n	80091e2 <_printf_common+0x3e>
 8009254:	18e1      	adds	r1, r4, r3
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	2030      	movs	r0, #48	@ 0x30
 800925a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800925e:	4422      	add	r2, r4
 8009260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009268:	3302      	adds	r3, #2
 800926a:	e7c7      	b.n	80091fc <_printf_common+0x58>
 800926c:	2301      	movs	r3, #1
 800926e:	4622      	mov	r2, r4
 8009270:	4641      	mov	r1, r8
 8009272:	4638      	mov	r0, r7
 8009274:	47c8      	blx	r9
 8009276:	3001      	adds	r0, #1
 8009278:	d0e6      	beq.n	8009248 <_printf_common+0xa4>
 800927a:	3601      	adds	r6, #1
 800927c:	e7d9      	b.n	8009232 <_printf_common+0x8e>
	...

08009280 <_printf_i>:
 8009280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009284:	7e0f      	ldrb	r7, [r1, #24]
 8009286:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009288:	2f78      	cmp	r7, #120	@ 0x78
 800928a:	4691      	mov	r9, r2
 800928c:	4680      	mov	r8, r0
 800928e:	460c      	mov	r4, r1
 8009290:	469a      	mov	sl, r3
 8009292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009296:	d807      	bhi.n	80092a8 <_printf_i+0x28>
 8009298:	2f62      	cmp	r7, #98	@ 0x62
 800929a:	d80a      	bhi.n	80092b2 <_printf_i+0x32>
 800929c:	2f00      	cmp	r7, #0
 800929e:	f000 80d1 	beq.w	8009444 <_printf_i+0x1c4>
 80092a2:	2f58      	cmp	r7, #88	@ 0x58
 80092a4:	f000 80b8 	beq.w	8009418 <_printf_i+0x198>
 80092a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092b0:	e03a      	b.n	8009328 <_printf_i+0xa8>
 80092b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092b6:	2b15      	cmp	r3, #21
 80092b8:	d8f6      	bhi.n	80092a8 <_printf_i+0x28>
 80092ba:	a101      	add	r1, pc, #4	@ (adr r1, 80092c0 <_printf_i+0x40>)
 80092bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092c0:	08009319 	.word	0x08009319
 80092c4:	0800932d 	.word	0x0800932d
 80092c8:	080092a9 	.word	0x080092a9
 80092cc:	080092a9 	.word	0x080092a9
 80092d0:	080092a9 	.word	0x080092a9
 80092d4:	080092a9 	.word	0x080092a9
 80092d8:	0800932d 	.word	0x0800932d
 80092dc:	080092a9 	.word	0x080092a9
 80092e0:	080092a9 	.word	0x080092a9
 80092e4:	080092a9 	.word	0x080092a9
 80092e8:	080092a9 	.word	0x080092a9
 80092ec:	0800942b 	.word	0x0800942b
 80092f0:	08009357 	.word	0x08009357
 80092f4:	080093e5 	.word	0x080093e5
 80092f8:	080092a9 	.word	0x080092a9
 80092fc:	080092a9 	.word	0x080092a9
 8009300:	0800944d 	.word	0x0800944d
 8009304:	080092a9 	.word	0x080092a9
 8009308:	08009357 	.word	0x08009357
 800930c:	080092a9 	.word	0x080092a9
 8009310:	080092a9 	.word	0x080092a9
 8009314:	080093ed 	.word	0x080093ed
 8009318:	6833      	ldr	r3, [r6, #0]
 800931a:	1d1a      	adds	r2, r3, #4
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6032      	str	r2, [r6, #0]
 8009320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009328:	2301      	movs	r3, #1
 800932a:	e09c      	b.n	8009466 <_printf_i+0x1e6>
 800932c:	6833      	ldr	r3, [r6, #0]
 800932e:	6820      	ldr	r0, [r4, #0]
 8009330:	1d19      	adds	r1, r3, #4
 8009332:	6031      	str	r1, [r6, #0]
 8009334:	0606      	lsls	r6, r0, #24
 8009336:	d501      	bpl.n	800933c <_printf_i+0xbc>
 8009338:	681d      	ldr	r5, [r3, #0]
 800933a:	e003      	b.n	8009344 <_printf_i+0xc4>
 800933c:	0645      	lsls	r5, r0, #25
 800933e:	d5fb      	bpl.n	8009338 <_printf_i+0xb8>
 8009340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009344:	2d00      	cmp	r5, #0
 8009346:	da03      	bge.n	8009350 <_printf_i+0xd0>
 8009348:	232d      	movs	r3, #45	@ 0x2d
 800934a:	426d      	negs	r5, r5
 800934c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009350:	4858      	ldr	r0, [pc, #352]	@ (80094b4 <_printf_i+0x234>)
 8009352:	230a      	movs	r3, #10
 8009354:	e011      	b.n	800937a <_printf_i+0xfa>
 8009356:	6821      	ldr	r1, [r4, #0]
 8009358:	6833      	ldr	r3, [r6, #0]
 800935a:	0608      	lsls	r0, r1, #24
 800935c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009360:	d402      	bmi.n	8009368 <_printf_i+0xe8>
 8009362:	0649      	lsls	r1, r1, #25
 8009364:	bf48      	it	mi
 8009366:	b2ad      	uxthmi	r5, r5
 8009368:	2f6f      	cmp	r7, #111	@ 0x6f
 800936a:	4852      	ldr	r0, [pc, #328]	@ (80094b4 <_printf_i+0x234>)
 800936c:	6033      	str	r3, [r6, #0]
 800936e:	bf14      	ite	ne
 8009370:	230a      	movne	r3, #10
 8009372:	2308      	moveq	r3, #8
 8009374:	2100      	movs	r1, #0
 8009376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800937a:	6866      	ldr	r6, [r4, #4]
 800937c:	60a6      	str	r6, [r4, #8]
 800937e:	2e00      	cmp	r6, #0
 8009380:	db05      	blt.n	800938e <_printf_i+0x10e>
 8009382:	6821      	ldr	r1, [r4, #0]
 8009384:	432e      	orrs	r6, r5
 8009386:	f021 0104 	bic.w	r1, r1, #4
 800938a:	6021      	str	r1, [r4, #0]
 800938c:	d04b      	beq.n	8009426 <_printf_i+0x1a6>
 800938e:	4616      	mov	r6, r2
 8009390:	fbb5 f1f3 	udiv	r1, r5, r3
 8009394:	fb03 5711 	mls	r7, r3, r1, r5
 8009398:	5dc7      	ldrb	r7, [r0, r7]
 800939a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800939e:	462f      	mov	r7, r5
 80093a0:	42bb      	cmp	r3, r7
 80093a2:	460d      	mov	r5, r1
 80093a4:	d9f4      	bls.n	8009390 <_printf_i+0x110>
 80093a6:	2b08      	cmp	r3, #8
 80093a8:	d10b      	bne.n	80093c2 <_printf_i+0x142>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	07df      	lsls	r7, r3, #31
 80093ae:	d508      	bpl.n	80093c2 <_printf_i+0x142>
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	6861      	ldr	r1, [r4, #4]
 80093b4:	4299      	cmp	r1, r3
 80093b6:	bfde      	ittt	le
 80093b8:	2330      	movle	r3, #48	@ 0x30
 80093ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093c2:	1b92      	subs	r2, r2, r6
 80093c4:	6122      	str	r2, [r4, #16]
 80093c6:	f8cd a000 	str.w	sl, [sp]
 80093ca:	464b      	mov	r3, r9
 80093cc:	aa03      	add	r2, sp, #12
 80093ce:	4621      	mov	r1, r4
 80093d0:	4640      	mov	r0, r8
 80093d2:	f7ff fee7 	bl	80091a4 <_printf_common>
 80093d6:	3001      	adds	r0, #1
 80093d8:	d14a      	bne.n	8009470 <_printf_i+0x1f0>
 80093da:	f04f 30ff 	mov.w	r0, #4294967295
 80093de:	b004      	add	sp, #16
 80093e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	f043 0320 	orr.w	r3, r3, #32
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	4832      	ldr	r0, [pc, #200]	@ (80094b8 <_printf_i+0x238>)
 80093ee:	2778      	movs	r7, #120	@ 0x78
 80093f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	6831      	ldr	r1, [r6, #0]
 80093f8:	061f      	lsls	r7, r3, #24
 80093fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80093fe:	d402      	bmi.n	8009406 <_printf_i+0x186>
 8009400:	065f      	lsls	r7, r3, #25
 8009402:	bf48      	it	mi
 8009404:	b2ad      	uxthmi	r5, r5
 8009406:	6031      	str	r1, [r6, #0]
 8009408:	07d9      	lsls	r1, r3, #31
 800940a:	bf44      	itt	mi
 800940c:	f043 0320 	orrmi.w	r3, r3, #32
 8009410:	6023      	strmi	r3, [r4, #0]
 8009412:	b11d      	cbz	r5, 800941c <_printf_i+0x19c>
 8009414:	2310      	movs	r3, #16
 8009416:	e7ad      	b.n	8009374 <_printf_i+0xf4>
 8009418:	4826      	ldr	r0, [pc, #152]	@ (80094b4 <_printf_i+0x234>)
 800941a:	e7e9      	b.n	80093f0 <_printf_i+0x170>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	f023 0320 	bic.w	r3, r3, #32
 8009422:	6023      	str	r3, [r4, #0]
 8009424:	e7f6      	b.n	8009414 <_printf_i+0x194>
 8009426:	4616      	mov	r6, r2
 8009428:	e7bd      	b.n	80093a6 <_printf_i+0x126>
 800942a:	6833      	ldr	r3, [r6, #0]
 800942c:	6825      	ldr	r5, [r4, #0]
 800942e:	6961      	ldr	r1, [r4, #20]
 8009430:	1d18      	adds	r0, r3, #4
 8009432:	6030      	str	r0, [r6, #0]
 8009434:	062e      	lsls	r6, r5, #24
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	d501      	bpl.n	800943e <_printf_i+0x1be>
 800943a:	6019      	str	r1, [r3, #0]
 800943c:	e002      	b.n	8009444 <_printf_i+0x1c4>
 800943e:	0668      	lsls	r0, r5, #25
 8009440:	d5fb      	bpl.n	800943a <_printf_i+0x1ba>
 8009442:	8019      	strh	r1, [r3, #0]
 8009444:	2300      	movs	r3, #0
 8009446:	6123      	str	r3, [r4, #16]
 8009448:	4616      	mov	r6, r2
 800944a:	e7bc      	b.n	80093c6 <_printf_i+0x146>
 800944c:	6833      	ldr	r3, [r6, #0]
 800944e:	1d1a      	adds	r2, r3, #4
 8009450:	6032      	str	r2, [r6, #0]
 8009452:	681e      	ldr	r6, [r3, #0]
 8009454:	6862      	ldr	r2, [r4, #4]
 8009456:	2100      	movs	r1, #0
 8009458:	4630      	mov	r0, r6
 800945a:	f7f6 feb9 	bl	80001d0 <memchr>
 800945e:	b108      	cbz	r0, 8009464 <_printf_i+0x1e4>
 8009460:	1b80      	subs	r0, r0, r6
 8009462:	6060      	str	r0, [r4, #4]
 8009464:	6863      	ldr	r3, [r4, #4]
 8009466:	6123      	str	r3, [r4, #16]
 8009468:	2300      	movs	r3, #0
 800946a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800946e:	e7aa      	b.n	80093c6 <_printf_i+0x146>
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	4632      	mov	r2, r6
 8009474:	4649      	mov	r1, r9
 8009476:	4640      	mov	r0, r8
 8009478:	47d0      	blx	sl
 800947a:	3001      	adds	r0, #1
 800947c:	d0ad      	beq.n	80093da <_printf_i+0x15a>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	079b      	lsls	r3, r3, #30
 8009482:	d413      	bmi.n	80094ac <_printf_i+0x22c>
 8009484:	68e0      	ldr	r0, [r4, #12]
 8009486:	9b03      	ldr	r3, [sp, #12]
 8009488:	4298      	cmp	r0, r3
 800948a:	bfb8      	it	lt
 800948c:	4618      	movlt	r0, r3
 800948e:	e7a6      	b.n	80093de <_printf_i+0x15e>
 8009490:	2301      	movs	r3, #1
 8009492:	4632      	mov	r2, r6
 8009494:	4649      	mov	r1, r9
 8009496:	4640      	mov	r0, r8
 8009498:	47d0      	blx	sl
 800949a:	3001      	adds	r0, #1
 800949c:	d09d      	beq.n	80093da <_printf_i+0x15a>
 800949e:	3501      	adds	r5, #1
 80094a0:	68e3      	ldr	r3, [r4, #12]
 80094a2:	9903      	ldr	r1, [sp, #12]
 80094a4:	1a5b      	subs	r3, r3, r1
 80094a6:	42ab      	cmp	r3, r5
 80094a8:	dcf2      	bgt.n	8009490 <_printf_i+0x210>
 80094aa:	e7eb      	b.n	8009484 <_printf_i+0x204>
 80094ac:	2500      	movs	r5, #0
 80094ae:	f104 0619 	add.w	r6, r4, #25
 80094b2:	e7f5      	b.n	80094a0 <_printf_i+0x220>
 80094b4:	08009969 	.word	0x08009969
 80094b8:	0800997a 	.word	0x0800997a

080094bc <__sflush_r>:
 80094bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c4:	0716      	lsls	r6, r2, #28
 80094c6:	4605      	mov	r5, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	d454      	bmi.n	8009576 <__sflush_r+0xba>
 80094cc:	684b      	ldr	r3, [r1, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	dc02      	bgt.n	80094d8 <__sflush_r+0x1c>
 80094d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	dd48      	ble.n	800956a <__sflush_r+0xae>
 80094d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094da:	2e00      	cmp	r6, #0
 80094dc:	d045      	beq.n	800956a <__sflush_r+0xae>
 80094de:	2300      	movs	r3, #0
 80094e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094e4:	682f      	ldr	r7, [r5, #0]
 80094e6:	6a21      	ldr	r1, [r4, #32]
 80094e8:	602b      	str	r3, [r5, #0]
 80094ea:	d030      	beq.n	800954e <__sflush_r+0x92>
 80094ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	0759      	lsls	r1, r3, #29
 80094f2:	d505      	bpl.n	8009500 <__sflush_r+0x44>
 80094f4:	6863      	ldr	r3, [r4, #4]
 80094f6:	1ad2      	subs	r2, r2, r3
 80094f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094fa:	b10b      	cbz	r3, 8009500 <__sflush_r+0x44>
 80094fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094fe:	1ad2      	subs	r2, r2, r3
 8009500:	2300      	movs	r3, #0
 8009502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009504:	6a21      	ldr	r1, [r4, #32]
 8009506:	4628      	mov	r0, r5
 8009508:	47b0      	blx	r6
 800950a:	1c43      	adds	r3, r0, #1
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	d106      	bne.n	800951e <__sflush_r+0x62>
 8009510:	6829      	ldr	r1, [r5, #0]
 8009512:	291d      	cmp	r1, #29
 8009514:	d82b      	bhi.n	800956e <__sflush_r+0xb2>
 8009516:	4a2a      	ldr	r2, [pc, #168]	@ (80095c0 <__sflush_r+0x104>)
 8009518:	40ca      	lsrs	r2, r1
 800951a:	07d6      	lsls	r6, r2, #31
 800951c:	d527      	bpl.n	800956e <__sflush_r+0xb2>
 800951e:	2200      	movs	r2, #0
 8009520:	6062      	str	r2, [r4, #4]
 8009522:	04d9      	lsls	r1, r3, #19
 8009524:	6922      	ldr	r2, [r4, #16]
 8009526:	6022      	str	r2, [r4, #0]
 8009528:	d504      	bpl.n	8009534 <__sflush_r+0x78>
 800952a:	1c42      	adds	r2, r0, #1
 800952c:	d101      	bne.n	8009532 <__sflush_r+0x76>
 800952e:	682b      	ldr	r3, [r5, #0]
 8009530:	b903      	cbnz	r3, 8009534 <__sflush_r+0x78>
 8009532:	6560      	str	r0, [r4, #84]	@ 0x54
 8009534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009536:	602f      	str	r7, [r5, #0]
 8009538:	b1b9      	cbz	r1, 800956a <__sflush_r+0xae>
 800953a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800953e:	4299      	cmp	r1, r3
 8009540:	d002      	beq.n	8009548 <__sflush_r+0x8c>
 8009542:	4628      	mov	r0, r5
 8009544:	f7ff fa9c 	bl	8008a80 <_free_r>
 8009548:	2300      	movs	r3, #0
 800954a:	6363      	str	r3, [r4, #52]	@ 0x34
 800954c:	e00d      	b.n	800956a <__sflush_r+0xae>
 800954e:	2301      	movs	r3, #1
 8009550:	4628      	mov	r0, r5
 8009552:	47b0      	blx	r6
 8009554:	4602      	mov	r2, r0
 8009556:	1c50      	adds	r0, r2, #1
 8009558:	d1c9      	bne.n	80094ee <__sflush_r+0x32>
 800955a:	682b      	ldr	r3, [r5, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d0c6      	beq.n	80094ee <__sflush_r+0x32>
 8009560:	2b1d      	cmp	r3, #29
 8009562:	d001      	beq.n	8009568 <__sflush_r+0xac>
 8009564:	2b16      	cmp	r3, #22
 8009566:	d11e      	bne.n	80095a6 <__sflush_r+0xea>
 8009568:	602f      	str	r7, [r5, #0]
 800956a:	2000      	movs	r0, #0
 800956c:	e022      	b.n	80095b4 <__sflush_r+0xf8>
 800956e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009572:	b21b      	sxth	r3, r3
 8009574:	e01b      	b.n	80095ae <__sflush_r+0xf2>
 8009576:	690f      	ldr	r7, [r1, #16]
 8009578:	2f00      	cmp	r7, #0
 800957a:	d0f6      	beq.n	800956a <__sflush_r+0xae>
 800957c:	0793      	lsls	r3, r2, #30
 800957e:	680e      	ldr	r6, [r1, #0]
 8009580:	bf08      	it	eq
 8009582:	694b      	ldreq	r3, [r1, #20]
 8009584:	600f      	str	r7, [r1, #0]
 8009586:	bf18      	it	ne
 8009588:	2300      	movne	r3, #0
 800958a:	eba6 0807 	sub.w	r8, r6, r7
 800958e:	608b      	str	r3, [r1, #8]
 8009590:	f1b8 0f00 	cmp.w	r8, #0
 8009594:	dde9      	ble.n	800956a <__sflush_r+0xae>
 8009596:	6a21      	ldr	r1, [r4, #32]
 8009598:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800959a:	4643      	mov	r3, r8
 800959c:	463a      	mov	r2, r7
 800959e:	4628      	mov	r0, r5
 80095a0:	47b0      	blx	r6
 80095a2:	2800      	cmp	r0, #0
 80095a4:	dc08      	bgt.n	80095b8 <__sflush_r+0xfc>
 80095a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	f04f 30ff 	mov.w	r0, #4294967295
 80095b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b8:	4407      	add	r7, r0
 80095ba:	eba8 0800 	sub.w	r8, r8, r0
 80095be:	e7e7      	b.n	8009590 <__sflush_r+0xd4>
 80095c0:	20400001 	.word	0x20400001

080095c4 <_fflush_r>:
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	690b      	ldr	r3, [r1, #16]
 80095c8:	4605      	mov	r5, r0
 80095ca:	460c      	mov	r4, r1
 80095cc:	b913      	cbnz	r3, 80095d4 <_fflush_r+0x10>
 80095ce:	2500      	movs	r5, #0
 80095d0:	4628      	mov	r0, r5
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	b118      	cbz	r0, 80095de <_fflush_r+0x1a>
 80095d6:	6a03      	ldr	r3, [r0, #32]
 80095d8:	b90b      	cbnz	r3, 80095de <_fflush_r+0x1a>
 80095da:	f7fe ffc9 	bl	8008570 <__sinit>
 80095de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0f3      	beq.n	80095ce <_fflush_r+0xa>
 80095e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095e8:	07d0      	lsls	r0, r2, #31
 80095ea:	d404      	bmi.n	80095f6 <_fflush_r+0x32>
 80095ec:	0599      	lsls	r1, r3, #22
 80095ee:	d402      	bmi.n	80095f6 <_fflush_r+0x32>
 80095f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095f2:	f7ff fa34 	bl	8008a5e <__retarget_lock_acquire_recursive>
 80095f6:	4628      	mov	r0, r5
 80095f8:	4621      	mov	r1, r4
 80095fa:	f7ff ff5f 	bl	80094bc <__sflush_r>
 80095fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009600:	07da      	lsls	r2, r3, #31
 8009602:	4605      	mov	r5, r0
 8009604:	d4e4      	bmi.n	80095d0 <_fflush_r+0xc>
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	059b      	lsls	r3, r3, #22
 800960a:	d4e1      	bmi.n	80095d0 <_fflush_r+0xc>
 800960c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800960e:	f7ff fa27 	bl	8008a60 <__retarget_lock_release_recursive>
 8009612:	e7dd      	b.n	80095d0 <_fflush_r+0xc>

08009614 <__swhatbuf_r>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	460c      	mov	r4, r1
 8009618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800961c:	2900      	cmp	r1, #0
 800961e:	b096      	sub	sp, #88	@ 0x58
 8009620:	4615      	mov	r5, r2
 8009622:	461e      	mov	r6, r3
 8009624:	da0d      	bge.n	8009642 <__swhatbuf_r+0x2e>
 8009626:	89a3      	ldrh	r3, [r4, #12]
 8009628:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800962c:	f04f 0100 	mov.w	r1, #0
 8009630:	bf14      	ite	ne
 8009632:	2340      	movne	r3, #64	@ 0x40
 8009634:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009638:	2000      	movs	r0, #0
 800963a:	6031      	str	r1, [r6, #0]
 800963c:	602b      	str	r3, [r5, #0]
 800963e:	b016      	add	sp, #88	@ 0x58
 8009640:	bd70      	pop	{r4, r5, r6, pc}
 8009642:	466a      	mov	r2, sp
 8009644:	f000 f862 	bl	800970c <_fstat_r>
 8009648:	2800      	cmp	r0, #0
 800964a:	dbec      	blt.n	8009626 <__swhatbuf_r+0x12>
 800964c:	9901      	ldr	r1, [sp, #4]
 800964e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009652:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009656:	4259      	negs	r1, r3
 8009658:	4159      	adcs	r1, r3
 800965a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800965e:	e7eb      	b.n	8009638 <__swhatbuf_r+0x24>

08009660 <__smakebuf_r>:
 8009660:	898b      	ldrh	r3, [r1, #12]
 8009662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009664:	079d      	lsls	r5, r3, #30
 8009666:	4606      	mov	r6, r0
 8009668:	460c      	mov	r4, r1
 800966a:	d507      	bpl.n	800967c <__smakebuf_r+0x1c>
 800966c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	6123      	str	r3, [r4, #16]
 8009674:	2301      	movs	r3, #1
 8009676:	6163      	str	r3, [r4, #20]
 8009678:	b003      	add	sp, #12
 800967a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800967c:	ab01      	add	r3, sp, #4
 800967e:	466a      	mov	r2, sp
 8009680:	f7ff ffc8 	bl	8009614 <__swhatbuf_r>
 8009684:	9f00      	ldr	r7, [sp, #0]
 8009686:	4605      	mov	r5, r0
 8009688:	4639      	mov	r1, r7
 800968a:	4630      	mov	r0, r6
 800968c:	f7ff fa64 	bl	8008b58 <_malloc_r>
 8009690:	b948      	cbnz	r0, 80096a6 <__smakebuf_r+0x46>
 8009692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009696:	059a      	lsls	r2, r3, #22
 8009698:	d4ee      	bmi.n	8009678 <__smakebuf_r+0x18>
 800969a:	f023 0303 	bic.w	r3, r3, #3
 800969e:	f043 0302 	orr.w	r3, r3, #2
 80096a2:	81a3      	strh	r3, [r4, #12]
 80096a4:	e7e2      	b.n	800966c <__smakebuf_r+0xc>
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	6020      	str	r0, [r4, #0]
 80096aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ae:	81a3      	strh	r3, [r4, #12]
 80096b0:	9b01      	ldr	r3, [sp, #4]
 80096b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096b6:	b15b      	cbz	r3, 80096d0 <__smakebuf_r+0x70>
 80096b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096bc:	4630      	mov	r0, r6
 80096be:	f000 f837 	bl	8009730 <_isatty_r>
 80096c2:	b128      	cbz	r0, 80096d0 <__smakebuf_r+0x70>
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	f023 0303 	bic.w	r3, r3, #3
 80096ca:	f043 0301 	orr.w	r3, r3, #1
 80096ce:	81a3      	strh	r3, [r4, #12]
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	431d      	orrs	r5, r3
 80096d4:	81a5      	strh	r5, [r4, #12]
 80096d6:	e7cf      	b.n	8009678 <__smakebuf_r+0x18>

080096d8 <memmove>:
 80096d8:	4288      	cmp	r0, r1
 80096da:	b510      	push	{r4, lr}
 80096dc:	eb01 0402 	add.w	r4, r1, r2
 80096e0:	d902      	bls.n	80096e8 <memmove+0x10>
 80096e2:	4284      	cmp	r4, r0
 80096e4:	4623      	mov	r3, r4
 80096e6:	d807      	bhi.n	80096f8 <memmove+0x20>
 80096e8:	1e43      	subs	r3, r0, #1
 80096ea:	42a1      	cmp	r1, r4
 80096ec:	d008      	beq.n	8009700 <memmove+0x28>
 80096ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096f6:	e7f8      	b.n	80096ea <memmove+0x12>
 80096f8:	4402      	add	r2, r0
 80096fa:	4601      	mov	r1, r0
 80096fc:	428a      	cmp	r2, r1
 80096fe:	d100      	bne.n	8009702 <memmove+0x2a>
 8009700:	bd10      	pop	{r4, pc}
 8009702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800970a:	e7f7      	b.n	80096fc <memmove+0x24>

0800970c <_fstat_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	4d07      	ldr	r5, [pc, #28]	@ (800972c <_fstat_r+0x20>)
 8009710:	2300      	movs	r3, #0
 8009712:	4604      	mov	r4, r0
 8009714:	4608      	mov	r0, r1
 8009716:	4611      	mov	r1, r2
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	f7f8 fe2c 	bl	8002376 <_fstat>
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	d102      	bne.n	8009728 <_fstat_r+0x1c>
 8009722:	682b      	ldr	r3, [r5, #0]
 8009724:	b103      	cbz	r3, 8009728 <_fstat_r+0x1c>
 8009726:	6023      	str	r3, [r4, #0]
 8009728:	bd38      	pop	{r3, r4, r5, pc}
 800972a:	bf00      	nop
 800972c:	20006194 	.word	0x20006194

08009730 <_isatty_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d06      	ldr	r5, [pc, #24]	@ (800974c <_isatty_r+0x1c>)
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	602b      	str	r3, [r5, #0]
 800973c:	f7f8 fe2b 	bl	8002396 <_isatty>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	d102      	bne.n	800974a <_isatty_r+0x1a>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	b103      	cbz	r3, 800974a <_isatty_r+0x1a>
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	bd38      	pop	{r3, r4, r5, pc}
 800974c:	20006194 	.word	0x20006194

08009750 <_sbrk_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4d06      	ldr	r5, [pc, #24]	@ (800976c <_sbrk_r+0x1c>)
 8009754:	2300      	movs	r3, #0
 8009756:	4604      	mov	r4, r0
 8009758:	4608      	mov	r0, r1
 800975a:	602b      	str	r3, [r5, #0]
 800975c:	f7f8 fe34 	bl	80023c8 <_sbrk>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d102      	bne.n	800976a <_sbrk_r+0x1a>
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	b103      	cbz	r3, 800976a <_sbrk_r+0x1a>
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	20006194 	.word	0x20006194

08009770 <_realloc_r>:
 8009770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009774:	4607      	mov	r7, r0
 8009776:	4614      	mov	r4, r2
 8009778:	460d      	mov	r5, r1
 800977a:	b921      	cbnz	r1, 8009786 <_realloc_r+0x16>
 800977c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009780:	4611      	mov	r1, r2
 8009782:	f7ff b9e9 	b.w	8008b58 <_malloc_r>
 8009786:	b92a      	cbnz	r2, 8009794 <_realloc_r+0x24>
 8009788:	f7ff f97a 	bl	8008a80 <_free_r>
 800978c:	4625      	mov	r5, r4
 800978e:	4628      	mov	r0, r5
 8009790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009794:	f000 f81a 	bl	80097cc <_malloc_usable_size_r>
 8009798:	4284      	cmp	r4, r0
 800979a:	4606      	mov	r6, r0
 800979c:	d802      	bhi.n	80097a4 <_realloc_r+0x34>
 800979e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097a2:	d8f4      	bhi.n	800978e <_realloc_r+0x1e>
 80097a4:	4621      	mov	r1, r4
 80097a6:	4638      	mov	r0, r7
 80097a8:	f7ff f9d6 	bl	8008b58 <_malloc_r>
 80097ac:	4680      	mov	r8, r0
 80097ae:	b908      	cbnz	r0, 80097b4 <_realloc_r+0x44>
 80097b0:	4645      	mov	r5, r8
 80097b2:	e7ec      	b.n	800978e <_realloc_r+0x1e>
 80097b4:	42b4      	cmp	r4, r6
 80097b6:	4622      	mov	r2, r4
 80097b8:	4629      	mov	r1, r5
 80097ba:	bf28      	it	cs
 80097bc:	4632      	movcs	r2, r6
 80097be:	f7ff f950 	bl	8008a62 <memcpy>
 80097c2:	4629      	mov	r1, r5
 80097c4:	4638      	mov	r0, r7
 80097c6:	f7ff f95b 	bl	8008a80 <_free_r>
 80097ca:	e7f1      	b.n	80097b0 <_realloc_r+0x40>

080097cc <_malloc_usable_size_r>:
 80097cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097d0:	1f18      	subs	r0, r3, #4
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	bfbc      	itt	lt
 80097d6:	580b      	ldrlt	r3, [r1, r0]
 80097d8:	18c0      	addlt	r0, r0, r3
 80097da:	4770      	bx	lr

080097dc <_init>:
 80097dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097de:	bf00      	nop
 80097e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097e2:	bc08      	pop	{r3}
 80097e4:	469e      	mov	lr, r3
 80097e6:	4770      	bx	lr

080097e8 <_fini>:
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ea:	bf00      	nop
 80097ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ee:	bc08      	pop	{r3}
 80097f0:	469e      	mov	lr, r3
 80097f2:	4770      	bx	lr
