
DShot600_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08008c80  08008c80  00009c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e1c  08008e1c  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008e1c  08008e1c  00009e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e24  08008e24  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e24  08008e24  00009e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e28  08008e28  00009e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008e2c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          00006158  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200061c4  200061c4  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a077  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003759  00000000  00000000  00024113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  00027870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000113e  00000000  00000000  00028e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000441e  00000000  00000000  00029fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ca1  00000000  00000000  0002e3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd5c6  00000000  00000000  0004607d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113643  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006380  00000000  00000000  00113688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00119a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c68 	.word	0x08008c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008c68 	.word	0x08008c68

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f001 f9b2 	bl	8001868 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8000504:	f000 fd1a 	bl	8000f3c <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f842 	bl	8000590 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f986 	bl	800081c <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 f94c 	bl	80007ac <MX_DMA_Init>
  MX_TIM5_Init();
 8000514:	f000 f8a6 	bl	8000664 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8000518:	f000 f91e 	bl	8000758 <MX_USART6_UART_Init>
  /* Create the thread(s) */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f004 feec 	bl	80052f8 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  serialQueueHandle = osMessageQueueNew(SERIAL_QUEUE_LENGTH, sizeof(SerialMessage_t), NULL);  /* add queues, ... */
 8000520:	2200      	movs	r2, #0
 8000522:	2184      	movs	r1, #132	@ 0x84
 8000524:	200a      	movs	r0, #10
 8000526:	f004 ffde 	bl	80054e6 <osMessageQueueNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a0e      	ldr	r2, [pc, #56]	@ (8000568 <main+0x6c>)
 800052e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000530:	4a0e      	ldr	r2, [pc, #56]	@ (800056c <main+0x70>)
 8000532:	2100      	movs	r1, #0
 8000534:	480e      	ldr	r0, [pc, #56]	@ (8000570 <main+0x74>)
 8000536:	f004 ff29 	bl	800538c <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <main+0x78>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of DShotTask_1 */
  DShotTask_1Handle = osThreadNew(DShotTask, NULL, &DShotTask_1_attributes);
 8000540:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <main+0x7c>)
 8000542:	2100      	movs	r1, #0
 8000544:	480d      	ldr	r0, [pc, #52]	@ (800057c <main+0x80>)
 8000546:	f004 ff21 	bl	800538c <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a0c      	ldr	r2, [pc, #48]	@ (8000580 <main+0x84>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of SerialTask */
  SerialTaskHandle = osThreadNew(StartSerialTask, NULL, &SerialTask_attributes);
 8000550:	4a0c      	ldr	r2, [pc, #48]	@ (8000584 <main+0x88>)
 8000552:	2100      	movs	r1, #0
 8000554:	480c      	ldr	r0, [pc, #48]	@ (8000588 <main+0x8c>)
 8000556:	f004 ff19 	bl	800538c <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a0b      	ldr	r2, [pc, #44]	@ (800058c <main+0x90>)
 800055e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000560:	f004 feee 	bl	8005340 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <main+0x68>
 8000568:	2000041c 	.word	0x2000041c
 800056c:	08008d90 	.word	0x08008d90
 8000570:	08001011 	.word	0x08001011
 8000574:	20000298 	.word	0x20000298
 8000578:	08008db4 	.word	0x08008db4
 800057c:	08001021 	.word	0x08001021
 8000580:	2000029c 	.word	0x2000029c
 8000584:	08008dd8 	.word	0x08008dd8
 8000588:	0800115d 	.word	0x0800115d
 800058c:	200002a0 	.word	0x200002a0

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	@ 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f008 f842 	bl	8008628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	@ (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	@ (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	@ (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	@ (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000604:	23a8      	movs	r3, #168	@ 0xa8
 8000606:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f001 ffb5 	bl	8002584 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000620:	f000 fdd0 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000630:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2105      	movs	r1, #5
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fa16 	bl	8002a74 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800064e:	f000 fdb9 	bl	80011c4 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	@ 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000686:	4b32      	ldr	r3, [pc, #200]	@ (8000750 <MX_TIM5_Init+0xec>)
 8000688:	4a32      	ldr	r2, [pc, #200]	@ (8000754 <MX_TIM5_Init+0xf0>)
 800068a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800068c:	4b30      	ldr	r3, [pc, #192]	@ (8000750 <MX_TIM5_Init+0xec>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	4b2f      	ldr	r3, [pc, #188]	@ (8000750 <MX_TIM5_Init+0xec>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 139;
 8000698:	4b2d      	ldr	r3, [pc, #180]	@ (8000750 <MX_TIM5_Init+0xec>)
 800069a:	228b      	movs	r2, #139	@ 0x8b
 800069c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069e:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <MX_TIM5_Init+0xec>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000750 <MX_TIM5_Init+0xec>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80006aa:	4829      	ldr	r0, [pc, #164]	@ (8000750 <MX_TIM5_Init+0xec>)
 80006ac:	f002 fcbe 	bl	800302c <HAL_TIM_PWM_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80006b6:	f000 fd85 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4619      	mov	r1, r3
 80006c8:	4821      	ldr	r0, [pc, #132]	@ (8000750 <MX_TIM5_Init+0xec>)
 80006ca:	f004 f935 	bl	8004938 <HAL_TIMEx_MasterConfigSynchronization>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80006d4:	f000 fd76 	bl	80011c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d8:	2360      	movs	r3, #96	@ 0x60
 80006da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	4619      	mov	r1, r3
 80006ee:	4818      	ldr	r0, [pc, #96]	@ (8000750 <MX_TIM5_Init+0xec>)
 80006f0:	f003 fb14 	bl	8003d1c <HAL_TIM_PWM_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80006fa:	f000 fd63 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2204      	movs	r2, #4
 8000702:	4619      	mov	r1, r3
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <MX_TIM5_Init+0xec>)
 8000706:	f003 fb09 	bl	8003d1c <HAL_TIM_PWM_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000710:	f000 fd58 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2208      	movs	r2, #8
 8000718:	4619      	mov	r1, r3
 800071a:	480d      	ldr	r0, [pc, #52]	@ (8000750 <MX_TIM5_Init+0xec>)
 800071c:	f003 fafe 	bl	8003d1c <HAL_TIM_PWM_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 8000726:	f000 fd4d 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	220c      	movs	r2, #12
 800072e:	4619      	mov	r1, r3
 8000730:	4807      	ldr	r0, [pc, #28]	@ (8000750 <MX_TIM5_Init+0xec>)
 8000732:	f003 faf3 	bl	8003d1c <HAL_TIM_PWM_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 800073c:	f000 fd42 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000740:	4803      	ldr	r0, [pc, #12]	@ (8000750 <MX_TIM5_Init+0xec>)
 8000742:	f000 fe71 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	@ 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000088 	.word	0x20000088
 8000754:	40000c00 	.word	0x40000c00

08000758 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_USART6_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <MX_USART6_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <MX_USART6_UART_Init+0x4c>)
 8000764:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000768:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_USART6_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_USART6_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_USART6_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_USART6_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_USART6_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_USART6_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_USART6_UART_Init+0x4c>)
 8000790:	f004 f962 	bl	8004a58 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 fd13 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000250 	.word	0x20000250
 80007a8:	40011400 	.word	0x40011400

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2105      	movs	r1, #5
 80007d2:	200b      	movs	r0, #11
 80007d4:	f001 f942 	bl	8001a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80007d8:	200b      	movs	r0, #11
 80007da:	f001 f95b 	bl	8001a94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2105      	movs	r1, #5
 80007e2:	200c      	movs	r0, #12
 80007e4:	f001 f93a 	bl	8001a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007e8:	200c      	movs	r0, #12
 80007ea:	f001 f953 	bl	8001a94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2105      	movs	r1, #5
 80007f2:	200d      	movs	r0, #13
 80007f4:	f001 f932 	bl	8001a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80007f8:	200d      	movs	r0, #13
 80007fa:	f001 f94b 	bl	8001a94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2105      	movs	r1, #5
 8000802:	200f      	movs	r0, #15
 8000804:	f001 f92a 	bl	8001a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000808:	200f      	movs	r0, #15
 800080a:	f001 f943 	bl	8001a94 <HAL_NVIC_EnableIRQ>

}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a16      	ldr	r2, [pc, #88]	@ (8000884 <MX_GPIO_Init+0x68>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a0f      	ldr	r2, [pc, #60]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_GPIO_Init+0x68>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <start_telemetry_capture>:
    }

    return (captured_bits == 20) ? 0 : -3;  // return 0 if 20 bits decoded
}

void start_telemetry_capture(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 800088e:	2100      	movs	r1, #0
 8000890:	485c      	ldr	r0, [pc, #368]	@ (8000a04 <start_telemetry_capture+0x17c>)
 8000892:	f002 fc1b 	bl	80030cc <HAL_TIM_PWM_Stop>
    HAL_DMA_DeInit(&hdma_tim5_ch1);
 8000896:	485c      	ldr	r0, [pc, #368]	@ (8000a08 <start_telemetry_capture+0x180>)
 8000898:	f001 f9b8 	bl	8001c0c <HAL_DMA_DeInit>

    htim5.Init.Prescaler = 0;
 800089c:	4b59      	ldr	r3, [pc, #356]	@ (8000a04 <start_telemetry_capture+0x17c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b58      	ldr	r3, [pc, #352]	@ (8000a04 <start_telemetry_capture+0x17c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = 0xFFFFFFFF;
 80008a8:	4b56      	ldr	r3, [pc, #344]	@ (8000a04 <start_telemetry_capture+0x17c>)
 80008aa:	f04f 32ff 	mov.w	r2, #4294967295
 80008ae:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b54      	ldr	r3, [pc, #336]	@ (8000a04 <start_telemetry_capture+0x17c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b53      	ldr	r3, [pc, #332]	@ (8000a04 <start_telemetry_capture+0x17c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_IC_Init(&htim5) != HAL_OK) {
 80008bc:	4851      	ldr	r0, [pc, #324]	@ (8000a04 <start_telemetry_capture+0x17c>)
 80008be:	f002 fe3d 	bl	800353c <HAL_TIM_IC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d007      	beq.n	80008d8 <start_telemetry_capture+0x50>
        HAL_UART_Transmit(&huart6, (uint8_t*)"IC init failed\r\n", 16, 100);
 80008c8:	2364      	movs	r3, #100	@ 0x64
 80008ca:	2210      	movs	r2, #16
 80008cc:	494f      	ldr	r1, [pc, #316]	@ (8000a0c <start_telemetry_capture+0x184>)
 80008ce:	4850      	ldr	r0, [pc, #320]	@ (8000a10 <start_telemetry_capture+0x188>)
 80008d0:	f004 f912 	bl	8004af8 <HAL_UART_Transmit>
        Error_Handler();
 80008d4:	f000 fc76 	bl	80011c4 <Error_Handler>
    }

    htim5.Instance->CNT = 0;
 80008d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000a04 <start_telemetry_capture+0x17c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	@ 0x24

    TIM_IC_InitTypeDef sConfigIC = {0};
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80008ee:	230a      	movs	r3, #10
 80008f0:	60bb      	str	r3, [r7, #8]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008f2:	2301      	movs	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
    sConfigIC.ICFilter = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	2200      	movs	r2, #0
 8000904:	4619      	mov	r1, r3
 8000906:	483f      	ldr	r0, [pc, #252]	@ (8000a04 <start_telemetry_capture+0x17c>)
 8000908:	f003 f96c 	bl	8003be4 <HAL_TIM_IC_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d007      	beq.n	8000922 <start_telemetry_capture+0x9a>
        HAL_UART_Transmit(&huart6, (uint8_t*)"IC config failed\r\n", 18, 100);
 8000912:	2364      	movs	r3, #100	@ 0x64
 8000914:	2212      	movs	r2, #18
 8000916:	493f      	ldr	r1, [pc, #252]	@ (8000a14 <start_telemetry_capture+0x18c>)
 8000918:	483d      	ldr	r0, [pc, #244]	@ (8000a10 <start_telemetry_capture+0x188>)
 800091a:	f004 f8ed 	bl	8004af8 <HAL_UART_Transmit>
        Error_Handler();
 800091e:	f000 fc51 	bl	80011c4 <Error_Handler>
    }

    __HAL_RCC_DMA1_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b3c      	ldr	r3, [pc, #240]	@ (8000a18 <start_telemetry_capture+0x190>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a3b      	ldr	r2, [pc, #236]	@ (8000a18 <start_telemetry_capture+0x190>)
 800092c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b39      	ldr	r3, [pc, #228]	@ (8000a18 <start_telemetry_capture+0x190>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 800093e:	4b32      	ldr	r3, [pc, #200]	@ (8000a08 <start_telemetry_capture+0x180>)
 8000940:	4a36      	ldr	r2, [pc, #216]	@ (8000a1c <start_telemetry_capture+0x194>)
 8000942:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8000944:	4b30      	ldr	r3, [pc, #192]	@ (8000a08 <start_telemetry_capture+0x180>)
 8000946:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800094a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a08 <start_telemetry_capture+0x180>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <start_telemetry_capture+0x180>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b2b      	ldr	r3, [pc, #172]	@ (8000a08 <start_telemetry_capture+0x180>)
 800095a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800095e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000960:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <start_telemetry_capture+0x180>)
 8000962:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000966:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000968:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <start_telemetry_capture+0x180>)
 800096a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800096e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8000970:	4b25      	ldr	r3, [pc, #148]	@ (8000a08 <start_telemetry_capture+0x180>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000976:	4b24      	ldr	r3, [pc, #144]	@ (8000a08 <start_telemetry_capture+0x180>)
 8000978:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800097c:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800097e:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <start_telemetry_capture+0x180>)
 8000980:	2204      	movs	r2, #4
 8000982:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000984:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <start_telemetry_capture+0x180>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 800098a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <start_telemetry_capture+0x180>)
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000990:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <start_telemetry_capture+0x180>)
 8000992:	2200      	movs	r2, #0
 8000994:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK) {
 8000996:	481c      	ldr	r0, [pc, #112]	@ (8000a08 <start_telemetry_capture+0x180>)
 8000998:	f001 f88a 	bl	8001ab0 <HAL_DMA_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d007      	beq.n	80009b2 <start_telemetry_capture+0x12a>
        HAL_UART_Transmit(&huart6, (uint8_t*)"DMA init failed\r\n", 17, 100);
 80009a2:	2364      	movs	r3, #100	@ 0x64
 80009a4:	2211      	movs	r2, #17
 80009a6:	491e      	ldr	r1, [pc, #120]	@ (8000a20 <start_telemetry_capture+0x198>)
 80009a8:	4819      	ldr	r0, [pc, #100]	@ (8000a10 <start_telemetry_capture+0x188>)
 80009aa:	f004 f8a5 	bl	8004af8 <HAL_UART_Transmit>
        Error_Handler();
 80009ae:	f000 fc09 	bl	80011c4 <Error_Handler>
    }
    __HAL_LINKDMA(&htim5, hdma[TIM_DMA_ID_CC1], hdma_tim5_ch1);
 80009b2:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <start_telemetry_capture+0x17c>)
 80009b4:	4a14      	ldr	r2, [pc, #80]	@ (8000a08 <start_telemetry_capture+0x180>)
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80009b8:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <start_telemetry_capture+0x180>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <start_telemetry_capture+0x17c>)
 80009bc:	639a      	str	r2, [r3, #56]	@ 0x38

    HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2105      	movs	r1, #5
 80009c2:	200d      	movs	r0, #13
 80009c4:	f001 f84a 	bl	8001a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80009c8:	200d      	movs	r0, #13
 80009ca:	f001 f863 	bl	8001a94 <HAL_NVIC_EnableIRQ>

    memset(telemetry_buffer, 0, sizeof(telemetry_buffer));
 80009ce:	2202      	movs	r2, #2
 80009d0:	2100      	movs	r1, #0
 80009d2:	4814      	ldr	r0, [pc, #80]	@ (8000a24 <start_telemetry_capture+0x19c>)
 80009d4:	f007 fe28 	bl	8008628 <memset>

    if (HAL_TIM_IC_Start_DMA(&htim5, TIM_CHANNEL_1, telemetry_buffer_ch1, TELEMETRY_BUFFER_SIZE) != HAL_OK) {
 80009d8:	2314      	movs	r3, #20
 80009da:	4a13      	ldr	r2, [pc, #76]	@ (8000a28 <start_telemetry_capture+0x1a0>)
 80009dc:	2100      	movs	r1, #0
 80009de:	4809      	ldr	r0, [pc, #36]	@ (8000a04 <start_telemetry_capture+0x17c>)
 80009e0:	f002 fe66 	bl	80036b0 <HAL_TIM_IC_Start_DMA>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d007      	beq.n	80009fa <start_telemetry_capture+0x172>
        HAL_UART_Transmit(&huart6, (uint8_t*)"IC DMA start failed\r\n", 21, 100);
 80009ea:	2364      	movs	r3, #100	@ 0x64
 80009ec:	2215      	movs	r2, #21
 80009ee:	490f      	ldr	r1, [pc, #60]	@ (8000a2c <start_telemetry_capture+0x1a4>)
 80009f0:	4807      	ldr	r0, [pc, #28]	@ (8000a10 <start_telemetry_capture+0x188>)
 80009f2:	f004 f881 	bl	8004af8 <HAL_UART_Transmit>
        Error_Handler();
 80009f6:	f000 fbe5 	bl	80011c4 <Error_Handler>
    }
}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000088 	.word	0x20000088
 8000a08:	200000d0 	.word	0x200000d0
 8000a0c:	08008ca4 	.word	0x08008ca4
 8000a10:	20000250 	.word	0x20000250
 8000a14:	08008cb8 	.word	0x08008cb8
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40026040 	.word	0x40026040
 8000a20:	08008ccc 	.word	0x08008ccc
 8000a24:	200002a4 	.word	0x200002a4
 8000a28:	200003c8 	.word	0x200003c8
 8000a2c:	08008ce0 	.word	0x08008ce0

08000a30 <set_pwm_output_mode>:
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = alternate;
    HAL_GPIO_Init(port, &GPIO_InitStruct);
}

void set_pwm_output_mode(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8000a36:	2100      	movs	r1, #0
 8000a38:	484d      	ldr	r0, [pc, #308]	@ (8000b70 <set_pwm_output_mode+0x140>)
 8000a3a:	f002 fb47 	bl	80030cc <HAL_TIM_PWM_Stop>
    HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	484b      	ldr	r0, [pc, #300]	@ (8000b70 <set_pwm_output_mode+0x140>)
 8000a42:	f002 fdd4 	bl	80035ee <HAL_TIM_IC_Stop>
    HAL_DMA_DeInit(&hdma_tim5_ch1);
 8000a46:	484b      	ldr	r0, [pc, #300]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000a48:	f001 f8e0 	bl	8001c0c <HAL_DMA_DeInit>

    htim5.Init.Prescaler = 0;
 8000a4c:	4b48      	ldr	r3, [pc, #288]	@ (8000b70 <set_pwm_output_mode+0x140>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b47      	ldr	r3, [pc, #284]	@ (8000b70 <set_pwm_output_mode+0x140>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = DSHOT_BIT_PERIOD_TICKS - 1; // 139 for 1.67 µs
 8000a58:	4b45      	ldr	r3, [pc, #276]	@ (8000b70 <set_pwm_output_mode+0x140>)
 8000a5a:	228b      	movs	r2, #139	@ 0x8b
 8000a5c:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5e:	4b44      	ldr	r3, [pc, #272]	@ (8000b70 <set_pwm_output_mode+0x140>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	4b42      	ldr	r3, [pc, #264]	@ (8000b70 <set_pwm_output_mode+0x140>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8000a6a:	4841      	ldr	r0, [pc, #260]	@ (8000b70 <set_pwm_output_mode+0x140>)
 8000a6c:	f002 fade 	bl	800302c <HAL_TIM_PWM_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d007      	beq.n	8000a86 <set_pwm_output_mode+0x56>
        HAL_UART_Transmit(&huart6, (uint8_t*)"PWM init failed\r\n", 17, 100);
 8000a76:	2364      	movs	r3, #100	@ 0x64
 8000a78:	2211      	movs	r2, #17
 8000a7a:	493f      	ldr	r1, [pc, #252]	@ (8000b78 <set_pwm_output_mode+0x148>)
 8000a7c:	483f      	ldr	r0, [pc, #252]	@ (8000b7c <set_pwm_output_mode+0x14c>)
 8000a7e:	f004 f83b 	bl	8004af8 <HAL_UART_Transmit>
        Error_Handler();
 8000a82:	f000 fb9f 	bl	80011c4 <Error_Handler>
    }

    TIM_OC_InitTypeDef sConfigOC = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
 8000a94:	615a      	str	r2, [r3, #20]
 8000a96:	619a      	str	r2, [r3, #24]
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a98:	2360      	movs	r3, #96	@ 0x60
 8000a9a:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	4830      	ldr	r0, [pc, #192]	@ (8000b70 <set_pwm_output_mode+0x140>)
 8000ab0:	f003 f934 	bl	8003d1c <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d007      	beq.n	8000aca <set_pwm_output_mode+0x9a>
        HAL_UART_Transmit(&huart6, (uint8_t*)"PWM config failed\r\n", 19, 100);
 8000aba:	2364      	movs	r3, #100	@ 0x64
 8000abc:	2213      	movs	r2, #19
 8000abe:	4930      	ldr	r1, [pc, #192]	@ (8000b80 <set_pwm_output_mode+0x150>)
 8000ac0:	482e      	ldr	r0, [pc, #184]	@ (8000b7c <set_pwm_output_mode+0x14c>)
 8000ac2:	f004 f819 	bl	8004af8 <HAL_UART_Transmit>
        Error_Handler();
 8000ac6:	f000 fb7d 	bl	80011c4 <Error_Handler>
    }

    __HAL_RCC_DMA1_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b2d      	ldr	r3, [pc, #180]	@ (8000b84 <set_pwm_output_mode+0x154>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8000b84 <set_pwm_output_mode+0x154>)
 8000ad4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b2a      	ldr	r3, [pc, #168]	@ (8000b84 <set_pwm_output_mode+0x154>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000ae8:	4a27      	ldr	r2, [pc, #156]	@ (8000b88 <set_pwm_output_mode+0x158>)
 8000aea:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8000aec:	4b21      	ldr	r3, [pc, #132]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000aee:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000af2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000af6:	2240      	movs	r2, #64	@ 0x40
 8000af8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000b02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b06:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000b0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b0e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b16:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000b20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b24:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b26:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000b28:	2204      	movs	r2, #4
 8000b2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK) {
 8000b3e:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000b40:	f000 ffb6 	bl	8001ab0 <HAL_DMA_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d007      	beq.n	8000b5a <set_pwm_output_mode+0x12a>
        HAL_UART_Transmit(&huart6, (uint8_t*)"DMA init failed\r\n", 17, 100);
 8000b4a:	2364      	movs	r3, #100	@ 0x64
 8000b4c:	2211      	movs	r2, #17
 8000b4e:	490f      	ldr	r1, [pc, #60]	@ (8000b8c <set_pwm_output_mode+0x15c>)
 8000b50:	480a      	ldr	r0, [pc, #40]	@ (8000b7c <set_pwm_output_mode+0x14c>)
 8000b52:	f003 ffd1 	bl	8004af8 <HAL_UART_Transmit>
        Error_Handler();
 8000b56:	f000 fb35 	bl	80011c4 <Error_Handler>
    }
    __HAL_LINKDMA(&htim5, hdma[TIM_DMA_ID_CC1], hdma_tim5_ch1);
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <set_pwm_output_mode+0x140>)
 8000b5c:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000b5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b60:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <set_pwm_output_mode+0x144>)
 8000b62:	4a03      	ldr	r2, [pc, #12]	@ (8000b70 <set_pwm_output_mode+0x140>)
 8000b64:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000088 	.word	0x20000088
 8000b74:	200000d0 	.word	0x200000d0
 8000b78:	08008cf8 	.word	0x08008cf8
 8000b7c:	20000250 	.word	0x20000250
 8000b80:	08008d0c 	.word	0x08008d0c
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40026040 	.word	0x40026040
 8000b8c:	08008ccc 	.word	0x08008ccc

08000b90 <prepare_bdshot_buffer>:

void prepare_bdshot_buffer(uint16_t frame, uint32_t *dshot_buffer)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	80fb      	strh	r3, [r7, #6]
    uint32_t buffer_index = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

    dshot_buffer[buffer_index++] = 0;  // Dummy preload entry
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	617a      	str	r2, [r7, #20]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]

    //2Build the actual DSHOT waveform entries
    for (int i = 15; i >= 0; i--)
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	e01e      	b.n	8000bf4 <prepare_bdshot_buffer+0x64>
    {
        uint8_t bit = (frame >> i) & 0x01;
 8000bb6:	88fa      	ldrh	r2, [r7, #6]
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	fa42 f303 	asr.w	r3, r2, r3
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
        if (bit)
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d008      	beq.n	8000bde <prepare_bdshot_buffer+0x4e>
        {
            dshot_buffer[buffer_index++] = DSHOT_T1L_TICKS;  // logic 1
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	617a      	str	r2, [r7, #20]
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	2269      	movs	r2, #105	@ 0x69
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	e007      	b.n	8000bee <prepare_bdshot_buffer+0x5e>
            //dshot_buffer[buffer_index++] = 0;
        }
        else
        {
            dshot_buffer[buffer_index++] = DSHOT_T0L_TICKS;  // logic 0
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	1c5a      	adds	r2, r3, #1
 8000be2:	617a      	str	r2, [r7, #20]
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	2232      	movs	r2, #50	@ 0x32
 8000bec:	601a      	str	r2, [r3, #0]
    for (int i = 15; i >= 0; i--)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	dadd      	bge.n	8000bb6 <prepare_bdshot_buffer+0x26>
            //dshot_buffer[buffer_index++] = 0;
        }
    }

    dshot_buffer[buffer_index++] = 0;  // Final LOW
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	1c5a      	adds	r2, r3, #1
 8000bfe:	617a      	str	r2, [r7, #20]
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	371c      	adds	r7, #28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <bdshot_crc>:


// value_12bit should be 0...4095
uint8_t bdshot_crc(uint16_t value_12bit)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b085      	sub	sp, #20
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	80fb      	strh	r3, [r7, #6]
    // Optional: Uncomment to assert 12-bit range in debug
    // assert(value_12bit < 4096);

    uint16_t crc = value_12bit ^ (value_12bit >> 4) ^ (value_12bit >> 8);
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	4053      	eors	r3, r2
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	0a1b      	lsrs	r3, r3, #8
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4053      	eors	r3, r2
 8000c34:	81fb      	strh	r3, [r7, #14]
    crc = ~crc;           // Bitwise NOT
 8000c36:	89fb      	ldrh	r3, [r7, #14]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	81fb      	strh	r3, [r7, #14]
    crc = crc & 0x0F;     // Mask to 4 bits
 8000c3c:	89fb      	ldrh	r3, [r7, #14]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)crc;
 8000c44:	89fb      	ldrh	r3, [r7, #14]
 8000c46:	b2db      	uxtb	r3, r3
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <make_bdshot_frame>:

// Create 16-bit DSHOT frame with correct CRC
uint16_t make_bdshot_frame(uint16_t value, bool telemetry) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	80fb      	strh	r3, [r7, #6]
 8000c60:	4613      	mov	r3, r2
 8000c62:	717b      	strb	r3, [r7, #5]
    if (value == 0) {
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <make_bdshot_frame+0x1a>
        return 0x000F; // hardware expects this special frame
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	e01b      	b.n	8000ca6 <make_bdshot_frame+0x52>
    }
    value &= 0x07FF; // 11 bits
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c74:	80fb      	strh	r3, [r7, #6]
    uint16_t frame_no_crc = (value << 1) | (telemetry ? 1 : 0);
 8000c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	797b      	ldrb	r3, [r7, #5]
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	81fb      	strh	r3, [r7, #14]
    uint8_t crc = bdshot_crc(frame_no_crc);
 8000c88:	89fb      	ldrh	r3, [r7, #14]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ffc3 	bl	8000c16 <bdshot_crc>
 8000c90:	4603      	mov	r3, r0
 8000c92:	737b      	strb	r3, [r7, #13]
    return (frame_no_crc << 4) | crc;
 8000c94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	7b7b      	ldrb	r3, [r7, #13]
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	b29b      	uxth	r3, r3
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <queue_bdshot_pulse>:

void queue_bdshot_pulse(uint16_t throttle, bool telemetry, uint32_t *dshot_buffer){
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	603a      	str	r2, [r7, #0]
 8000cb8:	80fb      	strh	r3, [r7, #6]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	717b      	strb	r3, [r7, #5]
	uint16_t frame = make_bdshot_frame(throttle, telemetry);
 8000cbe:	797a      	ldrb	r2, [r7, #5]
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ffc5 	bl	8000c54 <make_bdshot_frame>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	81fb      	strh	r3, [r7, #14]
	prepare_bdshot_buffer(frame, dshot_buffer);
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	6839      	ldr	r1, [r7, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff5c 	bl	8000b90 <prepare_bdshot_buffer>
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <send_bdshot>:

void send_bdshot(uint32_t channel){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	uint32_t *buffer = NULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
	switch(channel) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b0c      	cmp	r3, #12
 8000cf0:	d828      	bhi.n	8000d44 <send_bdshot+0x64>
 8000cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8000cf8 <send_bdshot+0x18>)
 8000cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf8:	08000d2d 	.word	0x08000d2d
 8000cfc:	08000d45 	.word	0x08000d45
 8000d00:	08000d45 	.word	0x08000d45
 8000d04:	08000d45 	.word	0x08000d45
 8000d08:	08000d33 	.word	0x08000d33
 8000d0c:	08000d45 	.word	0x08000d45
 8000d10:	08000d45 	.word	0x08000d45
 8000d14:	08000d45 	.word	0x08000d45
 8000d18:	08000d39 	.word	0x08000d39
 8000d1c:	08000d45 	.word	0x08000d45
 8000d20:	08000d45 	.word	0x08000d45
 8000d24:	08000d45 	.word	0x08000d45
 8000d28:	08000d3f 	.word	0x08000d3f
	  case TIM_CHANNEL_1: buffer = dshot_buffer_ch1; break;
 8000d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e64 <send_bdshot+0x184>)
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	e008      	b.n	8000d44 <send_bdshot+0x64>
	  case TIM_CHANNEL_2: buffer = dshot_buffer_ch2; break;
 8000d32:	4b4d      	ldr	r3, [pc, #308]	@ (8000e68 <send_bdshot+0x188>)
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	e005      	b.n	8000d44 <send_bdshot+0x64>
	  case TIM_CHANNEL_3: buffer = dshot_buffer_ch3; break;
 8000d38:	4b4c      	ldr	r3, [pc, #304]	@ (8000e6c <send_bdshot+0x18c>)
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	e002      	b.n	8000d44 <send_bdshot+0x64>
	  case TIM_CHANNEL_4: buffer = dshot_buffer_ch4; break;
 8000d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8000e70 <send_bdshot+0x190>)
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	bf00      	nop
	}
    switch (channel) {
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b0c      	cmp	r3, #12
 8000d48:	d844      	bhi.n	8000dd4 <send_bdshot+0xf4>
 8000d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d50 <send_bdshot+0x70>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000d8d 	.word	0x08000d8d
 8000d54:	08000dd5 	.word	0x08000dd5
 8000d58:	08000dd5 	.word	0x08000dd5
 8000d5c:	08000dd5 	.word	0x08000dd5
 8000d60:	08000da1 	.word	0x08000da1
 8000d64:	08000dd5 	.word	0x08000dd5
 8000d68:	08000dd5 	.word	0x08000dd5
 8000d6c:	08000dd5 	.word	0x08000dd5
 8000d70:	08000db5 	.word	0x08000db5
 8000d74:	08000dd5 	.word	0x08000dd5
 8000d78:	08000dd5 	.word	0x08000dd5
 8000d7c:	08000dd5 	.word	0x08000dd5
 8000d80:	08000dc9 	.word	0x08000dc9
        case TIM_CHANNEL_1: while (dshot_running_ch1) delay_us_precise(1); break;
 8000d84:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000d88:	f000 f880 	bl	8000e8c <delay_us_precise>
 8000d8c:	4b39      	ldr	r3, [pc, #228]	@ (8000e74 <send_bdshot+0x194>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f6      	bne.n	8000d84 <send_bdshot+0xa4>
 8000d96:	e01d      	b.n	8000dd4 <send_bdshot+0xf4>
        case TIM_CHANNEL_2: while (dshot_running_ch2) delay_us_precise(1); break;
 8000d98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000d9c:	f000 f876 	bl	8000e8c <delay_us_precise>
 8000da0:	4b35      	ldr	r3, [pc, #212]	@ (8000e78 <send_bdshot+0x198>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f6      	bne.n	8000d98 <send_bdshot+0xb8>
 8000daa:	e013      	b.n	8000dd4 <send_bdshot+0xf4>
        case TIM_CHANNEL_3: while (dshot_running_ch3) delay_us_precise(1); break;
 8000dac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000db0:	f000 f86c 	bl	8000e8c <delay_us_precise>
 8000db4:	4b31      	ldr	r3, [pc, #196]	@ (8000e7c <send_bdshot+0x19c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f6      	bne.n	8000dac <send_bdshot+0xcc>
 8000dbe:	e009      	b.n	8000dd4 <send_bdshot+0xf4>
        case TIM_CHANNEL_4: while (dshot_running_ch4) delay_us_precise(1); break;
 8000dc0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000dc4:	f000 f862 	bl	8000e8c <delay_us_precise>
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e80 <send_bdshot+0x1a0>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f6      	bne.n	8000dc0 <send_bdshot+0xe0>
 8000dd2:	bf00      	nop
    }
	if (buffer == NULL) Error_Handler();
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <send_bdshot+0xfe>
 8000dda:	f000 f9f3 	bl	80011c4 <Error_Handler>
    if (HAL_TIM_PWM_Start_DMA(&htim5, channel, (uint32_t*)buffer, DSHOT_BUFFER_SIZE) != HAL_OK)
 8000dde:	2312      	movs	r3, #18
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	4827      	ldr	r0, [pc, #156]	@ (8000e84 <send_bdshot+0x1a4>)
 8000de6:	f002 f9e1 	bl	80031ac <HAL_TIM_PWM_Start_DMA>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d004      	beq.n	8000dfa <send_bdshot+0x11a>
    {
        Error_Handler();
 8000df0:	f000 f9e8 	bl	80011c4 <Error_Handler>
        printf("Error in send_bdshot()\r\n");
 8000df4:	4824      	ldr	r0, [pc, #144]	@ (8000e88 <send_bdshot+0x1a8>)
 8000df6:	f007 fb37 	bl	8008468 <puts>
    }
    switch (channel) {
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b0c      	cmp	r3, #12
 8000dfe:	d82d      	bhi.n	8000e5c <send_bdshot+0x17c>
 8000e00:	a201      	add	r2, pc, #4	@ (adr r2, 8000e08 <send_bdshot+0x128>)
 8000e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e06:	bf00      	nop
 8000e08:	08000e3d 	.word	0x08000e3d
 8000e0c:	08000e5d 	.word	0x08000e5d
 8000e10:	08000e5d 	.word	0x08000e5d
 8000e14:	08000e5d 	.word	0x08000e5d
 8000e18:	08000e45 	.word	0x08000e45
 8000e1c:	08000e5d 	.word	0x08000e5d
 8000e20:	08000e5d 	.word	0x08000e5d
 8000e24:	08000e5d 	.word	0x08000e5d
 8000e28:	08000e4d 	.word	0x08000e4d
 8000e2c:	08000e5d 	.word	0x08000e5d
 8000e30:	08000e5d 	.word	0x08000e5d
 8000e34:	08000e5d 	.word	0x08000e5d
 8000e38:	08000e55 	.word	0x08000e55
        case TIM_CHANNEL_1: dshot_running_ch1 = true; break;
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <send_bdshot+0x194>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e00b      	b.n	8000e5c <send_bdshot+0x17c>
        case TIM_CHANNEL_2: dshot_running_ch2 = true; break;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <send_bdshot+0x198>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	e007      	b.n	8000e5c <send_bdshot+0x17c>
        case TIM_CHANNEL_3: dshot_running_ch3 = true; break;
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <send_bdshot+0x19c>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	e003      	b.n	8000e5c <send_bdshot+0x17c>
        case TIM_CHANNEL_4: dshot_running_ch4 = true; break;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <send_bdshot+0x1a0>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	bf00      	nop
    }
}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200002a8 	.word	0x200002a8
 8000e68:	200002f0 	.word	0x200002f0
 8000e6c:	20000338 	.word	0x20000338
 8000e70:	20000380 	.word	0x20000380
 8000e74:	20000418 	.word	0x20000418
 8000e78:	20000419 	.word	0x20000419
 8000e7c:	2000041a 	.word	0x2000041a
 8000e80:	2000041b 	.word	0x2000041b
 8000e84:	20000088 	.word	0x20000088
 8000e88:	08008d20 	.word	0x08008d20

08000e8c <delay_us_precise>:


void delay_us_precise(float us) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t cycles = (uint32_t)(SystemCoreClock * us / 1e6f);
 8000e96:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <delay_us_precise+0x54>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ea2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eaa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000ee4 <delay_us_precise+0x58>
 8000eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb6:	ee17 3a90 	vmov	r3, s15
 8000eba:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <delay_us_precise+0x5c>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8000ec2:	bf00      	nop
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <delay_us_precise+0x5c>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d8f8      	bhi.n	8000ec4 <delay_us_precise+0x38>
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	49742400 	.word	0x49742400
 8000ee8:	e0001000 	.word	0xe0001000

08000eec <_write>:

int _write(int file, char *ptr, int len)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0a4      	sub	sp, #144	@ 0x90
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
    // For safety, truncate messages to queue item size
    if (len > SERIAL_QUEUE_ITEM_SIZE - 1) len = SERIAL_QUEUE_ITEM_SIZE - 1;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b7f      	cmp	r3, #127	@ 0x7f
 8000efc:	dd01      	ble.n	8000f02 <_write+0x16>
 8000efe:	237f      	movs	r3, #127	@ 0x7f
 8000f00:	607b      	str	r3, [r7, #4]

    char msg[SERIAL_QUEUE_ITEM_SIZE];
    memcpy(msg, ptr, len);
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f007 fc65 	bl	80087da <memcpy>
    msg[len] = '\0'; // Null-terminate
 8000f10:	f107 0210 	add.w	r2, r7, #16
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4413      	add	r3, r2
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]

    // Send to queue (in ISR context: use osMessageQueuePutFromISR, but here normal context)
    if (osMessageQueuePut(serialQueueHandle, msg, 0, 0) != osOK) {
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <_write+0x4c>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	f107 0110 	add.w	r1, r7, #16
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	f004 fb50 	bl	80055cc <osMessageQueuePut>
        // Handle queue full if needed
    }

    return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3790      	adds	r7, #144	@ 0x90
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000041c 	.word	0x2000041c

08000f3c <DWT_Init>:

void DWT_Init(void) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk)) {
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <DWT_Init+0x38>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d10e      	bne.n	8000f6a <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <DWT_Init+0x3c>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	4a09      	ldr	r2, [pc, #36]	@ (8000f78 <DWT_Init+0x3c>)
 8000f52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f56:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <DWT_Init+0x38>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <DWT_Init+0x38>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <DWT_Init+0x38>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6013      	str	r3, [r2, #0]
    }
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e0001000 	.word	0xe0001000
 8000f78:	e000edf0 	.word	0xe000edf0

08000f7c <HAL_TIM_PWM_PulseFinishedCallback>:
    }
    printf("\r\n");
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM5) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff8 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d12f      	bne.n	8000fee <HAL_TIM_PWM_PulseFinishedCallback+0x72>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8e:	b672      	cpsid	i
}
 8000f90:	bf00      	nop
        __disable_irq();
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7f1b      	ldrb	r3, [r3, #28]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d106      	bne.n	8000fa8 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4817      	ldr	r0, [pc, #92]	@ (8000ffc <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8000f9e:	f002 f895 	bl	80030cc <HAL_TIM_PWM_Stop>
            dshot_running_ch1 = false;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
        }
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7f1b      	ldrb	r3, [r3, #28]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d106      	bne.n	8000fbe <HAL_TIM_PWM_PulseFinishedCallback+0x42>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4812      	ldr	r0, [pc, #72]	@ (8000ffc <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8000fb4:	f002 f88a 	bl	80030cc <HAL_TIM_PWM_Stop>
            dshot_running_ch2 = false;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
        }
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7f1b      	ldrb	r3, [r3, #28]
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d106      	bne.n	8000fd4 <HAL_TIM_PWM_PulseFinishedCallback+0x58>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8000fca:	f002 f87f 	bl	80030cc <HAL_TIM_PWM_Stop>
            dshot_running_ch3 = false;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
        }
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7f1b      	ldrb	r3, [r3, #28]
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d106      	bne.n	8000fea <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8000fdc:	210c      	movs	r1, #12
 8000fde:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8000fe0:	f002 f874 	bl	80030cc <HAL_TIM_PWM_Stop>
            dshot_running_ch4 = false;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	@ (800100c <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fea:	b662      	cpsie	i
}
 8000fec:	bf00      	nop
        }
        __enable_irq();
    }
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40000c00 	.word	0x40000c00
 8000ffc:	20000088 	.word	0x20000088
 8001000:	20000418 	.word	0x20000418
 8001004:	20000419 	.word	0x20000419
 8001008:	2000041a 	.word	0x2000041a
 800100c:	2000041b 	.word	0x2000041b

08001010 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001018:	2001      	movs	r0, #1
 800101a:	f004 fa49 	bl	80054b0 <osDelay>
 800101e:	e7fb      	b.n	8001018 <StartDefaultTask+0x8>

08001020 <DShotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DShotTask */
void DShotTask(void *argument)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DShotTask */
	//printf("\nDShotTask Begin.\r\n");
	//printf("SystemCoreClock=%lu\r\n", SystemCoreClock);
	uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 8001028:	f001 fedc 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 800102c:	6138      	str	r0, [r7, #16]
	uint32_t tim5_clk = pclk1;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	60fb      	str	r3, [r7, #12]
	if ((RCC->CFGR & RCC_CFGR_PPRE1) != RCC_CFGR_PPRE1_DIV1)
 8001032:	4b40      	ldr	r3, [pc, #256]	@ (8001134 <DShotTask+0x114>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <DShotTask+0x24>
	    tim5_clk *= 2;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
	//printf("TIM5 actual clk: %lu\r\n", tim5_clk);

	queue_bdshot_pulse(0, true, dshot_buffer_ch1);
 8001044:	4a3c      	ldr	r2, [pc, #240]	@ (8001138 <DShotTask+0x118>)
 8001046:	2101      	movs	r1, #1
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fe30 	bl	8000cae <queue_bdshot_pulse>
	queue_bdshot_pulse(0, true, dshot_buffer_ch2);
 800104e:	4a3b      	ldr	r2, [pc, #236]	@ (800113c <DShotTask+0x11c>)
 8001050:	2101      	movs	r1, #1
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff fe2b 	bl	8000cae <queue_bdshot_pulse>
	queue_bdshot_pulse(0, true, dshot_buffer_ch3);
 8001058:	4a39      	ldr	r2, [pc, #228]	@ (8001140 <DShotTask+0x120>)
 800105a:	2101      	movs	r1, #1
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff fe26 	bl	8000cae <queue_bdshot_pulse>
	queue_bdshot_pulse(0, true, dshot_buffer_ch4);
 8001062:	4a38      	ldr	r2, [pc, #224]	@ (8001144 <DShotTask+0x124>)
 8001064:	2101      	movs	r1, #1
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff fe21 	bl	8000cae <queue_bdshot_pulse>
	for (int i = 0; i < 3000; i++){
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e011      	b.n	8001096 <DShotTask+0x76>
		send_bdshot(TIM_CHANNEL_1);
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fe34 	bl	8000ce0 <send_bdshot>
		send_bdshot(TIM_CHANNEL_2);
 8001078:	2004      	movs	r0, #4
 800107a:	f7ff fe31 	bl	8000ce0 <send_bdshot>
	    send_bdshot(TIM_CHANNEL_3);
 800107e:	2008      	movs	r0, #8
 8001080:	f7ff fe2e 	bl	8000ce0 <send_bdshot>
	    send_bdshot(TIM_CHANNEL_4);
 8001084:	200c      	movs	r0, #12
 8001086:	f7ff fe2b 	bl	8000ce0 <send_bdshot>
		vTaskDelay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f005 fbba 	bl	8006804 <vTaskDelay>
	for (int i = 0; i < 3000; i++){
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800109c:	4293      	cmp	r3, r2
 800109e:	dde8      	ble.n	8001072 <DShotTask+0x52>
	}
	vTaskDelay(50);
 80010a0:	2032      	movs	r0, #50	@ 0x32
 80010a2:	f005 fbaf 	bl	8006804 <vTaskDelay>

	queue_bdshot_pulse(100, true, dshot_buffer_ch1);
 80010a6:	4a24      	ldr	r2, [pc, #144]	@ (8001138 <DShotTask+0x118>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	2064      	movs	r0, #100	@ 0x64
 80010ac:	f7ff fdff 	bl	8000cae <queue_bdshot_pulse>
	queue_bdshot_pulse(200, true, dshot_buffer_ch2);
 80010b0:	4a22      	ldr	r2, [pc, #136]	@ (800113c <DShotTask+0x11c>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	20c8      	movs	r0, #200	@ 0xc8
 80010b6:	f7ff fdfa 	bl	8000cae <queue_bdshot_pulse>
	queue_bdshot_pulse(300, true, dshot_buffer_ch3);
 80010ba:	4a21      	ldr	r2, [pc, #132]	@ (8001140 <DShotTask+0x120>)
 80010bc:	2101      	movs	r1, #1
 80010be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010c2:	f7ff fdf4 	bl	8000cae <queue_bdshot_pulse>
	queue_bdshot_pulse(400, true, dshot_buffer_ch4);
 80010c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001144 <DShotTask+0x124>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80010ce:	f7ff fdee 	bl	8000cae <queue_bdshot_pulse>
    for (;;){
      while(dshot_running_ch1 || dshot_running_ch2 || dshot_running_ch3 || dshot_running_ch4){
 80010d2:	e003      	b.n	80010dc <DShotTask+0xbc>
    	  delay_us_precise(1);
 80010d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80010d8:	f7ff fed8 	bl	8000e8c <delay_us_precise>
      while(dshot_running_ch1 || dshot_running_ch2 || dshot_running_ch3 || dshot_running_ch4){
 80010dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <DShotTask+0x128>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f6      	bne.n	80010d4 <DShotTask+0xb4>
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <DShotTask+0x12c>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f1      	bne.n	80010d4 <DShotTask+0xb4>
 80010f0:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <DShotTask+0x130>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1ec      	bne.n	80010d4 <DShotTask+0xb4>
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <DShotTask+0x134>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1e7      	bne.n	80010d4 <DShotTask+0xb4>
      }
      send_bdshot(TIM_CHANNEL_1);
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff fdeb 	bl	8000ce0 <send_bdshot>
      send_bdshot(TIM_CHANNEL_2);
 800110a:	2004      	movs	r0, #4
 800110c:	f7ff fde8 	bl	8000ce0 <send_bdshot>
      send_bdshot(TIM_CHANNEL_3);
 8001110:	2008      	movs	r0, #8
 8001112:	f7ff fde5 	bl	8000ce0 <send_bdshot>
      send_bdshot(TIM_CHANNEL_4);
 8001116:	200c      	movs	r0, #12
 8001118:	f7ff fde2 	bl	8000ce0 <send_bdshot>

      delay_us_precise(40);
 800111c:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001158 <DShotTask+0x138>
 8001120:	f7ff feb4 	bl	8000e8c <delay_us_precise>

      //set_pin_input(GPIOA, GPIO_PIN_0);
      //set_pin_input(GPIOA, GPIO_PIN_1);
      //set_pin_input(GPIOA, GPIO_PIN_2);
      //set_pin_input(GPIOA, GPIO_PIN_3);
      start_telemetry_capture();
 8001124:	f7ff fbb0 	bl	8000888 <start_telemetry_capture>

      //set_pin_pwm(GPIOA, GPIO_PIN_0, GPIO_AF2_TIM5);
      //set_pin_pwm(GPIOA, GPIO_PIN_1, GPIO_AF2_TIM5);
      //set_pin_pwm(GPIOA, GPIO_PIN_2, GPIO_AF2_TIM5);
      //set_pin_pwm(GPIOA, GPIO_PIN_3, GPIO_AF2_TIM5);
      set_pwm_output_mode();
 8001128:	f7ff fc82 	bl	8000a30 <set_pwm_output_mode>
      vTaskDelay(1);
 800112c:	2001      	movs	r0, #1
 800112e:	f005 fb69 	bl	8006804 <vTaskDelay>
    for (;;){
 8001132:	e7ce      	b.n	80010d2 <DShotTask+0xb2>
 8001134:	40023800 	.word	0x40023800
 8001138:	200002a8 	.word	0x200002a8
 800113c:	200002f0 	.word	0x200002f0
 8001140:	20000338 	.word	0x20000338
 8001144:	20000380 	.word	0x20000380
 8001148:	20000418 	.word	0x20000418
 800114c:	20000419 	.word	0x20000419
 8001150:	2000041a 	.word	0x2000041a
 8001154:	2000041b 	.word	0x2000041b
 8001158:	42200000 	.word	0x42200000

0800115c <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void *argument)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0a4      	sub	sp, #144	@ 0x90
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    SerialMessage_t msg;

  for (;;)
  {
      // 1️⃣ Process serial debug messages
      if (osMessageQueueGet(serialQueueHandle, &msg, NULL, osWaitForever) == osOK) {
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <StartSerialTask+0x3c>)
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	f107 010c 	add.w	r1, r7, #12
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	2200      	movs	r2, #0
 8001172:	f004 fa8b 	bl	800568c <osMessageQueueGet>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d109      	bne.n	8001190 <StartSerialTask+0x34>
          HAL_UART_Transmit(&huart6, msg.data, msg.length, HAL_MAX_DELAY);
 800117c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001180:	b29a      	uxth	r2, r3
 8001182:	f107 010c 	add.w	r1, r7, #12
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	4804      	ldr	r0, [pc, #16]	@ (800119c <StartSerialTask+0x40>)
 800118c:	f003 fcb4 	bl	8004af8 <HAL_UART_Transmit>
      }
      //HAL_UART_Transmit(&huart6, (uint8_t *)"SerialTask alive\r\n", 18, HAL_MAX_DELAY);
      //osDelay(1000);  // Only for debugging; remove later

      osDelay(1); // Let other tasks run
 8001190:	2001      	movs	r0, #1
 8001192:	f004 f98d 	bl	80054b0 <osDelay>
      if (osMessageQueueGet(serialQueueHandle, &msg, NULL, osWaitForever) == osOK) {
 8001196:	e7e5      	b.n	8001164 <StartSerialTask+0x8>
 8001198:	2000041c 	.word	0x2000041c
 800119c:	20000250 	.word	0x20000250

080011a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80011b2:	f000 fb7b 	bl	80018ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  //printf("PeriodElapsedCallback\r\n");
  /* USER CODE END Callback 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40001c00 	.word	0x40001c00

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <Error_Handler+0x8>

080011d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_MspInit+0x54>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	4a11      	ldr	r2, [pc, #68]	@ (8001224 <HAL_MspInit+0x54>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <HAL_MspInit+0x54>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <HAL_MspInit+0x54>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <HAL_MspInit+0x54>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	@ 0x40
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <HAL_MspInit+0x54>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	210f      	movs	r1, #15
 8001212:	f06f 0001 	mvn.w	r0, #1
 8001216:	f000 fc21 	bl	8001a5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a72      	ldr	r2, [pc, #456]	@ (8001400 <HAL_TIM_PWM_MspInit+0x1d8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	f040 80de 	bne.w	80013f8 <HAL_TIM_PWM_MspInit+0x1d0>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4b70      	ldr	r3, [pc, #448]	@ (8001404 <HAL_TIM_PWM_MspInit+0x1dc>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a6f      	ldr	r2, [pc, #444]	@ (8001404 <HAL_TIM_PWM_MspInit+0x1dc>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
 800124c:	4b6d      	ldr	r3, [pc, #436]	@ (8001404 <HAL_TIM_PWM_MspInit+0x1dc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8001258:	4b6b      	ldr	r3, [pc, #428]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 800125a:	4a6c      	ldr	r2, [pc, #432]	@ (800140c <HAL_TIM_PWM_MspInit+0x1e4>)
 800125c:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 800125e:	4b6a      	ldr	r3, [pc, #424]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001260:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001264:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001266:	4b68      	ldr	r3, [pc, #416]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001268:	2240      	movs	r2, #64	@ 0x40
 800126a:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800126c:	4b66      	ldr	r3, [pc, #408]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001272:	4b65      	ldr	r3, [pc, #404]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001274:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001278:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800127a:	4b63      	ldr	r3, [pc, #396]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 800127c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001280:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001282:	4b61      	ldr	r3, [pc, #388]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001284:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001288:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 800128a:	4b5f      	ldr	r3, [pc, #380]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001290:	4b5d      	ldr	r3, [pc, #372]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001292:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001296:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001298:	4b5b      	ldr	r3, [pc, #364]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 800129e:	485a      	ldr	r0, [pc, #360]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 80012a0:	f000 fc06 	bl	8001ab0 <HAL_DMA_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 80012aa:	f7ff ff8b 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a55      	ldr	r2, [pc, #340]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 80012b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80012b4:	4a54      	ldr	r2, [pc, #336]	@ (8001408 <HAL_TIM_PWM_MspInit+0x1e0>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5_CH2 Init */
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80012ba:	4b55      	ldr	r3, [pc, #340]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 80012bc:	4a55      	ldr	r2, [pc, #340]	@ (8001414 <HAL_TIM_PWM_MspInit+0x1ec>)
 80012be:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 80012c0:	4b53      	ldr	r3, [pc, #332]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 80012c2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80012c6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c8:	4b51      	ldr	r3, [pc, #324]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 80012ca:	2240      	movs	r2, #64	@ 0x40
 80012cc:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ce:	4b50      	ldr	r3, [pc, #320]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80012d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 80012d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012da:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 80012de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012e2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 80012e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ea:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 80012ec:	4b48      	ldr	r3, [pc, #288]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80012f2:	4b47      	ldr	r3, [pc, #284]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 80012f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012f8:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012fa:	4b45      	ldr	r3, [pc, #276]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8001300:	4843      	ldr	r0, [pc, #268]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001302:	f000 fbd5 	bl	8001ab0 <HAL_DMA_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_TIM_PWM_MspInit+0xe8>
    {
      Error_Handler();
 800130c:	f7ff ff5a 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a3f      	ldr	r2, [pc, #252]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
 8001316:	4a3e      	ldr	r2, [pc, #248]	@ (8001410 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5_CH3_UP Init */
    hdma_tim5_ch3_up.Instance = DMA1_Stream0;
 800131c:	4b3e      	ldr	r3, [pc, #248]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 800131e:	4a3f      	ldr	r2, [pc, #252]	@ (800141c <HAL_TIM_PWM_MspInit+0x1f4>)
 8001320:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Channel = DMA_CHANNEL_6;
 8001322:	4b3d      	ldr	r3, [pc, #244]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001324:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001328:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800132a:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 800132c:	2240      	movs	r2, #64	@ 0x40
 800132e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001330:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001336:	4b38      	ldr	r3, [pc, #224]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001338:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800133c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800133e:	4b36      	ldr	r3, [pc, #216]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001340:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001344:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001346:	4b34      	ldr	r3, [pc, #208]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001348:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800134c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 800134e:	4b32      	ldr	r3, [pc, #200]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001350:	2200      	movs	r2, #0
 8001352:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001354:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001356:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800135a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800135c:	4b2e      	ldr	r3, [pc, #184]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8001362:	482d      	ldr	r0, [pc, #180]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001364:	f000 fba4 	bl	8001ab0 <HAL_DMA_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_TIM_PWM_MspInit+0x14a>
    {
      Error_Handler();
 800136e:	f7ff ff29 	bl	80011c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a28      	ldr	r2, [pc, #160]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001378:	4a27      	ldr	r2, [pc, #156]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a25      	ldr	r2, [pc, #148]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001382:	621a      	str	r2, [r3, #32]
 8001384:	4a24      	ldr	r2, [pc, #144]	@ (8001418 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5_CH4_TRIG Init */
    hdma_tim5_ch4_trig.Instance = DMA1_Stream1;
 800138a:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 800138c:	4a25      	ldr	r2, [pc, #148]	@ (8001424 <HAL_TIM_PWM_MspInit+0x1fc>)
 800138e:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8001390:	4b23      	ldr	r3, [pc, #140]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001392:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001396:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001398:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 800139a:	2240      	movs	r2, #64	@ 0x40
 800139c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800139e:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 80013a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 80013a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013aa:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 80013ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013b2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 80013b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013ba:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 80013c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013c8:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 80013d0:	4813      	ldr	r0, [pc, #76]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 80013d2:	f000 fb6d 	bl	8001ab0 <HAL_DMA_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_TIM_PWM_MspInit+0x1b8>
    {
      Error_Handler();
 80013dc:	f7ff fef2 	bl	80011c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 80013e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80013e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 80013f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80013f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001420 <HAL_TIM_PWM_MspInit+0x1f8>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40000c00 	.word	0x40000c00
 8001404:	40023800 	.word	0x40023800
 8001408:	200000d0 	.word	0x200000d0
 800140c:	40026040 	.word	0x40026040
 8001410:	20000130 	.word	0x20000130
 8001414:	40026070 	.word	0x40026070
 8001418:	20000190 	.word	0x20000190
 800141c:	40026010 	.word	0x40026010
 8001420:	200001f0 	.word	0x200001f0
 8001424:	40026028 	.word	0x40026028

08001428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1a      	ldr	r2, [pc, #104]	@ (80014b0 <HAL_TIM_MspPostInit+0x88>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d12d      	bne.n	80014a6 <HAL_TIM_MspPostInit+0x7e>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <HAL_TIM_MspPostInit+0x8c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a18      	ldr	r2, [pc, #96]	@ (80014b4 <HAL_TIM_MspPostInit+0x8c>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <HAL_TIM_MspPostInit+0x8c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001466:	2301      	movs	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001476:	2302      	movs	r3, #2
 8001478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	4619      	mov	r1, r3
 8001480:	480d      	ldr	r0, [pc, #52]	@ (80014b8 <HAL_TIM_MspPostInit+0x90>)
 8001482:	f000 fee3 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001486:	230e      	movs	r3, #14
 8001488:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001496:	2302      	movs	r3, #2
 8001498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <HAL_TIM_MspPostInit+0x90>)
 80014a2:	f000 fed3 	bl	800224c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40000c00 	.word	0x40000c00
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020000 	.word	0x40020000

080014bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	@ (8001540 <HAL_UART_MspInit+0x84>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12b      	bne.n	8001536 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <HAL_UART_MspInit+0x88>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	4a17      	ldr	r2, [pc, #92]	@ (8001544 <HAL_UART_MspInit+0x88>)
 80014e8:	f043 0320 	orr.w	r3, r3, #32
 80014ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_UART_MspInit+0x88>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_UART_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a10      	ldr	r2, [pc, #64]	@ (8001544 <HAL_UART_MspInit+0x88>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_UART_MspInit+0x88>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001516:	23c0      	movs	r3, #192	@ 0xc0
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001526:	2308      	movs	r3, #8
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	@ (8001548 <HAL_UART_MspInit+0x8c>)
 8001532:	f000 fe8b 	bl	800224c <HAL_GPIO_Init>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	@ 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40011400 	.word	0x40011400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020800 	.word	0x40020800

0800154c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08e      	sub	sp, #56	@ 0x38
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4b33      	ldr	r3, [pc, #204]	@ (8001630 <HAL_InitTick+0xe4>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	4a32      	ldr	r2, [pc, #200]	@ (8001630 <HAL_InitTick+0xe4>)
 8001566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800156a:	6413      	str	r3, [r2, #64]	@ 0x40
 800156c:	4b30      	ldr	r3, [pc, #192]	@ (8001630 <HAL_InitTick+0xe4>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001578:	f107 0210 	add.w	r2, r7, #16
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fc56 	bl	8002e34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800158c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158e:	2b00      	cmp	r3, #0
 8001590:	d103      	bne.n	800159a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001592:	f001 fc27 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 8001596:	6378      	str	r0, [r7, #52]	@ 0x34
 8001598:	e004      	b.n	80015a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800159a:	f001 fc23 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 800159e:	4603      	mov	r3, r0
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a6:	4a23      	ldr	r2, [pc, #140]	@ (8001634 <HAL_InitTick+0xe8>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	0c9b      	lsrs	r3, r3, #18
 80015ae:	3b01      	subs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80015b2:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <HAL_InitTick+0xec>)
 80015b4:	4a21      	ldr	r2, [pc, #132]	@ (800163c <HAL_InitTick+0xf0>)
 80015b6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <HAL_InitTick+0xec>)
 80015ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015be:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 80015c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <HAL_InitTick+0xec>)
 80015c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c4:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <HAL_InitTick+0xec>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_InitTick+0xec>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_InitTick+0xec>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 80015d8:	4817      	ldr	r0, [pc, #92]	@ (8001638 <HAL_InitTick+0xec>)
 80015da:	f001 fc5d 	bl	8002e98 <HAL_TIM_Base_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d11b      	bne.n	8001624 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 80015ec:	4812      	ldr	r0, [pc, #72]	@ (8001638 <HAL_InitTick+0xec>)
 80015ee:	f001 fcad 	bl	8002f4c <HAL_TIM_Base_Start_IT>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d111      	bne.n	8001624 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001600:	202c      	movs	r0, #44	@ 0x2c
 8001602:	f000 fa47 	bl	8001a94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d808      	bhi.n	800161e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	202c      	movs	r0, #44	@ 0x2c
 8001612:	f000 fa23 	bl	8001a5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <HAL_InitTick+0xf4>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	e002      	b.n	8001624 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001624:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001628:	4618      	mov	r0, r3
 800162a:	3738      	adds	r7, #56	@ 0x38
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800
 8001634:	431bde83 	.word	0x431bde83
 8001638:	20000420 	.word	0x20000420
 800163c:	40001c00 	.word	0x40001c00
 8001640:	20000004 	.word	0x20000004

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <NMI_Handler+0x4>

0800164c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <MemManage_Handler+0x4>

0800165c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <UsageFault_Handler+0x4>

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 8001680:	4802      	ldr	r0, [pc, #8]	@ (800168c <DMA1_Stream0_IRQHandler+0x10>)
 8001682:	f000 fb79 	bl	8001d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000190 	.word	0x20000190

08001690 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8001694:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <DMA1_Stream1_IRQHandler+0x10>)
 8001696:	f000 fb6f 	bl	8001d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200001f0 	.word	0x200001f0

080016a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <DMA1_Stream2_IRQHandler+0x10>)
 80016aa:	f000 fb65 	bl	8001d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200000d0 	.word	0x200000d0

080016b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <DMA1_Stream4_IRQHandler+0x10>)
 80016be:	f000 fb5b 	bl	8001d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000130 	.word	0x20000130

080016cc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80016d0:	4802      	ldr	r0, [pc, #8]	@ (80016dc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80016d2:	f002 f997 	bl	8003a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000420 	.word	0x20000420

080016e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e00a      	b.n	8001708 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016f2:	f3af 8000 	nop.w
 80016f6:	4601      	mov	r1, r0
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60ba      	str	r2, [r7, #8]
 80016fe:	b2ca      	uxtb	r2, r1
 8001700:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	dbf0      	blt.n	80016f2 <_read+0x12>
  }

  return len;
 8001710:	687b      	ldr	r3, [r7, #4]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_close>:

int _close(int file)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001742:	605a      	str	r2, [r3, #4]
  return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_isatty>:

int _isatty(int file)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800178c:	4a14      	ldr	r2, [pc, #80]	@ (80017e0 <_sbrk+0x5c>)
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <_sbrk+0x60>)
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001798:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <_sbrk+0x64>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <_sbrk+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d207      	bcs.n	80017c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b4:	f006 ffe4 	bl	8008780 <__errno>
 80017b8:	4603      	mov	r3, r0
 80017ba:	220c      	movs	r2, #12
 80017bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	e009      	b.n	80017d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ca:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a05      	ldr	r2, [pc, #20]	@ (80017e8 <_sbrk+0x64>)
 80017d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20020000 	.word	0x20020000
 80017e4:	00000400 	.word	0x00000400
 80017e8:	20000468 	.word	0x20000468
 80017ec:	200061c8 	.word	0x200061c8

080017f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <SystemInit+0x20>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <SystemInit+0x20>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001814:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800184c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001818:	f7ff ffea 	bl	80017f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480c      	ldr	r0, [pc, #48]	@ (8001850 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181e:	490d      	ldr	r1, [pc, #52]	@ (8001854 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001834:	4c0a      	ldr	r4, [pc, #40]	@ (8001860 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001842:	f006 ffa3 	bl	800878c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001846:	f7fe fe59 	bl	80004fc <main>
  bx  lr    
 800184a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800184c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001858:	08008e2c 	.word	0x08008e2c
  ldr r2, =_sbss
 800185c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001860:	200061c4 	.word	0x200061c4

08001864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC_IRQHandler>
	...

08001868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800186c:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0d      	ldr	r2, [pc, #52]	@ (80018a8 <HAL_Init+0x40>)
 8001872:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <HAL_Init+0x40>)
 800187e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	@ (80018a8 <HAL_Init+0x40>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 f8d8 	bl	8001a46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001896:	200f      	movs	r0, #15
 8001898:	f7ff fe58 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189c:	f7ff fc98 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00

080018ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_IncTick+0x20>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_IncTick+0x24>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <HAL_IncTick+0x24>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000008 	.word	0x20000008
 80018d0:	2000046c 	.word	0x2000046c

080018d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <HAL_GetTick+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	2000046c 	.word	0x2000046c

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	@ (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	@ (8001988 <__NVIC_EnableIRQ+0x38>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	@ (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	@ (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	@ 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff4c 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6e:	f7ff ff61 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001a72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	6978      	ldr	r0, [r7, #20]
 8001a7a:	f7ff ffb1 	bl	80019e0 <NVIC_EncodePriority>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff80 	bl	800198c <__NVIC_SetPriority>
}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff54 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff ff0a 	bl	80018d4 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e099      	b.n	8001c00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aec:	e00f      	b.n	8001b0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aee:	f7ff fef1 	bl	80018d4 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b05      	cmp	r3, #5
 8001afa:	d908      	bls.n	8001b0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2203      	movs	r2, #3
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e078      	b.n	8001c00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1e8      	bne.n	8001aee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	4b38      	ldr	r3, [pc, #224]	@ (8001c08 <HAL_DMA_Init+0x158>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d107      	bne.n	8001b78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b70:	4313      	orrs	r3, r2
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f023 0307 	bic.w	r3, r3, #7
 8001b8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d117      	bne.n	8001bd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00e      	beq.n	8001bd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 facd 	bl	8002154 <DMA_CheckFifoParam>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2240      	movs	r2, #64	@ 0x40
 8001bc4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e016      	b.n	8001c00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fa84 	bl	80020e8 <DMA_CalcBaseAndBitshift>
 8001be0:	4603      	mov	r3, r0
 8001be2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be8:	223f      	movs	r2, #63	@ 0x3f
 8001bea:	409a      	lsls	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	f010803f 	.word	0xf010803f

08001c0c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e050      	b.n	8001cc0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d101      	bne.n	8001c2e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e048      	b.n	8001cc0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2221      	movs	r2, #33	@ 0x21
 8001c6c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fa3a 	bl	80020e8 <DMA_CalcBaseAndBitshift>
 8001c74:	4603      	mov	r3, r0
 8001c76:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca0:	223f      	movs	r2, #63	@ 0x3f
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_DMA_Start_IT+0x26>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e040      	b.n	8001d70 <HAL_DMA_Start_IT+0xa8>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d12f      	bne.n	8001d62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2202      	movs	r2, #2
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f9b8 	bl	800208c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d20:	223f      	movs	r2, #63	@ 0x3f
 8001d22:	409a      	lsls	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0216 	orr.w	r2, r2, #22
 8001d36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0208 	orr.w	r2, r2, #8
 8001d4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e005      	b.n	8001d6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d84:	4b8e      	ldr	r3, [pc, #568]	@ (8001fc0 <HAL_DMA_IRQHandler+0x248>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a8e      	ldr	r2, [pc, #568]	@ (8001fc4 <HAL_DMA_IRQHandler+0x24c>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0a9b      	lsrs	r3, r3, #10
 8001d90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da2:	2208      	movs	r2, #8
 8001da4:	409a      	lsls	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01a      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0204 	bic.w	r2, r2, #4
 8001dca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de8:	2201      	movs	r2, #1
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d012      	beq.n	8001e1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e06:	2201      	movs	r2, #1
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e12:	f043 0202 	orr.w	r2, r3, #2
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1e:	2204      	movs	r2, #4
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00b      	beq.n	8001e50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e48:	f043 0204 	orr.w	r2, r3, #4
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e54:	2210      	movs	r2, #16
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d043      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d03c      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e72:	2210      	movs	r2, #16
 8001e74:	409a      	lsls	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d018      	beq.n	8001eba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d108      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d024      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
 8001ea6:	e01f      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
 8001eb8:	e016      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d107      	bne.n	8001ed8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0208 	bic.w	r2, r2, #8
 8001ed6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eec:	2220      	movs	r2, #32
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 808f 	beq.w	8002018 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8087 	beq.w	8002018 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0e:	2220      	movs	r2, #32
 8001f10:	409a      	lsls	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	d136      	bne.n	8001f90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0216 	bic.w	r2, r2, #22
 8001f30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <HAL_DMA_IRQHandler+0x1da>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0208 	bic.w	r2, r2, #8
 8001f60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f66:	223f      	movs	r2, #63	@ 0x3f
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d07e      	beq.n	8002084 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	4798      	blx	r3
        }
        return;
 8001f8e:	e079      	b.n	8002084 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01d      	beq.n	8001fda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10d      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d031      	beq.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
 8001fbc:	e02c      	b.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
 8001fbe:	bf00      	nop
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d023      	beq.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
 8001fd8:	e01e      	b.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10f      	bne.n	8002008 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0210 	bic.w	r2, r2, #16
 8001ff6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201c:	2b00      	cmp	r3, #0
 800201e:	d032      	beq.n	8002086 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d022      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2205      	movs	r2, #5
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3301      	adds	r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	429a      	cmp	r2, r3
 800204e:	d307      	bcc.n	8002060 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f2      	bne.n	8002044 <HAL_DMA_IRQHandler+0x2cc>
 800205e:	e000      	b.n	8002062 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002060:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
 8002082:	e000      	b.n	8002086 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002084:	bf00      	nop
    }
  }
}
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b40      	cmp	r3, #64	@ 0x40
 80020b8:	d108      	bne.n	80020cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020ca:	e007      	b.n	80020dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	60da      	str	r2, [r3, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	3b10      	subs	r3, #16
 80020f8:	4a14      	ldr	r2, [pc, #80]	@ (800214c <DMA_CalcBaseAndBitshift+0x64>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002102:	4a13      	ldr	r2, [pc, #76]	@ (8002150 <DMA_CalcBaseAndBitshift+0x68>)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d909      	bls.n	800212a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800211e:	f023 0303 	bic.w	r3, r3, #3
 8002122:	1d1a      	adds	r2, r3, #4
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	659a      	str	r2, [r3, #88]	@ 0x58
 8002128:	e007      	b.n	800213a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	aaaaaaab 	.word	0xaaaaaaab
 8002150:	08008e14 	.word	0x08008e14

08002154 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d11f      	bne.n	80021ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d856      	bhi.n	8002222 <DMA_CheckFifoParam+0xce>
 8002174:	a201      	add	r2, pc, #4	@ (adr r2, 800217c <DMA_CheckFifoParam+0x28>)
 8002176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217a:	bf00      	nop
 800217c:	0800218d 	.word	0x0800218d
 8002180:	0800219f 	.word	0x0800219f
 8002184:	0800218d 	.word	0x0800218d
 8002188:	08002223 	.word	0x08002223
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d046      	beq.n	8002226 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800219c:	e043      	b.n	8002226 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021a6:	d140      	bne.n	800222a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ac:	e03d      	b.n	800222a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021b6:	d121      	bne.n	80021fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d837      	bhi.n	800222e <DMA_CheckFifoParam+0xda>
 80021be:	a201      	add	r2, pc, #4	@ (adr r2, 80021c4 <DMA_CheckFifoParam+0x70>)
 80021c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c4:	080021d5 	.word	0x080021d5
 80021c8:	080021db 	.word	0x080021db
 80021cc:	080021d5 	.word	0x080021d5
 80021d0:	080021ed 	.word	0x080021ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
      break;
 80021d8:	e030      	b.n	800223c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d025      	beq.n	8002232 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ea:	e022      	b.n	8002232 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021f4:	d11f      	bne.n	8002236 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021fa:	e01c      	b.n	8002236 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d903      	bls.n	800220a <DMA_CheckFifoParam+0xb6>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d003      	beq.n	8002210 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002208:	e018      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
      break;
 800220e:	e015      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002214:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00e      	beq.n	800223a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
      break;
 8002220:	e00b      	b.n	800223a <DMA_CheckFifoParam+0xe6>
      break;
 8002222:	bf00      	nop
 8002224:	e00a      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      break;
 8002226:	bf00      	nop
 8002228:	e008      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      break;
 800222a:	bf00      	nop
 800222c:	e006      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
 8002230:	e004      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e002      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      break;   
 8002236:	bf00      	nop
 8002238:	e000      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
    }
  } 
  
  return status; 
 800223c:	7bfb      	ldrb	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	@ 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	e16b      	b.n	8002540 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	f040 815a 	bne.w	800253a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d005      	beq.n	800229e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	2b02      	cmp	r3, #2
 800229c:	d130      	bne.n	8002300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	2203      	movs	r2, #3
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 0201 	and.w	r2, r3, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b03      	cmp	r3, #3
 800230a:	d017      	beq.n	800233c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d123      	bne.n	8002390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	08da      	lsrs	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3208      	adds	r2, #8
 8002350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	220f      	movs	r2, #15
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	08da      	lsrs	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3208      	adds	r2, #8
 800238a:	69b9      	ldr	r1, [r7, #24]
 800238c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0203 	and.w	r2, r3, #3
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80b4 	beq.w	800253a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b60      	ldr	r3, [pc, #384]	@ (8002558 <HAL_GPIO_Init+0x30c>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	4a5f      	ldr	r2, [pc, #380]	@ (8002558 <HAL_GPIO_Init+0x30c>)
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002558 <HAL_GPIO_Init+0x30c>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ee:	4a5b      	ldr	r2, [pc, #364]	@ (800255c <HAL_GPIO_Init+0x310>)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	220f      	movs	r2, #15
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a52      	ldr	r2, [pc, #328]	@ (8002560 <HAL_GPIO_Init+0x314>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d02b      	beq.n	8002472 <HAL_GPIO_Init+0x226>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a51      	ldr	r2, [pc, #324]	@ (8002564 <HAL_GPIO_Init+0x318>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d025      	beq.n	800246e <HAL_GPIO_Init+0x222>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a50      	ldr	r2, [pc, #320]	@ (8002568 <HAL_GPIO_Init+0x31c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01f      	beq.n	800246a <HAL_GPIO_Init+0x21e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4f      	ldr	r2, [pc, #316]	@ (800256c <HAL_GPIO_Init+0x320>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d019      	beq.n	8002466 <HAL_GPIO_Init+0x21a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4e      	ldr	r2, [pc, #312]	@ (8002570 <HAL_GPIO_Init+0x324>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0x216>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4d      	ldr	r2, [pc, #308]	@ (8002574 <HAL_GPIO_Init+0x328>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00d      	beq.n	800245e <HAL_GPIO_Init+0x212>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4c      	ldr	r2, [pc, #304]	@ (8002578 <HAL_GPIO_Init+0x32c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <HAL_GPIO_Init+0x20e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4b      	ldr	r2, [pc, #300]	@ (800257c <HAL_GPIO_Init+0x330>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_GPIO_Init+0x20a>
 8002452:	2307      	movs	r3, #7
 8002454:	e00e      	b.n	8002474 <HAL_GPIO_Init+0x228>
 8002456:	2308      	movs	r3, #8
 8002458:	e00c      	b.n	8002474 <HAL_GPIO_Init+0x228>
 800245a:	2306      	movs	r3, #6
 800245c:	e00a      	b.n	8002474 <HAL_GPIO_Init+0x228>
 800245e:	2305      	movs	r3, #5
 8002460:	e008      	b.n	8002474 <HAL_GPIO_Init+0x228>
 8002462:	2304      	movs	r3, #4
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x228>
 8002466:	2303      	movs	r3, #3
 8002468:	e004      	b.n	8002474 <HAL_GPIO_Init+0x228>
 800246a:	2302      	movs	r3, #2
 800246c:	e002      	b.n	8002474 <HAL_GPIO_Init+0x228>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_GPIO_Init+0x228>
 8002472:	2300      	movs	r3, #0
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	f002 0203 	and.w	r2, r2, #3
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	4093      	lsls	r3, r2
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002484:	4935      	ldr	r1, [pc, #212]	@ (800255c <HAL_GPIO_Init+0x310>)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	3302      	adds	r3, #2
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002492:	4b3b      	ldr	r3, [pc, #236]	@ (8002580 <HAL_GPIO_Init+0x334>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b6:	4a32      	ldr	r2, [pc, #200]	@ (8002580 <HAL_GPIO_Init+0x334>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024bc:	4b30      	ldr	r3, [pc, #192]	@ (8002580 <HAL_GPIO_Init+0x334>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e0:	4a27      	ldr	r2, [pc, #156]	@ (8002580 <HAL_GPIO_Init+0x334>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024e6:	4b26      	ldr	r3, [pc, #152]	@ (8002580 <HAL_GPIO_Init+0x334>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800250a:	4a1d      	ldr	r2, [pc, #116]	@ (8002580 <HAL_GPIO_Init+0x334>)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002510:	4b1b      	ldr	r3, [pc, #108]	@ (8002580 <HAL_GPIO_Init+0x334>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002534:	4a12      	ldr	r2, [pc, #72]	@ (8002580 <HAL_GPIO_Init+0x334>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3301      	adds	r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b0f      	cmp	r3, #15
 8002544:	f67f ae90 	bls.w	8002268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3724      	adds	r7, #36	@ 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	40013800 	.word	0x40013800
 8002560:	40020000 	.word	0x40020000
 8002564:	40020400 	.word	0x40020400
 8002568:	40020800 	.word	0x40020800
 800256c:	40020c00 	.word	0x40020c00
 8002570:	40021000 	.word	0x40021000
 8002574:	40021400 	.word	0x40021400
 8002578:	40021800 	.word	0x40021800
 800257c:	40021c00 	.word	0x40021c00
 8002580:	40013c00 	.word	0x40013c00

08002584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e267      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d075      	beq.n	800268e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025a2:	4b88      	ldr	r3, [pc, #544]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d00c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ae:	4b85      	ldr	r3, [pc, #532]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d112      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ba:	4b82      	ldr	r3, [pc, #520]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025c6:	d10b      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	4b7e      	ldr	r3, [pc, #504]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d05b      	beq.n	800268c <HAL_RCC_OscConfig+0x108>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d157      	bne.n	800268c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e242      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e8:	d106      	bne.n	80025f8 <HAL_RCC_OscConfig+0x74>
 80025ea:	4b76      	ldr	r3, [pc, #472]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a75      	ldr	r2, [pc, #468]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e01d      	b.n	8002634 <HAL_RCC_OscConfig+0xb0>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x98>
 8002602:	4b70      	ldr	r3, [pc, #448]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a6f      	ldr	r2, [pc, #444]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b6d      	ldr	r3, [pc, #436]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6c      	ldr	r2, [pc, #432]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e00b      	b.n	8002634 <HAL_RCC_OscConfig+0xb0>
 800261c:	4b69      	ldr	r3, [pc, #420]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a68      	ldr	r2, [pc, #416]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b66      	ldr	r3, [pc, #408]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a65      	ldr	r2, [pc, #404]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 800262e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff f94a 	bl	80018d4 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7ff f946 	bl	80018d4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e207      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b5b      	ldr	r3, [pc, #364]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0xc0>
 8002662:	e014      	b.n	800268e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7ff f936 	bl	80018d4 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800266c:	f7ff f932 	bl	80018d4 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	@ 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1f3      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	4b51      	ldr	r3, [pc, #324]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0xe8>
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d063      	beq.n	8002762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800269a:	4b4a      	ldr	r3, [pc, #296]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a6:	4b47      	ldr	r3, [pc, #284]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d11c      	bne.n	80026ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b44      	ldr	r3, [pc, #272]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d116      	bne.n	80026ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	4b41      	ldr	r3, [pc, #260]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_RCC_OscConfig+0x152>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e1c7      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b3b      	ldr	r3, [pc, #236]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4937      	ldr	r1, [pc, #220]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	e03a      	b.n	8002762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f4:	4b34      	ldr	r3, [pc, #208]	@ (80027c8 <HAL_RCC_OscConfig+0x244>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7ff f8eb 	bl	80018d4 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002702:	f7ff f8e7 	bl	80018d4 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e1a8      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	4b2b      	ldr	r3, [pc, #172]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b28      	ldr	r3, [pc, #160]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4925      	ldr	r1, [pc, #148]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
 8002734:	e015      	b.n	8002762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002736:	4b24      	ldr	r3, [pc, #144]	@ (80027c8 <HAL_RCC_OscConfig+0x244>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7ff f8ca 	bl	80018d4 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002744:	f7ff f8c6 	bl	80018d4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e187      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002756:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d036      	beq.n	80027dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d016      	beq.n	80027a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002776:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <HAL_RCC_OscConfig+0x248>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7ff f8aa 	bl	80018d4 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002784:	f7ff f8a6 	bl	80018d4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e167      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002796:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x200>
 80027a2:	e01b      	b.n	80027dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a4:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <HAL_RCC_OscConfig+0x248>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027aa:	f7ff f893 	bl	80018d4 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b0:	e00e      	b.n	80027d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b2:	f7ff f88f 	bl	80018d4 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d907      	bls.n	80027d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e150      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
 80027c4:	40023800 	.word	0x40023800
 80027c8:	42470000 	.word	0x42470000
 80027cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	4b88      	ldr	r3, [pc, #544]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 80027d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ea      	bne.n	80027b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8097 	beq.w	8002918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ee:	4b81      	ldr	r3, [pc, #516]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	4b7d      	ldr	r3, [pc, #500]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	4a7c      	ldr	r2, [pc, #496]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	@ 0x40
 800280a:	4b7a      	ldr	r3, [pc, #488]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002816:	2301      	movs	r3, #1
 8002818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b77      	ldr	r3, [pc, #476]	@ (80029f8 <HAL_RCC_OscConfig+0x474>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d118      	bne.n	8002858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002826:	4b74      	ldr	r3, [pc, #464]	@ (80029f8 <HAL_RCC_OscConfig+0x474>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a73      	ldr	r2, [pc, #460]	@ (80029f8 <HAL_RCC_OscConfig+0x474>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002832:	f7ff f84f 	bl	80018d4 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7ff f84b 	bl	80018d4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e10c      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b6a      	ldr	r3, [pc, #424]	@ (80029f8 <HAL_RCC_OscConfig+0x474>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x2ea>
 8002860:	4b64      	ldr	r3, [pc, #400]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002864:	4a63      	ldr	r2, [pc, #396]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6713      	str	r3, [r2, #112]	@ 0x70
 800286c:	e01c      	b.n	80028a8 <HAL_RCC_OscConfig+0x324>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b05      	cmp	r3, #5
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x30c>
 8002876:	4b5f      	ldr	r3, [pc, #380]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287a:	4a5e      	ldr	r2, [pc, #376]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	6713      	str	r3, [r2, #112]	@ 0x70
 8002882:	4b5c      	ldr	r3, [pc, #368]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002886:	4a5b      	ldr	r2, [pc, #364]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6713      	str	r3, [r2, #112]	@ 0x70
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0x324>
 8002890:	4b58      	ldr	r3, [pc, #352]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002894:	4a57      	ldr	r2, [pc, #348]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	6713      	str	r3, [r2, #112]	@ 0x70
 800289c:	4b55      	ldr	r3, [pc, #340]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a0:	4a54      	ldr	r2, [pc, #336]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 80028a2:	f023 0304 	bic.w	r3, r3, #4
 80028a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d015      	beq.n	80028dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7ff f810 	bl	80018d4 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7ff f80c 	bl	80018d4 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e0cb      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	4b49      	ldr	r3, [pc, #292]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ee      	beq.n	80028b8 <HAL_RCC_OscConfig+0x334>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028dc:	f7fe fffa 	bl	80018d4 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7fe fff6 	bl	80018d4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0b5      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fa:	4b3e      	ldr	r3, [pc, #248]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ee      	bne.n	80028e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d105      	bne.n	8002918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290c:	4b39      	ldr	r3, [pc, #228]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	4a38      	ldr	r2, [pc, #224]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002916:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80a1 	beq.w	8002a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002922:	4b34      	ldr	r3, [pc, #208]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b08      	cmp	r3, #8
 800292c:	d05c      	beq.n	80029e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d141      	bne.n	80029ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b31      	ldr	r3, [pc, #196]	@ (80029fc <HAL_RCC_OscConfig+0x478>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe ffca 	bl	80018d4 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe ffc6 	bl	80018d4 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e087      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	019b      	lsls	r3, r3, #6
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	3b01      	subs	r3, #1
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	491b      	ldr	r1, [pc, #108]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800298c:	4b1b      	ldr	r3, [pc, #108]	@ (80029fc <HAL_RCC_OscConfig+0x478>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7fe ff9f 	bl	80018d4 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299a:	f7fe ff9b 	bl	80018d4 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e05c      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ac:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x416>
 80029b8:	e054      	b.n	8002a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ba:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <HAL_RCC_OscConfig+0x478>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe ff88 	bl	80018d4 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fe ff84 	bl	80018d4 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e045      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_RCC_OscConfig+0x470>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x444>
 80029e6:	e03d      	b.n	8002a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d107      	bne.n	8002a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e038      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40007000 	.word	0x40007000
 80029fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a00:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_RCC_OscConfig+0x4ec>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d028      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d121      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d11a      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a30:	4013      	ands	r3, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d111      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d107      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800

08002a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0cc      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a88:	4b68      	ldr	r3, [pc, #416]	@ (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d90c      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a96:	4b65      	ldr	r3, [pc, #404]	@ (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	4b63      	ldr	r3, [pc, #396]	@ (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0b8      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac8:	4b59      	ldr	r3, [pc, #356]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a58      	ldr	r2, [pc, #352]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ad2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae0:	4b53      	ldr	r3, [pc, #332]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a52      	ldr	r2, [pc, #328]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b50      	ldr	r3, [pc, #320]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	494d      	ldr	r1, [pc, #308]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d044      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	4b47      	ldr	r3, [pc, #284]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d119      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e07f      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d003      	beq.n	8002b32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b32:	4b3f      	ldr	r3, [pc, #252]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e06f      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b42:	4b3b      	ldr	r3, [pc, #236]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e067      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b52:	4b37      	ldr	r3, [pc, #220]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f023 0203 	bic.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4934      	ldr	r1, [pc, #208]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b64:	f7fe feb6 	bl	80018d4 <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6c:	f7fe feb2 	bl	80018d4 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e04f      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	4b2b      	ldr	r3, [pc, #172]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 020c 	and.w	r2, r3, #12
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d1eb      	bne.n	8002b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b94:	4b25      	ldr	r3, [pc, #148]	@ (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d20c      	bcs.n	8002bbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b22      	ldr	r3, [pc, #136]	@ (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b20      	ldr	r3, [pc, #128]	@ (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e032      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc8:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4916      	ldr	r1, [pc, #88]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d009      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be6:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	490e      	ldr	r1, [pc, #56]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bfa:	f000 f821 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	4b0b      	ldr	r3, [pc, #44]	@ (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	490a      	ldr	r1, [pc, #40]	@ (8002c34 <HAL_RCC_ClockConfig+0x1c0>)
 8002c0c:	5ccb      	ldrb	r3, [r1, r3]
 8002c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c12:	4a09      	ldr	r2, [pc, #36]	@ (8002c38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <HAL_RCC_ClockConfig+0x1c8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe fc96 	bl	800154c <HAL_InitTick>

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023c00 	.word	0x40023c00
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08008dfc 	.word	0x08008dfc
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	20000004 	.word	0x20000004

08002c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c44:	b090      	sub	sp, #64	@ 0x40
 8002c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c58:	4b59      	ldr	r3, [pc, #356]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 030c 	and.w	r3, r3, #12
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d00d      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x40>
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	f200 80a1 	bhi.w	8002dac <HAL_RCC_GetSysClockFreq+0x16c>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x34>
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c72:	e09b      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b53      	ldr	r3, [pc, #332]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c78:	e09b      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c7a:	4b53      	ldr	r3, [pc, #332]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c7e:	e098      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c80:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d028      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c96:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	099b      	lsrs	r3, r3, #6
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	623b      	str	r3, [r7, #32]
 8002ca0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4b47      	ldr	r3, [pc, #284]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cac:	fb03 f201 	mul.w	r2, r3, r1
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	fb00 f303 	mul.w	r3, r0, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4a43      	ldr	r2, [pc, #268]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cba:	fba0 1202 	umull	r1, r2, r0, r2
 8002cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cc0:	460a      	mov	r2, r1
 8002cc2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002cc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cc6:	4413      	add	r3, r2
 8002cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ccc:	2200      	movs	r2, #0
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	61fa      	str	r2, [r7, #28]
 8002cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cda:	f7fd fa79 	bl	80001d0 <__aeabi_uldivmod>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ce6:	e053      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce8:	4b35      	ldr	r3, [pc, #212]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	2200      	movs	r2, #0
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	617a      	str	r2, [r7, #20]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cfa:	f04f 0b00 	mov.w	fp, #0
 8002cfe:	4652      	mov	r2, sl
 8002d00:	465b      	mov	r3, fp
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	0159      	lsls	r1, r3, #5
 8002d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d10:	0150      	lsls	r0, r2, #5
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	ebb2 080a 	subs.w	r8, r2, sl
 8002d1a:	eb63 090b 	sbc.w	r9, r3, fp
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d32:	ebb2 0408 	subs.w	r4, r2, r8
 8002d36:	eb63 0509 	sbc.w	r5, r3, r9
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	00eb      	lsls	r3, r5, #3
 8002d44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d48:	00e2      	lsls	r2, r4, #3
 8002d4a:	4614      	mov	r4, r2
 8002d4c:	461d      	mov	r5, r3
 8002d4e:	eb14 030a 	adds.w	r3, r4, sl
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	eb45 030b 	adc.w	r3, r5, fp
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d66:	4629      	mov	r1, r5
 8002d68:	028b      	lsls	r3, r1, #10
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d70:	4621      	mov	r1, r4
 8002d72:	028a      	lsls	r2, r1, #10
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	60fa      	str	r2, [r7, #12]
 8002d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d84:	f7fd fa24 	bl	80001d0 <__aeabi_uldivmod>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d90:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002da0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002daa:	e002      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3740      	adds	r7, #64	@ 0x40
 8002db8:	46bd      	mov	sp, r7
 8002dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	00f42400 	.word	0x00f42400
 8002dc8:	00b71b00 	.word	0x00b71b00

08002dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	@ (8002de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000000 	.word	0x20000000

08002de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002de8:	f7ff fff0 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	0a9b      	lsrs	r3, r3, #10
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4903      	ldr	r1, [pc, #12]	@ (8002e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40023800 	.word	0x40023800
 8002e08:	08008e0c 	.word	0x08008e0c

08002e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e10:	f7ff ffdc 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0b5b      	lsrs	r3, r3, #13
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	@ (8002e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	08008e0c 	.word	0x08008e0c

08002e34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	220f      	movs	r2, #15
 8002e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e44:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e50:	4b0f      	ldr	r3, [pc, #60]	@ (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e68:	4b09      	ldr	r3, [pc, #36]	@ (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e76:	4b07      	ldr	r3, [pc, #28]	@ (8002e94 <HAL_RCC_GetClockConfig+0x60>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0207 	and.w	r2, r3, #7
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	601a      	str	r2, [r3, #0]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40023c00 	.word	0x40023c00

08002e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e041      	b.n	8002f2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f839 	bl	8002f36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	f001 f988 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d001      	beq.n	8002f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e04e      	b.n	8003002 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a23      	ldr	r2, [pc, #140]	@ (8003010 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d022      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f8e:	d01d      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1f      	ldr	r2, [pc, #124]	@ (8003014 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d018      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003018 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d013      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800301c <HAL_TIM_Base_Start_IT+0xd0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8003020 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	@ (8003024 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a18      	ldr	r2, [pc, #96]	@ (8003028 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d111      	bne.n	8002ff0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d010      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fee:	e007      	b.n	8003000 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40010000 	.word	0x40010000
 8003014:	40000400 	.word	0x40000400
 8003018:	40000800 	.word	0x40000800
 800301c:	40000c00 	.word	0x40000c00
 8003020:	40010400 	.word	0x40010400
 8003024:	40014000 	.word	0x40014000
 8003028:	40001800 	.word	0x40001800

0800302c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e041      	b.n	80030c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fe f8e8 	bl	8001228 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f001 f8be 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2200      	movs	r2, #0
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 fc04 	bl	80048ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2e      	ldr	r2, [pc, #184]	@ (80031a4 <HAL_TIM_PWM_Stop+0xd8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_TIM_PWM_Stop+0x2c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2d      	ldr	r2, [pc, #180]	@ (80031a8 <HAL_TIM_PWM_Stop+0xdc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_TIM_PWM_Stop+0x30>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <HAL_TIM_PWM_Stop+0x32>
 80030fc:	2300      	movs	r3, #0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d017      	beq.n	8003132 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	f241 1311 	movw	r3, #4369	@ 0x1111
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10f      	bne.n	8003132 <HAL_TIM_PWM_Stop+0x66>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a1a      	ldr	r2, [r3, #32]
 8003118:	f240 4344 	movw	r3, #1092	@ 0x444
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <HAL_TIM_PWM_Stop+0x66>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003130:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a1a      	ldr	r2, [r3, #32]
 8003138:	f241 1311 	movw	r3, #4369	@ 0x1111
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10f      	bne.n	8003162 <HAL_TIM_PWM_Stop+0x96>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a1a      	ldr	r2, [r3, #32]
 8003148:	f240 4344 	movw	r3, #1092	@ 0x444
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d107      	bne.n	8003162 <HAL_TIM_PWM_Stop+0x96>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Stop+0xa6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003170:	e013      	b.n	800319a <HAL_TIM_PWM_Stop+0xce>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d104      	bne.n	8003182 <HAL_TIM_PWM_Stop+0xb6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003180:	e00b      	b.n	800319a <HAL_TIM_PWM_Stop+0xce>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d104      	bne.n	8003192 <HAL_TIM_PWM_Stop+0xc6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003190:	e003      	b.n	800319a <HAL_TIM_PWM_Stop+0xce>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40010400 	.word	0x40010400

080031ac <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e022      	b.n	800321e <HAL_TIM_PWM_Start_DMA+0x72>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d109      	bne.n	80031f2 <HAL_TIM_PWM_Start_DMA+0x46>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	bf0c      	ite	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	2300      	movne	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	e015      	b.n	800321e <HAL_TIM_PWM_Start_DMA+0x72>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d109      	bne.n	800320c <HAL_TIM_PWM_Start_DMA+0x60>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	e008      	b.n	800321e <HAL_TIM_PWM_Start_DMA+0x72>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003222:	2302      	movs	r3, #2
 8003224:	e171      	b.n	800350a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <HAL_TIM_PWM_Start_DMA+0x94>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	e022      	b.n	8003286 <HAL_TIM_PWM_Start_DMA+0xda>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d109      	bne.n	800325a <HAL_TIM_PWM_Start_DMA+0xae>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	e015      	b.n	8003286 <HAL_TIM_PWM_Start_DMA+0xda>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d109      	bne.n	8003274 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	e008      	b.n	8003286 <HAL_TIM_PWM_Start_DMA+0xda>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d024      	beq.n	80032d4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_TIM_PWM_Start_DMA+0xea>
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e137      	b.n	800350a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <HAL_TIM_PWM_Start_DMA+0xfe>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032a8:	e016      	b.n	80032d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_PWM_Start_DMA+0x10e>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032b8:	e00e      	b.n	80032d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d104      	bne.n	80032ca <HAL_TIM_PWM_Start_DMA+0x11e>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032c8:	e006      	b.n	80032d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2202      	movs	r2, #2
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032d2:	e001      	b.n	80032d8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e118      	b.n	800350a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	f200 80ae 	bhi.w	800343c <HAL_TIM_PWM_Start_DMA+0x290>
 80032e0:	a201      	add	r2, pc, #4	@ (adr r2, 80032e8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	0800331d 	.word	0x0800331d
 80032ec:	0800343d 	.word	0x0800343d
 80032f0:	0800343d 	.word	0x0800343d
 80032f4:	0800343d 	.word	0x0800343d
 80032f8:	08003365 	.word	0x08003365
 80032fc:	0800343d 	.word	0x0800343d
 8003300:	0800343d 	.word	0x0800343d
 8003304:	0800343d 	.word	0x0800343d
 8003308:	080033ad 	.word	0x080033ad
 800330c:	0800343d 	.word	0x0800343d
 8003310:	0800343d 	.word	0x0800343d
 8003314:	0800343d 	.word	0x0800343d
 8003318:	080033f5 	.word	0x080033f5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	4a7c      	ldr	r2, [pc, #496]	@ (8003514 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003322:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	4a7b      	ldr	r2, [pc, #492]	@ (8003518 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800332a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	4a7a      	ldr	r2, [pc, #488]	@ (800351c <HAL_TIM_PWM_Start_DMA+0x370>)
 8003332:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3334      	adds	r3, #52	@ 0x34
 8003340:	461a      	mov	r2, r3
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	f7fe fcc0 	bl	8001cc8 <HAL_DMA_Start_IT>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0db      	b.n	800350a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003360:	60da      	str	r2, [r3, #12]
      break;
 8003362:	e06e      	b.n	8003442 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003368:	4a6a      	ldr	r2, [pc, #424]	@ (8003514 <HAL_TIM_PWM_Start_DMA+0x368>)
 800336a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003370:	4a69      	ldr	r2, [pc, #420]	@ (8003518 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003378:	4a68      	ldr	r2, [pc, #416]	@ (800351c <HAL_TIM_PWM_Start_DMA+0x370>)
 800337a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3338      	adds	r3, #56	@ 0x38
 8003388:	461a      	mov	r2, r3
 800338a:	887b      	ldrh	r3, [r7, #2]
 800338c:	f7fe fc9c 	bl	8001cc8 <HAL_DMA_Start_IT>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0b7      	b.n	800350a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033a8:	60da      	str	r2, [r3, #12]
      break;
 80033aa:	e04a      	b.n	8003442 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	4a58      	ldr	r2, [pc, #352]	@ (8003514 <HAL_TIM_PWM_Start_DMA+0x368>)
 80033b2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	4a57      	ldr	r2, [pc, #348]	@ (8003518 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80033ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	4a56      	ldr	r2, [pc, #344]	@ (800351c <HAL_TIM_PWM_Start_DMA+0x370>)
 80033c2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	333c      	adds	r3, #60	@ 0x3c
 80033d0:	461a      	mov	r2, r3
 80033d2:	887b      	ldrh	r3, [r7, #2]
 80033d4:	f7fe fc78 	bl	8001cc8 <HAL_DMA_Start_IT>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e093      	b.n	800350a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033f0:	60da      	str	r2, [r3, #12]
      break;
 80033f2:	e026      	b.n	8003442 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	4a46      	ldr	r2, [pc, #280]	@ (8003514 <HAL_TIM_PWM_Start_DMA+0x368>)
 80033fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003400:	4a45      	ldr	r2, [pc, #276]	@ (8003518 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003402:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	4a44      	ldr	r2, [pc, #272]	@ (800351c <HAL_TIM_PWM_Start_DMA+0x370>)
 800340a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3340      	adds	r3, #64	@ 0x40
 8003418:	461a      	mov	r2, r3
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	f7fe fc54 	bl	8001cc8 <HAL_DMA_Start_IT>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e06f      	b.n	800350a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003438:	60da      	str	r2, [r3, #12]
      break;
 800343a:	e002      	b.n	8003442 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	75fb      	strb	r3, [r7, #23]
      break;
 8003440:	bf00      	nop
  }

  if (status == HAL_OK)
 8003442:	7dfb      	ldrb	r3, [r7, #23]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d15f      	bne.n	8003508 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2201      	movs	r2, #1
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	4618      	mov	r0, r3
 8003452:	f001 fa4b 	bl	80048ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a31      	ldr	r2, [pc, #196]	@ (8003520 <HAL_TIM_PWM_Start_DMA+0x374>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_TIM_PWM_Start_DMA+0x2be>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a2f      	ldr	r2, [pc, #188]	@ (8003524 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d101      	bne.n	800346e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003482:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a25      	ldr	r2, [pc, #148]	@ (8003520 <HAL_TIM_PWM_Start_DMA+0x374>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_TIM_PWM_Start_DMA+0x328>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003496:	d01d      	beq.n	80034d4 <HAL_TIM_PWM_Start_DMA+0x328>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a22      	ldr	r2, [pc, #136]	@ (8003528 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_TIM_PWM_Start_DMA+0x328>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a21      	ldr	r2, [pc, #132]	@ (800352c <HAL_TIM_PWM_Start_DMA+0x380>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_TIM_PWM_Start_DMA+0x328>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003530 <HAL_TIM_PWM_Start_DMA+0x384>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_TIM_PWM_Start_DMA+0x328>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003524 <HAL_TIM_PWM_Start_DMA+0x378>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_TIM_PWM_Start_DMA+0x328>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003534 <HAL_TIM_PWM_Start_DMA+0x388>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_TIM_PWM_Start_DMA+0x328>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003538 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d111      	bne.n	80034f8 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	d010      	beq.n	8003508 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f6:	e007      	b.n	8003508 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003508:	7dfb      	ldrb	r3, [r7, #23]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	08003fab 	.word	0x08003fab
 8003518:	08004053 	.word	0x08004053
 800351c:	08003f19 	.word	0x08003f19
 8003520:	40010000 	.word	0x40010000
 8003524:	40010400 	.word	0x40010400
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	40000c00 	.word	0x40000c00
 8003534:	40014000 	.word	0x40014000
 8003538:	40001800 	.word	0x40001800

0800353c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e041      	b.n	80035d2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f839 	bl	80035da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	4619      	mov	r1, r3
 800357a:	4610      	mov	r0, r2
 800357c:	f000 fe36 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2200      	movs	r2, #0
 80035fe:	6839      	ldr	r1, [r7, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f001 f973 	bl	80048ec <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10f      	bne.n	8003636 <HAL_TIM_IC_Stop+0x48>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a1a      	ldr	r2, [r3, #32]
 800361c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d107      	bne.n	8003636 <HAL_TIM_IC_Stop+0x48>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d104      	bne.n	8003646 <HAL_TIM_IC_Stop+0x58>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003644:	e013      	b.n	800366e <HAL_TIM_IC_Stop+0x80>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d104      	bne.n	8003656 <HAL_TIM_IC_Stop+0x68>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003654:	e00b      	b.n	800366e <HAL_TIM_IC_Stop+0x80>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d104      	bne.n	8003666 <HAL_TIM_IC_Stop+0x78>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003664:	e003      	b.n	800366e <HAL_TIM_IC_Stop+0x80>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d104      	bne.n	800367e <HAL_TIM_IC_Stop+0x90>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800367c:	e013      	b.n	80036a6 <HAL_TIM_IC_Stop+0xb8>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b04      	cmp	r3, #4
 8003682:	d104      	bne.n	800368e <HAL_TIM_IC_Stop+0xa0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800368c:	e00b      	b.n	80036a6 <HAL_TIM_IC_Stop+0xb8>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d104      	bne.n	800369e <HAL_TIM_IC_Stop+0xb0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800369c:	e003      	b.n	80036a6 <HAL_TIM_IC_Stop+0xb8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d104      	bne.n	80036d2 <HAL_TIM_IC_Start_DMA+0x22>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	e013      	b.n	80036fa <HAL_TIM_IC_Start_DMA+0x4a>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_IC_Start_DMA+0x32>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	e00b      	b.n	80036fa <HAL_TIM_IC_Start_DMA+0x4a>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d104      	bne.n	80036f2 <HAL_TIM_IC_Start_DMA+0x42>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	e003      	b.n	80036fa <HAL_TIM_IC_Start_DMA+0x4a>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d104      	bne.n	800370c <HAL_TIM_IC_Start_DMA+0x5c>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003708:	b2db      	uxtb	r3, r3
 800370a:	e013      	b.n	8003734 <HAL_TIM_IC_Start_DMA+0x84>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b04      	cmp	r3, #4
 8003710:	d104      	bne.n	800371c <HAL_TIM_IC_Start_DMA+0x6c>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e00b      	b.n	8003734 <HAL_TIM_IC_Start_DMA+0x84>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b08      	cmp	r3, #8
 8003720:	d104      	bne.n	800372c <HAL_TIM_IC_Start_DMA+0x7c>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e003      	b.n	8003734 <HAL_TIM_IC_Start_DMA+0x84>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003732:	b2db      	uxtb	r3, r3
 8003734:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8003736:	7dbb      	ldrb	r3, [r7, #22]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d002      	beq.n	8003742 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800373c:	7d7b      	ldrb	r3, [r7, #21]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d101      	bne.n	8003746 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8003742:	2302      	movs	r3, #2
 8003744:	e146      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8003746:	7dbb      	ldrb	r3, [r7, #22]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d143      	bne.n	80037d4 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800374c:	7d7b      	ldrb	r3, [r7, #21]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d140      	bne.n	80037d4 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_TIM_IC_Start_DMA+0xae>
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e138      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <HAL_TIM_IC_Start_DMA+0xc2>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003770:	e013      	b.n	800379a <HAL_TIM_IC_Start_DMA+0xea>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d104      	bne.n	8003782 <HAL_TIM_IC_Start_DMA+0xd2>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003780:	e00b      	b.n	800379a <HAL_TIM_IC_Start_DMA+0xea>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d104      	bne.n	8003792 <HAL_TIM_IC_Start_DMA+0xe2>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003790:	e003      	b.n	800379a <HAL_TIM_IC_Start_DMA+0xea>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d104      	bne.n	80037aa <HAL_TIM_IC_Start_DMA+0xfa>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 80037a8:	e016      	b.n	80037d8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d104      	bne.n	80037ba <HAL_TIM_IC_Start_DMA+0x10a>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    if ((pData == NULL) || (Length == 0U))
 80037b8:	e00e      	b.n	80037d8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d104      	bne.n	80037ca <HAL_TIM_IC_Start_DMA+0x11a>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 80037c8:	e006      	b.n	80037d8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 80037d2:	e001      	b.n	80037d8 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0fd      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 f883 	bl	80048ec <TIM_CCxChannelCmd>

  switch (Channel)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b0c      	cmp	r3, #12
 80037ea:	f200 80ad 	bhi.w	8003948 <HAL_TIM_IC_Start_DMA+0x298>
 80037ee:	a201      	add	r2, pc, #4	@ (adr r2, 80037f4 <HAL_TIM_IC_Start_DMA+0x144>)
 80037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f4:	08003829 	.word	0x08003829
 80037f8:	08003949 	.word	0x08003949
 80037fc:	08003949 	.word	0x08003949
 8003800:	08003949 	.word	0x08003949
 8003804:	08003871 	.word	0x08003871
 8003808:	08003949 	.word	0x08003949
 800380c:	08003949 	.word	0x08003949
 8003810:	08003949 	.word	0x08003949
 8003814:	080038b9 	.word	0x080038b9
 8003818:	08003949 	.word	0x08003949
 800381c:	08003949 	.word	0x08003949
 8003820:	08003949 	.word	0x08003949
 8003824:	08003901 	.word	0x08003901
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	4a6b      	ldr	r2, [pc, #428]	@ (80039dc <HAL_TIM_IC_Start_DMA+0x32c>)
 800382e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	4a6a      	ldr	r2, [pc, #424]	@ (80039e0 <HAL_TIM_IC_Start_DMA+0x330>)
 8003836:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	4a69      	ldr	r2, [pc, #420]	@ (80039e4 <HAL_TIM_IC_Start_DMA+0x334>)
 800383e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3334      	adds	r3, #52	@ 0x34
 800384a:	4619      	mov	r1, r3
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	887b      	ldrh	r3, [r7, #2]
 8003850:	f7fe fa3a 	bl	8001cc8 <HAL_DMA_Start_IT>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e0ba      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800386c:	60da      	str	r2, [r3, #12]
      break;
 800386e:	e06e      	b.n	800394e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	4a59      	ldr	r2, [pc, #356]	@ (80039dc <HAL_TIM_IC_Start_DMA+0x32c>)
 8003876:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387c:	4a58      	ldr	r2, [pc, #352]	@ (80039e0 <HAL_TIM_IC_Start_DMA+0x330>)
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003884:	4a57      	ldr	r2, [pc, #348]	@ (80039e4 <HAL_TIM_IC_Start_DMA+0x334>)
 8003886:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3338      	adds	r3, #56	@ 0x38
 8003892:	4619      	mov	r1, r3
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	887b      	ldrh	r3, [r7, #2]
 8003898:	f7fe fa16 	bl	8001cc8 <HAL_DMA_Start_IT>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e096      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038b4:	60da      	str	r2, [r3, #12]
      break;
 80038b6:	e04a      	b.n	800394e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038bc:	4a47      	ldr	r2, [pc, #284]	@ (80039dc <HAL_TIM_IC_Start_DMA+0x32c>)
 80038be:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	4a46      	ldr	r2, [pc, #280]	@ (80039e0 <HAL_TIM_IC_Start_DMA+0x330>)
 80038c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038cc:	4a45      	ldr	r2, [pc, #276]	@ (80039e4 <HAL_TIM_IC_Start_DMA+0x334>)
 80038ce:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	333c      	adds	r3, #60	@ 0x3c
 80038da:	4619      	mov	r1, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	f7fe f9f2 	bl	8001cc8 <HAL_DMA_Start_IT>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e072      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038fc:	60da      	str	r2, [r3, #12]
      break;
 80038fe:	e026      	b.n	800394e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003904:	4a35      	ldr	r2, [pc, #212]	@ (80039dc <HAL_TIM_IC_Start_DMA+0x32c>)
 8003906:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	4a34      	ldr	r2, [pc, #208]	@ (80039e0 <HAL_TIM_IC_Start_DMA+0x330>)
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	4a33      	ldr	r2, [pc, #204]	@ (80039e4 <HAL_TIM_IC_Start_DMA+0x334>)
 8003916:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3340      	adds	r3, #64	@ 0x40
 8003922:	4619      	mov	r1, r3
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	887b      	ldrh	r3, [r7, #2]
 8003928:	f7fe f9ce 	bl	8001cc8 <HAL_DMA_Start_IT>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e04e      	b.n	80039d4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003944:	60da      	str	r2, [r3, #12]
      break;
 8003946:	e002      	b.n	800394e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	75fb      	strb	r3, [r7, #23]
      break;
 800394c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a25      	ldr	r2, [pc, #148]	@ (80039e8 <HAL_TIM_IC_Start_DMA+0x338>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d022      	beq.n	800399e <HAL_TIM_IC_Start_DMA+0x2ee>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003960:	d01d      	beq.n	800399e <HAL_TIM_IC_Start_DMA+0x2ee>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a21      	ldr	r2, [pc, #132]	@ (80039ec <HAL_TIM_IC_Start_DMA+0x33c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d018      	beq.n	800399e <HAL_TIM_IC_Start_DMA+0x2ee>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1f      	ldr	r2, [pc, #124]	@ (80039f0 <HAL_TIM_IC_Start_DMA+0x340>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_TIM_IC_Start_DMA+0x2ee>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1e      	ldr	r2, [pc, #120]	@ (80039f4 <HAL_TIM_IC_Start_DMA+0x344>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00e      	beq.n	800399e <HAL_TIM_IC_Start_DMA+0x2ee>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1c      	ldr	r2, [pc, #112]	@ (80039f8 <HAL_TIM_IC_Start_DMA+0x348>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_TIM_IC_Start_DMA+0x2ee>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1b      	ldr	r2, [pc, #108]	@ (80039fc <HAL_TIM_IC_Start_DMA+0x34c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <HAL_TIM_IC_Start_DMA+0x2ee>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a19      	ldr	r2, [pc, #100]	@ (8003a00 <HAL_TIM_IC_Start_DMA+0x350>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d111      	bne.n	80039c2 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b06      	cmp	r3, #6
 80039ae:	d010      	beq.n	80039d2 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c0:	e007      	b.n	80039d2 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	080040bb 	.word	0x080040bb
 80039e0:	08004183 	.word	0x08004183
 80039e4:	08003f19 	.word	0x08003f19
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40000c00 	.word	0x40000c00
 80039f8:	40010400 	.word	0x40010400
 80039fc:	40014000 	.word	0x40014000
 8003a00:	40001800 	.word	0x40001800

08003a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d020      	beq.n	8003a68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01b      	beq.n	8003a68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0202 	mvn.w	r2, #2
 8003a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fa30 	bl	8003eb4 <HAL_TIM_IC_CaptureCallback>
 8003a54:	e005      	b.n	8003a62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fa22 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7fd fa8d 	bl	8000f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d020      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01b      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0204 	mvn.w	r2, #4
 8003a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa0a 	bl	8003eb4 <HAL_TIM_IC_CaptureCallback>
 8003aa0:	e005      	b.n	8003aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f9fc 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7fd fa67 	bl	8000f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d020      	beq.n	8003b00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01b      	beq.n	8003b00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0208 	mvn.w	r2, #8
 8003ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f9e4 	bl	8003eb4 <HAL_TIM_IC_CaptureCallback>
 8003aec:	e005      	b.n	8003afa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f9d6 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7fd fa41 	bl	8000f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d020      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01b      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f06f 0210 	mvn.w	r2, #16
 8003b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2208      	movs	r2, #8
 8003b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f9be 	bl	8003eb4 <HAL_TIM_IC_CaptureCallback>
 8003b38:	e005      	b.n	8003b46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f9b0 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7fd fa1b 	bl	8000f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00c      	beq.n	8003b70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0201 	mvn.w	r2, #1
 8003b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd fb18 	bl	80011a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00c      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 ff58 	bl	8004a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f99c 	bl	8003ef0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00c      	beq.n	8003bdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0220 	mvn.w	r2, #32
 8003bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 ff2a 	bl	8004a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e088      	b.n	8003d14 <HAL_TIM_IC_ConfigChannel+0x130>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11b      	bne.n	8003c48 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003c20:	f000 fd3a 	bl	8004698 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 020c 	bic.w	r2, r2, #12
 8003c32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6999      	ldr	r1, [r3, #24]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	619a      	str	r2, [r3, #24]
 8003c46:	e060      	b.n	8003d0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d11c      	bne.n	8003c88 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003c5e:	f000 fd8f 	bl	8004780 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6999      	ldr	r1, [r3, #24]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	021a      	lsls	r2, r3, #8
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	619a      	str	r2, [r3, #24]
 8003c86:	e040      	b.n	8003d0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d11b      	bne.n	8003cc6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c9e:	f000 fdac 	bl	80047fa <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 020c 	bic.w	r2, r2, #12
 8003cb0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69d9      	ldr	r1, [r3, #28]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	61da      	str	r2, [r3, #28]
 8003cc4:	e021      	b.n	8003d0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d11c      	bne.n	8003d06 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003cdc:	f000 fdc9 	bl	8004872 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003cee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69d9      	ldr	r1, [r3, #28]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	021a      	lsls	r2, r3, #8
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	61da      	str	r2, [r3, #28]
 8003d04:	e001      	b.n	8003d0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e0ae      	b.n	8003e98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b0c      	cmp	r3, #12
 8003d46:	f200 809f 	bhi.w	8003e88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d85 	.word	0x08003d85
 8003d54:	08003e89 	.word	0x08003e89
 8003d58:	08003e89 	.word	0x08003e89
 8003d5c:	08003e89 	.word	0x08003e89
 8003d60:	08003dc5 	.word	0x08003dc5
 8003d64:	08003e89 	.word	0x08003e89
 8003d68:	08003e89 	.word	0x08003e89
 8003d6c:	08003e89 	.word	0x08003e89
 8003d70:	08003e07 	.word	0x08003e07
 8003d74:	08003e89 	.word	0x08003e89
 8003d78:	08003e89 	.word	0x08003e89
 8003d7c:	08003e89 	.word	0x08003e89
 8003d80:	08003e47 	.word	0x08003e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fad4 	bl	8004338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0208 	orr.w	r2, r2, #8
 8003d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0204 	bic.w	r2, r2, #4
 8003dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6999      	ldr	r1, [r3, #24]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	619a      	str	r2, [r3, #24]
      break;
 8003dc2:	e064      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fb24 	bl	8004418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6999      	ldr	r1, [r3, #24]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	021a      	lsls	r2, r3, #8
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	619a      	str	r2, [r3, #24]
      break;
 8003e04:	e043      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fb79 	bl	8004504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0208 	orr.w	r2, r2, #8
 8003e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0204 	bic.w	r2, r2, #4
 8003e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69d9      	ldr	r1, [r3, #28]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	61da      	str	r2, [r3, #28]
      break;
 8003e44:	e023      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fbcd 	bl	80045ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69d9      	ldr	r1, [r3, #28]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	021a      	lsls	r2, r3, #8
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	61da      	str	r2, [r3, #28]
      break;
 8003e86:	e002      	b.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d107      	bne.n	8003f40 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f3e:	e02a      	b.n	8003f96 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d107      	bne.n	8003f5a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f58:	e01d      	b.n	8003f96 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d107      	bne.n	8003f74 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2204      	movs	r2, #4
 8003f68:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f72:	e010      	b.n	8003f96 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d107      	bne.n	8003f8e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2208      	movs	r2, #8
 8003f82:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f8c:	e003      	b.n	8003f96 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff ffb4 	bl	8003f04 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	771a      	strb	r2, [r3, #28]
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d10b      	bne.n	8003fda <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d136      	bne.n	800403e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fd8:	e031      	b.n	800403e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d10b      	bne.n	8003ffc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d125      	bne.n	800403e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ffa:	e020      	b.n	800403e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	429a      	cmp	r2, r3
 8004004:	d10b      	bne.n	800401e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2204      	movs	r2, #4
 800400a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d114      	bne.n	800403e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800401c:	e00f      	b.n	800403e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	d10a      	bne.n	800403e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2208      	movs	r2, #8
 800402c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7fc ff9c 	bl	8000f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	771a      	strb	r2, [r3, #28]
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	429a      	cmp	r2, r3
 8004068:	d103      	bne.n	8004072 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	771a      	strb	r2, [r3, #28]
 8004070:	e019      	b.n	80040a6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	d103      	bne.n	8004084 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2202      	movs	r2, #2
 8004080:	771a      	strb	r2, [r3, #28]
 8004082:	e010      	b.n	80040a6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d103      	bne.n	8004096 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2204      	movs	r2, #4
 8004092:	771a      	strb	r2, [r3, #28]
 8004094:	e007      	b.n	80040a6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	429a      	cmp	r2, r3
 800409e:	d102      	bne.n	80040a6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2208      	movs	r2, #8
 80040a4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff ff18 	bl	8003edc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	771a      	strb	r2, [r3, #28]
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d10f      	bne.n	80040f2 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d146      	bne.n	800416e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040f0:	e03d      	b.n	800416e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d10f      	bne.n	800411c <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2202      	movs	r2, #2
 8004100:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d131      	bne.n	800416e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800411a:	e028      	b.n	800416e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	429a      	cmp	r2, r3
 8004124:	d10f      	bne.n	8004146 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2204      	movs	r2, #4
 800412a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d11c      	bne.n	800416e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004144:	e013      	b.n	800416e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	429a      	cmp	r2, r3
 800414e:	d10e      	bne.n	800416e <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2208      	movs	r2, #8
 8004154:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d107      	bne.n	800416e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff fea0 	bl	8003eb4 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	771a      	strb	r2, [r3, #28]
}
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	d103      	bne.n	80041a2 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	771a      	strb	r2, [r3, #28]
 80041a0:	e019      	b.n	80041d6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d103      	bne.n	80041b4 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2202      	movs	r2, #2
 80041b0:	771a      	strb	r2, [r3, #28]
 80041b2:	e010      	b.n	80041d6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d103      	bne.n	80041c6 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2204      	movs	r2, #4
 80041c2:	771a      	strb	r2, [r3, #28]
 80041c4:	e007      	b.n	80041d6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d102      	bne.n	80041d6 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2208      	movs	r2, #8
 80041d4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7ff fe76 	bl	8003ec8 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	771a      	strb	r2, [r3, #28]
}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a43      	ldr	r2, [pc, #268]	@ (800430c <TIM_Base_SetConfig+0x120>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420a:	d00f      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a40      	ldr	r2, [pc, #256]	@ (8004310 <TIM_Base_SetConfig+0x124>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a3f      	ldr	r2, [pc, #252]	@ (8004314 <TIM_Base_SetConfig+0x128>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3e      	ldr	r2, [pc, #248]	@ (8004318 <TIM_Base_SetConfig+0x12c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3d      	ldr	r2, [pc, #244]	@ (800431c <TIM_Base_SetConfig+0x130>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d108      	bne.n	800423e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a32      	ldr	r2, [pc, #200]	@ (800430c <TIM_Base_SetConfig+0x120>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800424c:	d027      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a2f      	ldr	r2, [pc, #188]	@ (8004310 <TIM_Base_SetConfig+0x124>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d023      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2e      	ldr	r2, [pc, #184]	@ (8004314 <TIM_Base_SetConfig+0x128>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01f      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2d      	ldr	r2, [pc, #180]	@ (8004318 <TIM_Base_SetConfig+0x12c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2c      	ldr	r2, [pc, #176]	@ (800431c <TIM_Base_SetConfig+0x130>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d017      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2b      	ldr	r2, [pc, #172]	@ (8004320 <TIM_Base_SetConfig+0x134>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2a      	ldr	r2, [pc, #168]	@ (8004324 <TIM_Base_SetConfig+0x138>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a29      	ldr	r2, [pc, #164]	@ (8004328 <TIM_Base_SetConfig+0x13c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a28      	ldr	r2, [pc, #160]	@ (800432c <TIM_Base_SetConfig+0x140>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a27      	ldr	r2, [pc, #156]	@ (8004330 <TIM_Base_SetConfig+0x144>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a26      	ldr	r2, [pc, #152]	@ (8004334 <TIM_Base_SetConfig+0x148>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a0e      	ldr	r2, [pc, #56]	@ (800430c <TIM_Base_SetConfig+0x120>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <TIM_Base_SetConfig+0xf2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a10      	ldr	r2, [pc, #64]	@ (800431c <TIM_Base_SetConfig+0x130>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d103      	bne.n	80042e6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f043 0204 	orr.w	r2, r3, #4
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	601a      	str	r2, [r3, #0]
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40010000 	.word	0x40010000
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	40000c00 	.word	0x40000c00
 800431c:	40010400 	.word	0x40010400
 8004320:	40014000 	.word	0x40014000
 8004324:	40014400 	.word	0x40014400
 8004328:	40014800 	.word	0x40014800
 800432c:	40001800 	.word	0x40001800
 8004330:	40001c00 	.word	0x40001c00
 8004334:	40002000 	.word	0x40002000

08004338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f023 0201 	bic.w	r2, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 0302 	bic.w	r3, r3, #2
 8004380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a20      	ldr	r2, [pc, #128]	@ (8004410 <TIM_OC1_SetConfig+0xd8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_OC1_SetConfig+0x64>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a1f      	ldr	r2, [pc, #124]	@ (8004414 <TIM_OC1_SetConfig+0xdc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d10c      	bne.n	80043b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f023 0308 	bic.w	r3, r3, #8
 80043a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f023 0304 	bic.w	r3, r3, #4
 80043b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a15      	ldr	r2, [pc, #84]	@ (8004410 <TIM_OC1_SetConfig+0xd8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_OC1_SetConfig+0x8e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a14      	ldr	r2, [pc, #80]	@ (8004414 <TIM_OC1_SetConfig+0xdc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d111      	bne.n	80043ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	621a      	str	r2, [r3, #32]
}
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40010000 	.word	0x40010000
 8004414:	40010400 	.word	0x40010400

08004418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f023 0210 	bic.w	r2, r3, #16
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800444e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f023 0320 	bic.w	r3, r3, #32
 8004462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a22      	ldr	r2, [pc, #136]	@ (80044fc <TIM_OC2_SetConfig+0xe4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_OC2_SetConfig+0x68>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a21      	ldr	r2, [pc, #132]	@ (8004500 <TIM_OC2_SetConfig+0xe8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d10d      	bne.n	800449c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800449a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a17      	ldr	r2, [pc, #92]	@ (80044fc <TIM_OC2_SetConfig+0xe4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_OC2_SetConfig+0x94>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a16      	ldr	r2, [pc, #88]	@ (8004500 <TIM_OC2_SetConfig+0xe8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d113      	bne.n	80044d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40010400 	.word	0x40010400

08004504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800454c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a21      	ldr	r2, [pc, #132]	@ (80045e4 <TIM_OC3_SetConfig+0xe0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d003      	beq.n	800456a <TIM_OC3_SetConfig+0x66>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a20      	ldr	r2, [pc, #128]	@ (80045e8 <TIM_OC3_SetConfig+0xe4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d10d      	bne.n	8004586 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a16      	ldr	r2, [pc, #88]	@ (80045e4 <TIM_OC3_SetConfig+0xe0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_OC3_SetConfig+0x92>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a15      	ldr	r2, [pc, #84]	@ (80045e8 <TIM_OC3_SetConfig+0xe4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d113      	bne.n	80045be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800459c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	621a      	str	r2, [r3, #32]
}
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40010400 	.word	0x40010400

080045ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800461a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	021b      	lsls	r3, r3, #8
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	031b      	lsls	r3, r3, #12
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a12      	ldr	r2, [pc, #72]	@ (8004690 <TIM_OC4_SetConfig+0xa4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_OC4_SetConfig+0x68>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a11      	ldr	r2, [pc, #68]	@ (8004694 <TIM_OC4_SetConfig+0xa8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d109      	bne.n	8004668 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800465a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	019b      	lsls	r3, r3, #6
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40010000 	.word	0x40010000
 8004694:	40010400 	.word	0x40010400

08004698 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	f023 0201 	bic.w	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4a28      	ldr	r2, [pc, #160]	@ (8004764 <TIM_TI1_SetConfig+0xcc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01b      	beq.n	80046fe <TIM_TI1_SetConfig+0x66>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046cc:	d017      	beq.n	80046fe <TIM_TI1_SetConfig+0x66>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a25      	ldr	r2, [pc, #148]	@ (8004768 <TIM_TI1_SetConfig+0xd0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <TIM_TI1_SetConfig+0x66>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a24      	ldr	r2, [pc, #144]	@ (800476c <TIM_TI1_SetConfig+0xd4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00f      	beq.n	80046fe <TIM_TI1_SetConfig+0x66>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a23      	ldr	r2, [pc, #140]	@ (8004770 <TIM_TI1_SetConfig+0xd8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00b      	beq.n	80046fe <TIM_TI1_SetConfig+0x66>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a22      	ldr	r2, [pc, #136]	@ (8004774 <TIM_TI1_SetConfig+0xdc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d007      	beq.n	80046fe <TIM_TI1_SetConfig+0x66>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a21      	ldr	r2, [pc, #132]	@ (8004778 <TIM_TI1_SetConfig+0xe0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d003      	beq.n	80046fe <TIM_TI1_SetConfig+0x66>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a20      	ldr	r2, [pc, #128]	@ (800477c <TIM_TI1_SetConfig+0xe4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d101      	bne.n	8004702 <TIM_TI1_SetConfig+0x6a>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <TIM_TI1_SetConfig+0x6c>
 8004702:	2300      	movs	r3, #0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 0303 	bic.w	r3, r3, #3
 800470e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e003      	b.n	8004722 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	b2db      	uxtb	r3, r3
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f023 030a 	bic.w	r3, r3, #10
 800473c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f003 030a 	and.w	r3, r3, #10
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40010000 	.word	0x40010000
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	40010400 	.word	0x40010400
 8004778:	40014000 	.word	0x40014000
 800477c:	40001800 	.word	0x40001800

08004780 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f023 0210 	bic.w	r2, r3, #16
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	031b      	lsls	r3, r3, #12
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047d2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b087      	sub	sp, #28
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004836:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	b2db      	uxtb	r3, r3
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800484a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004872:	b480      	push	{r7}
 8004874:	b087      	sub	sp, #28
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	607a      	str	r2, [r7, #4]
 800487e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800489e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	031b      	lsls	r3, r3, #12
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80048c4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	031b      	lsls	r3, r3, #12
 80048ca:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	621a      	str	r2, [r3, #32]
}
 80048e0:	bf00      	nop
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	2201      	movs	r2, #1
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a1a      	ldr	r2, [r3, #32]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	43db      	mvns	r3, r3
 800490e:	401a      	ands	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1a      	ldr	r2, [r3, #32]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	fa01 f303 	lsl.w	r3, r1, r3
 8004924:	431a      	orrs	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
	...

08004938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800494c:	2302      	movs	r3, #2
 800494e:	e05a      	b.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a21      	ldr	r2, [pc, #132]	@ (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d022      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499c:	d01d      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1b      	ldr	r2, [pc, #108]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a18      	ldr	r2, [pc, #96]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a17      	ldr	r2, [pc, #92]	@ (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a15      	ldr	r2, [pc, #84]	@ (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10c      	bne.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00
 8004a24:	40010400 	.word	0x40010400
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	40001800 	.word	0x40001800

08004a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e042      	b.n	8004af0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fc fd1c 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2224      	movs	r2, #36	@ 0x24
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f973 	bl	8004d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	@ 0x28
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d175      	bne.n	8004c04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <HAL_UART_Transmit+0x2c>
 8004b1e:	88fb      	ldrh	r3, [r7, #6]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e06e      	b.n	8004c06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2221      	movs	r2, #33	@ 0x21
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b36:	f7fc fecd 	bl	80018d4 <HAL_GetTick>
 8004b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	88fa      	ldrh	r2, [r7, #6]
 8004b40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	88fa      	ldrh	r2, [r7, #6]
 8004b46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b50:	d108      	bne.n	8004b64 <HAL_UART_Transmit+0x6c>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	e003      	b.n	8004b6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b6c:	e02e      	b.n	8004bcc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2180      	movs	r1, #128	@ 0x80
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f848 	bl	8004c0e <UART_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e03a      	b.n	8004c06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10b      	bne.n	8004bae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	3302      	adds	r3, #2
 8004baa:	61bb      	str	r3, [r7, #24]
 8004bac:	e007      	b.n	8004bbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1cb      	bne.n	8004b6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2140      	movs	r1, #64	@ 0x40
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f814 	bl	8004c0e <UART_WaitOnFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e006      	b.n	8004c06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e000      	b.n	8004c06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b086      	sub	sp, #24
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1e:	e03b      	b.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c26:	d037      	beq.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c28:	f7fc fe54 	bl	80018d4 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	6a3a      	ldr	r2, [r7, #32]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d302      	bcc.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e03a      	b.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d023      	beq.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b80      	cmp	r3, #128	@ 0x80
 8004c54:	d020      	beq.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b40      	cmp	r3, #64	@ 0x40
 8004c5a:	d01d      	beq.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d116      	bne.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f81d 	bl	8004cc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e00f      	b.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d0b4      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b095      	sub	sp, #84	@ 0x54
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ce8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e5      	bne.n	8004cc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3314      	adds	r3, #20
 8004d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d119      	bne.n	8004d6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f023 0310 	bic.w	r3, r3, #16
 8004d4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d58:	61ba      	str	r2, [r7, #24]
 8004d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6979      	ldr	r1, [r7, #20]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	613b      	str	r3, [r7, #16]
   return(result);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e5      	bne.n	8004d38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d7a:	bf00      	nop
 8004d7c:	3754      	adds	r7, #84	@ 0x54
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d8c:	b0c0      	sub	sp, #256	@ 0x100
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	68d9      	ldr	r1, [r3, #12]
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	ea40 0301 	orr.w	r3, r0, r1
 8004db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004de0:	f021 010c 	bic.w	r1, r1, #12
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dee:	430b      	orrs	r3, r1
 8004df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e02:	6999      	ldr	r1, [r3, #24]
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	ea40 0301 	orr.w	r3, r0, r1
 8004e0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b8f      	ldr	r3, [pc, #572]	@ (8005054 <UART_SetConfig+0x2cc>)
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d005      	beq.n	8004e28 <UART_SetConfig+0xa0>
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4b8d      	ldr	r3, [pc, #564]	@ (8005058 <UART_SetConfig+0x2d0>)
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d104      	bne.n	8004e32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e28:	f7fd fff0 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 8004e2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e30:	e003      	b.n	8004e3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e32:	f7fd ffd7 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 8004e36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e44:	f040 810c 	bne.w	8005060 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e62:	415b      	adcs	r3, r3
 8004e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	eb12 0801 	adds.w	r8, r2, r1
 8004e70:	4629      	mov	r1, r5
 8004e72:	eb43 0901 	adc.w	r9, r3, r1
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e8a:	4690      	mov	r8, r2
 8004e8c:	4699      	mov	r9, r3
 8004e8e:	4623      	mov	r3, r4
 8004e90:	eb18 0303 	adds.w	r3, r8, r3
 8004e94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e98:	462b      	mov	r3, r5
 8004e9a:	eb49 0303 	adc.w	r3, r9, r3
 8004e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004eae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004eb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	18db      	adds	r3, r3, r3
 8004eba:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	eb42 0303 	adc.w	r3, r2, r3
 8004ec2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ec4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ec8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ecc:	f7fb f980 	bl	80001d0 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4b61      	ldr	r3, [pc, #388]	@ (800505c <UART_SetConfig+0x2d4>)
 8004ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	011c      	lsls	r4, r3, #4
 8004ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ee8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004eec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	1891      	adds	r1, r2, r2
 8004ef6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ef8:	415b      	adcs	r3, r3
 8004efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004efc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f00:	4641      	mov	r1, r8
 8004f02:	eb12 0a01 	adds.w	sl, r2, r1
 8004f06:	4649      	mov	r1, r9
 8004f08:	eb43 0b01 	adc.w	fp, r3, r1
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f20:	4692      	mov	sl, r2
 8004f22:	469b      	mov	fp, r3
 8004f24:	4643      	mov	r3, r8
 8004f26:	eb1a 0303 	adds.w	r3, sl, r3
 8004f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f2e:	464b      	mov	r3, r9
 8004f30:	eb4b 0303 	adc.w	r3, fp, r3
 8004f34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	18db      	adds	r3, r3, r3
 8004f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f52:	4613      	mov	r3, r2
 8004f54:	eb42 0303 	adc.w	r3, r2, r3
 8004f58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f62:	f7fb f935 	bl	80001d0 <__aeabi_uldivmod>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800505c <UART_SetConfig+0x2d4>)
 8004f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2264      	movs	r2, #100	@ 0x64
 8004f76:	fb02 f303 	mul.w	r3, r2, r3
 8004f7a:	1acb      	subs	r3, r1, r3
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f82:	4b36      	ldr	r3, [pc, #216]	@ (800505c <UART_SetConfig+0x2d4>)
 8004f84:	fba3 2302 	umull	r2, r3, r3, r2
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f90:	441c      	add	r4, r3
 8004f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	1891      	adds	r1, r2, r2
 8004faa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fac:	415b      	adcs	r3, r3
 8004fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	1851      	adds	r1, r2, r1
 8004fb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fba:	4649      	mov	r1, r9
 8004fbc:	414b      	adcs	r3, r1
 8004fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fcc:	4659      	mov	r1, fp
 8004fce:	00cb      	lsls	r3, r1, #3
 8004fd0:	4651      	mov	r1, sl
 8004fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd6:	4651      	mov	r1, sl
 8004fd8:	00ca      	lsls	r2, r1, #3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	189b      	adds	r3, r3, r2
 8004fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fe8:	464b      	mov	r3, r9
 8004fea:	460a      	mov	r2, r1
 8004fec:	eb42 0303 	adc.w	r3, r2, r3
 8004ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005000:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005004:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005008:	460b      	mov	r3, r1
 800500a:	18db      	adds	r3, r3, r3
 800500c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800500e:	4613      	mov	r3, r2
 8005010:	eb42 0303 	adc.w	r3, r2, r3
 8005014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800501a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800501e:	f7fb f8d7 	bl	80001d0 <__aeabi_uldivmod>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <UART_SetConfig+0x2d4>)
 8005028:	fba3 1302 	umull	r1, r3, r3, r2
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	2164      	movs	r1, #100	@ 0x64
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	3332      	adds	r3, #50	@ 0x32
 800503a:	4a08      	ldr	r2, [pc, #32]	@ (800505c <UART_SetConfig+0x2d4>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	095b      	lsrs	r3, r3, #5
 8005042:	f003 0207 	and.w	r2, r3, #7
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4422      	add	r2, r4
 800504e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005050:	e106      	b.n	8005260 <UART_SetConfig+0x4d8>
 8005052:	bf00      	nop
 8005054:	40011000 	.word	0x40011000
 8005058:	40011400 	.word	0x40011400
 800505c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005064:	2200      	movs	r2, #0
 8005066:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800506a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800506e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005072:	4642      	mov	r2, r8
 8005074:	464b      	mov	r3, r9
 8005076:	1891      	adds	r1, r2, r2
 8005078:	6239      	str	r1, [r7, #32]
 800507a:	415b      	adcs	r3, r3
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24
 800507e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005082:	4641      	mov	r1, r8
 8005084:	1854      	adds	r4, r2, r1
 8005086:	4649      	mov	r1, r9
 8005088:	eb43 0501 	adc.w	r5, r3, r1
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	00eb      	lsls	r3, r5, #3
 8005096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800509a:	00e2      	lsls	r2, r4, #3
 800509c:	4614      	mov	r4, r2
 800509e:	461d      	mov	r5, r3
 80050a0:	4643      	mov	r3, r8
 80050a2:	18e3      	adds	r3, r4, r3
 80050a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050a8:	464b      	mov	r3, r9
 80050aa:	eb45 0303 	adc.w	r3, r5, r3
 80050ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050ce:	4629      	mov	r1, r5
 80050d0:	008b      	lsls	r3, r1, #2
 80050d2:	4621      	mov	r1, r4
 80050d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d8:	4621      	mov	r1, r4
 80050da:	008a      	lsls	r2, r1, #2
 80050dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050e0:	f7fb f876 	bl	80001d0 <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4b60      	ldr	r3, [pc, #384]	@ (800526c <UART_SetConfig+0x4e4>)
 80050ea:	fba3 2302 	umull	r2, r3, r3, r2
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	011c      	lsls	r4, r3, #4
 80050f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005100:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	1891      	adds	r1, r2, r2
 800510a:	61b9      	str	r1, [r7, #24]
 800510c:	415b      	adcs	r3, r3
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005114:	4641      	mov	r1, r8
 8005116:	1851      	adds	r1, r2, r1
 8005118:	6139      	str	r1, [r7, #16]
 800511a:	4649      	mov	r1, r9
 800511c:	414b      	adcs	r3, r1
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800512c:	4659      	mov	r1, fp
 800512e:	00cb      	lsls	r3, r1, #3
 8005130:	4651      	mov	r1, sl
 8005132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005136:	4651      	mov	r1, sl
 8005138:	00ca      	lsls	r2, r1, #3
 800513a:	4610      	mov	r0, r2
 800513c:	4619      	mov	r1, r3
 800513e:	4603      	mov	r3, r0
 8005140:	4642      	mov	r2, r8
 8005142:	189b      	adds	r3, r3, r2
 8005144:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005148:	464b      	mov	r3, r9
 800514a:	460a      	mov	r2, r1
 800514c:	eb42 0303 	adc.w	r3, r2, r3
 8005150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800515e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800516c:	4649      	mov	r1, r9
 800516e:	008b      	lsls	r3, r1, #2
 8005170:	4641      	mov	r1, r8
 8005172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005176:	4641      	mov	r1, r8
 8005178:	008a      	lsls	r2, r1, #2
 800517a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800517e:	f7fb f827 	bl	80001d0 <__aeabi_uldivmod>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4611      	mov	r1, r2
 8005188:	4b38      	ldr	r3, [pc, #224]	@ (800526c <UART_SetConfig+0x4e4>)
 800518a:	fba3 2301 	umull	r2, r3, r3, r1
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2264      	movs	r2, #100	@ 0x64
 8005192:	fb02 f303 	mul.w	r3, r2, r3
 8005196:	1acb      	subs	r3, r1, r3
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	3332      	adds	r3, #50	@ 0x32
 800519c:	4a33      	ldr	r2, [pc, #204]	@ (800526c <UART_SetConfig+0x4e4>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051a8:	441c      	add	r4, r3
 80051aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ae:	2200      	movs	r2, #0
 80051b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80051b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80051b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051b8:	4642      	mov	r2, r8
 80051ba:	464b      	mov	r3, r9
 80051bc:	1891      	adds	r1, r2, r2
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	415b      	adcs	r3, r3
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051c8:	4641      	mov	r1, r8
 80051ca:	1851      	adds	r1, r2, r1
 80051cc:	6039      	str	r1, [r7, #0]
 80051ce:	4649      	mov	r1, r9
 80051d0:	414b      	adcs	r3, r1
 80051d2:	607b      	str	r3, [r7, #4]
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051e0:	4659      	mov	r1, fp
 80051e2:	00cb      	lsls	r3, r1, #3
 80051e4:	4651      	mov	r1, sl
 80051e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ea:	4651      	mov	r1, sl
 80051ec:	00ca      	lsls	r2, r1, #3
 80051ee:	4610      	mov	r0, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	4642      	mov	r2, r8
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051fa:	464b      	mov	r3, r9
 80051fc:	460a      	mov	r2, r1
 80051fe:	eb42 0303 	adc.w	r3, r2, r3
 8005202:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	663b      	str	r3, [r7, #96]	@ 0x60
 800520e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800521c:	4649      	mov	r1, r9
 800521e:	008b      	lsls	r3, r1, #2
 8005220:	4641      	mov	r1, r8
 8005222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005226:	4641      	mov	r1, r8
 8005228:	008a      	lsls	r2, r1, #2
 800522a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800522e:	f7fa ffcf 	bl	80001d0 <__aeabi_uldivmod>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4b0d      	ldr	r3, [pc, #52]	@ (800526c <UART_SetConfig+0x4e4>)
 8005238:	fba3 1302 	umull	r1, r3, r3, r2
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	2164      	movs	r1, #100	@ 0x64
 8005240:	fb01 f303 	mul.w	r3, r1, r3
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	3332      	adds	r3, #50	@ 0x32
 800524a:	4a08      	ldr	r2, [pc, #32]	@ (800526c <UART_SetConfig+0x4e4>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	f003 020f 	and.w	r2, r3, #15
 8005256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4422      	add	r2, r4
 800525e:	609a      	str	r2, [r3, #8]
}
 8005260:	bf00      	nop
 8005262:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005266:	46bd      	mov	sp, r7
 8005268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526c:	51eb851f 	.word	0x51eb851f

08005270 <__NVIC_SetPriority>:
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	6039      	str	r1, [r7, #0]
 800527a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800527c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005280:	2b00      	cmp	r3, #0
 8005282:	db0a      	blt.n	800529a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	490c      	ldr	r1, [pc, #48]	@ (80052bc <__NVIC_SetPriority+0x4c>)
 800528a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528e:	0112      	lsls	r2, r2, #4
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	440b      	add	r3, r1
 8005294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005298:	e00a      	b.n	80052b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	4908      	ldr	r1, [pc, #32]	@ (80052c0 <__NVIC_SetPriority+0x50>)
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	3b04      	subs	r3, #4
 80052a8:	0112      	lsls	r2, r2, #4
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	440b      	add	r3, r1
 80052ae:	761a      	strb	r2, [r3, #24]
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	e000e100 	.word	0xe000e100
 80052c0:	e000ed00 	.word	0xe000ed00

080052c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80052c8:	4b05      	ldr	r3, [pc, #20]	@ (80052e0 <SysTick_Handler+0x1c>)
 80052ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80052cc:	f001 ff34 	bl	8007138 <xTaskGetSchedulerState>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d001      	beq.n	80052da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80052d6:	f002 fd2f 	bl	8007d38 <xPortSysTickHandler>
  }
}
 80052da:	bf00      	nop
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	e000e010 	.word	0xe000e010

080052e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80052e8:	2100      	movs	r1, #0
 80052ea:	f06f 0004 	mvn.w	r0, #4
 80052ee:	f7ff ffbf 	bl	8005270 <__NVIC_SetPriority>
#endif
}
 80052f2:	bf00      	nop
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052fe:	f3ef 8305 	mrs	r3, IPSR
 8005302:	603b      	str	r3, [r7, #0]
  return(result);
 8005304:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800530a:	f06f 0305 	mvn.w	r3, #5
 800530e:	607b      	str	r3, [r7, #4]
 8005310:	e00c      	b.n	800532c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005312:	4b0a      	ldr	r3, [pc, #40]	@ (800533c <osKernelInitialize+0x44>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d105      	bne.n	8005326 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800531a:	4b08      	ldr	r3, [pc, #32]	@ (800533c <osKernelInitialize+0x44>)
 800531c:	2201      	movs	r2, #1
 800531e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005320:	2300      	movs	r3, #0
 8005322:	607b      	str	r3, [r7, #4]
 8005324:	e002      	b.n	800532c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005326:	f04f 33ff 	mov.w	r3, #4294967295
 800532a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800532c:	687b      	ldr	r3, [r7, #4]
}
 800532e:	4618      	mov	r0, r3
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20000470 	.word	0x20000470

08005340 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005346:	f3ef 8305 	mrs	r3, IPSR
 800534a:	603b      	str	r3, [r7, #0]
  return(result);
 800534c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005352:	f06f 0305 	mvn.w	r3, #5
 8005356:	607b      	str	r3, [r7, #4]
 8005358:	e010      	b.n	800537c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800535a:	4b0b      	ldr	r3, [pc, #44]	@ (8005388 <osKernelStart+0x48>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d109      	bne.n	8005376 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005362:	f7ff ffbf 	bl	80052e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005366:	4b08      	ldr	r3, [pc, #32]	@ (8005388 <osKernelStart+0x48>)
 8005368:	2202      	movs	r2, #2
 800536a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800536c:	f001 fa80 	bl	8006870 <vTaskStartScheduler>
      stat = osOK;
 8005370:	2300      	movs	r3, #0
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	e002      	b.n	800537c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005376:	f04f 33ff 	mov.w	r3, #4294967295
 800537a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800537c:	687b      	ldr	r3, [r7, #4]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000470 	.word	0x20000470

0800538c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800538c:	b580      	push	{r7, lr}
 800538e:	b08e      	sub	sp, #56	@ 0x38
 8005390:	af04      	add	r7, sp, #16
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005398:	2300      	movs	r3, #0
 800539a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800539c:	f3ef 8305 	mrs	r3, IPSR
 80053a0:	617b      	str	r3, [r7, #20]
  return(result);
 80053a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d17e      	bne.n	80054a6 <osThreadNew+0x11a>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d07b      	beq.n	80054a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053ae:	2380      	movs	r3, #128	@ 0x80
 80053b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053b2:	2318      	movs	r3, #24
 80053b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80053ba:	f04f 33ff 	mov.w	r3, #4294967295
 80053be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d045      	beq.n	8005452 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <osThreadNew+0x48>
        name = attr->name;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <osThreadNew+0x6e>
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b38      	cmp	r3, #56	@ 0x38
 80053ec:	d805      	bhi.n	80053fa <osThreadNew+0x6e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <osThreadNew+0x72>
        return (NULL);
 80053fa:	2300      	movs	r3, #0
 80053fc:	e054      	b.n	80054a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	089b      	lsrs	r3, r3, #2
 800540c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00e      	beq.n	8005434 <osThreadNew+0xa8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2ba7      	cmp	r3, #167	@ 0xa7
 800541c:	d90a      	bls.n	8005434 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005422:	2b00      	cmp	r3, #0
 8005424:	d006      	beq.n	8005434 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <osThreadNew+0xa8>
        mem = 1;
 800542e:	2301      	movs	r3, #1
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e010      	b.n	8005456 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10c      	bne.n	8005456 <osThreadNew+0xca>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d108      	bne.n	8005456 <osThreadNew+0xca>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <osThreadNew+0xca>
          mem = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	e001      	b.n	8005456 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d110      	bne.n	800547e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005464:	9202      	str	r2, [sp, #8]
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	6a3a      	ldr	r2, [r7, #32]
 8005470:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f001 f808 	bl	8006488 <xTaskCreateStatic>
 8005478:	4603      	mov	r3, r0
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	e013      	b.n	80054a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d110      	bne.n	80054a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	b29a      	uxth	r2, r3
 8005488:	f107 0310 	add.w	r3, r7, #16
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f001 f856 	bl	8006548 <xTaskCreate>
 800549c:	4603      	mov	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d001      	beq.n	80054a6 <osThreadNew+0x11a>
            hTask = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054a6:	693b      	ldr	r3, [r7, #16]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3728      	adds	r7, #40	@ 0x28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054b8:	f3ef 8305 	mrs	r3, IPSR
 80054bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80054be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <osDelay+0x1c>
    stat = osErrorISR;
 80054c4:	f06f 0305 	mvn.w	r3, #5
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	e007      	b.n	80054dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 f994 	bl	8006804 <vTaskDelay>
    }
  }

  return (stat);
 80054dc:	68fb      	ldr	r3, [r7, #12]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b08a      	sub	sp, #40	@ 0x28
 80054ea:	af02      	add	r7, sp, #8
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f6:	f3ef 8305 	mrs	r3, IPSR
 80054fa:	613b      	str	r3, [r7, #16]
  return(result);
 80054fc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d15f      	bne.n	80055c2 <osMessageQueueNew+0xdc>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d05c      	beq.n	80055c2 <osMessageQueueNew+0xdc>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d059      	beq.n	80055c2 <osMessageQueueNew+0xdc>
    mem = -1;
 800550e:	f04f 33ff 	mov.w	r3, #4294967295
 8005512:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d029      	beq.n	800556e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d012      	beq.n	8005548 <osMessageQueueNew+0x62>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	2b4f      	cmp	r3, #79	@ 0x4f
 8005528:	d90e      	bls.n	8005548 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695a      	ldr	r2, [r3, #20]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <osMessageQueueNew+0x62>
        mem = 1;
 8005542:	2301      	movs	r3, #1
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	e014      	b.n	8005572 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d110      	bne.n	8005572 <osMessageQueueNew+0x8c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10c      	bne.n	8005572 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800555c:	2b00      	cmp	r3, #0
 800555e:	d108      	bne.n	8005572 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d104      	bne.n	8005572 <osMessageQueueNew+0x8c>
          mem = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	e001      	b.n	8005572 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d10b      	bne.n	8005590 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2100      	movs	r1, #0
 8005582:	9100      	str	r1, [sp, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fa30 	bl	80059ec <xQueueGenericCreateStatic>
 800558c:	61f8      	str	r0, [r7, #28]
 800558e:	e008      	b.n	80055a2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d105      	bne.n	80055a2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005596:	2200      	movs	r2, #0
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 faa3 	bl	8005ae6 <xQueueGenericCreate>
 80055a0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e001      	b.n	80055ba <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80055ba:	6979      	ldr	r1, [r7, #20]
 80055bc:	69f8      	ldr	r0, [r7, #28]
 80055be:	f000 ff05 	bl	80063cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80055c2:	69fb      	ldr	r3, [r7, #28]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e4:	f3ef 8305 	mrs	r3, IPSR
 80055e8:	617b      	str	r3, [r7, #20]
  return(result);
 80055ea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d028      	beq.n	8005642 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <osMessageQueuePut+0x36>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <osMessageQueuePut+0x36>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005602:	f06f 0303 	mvn.w	r3, #3
 8005606:	61fb      	str	r3, [r7, #28]
 8005608:	e038      	b.n	800567c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800560e:	f107 0210 	add.w	r2, r7, #16
 8005612:	2300      	movs	r3, #0
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	69b8      	ldr	r0, [r7, #24]
 8005618:	f000 fbc6 	bl	8005da8 <xQueueGenericSendFromISR>
 800561c:	4603      	mov	r3, r0
 800561e:	2b01      	cmp	r3, #1
 8005620:	d003      	beq.n	800562a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005622:	f06f 0302 	mvn.w	r3, #2
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	e028      	b.n	800567c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d025      	beq.n	800567c <osMessageQueuePut+0xb0>
 8005630:	4b15      	ldr	r3, [pc, #84]	@ (8005688 <osMessageQueuePut+0xbc>)
 8005632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	e01c      	b.n	800567c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <osMessageQueuePut+0x82>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800564e:	f06f 0303 	mvn.w	r3, #3
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	e012      	b.n	800567c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005656:	2300      	movs	r3, #0
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	69b8      	ldr	r0, [r7, #24]
 800565e:	f000 faa1 	bl	8005ba4 <xQueueGenericSend>
 8005662:	4603      	mov	r3, r0
 8005664:	2b01      	cmp	r3, #1
 8005666:	d009      	beq.n	800567c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800566e:	f06f 0301 	mvn.w	r3, #1
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	e002      	b.n	800567c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005676:	f06f 0302 	mvn.w	r3, #2
 800567a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800567c:	69fb      	ldr	r3, [r7, #28]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3720      	adds	r7, #32
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056a2:	f3ef 8305 	mrs	r3, IPSR
 80056a6:	617b      	str	r3, [r7, #20]
  return(result);
 80056a8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d028      	beq.n	8005700 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <osMessageQueueGet+0x34>
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <osMessageQueueGet+0x34>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80056c0:	f06f 0303 	mvn.w	r3, #3
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	e037      	b.n	8005738 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80056cc:	f107 0310 	add.w	r3, r7, #16
 80056d0:	461a      	mov	r2, r3
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	69b8      	ldr	r0, [r7, #24]
 80056d6:	f000 fce7 	bl	80060a8 <xQueueReceiveFromISR>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d003      	beq.n	80056e8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80056e0:	f06f 0302 	mvn.w	r3, #2
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	e027      	b.n	8005738 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d024      	beq.n	8005738 <osMessageQueueGet+0xac>
 80056ee:	4b15      	ldr	r3, [pc, #84]	@ (8005744 <osMessageQueueGet+0xb8>)
 80056f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	e01b      	b.n	8005738 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <osMessageQueueGet+0x80>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d103      	bne.n	8005714 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800570c:	f06f 0303 	mvn.w	r3, #3
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	e011      	b.n	8005738 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	69b8      	ldr	r0, [r7, #24]
 800571a:	f000 fbe3 	bl	8005ee4 <xQueueReceive>
 800571e:	4603      	mov	r3, r0
 8005720:	2b01      	cmp	r3, #1
 8005722:	d009      	beq.n	8005738 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800572a:	f06f 0301 	mvn.w	r3, #1
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	e002      	b.n	8005738 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005732:	f06f 0302 	mvn.w	r3, #2
 8005736:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005738:	69fb      	ldr	r3, [r7, #28]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4a07      	ldr	r2, [pc, #28]	@ (8005774 <vApplicationGetIdleTaskMemory+0x2c>)
 8005758:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	4a06      	ldr	r2, [pc, #24]	@ (8005778 <vApplicationGetIdleTaskMemory+0x30>)
 800575e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2280      	movs	r2, #128	@ 0x80
 8005764:	601a      	str	r2, [r3, #0]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20000474 	.word	0x20000474
 8005778:	2000051c 	.word	0x2000051c

0800577c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4a07      	ldr	r2, [pc, #28]	@ (80057a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800578c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4a06      	ldr	r2, [pc, #24]	@ (80057ac <vApplicationGetTimerTaskMemory+0x30>)
 8005792:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800579a:	601a      	str	r2, [r3, #0]
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	2000071c 	.word	0x2000071c
 80057ac:	200007c4 	.word	0x200007c4

080057b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f103 0208 	add.w	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f04f 32ff 	mov.w	r2, #4294967295
 80057c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f103 0208 	add.w	r2, r3, #8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f103 0208 	add.w	r2, r3, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	601a      	str	r2, [r3, #0]
}
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005852:	b480      	push	{r7}
 8005854:	b085      	sub	sp, #20
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005868:	d103      	bne.n	8005872 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e00c      	b.n	800588c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3308      	adds	r3, #8
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e002      	b.n	8005880 <vListInsert+0x2e>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	429a      	cmp	r2, r3
 800588a:	d2f6      	bcs.n	800587a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	601a      	str	r2, [r3, #0]
}
 80058b8:	bf00      	nop
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6892      	ldr	r2, [r2, #8]
 80058da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6852      	ldr	r2, [r2, #4]
 80058e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d103      	bne.n	80058f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	1e5a      	subs	r2, r3, #1
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005944:	f002 f968 	bl	8007c18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005950:	68f9      	ldr	r1, [r7, #12]
 8005952:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005954:	fb01 f303 	mul.w	r3, r1, r3
 8005958:	441a      	add	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005974:	3b01      	subs	r3, #1
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800597a:	fb01 f303 	mul.w	r3, r1, r3
 800597e:	441a      	add	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	22ff      	movs	r2, #255	@ 0xff
 8005988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	22ff      	movs	r2, #255	@ 0xff
 8005990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d114      	bne.n	80059c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01a      	beq.n	80059d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3310      	adds	r3, #16
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 fa00 	bl	8006dac <xTaskRemoveFromEventList>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d012      	beq.n	80059d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059b2:	4b0d      	ldr	r3, [pc, #52]	@ (80059e8 <xQueueGenericReset+0xd0>)
 80059b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	e009      	b.n	80059d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3310      	adds	r3, #16
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff fef1 	bl	80057b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3324      	adds	r3, #36	@ 0x24
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff feec 	bl	80057b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059d8:	f002 f950 	bl	8007c7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059dc:	2301      	movs	r3, #1
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	e000ed04 	.word	0xe000ed04

080059ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08e      	sub	sp, #56	@ 0x38
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10b      	bne.n	8005a18 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	e7fd      	b.n	8005a32 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <xQueueGenericCreateStatic+0x56>
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <xQueueGenericCreateStatic+0x5a>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <xQueueGenericCreateStatic+0x5c>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10b      	bne.n	8005a64 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	623b      	str	r3, [r7, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	e7fd      	b.n	8005a60 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d102      	bne.n	8005a70 <xQueueGenericCreateStatic+0x84>
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <xQueueGenericCreateStatic+0x88>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <xQueueGenericCreateStatic+0x8a>
 8005a74:	2300      	movs	r3, #0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	61fb      	str	r3, [r7, #28]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a92:	2350      	movs	r3, #80	@ 0x50
 8005a94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2b50      	cmp	r3, #80	@ 0x50
 8005a9a:	d00b      	beq.n	8005ab4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	61bb      	str	r3, [r7, #24]
}
 8005aae:	bf00      	nop
 8005ab0:	bf00      	nop
 8005ab2:	e7fd      	b.n	8005ab0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ab4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00d      	beq.n	8005adc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ac8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f840 	bl	8005b5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3730      	adds	r7, #48	@ 0x30
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b08a      	sub	sp, #40	@ 0x28
 8005aea:	af02      	add	r7, sp, #8
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	4613      	mov	r3, r2
 8005af2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10b      	bne.n	8005b12 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	613b      	str	r3, [r7, #16]
}
 8005b0c:	bf00      	nop
 8005b0e:	bf00      	nop
 8005b10:	e7fd      	b.n	8005b0e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	fb02 f303 	mul.w	r3, r2, r3
 8005b1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	3350      	adds	r3, #80	@ 0x50
 8005b20:	4618      	mov	r0, r3
 8005b22:	f002 f99b 	bl	8007e5c <pvPortMalloc>
 8005b26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d011      	beq.n	8005b52 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	3350      	adds	r3, #80	@ 0x50
 8005b36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b40:	79fa      	ldrb	r2, [r7, #7]
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	4613      	mov	r3, r2
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f805 	bl	8005b5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b52:	69bb      	ldr	r3, [r7, #24]
	}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3720      	adds	r7, #32
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d103      	bne.n	8005b78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e002      	b.n	8005b7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	69b8      	ldr	r0, [r7, #24]
 8005b8e:	f7ff fec3 	bl	8005918 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08e      	sub	sp, #56	@ 0x38
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10b      	bne.n	8005bd8 <xQueueGenericSend+0x34>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005bd2:	bf00      	nop
 8005bd4:	bf00      	nop
 8005bd6:	e7fd      	b.n	8005bd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <xQueueGenericSend+0x42>
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <xQueueGenericSend+0x46>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <xQueueGenericSend+0x48>
 8005bea:	2300      	movs	r3, #0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <xQueueGenericSend+0x64>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	e7fd      	b.n	8005c04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d103      	bne.n	8005c16 <xQueueGenericSend+0x72>
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <xQueueGenericSend+0x76>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <xQueueGenericSend+0x78>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <xQueueGenericSend+0x94>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	623b      	str	r3, [r7, #32]
}
 8005c32:	bf00      	nop
 8005c34:	bf00      	nop
 8005c36:	e7fd      	b.n	8005c34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c38:	f001 fa7e 	bl	8007138 <xTaskGetSchedulerState>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d102      	bne.n	8005c48 <xQueueGenericSend+0xa4>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <xQueueGenericSend+0xa8>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <xQueueGenericSend+0xaa>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10b      	bne.n	8005c6a <xQueueGenericSend+0xc6>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	61fb      	str	r3, [r7, #28]
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	e7fd      	b.n	8005c66 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c6a:	f001 ffd5 	bl	8007c18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d302      	bcc.n	8005c80 <xQueueGenericSend+0xdc>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d129      	bne.n	8005cd4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c86:	f000 fa91 	bl	80061ac <prvCopyDataToQueue>
 8005c8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d010      	beq.n	8005cb6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c96:	3324      	adds	r3, #36	@ 0x24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f001 f887 	bl	8006dac <xTaskRemoveFromEventList>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d013      	beq.n	8005ccc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ca4:	4b3f      	ldr	r3, [pc, #252]	@ (8005da4 <xQueueGenericSend+0x200>)
 8005ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	e00a      	b.n	8005ccc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d007      	beq.n	8005ccc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005cbc:	4b39      	ldr	r3, [pc, #228]	@ (8005da4 <xQueueGenericSend+0x200>)
 8005cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ccc:	f001 ffd6 	bl	8007c7c <vPortExitCritical>
				return pdPASS;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e063      	b.n	8005d9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cda:	f001 ffcf 	bl	8007c7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e05c      	b.n	8005d9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ce8:	f107 0314 	add.w	r3, r7, #20
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 f8c1 	bl	8006e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cf6:	f001 ffc1 	bl	8007c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cfa:	f000 fe29 	bl	8006950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cfe:	f001 ff8b 	bl	8007c18 <vPortEnterCritical>
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d08:	b25b      	sxtb	r3, r3
 8005d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0e:	d103      	bne.n	8005d18 <xQueueGenericSend+0x174>
 8005d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d1e:	b25b      	sxtb	r3, r3
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d103      	bne.n	8005d2e <xQueueGenericSend+0x18a>
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d2e:	f001 ffa5 	bl	8007c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d32:	1d3a      	adds	r2, r7, #4
 8005d34:	f107 0314 	add.w	r3, r7, #20
 8005d38:	4611      	mov	r1, r2
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 f8b0 	bl	8006ea0 <xTaskCheckForTimeOut>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d124      	bne.n	8005d90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d48:	f000 fb28 	bl	800639c <prvIsQueueFull>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d018      	beq.n	8005d84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	3310      	adds	r3, #16
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	4611      	mov	r1, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 ffd4 	bl	8006d08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d62:	f000 fab3 	bl	80062cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d66:	f000 fe01 	bl	800696c <xTaskResumeAll>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f47f af7c 	bne.w	8005c6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005d72:	4b0c      	ldr	r3, [pc, #48]	@ (8005da4 <xQueueGenericSend+0x200>)
 8005d74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	e772      	b.n	8005c6a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d86:	f000 faa1 	bl	80062cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d8a:	f000 fdef 	bl	800696c <xTaskResumeAll>
 8005d8e:	e76c      	b.n	8005c6a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d92:	f000 fa9b 	bl	80062cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d96:	f000 fde9 	bl	800696c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3738      	adds	r7, #56	@ 0x38
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	e000ed04 	.word	0xe000ed04

08005da8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b090      	sub	sp, #64	@ 0x40
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	e7fd      	b.n	8005dd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d103      	bne.n	8005de6 <xQueueGenericSendFromISR+0x3e>
 8005dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <xQueueGenericSendFromISR+0x42>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <xQueueGenericSendFromISR+0x44>
 8005dea:	2300      	movs	r3, #0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d103      	bne.n	8005e16 <xQueueGenericSendFromISR+0x6e>
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <xQueueGenericSendFromISR+0x72>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <xQueueGenericSendFromISR+0x74>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10b      	bne.n	8005e38 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	623b      	str	r3, [r7, #32]
}
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	e7fd      	b.n	8005e34 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e38:	f001 ffce 	bl	8007dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e3c:	f3ef 8211 	mrs	r2, BASEPRI
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	61fa      	str	r2, [r7, #28]
 8005e52:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e54:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e56:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d302      	bcc.n	8005e6a <xQueueGenericSendFromISR+0xc2>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d12f      	bne.n	8005eca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e80:	f000 f994 	bl	80061ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e84:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8c:	d112      	bne.n	8005eb4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d016      	beq.n	8005ec4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e98:	3324      	adds	r3, #36	@ 0x24
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 ff86 	bl	8006dac <xTaskRemoveFromEventList>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00e      	beq.n	8005ec4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00b      	beq.n	8005ec4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	e007      	b.n	8005ec4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005eb8:	3301      	adds	r3, #1
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	b25a      	sxtb	r2, r3
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005ec8:	e001      	b.n	8005ece <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ed8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3740      	adds	r7, #64	@ 0x40
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08c      	sub	sp, #48	@ 0x30
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10b      	bne.n	8005f16 <xQueueReceive+0x32>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	623b      	str	r3, [r7, #32]
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	e7fd      	b.n	8005f12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d103      	bne.n	8005f24 <xQueueReceive+0x40>
 8005f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <xQueueReceive+0x44>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <xQueueReceive+0x46>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <xQueueReceive+0x62>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	61fb      	str	r3, [r7, #28]
}
 8005f40:	bf00      	nop
 8005f42:	bf00      	nop
 8005f44:	e7fd      	b.n	8005f42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f46:	f001 f8f7 	bl	8007138 <xTaskGetSchedulerState>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d102      	bne.n	8005f56 <xQueueReceive+0x72>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <xQueueReceive+0x76>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <xQueueReceive+0x78>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10b      	bne.n	8005f78 <xQueueReceive+0x94>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	61bb      	str	r3, [r7, #24]
}
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	e7fd      	b.n	8005f74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f78:	f001 fe4e 	bl	8007c18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01f      	beq.n	8005fc8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f8c:	f000 f978 	bl	8006280 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	1e5a      	subs	r2, r3, #1
 8005f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00f      	beq.n	8005fc0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa2:	3310      	adds	r3, #16
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 ff01 	bl	8006dac <xTaskRemoveFromEventList>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d007      	beq.n	8005fc0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80060a4 <xQueueReceive+0x1c0>)
 8005fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fc0:	f001 fe5c 	bl	8007c7c <vPortExitCritical>
				return pdPASS;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e069      	b.n	800609c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fce:	f001 fe55 	bl	8007c7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e062      	b.n	800609c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d106      	bne.n	8005fea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fdc:	f107 0310 	add.w	r3, r7, #16
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 ff47 	bl	8006e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fea:	f001 fe47 	bl	8007c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fee:	f000 fcaf 	bl	8006950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ff2:	f001 fe11 	bl	8007c18 <vPortEnterCritical>
 8005ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ffc:	b25b      	sxtb	r3, r3
 8005ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006002:	d103      	bne.n	800600c <xQueueReceive+0x128>
 8006004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800600c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006012:	b25b      	sxtb	r3, r3
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d103      	bne.n	8006022 <xQueueReceive+0x13e>
 800601a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006022:	f001 fe2b 	bl	8007c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006026:	1d3a      	adds	r2, r7, #4
 8006028:	f107 0310 	add.w	r3, r7, #16
 800602c:	4611      	mov	r1, r2
 800602e:	4618      	mov	r0, r3
 8006030:	f000 ff36 	bl	8006ea0 <xTaskCheckForTimeOut>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d123      	bne.n	8006082 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800603a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800603c:	f000 f998 	bl	8006370 <prvIsQueueEmpty>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d017      	beq.n	8006076 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006048:	3324      	adds	r3, #36	@ 0x24
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	4611      	mov	r1, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fe5a 	bl	8006d08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006054:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006056:	f000 f939 	bl	80062cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800605a:	f000 fc87 	bl	800696c <xTaskResumeAll>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d189      	bne.n	8005f78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006064:	4b0f      	ldr	r3, [pc, #60]	@ (80060a4 <xQueueReceive+0x1c0>)
 8006066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	e780      	b.n	8005f78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006078:	f000 f928 	bl	80062cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800607c:	f000 fc76 	bl	800696c <xTaskResumeAll>
 8006080:	e77a      	b.n	8005f78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006084:	f000 f922 	bl	80062cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006088:	f000 fc70 	bl	800696c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800608c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800608e:	f000 f96f 	bl	8006370 <prvIsQueueEmpty>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	f43f af6f 	beq.w	8005f78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800609a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800609c:	4618      	mov	r0, r3
 800609e:	3730      	adds	r7, #48	@ 0x30
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	e000ed04 	.word	0xe000ed04

080060a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08e      	sub	sp, #56	@ 0x38
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80060b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	623b      	str	r3, [r7, #32]
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	e7fd      	b.n	80060d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <xQueueReceiveFromISR+0x3c>
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <xQueueReceiveFromISR+0x40>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <xQueueReceiveFromISR+0x42>
 80060e8:	2300      	movs	r3, #0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	61fb      	str	r3, [r7, #28]
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006106:	f001 fe67 	bl	8007dd8 <vPortValidateInterruptPriority>
	__asm volatile
 800610a:	f3ef 8211 	mrs	r2, BASEPRI
 800610e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	61ba      	str	r2, [r7, #24]
 8006120:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006122:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006124:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800612c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612e:	2b00      	cmp	r3, #0
 8006130:	d02f      	beq.n	8006192 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800613c:	68b9      	ldr	r1, [r7, #8]
 800613e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006140:	f000 f89e 	bl	8006280 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006146:	1e5a      	subs	r2, r3, #1
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800614c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d112      	bne.n	800617c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800615e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006160:	3310      	adds	r3, #16
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fe22 	bl	8006dac <xTaskRemoveFromEventList>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00e      	beq.n	800618c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	e007      	b.n	800618c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800617c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006180:	3301      	adds	r3, #1
 8006182:	b2db      	uxtb	r3, r3
 8006184:	b25a      	sxtb	r2, r3
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800618c:	2301      	movs	r3, #1
 800618e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006190:	e001      	b.n	8006196 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006192:	2300      	movs	r3, #0
 8006194:	637b      	str	r3, [r7, #52]	@ 0x34
 8006196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006198:	613b      	str	r3, [r7, #16]
	__asm volatile
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f383 8811 	msr	BASEPRI, r3
}
 80061a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3738      	adds	r7, #56	@ 0x38
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10d      	bne.n	80061e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d14d      	bne.n	800626e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 ffcc 	bl	8007174 <xTaskPriorityDisinherit>
 80061dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	609a      	str	r2, [r3, #8]
 80061e4:	e043      	b.n	800626e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d119      	bne.n	8006220 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6858      	ldr	r0, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f4:	461a      	mov	r2, r3
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	f002 faef 	bl	80087da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006204:	441a      	add	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	d32b      	bcc.n	800626e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	605a      	str	r2, [r3, #4]
 800621e:	e026      	b.n	800626e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68d8      	ldr	r0, [r3, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006228:	461a      	mov	r2, r3
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	f002 fad5 	bl	80087da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006238:	425b      	negs	r3, r3
 800623a:	441a      	add	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d207      	bcs.n	800625c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	425b      	negs	r3, r3
 8006256:	441a      	add	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d105      	bne.n	800626e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	3b01      	subs	r3, #1
 800626c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006276:	697b      	ldr	r3, [r7, #20]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628e:	2b00      	cmp	r3, #0
 8006290:	d018      	beq.n	80062c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629a:	441a      	add	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d303      	bcc.n	80062b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68d9      	ldr	r1, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062bc:	461a      	mov	r2, r3
 80062be:	6838      	ldr	r0, [r7, #0]
 80062c0:	f002 fa8b 	bl	80087da <memcpy>
	}
}
 80062c4:	bf00      	nop
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062d4:	f001 fca0 	bl	8007c18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062e0:	e011      	b.n	8006306 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d012      	beq.n	8006310 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3324      	adds	r3, #36	@ 0x24
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fd5c 	bl	8006dac <xTaskRemoveFromEventList>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062fa:	f000 fe35 	bl	8006f68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	3b01      	subs	r3, #1
 8006302:	b2db      	uxtb	r3, r3
 8006304:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630a:	2b00      	cmp	r3, #0
 800630c:	dce9      	bgt.n	80062e2 <prvUnlockQueue+0x16>
 800630e:	e000      	b.n	8006312 <prvUnlockQueue+0x46>
					break;
 8006310:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	22ff      	movs	r2, #255	@ 0xff
 8006316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800631a:	f001 fcaf 	bl	8007c7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800631e:	f001 fc7b 	bl	8007c18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006328:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800632a:	e011      	b.n	8006350 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d012      	beq.n	800635a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3310      	adds	r3, #16
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fd37 	bl	8006dac <xTaskRemoveFromEventList>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006344:	f000 fe10 	bl	8006f68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	3b01      	subs	r3, #1
 800634c:	b2db      	uxtb	r3, r3
 800634e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006354:	2b00      	cmp	r3, #0
 8006356:	dce9      	bgt.n	800632c <prvUnlockQueue+0x60>
 8006358:	e000      	b.n	800635c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800635a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	22ff      	movs	r2, #255	@ 0xff
 8006360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006364:	f001 fc8a 	bl	8007c7c <vPortExitCritical>
}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006378:	f001 fc4e 	bl	8007c18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006384:	2301      	movs	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	e001      	b.n	800638e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800638e:	f001 fc75 	bl	8007c7c <vPortExitCritical>

	return xReturn;
 8006392:	68fb      	ldr	r3, [r7, #12]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063a4:	f001 fc38 	bl	8007c18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d102      	bne.n	80063ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	e001      	b.n	80063be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063be:	f001 fc5d 	bl	8007c7c <vPortExitCritical>

	return xReturn;
 80063c2:	68fb      	ldr	r3, [r7, #12]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e014      	b.n	8006406 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80063dc:	4a0f      	ldr	r2, [pc, #60]	@ (800641c <vQueueAddToRegistry+0x50>)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10b      	bne.n	8006400 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80063e8:	490c      	ldr	r1, [pc, #48]	@ (800641c <vQueueAddToRegistry+0x50>)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80063f2:	4a0a      	ldr	r2, [pc, #40]	@ (800641c <vQueueAddToRegistry+0x50>)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	4413      	add	r3, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80063fe:	e006      	b.n	800640e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b07      	cmp	r3, #7
 800640a:	d9e7      	bls.n	80063dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800640c:	bf00      	nop
 800640e:	bf00      	nop
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	20000bc4 	.word	0x20000bc4

08006420 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006430:	f001 fbf2 	bl	8007c18 <vPortEnterCritical>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800643a:	b25b      	sxtb	r3, r3
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d103      	bne.n	800644a <vQueueWaitForMessageRestricted+0x2a>
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006450:	b25b      	sxtb	r3, r3
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d103      	bne.n	8006460 <vQueueWaitForMessageRestricted+0x40>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006460:	f001 fc0c 	bl	8007c7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	3324      	adds	r3, #36	@ 0x24
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fc6d 	bl	8006d54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800647a:	6978      	ldr	r0, [r7, #20]
 800647c:	f7ff ff26 	bl	80062cc <prvUnlockQueue>
	}
 8006480:	bf00      	nop
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08e      	sub	sp, #56	@ 0x38
 800648c:	af04      	add	r7, sp, #16
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10b      	bne.n	80064b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	623b      	str	r3, [r7, #32]
}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	e7fd      	b.n	80064b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10b      	bne.n	80064d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	61fb      	str	r3, [r7, #28]
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064d2:	23a8      	movs	r3, #168	@ 0xa8
 80064d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2ba8      	cmp	r3, #168	@ 0xa8
 80064da:	d00b      	beq.n	80064f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	61bb      	str	r3, [r7, #24]
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01e      	beq.n	800653a <xTaskCreateStatic+0xb2>
 80064fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d01b      	beq.n	800653a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006504:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800650a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	2202      	movs	r2, #2
 8006510:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006514:	2300      	movs	r3, #0
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	9302      	str	r3, [sp, #8]
 800651c:	f107 0314 	add.w	r3, r7, #20
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f851 	bl	80065d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006532:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006534:	f000 f8f6 	bl	8006724 <prvAddNewTaskToReadyList>
 8006538:	e001      	b.n	800653e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800653e:	697b      	ldr	r3, [r7, #20]
	}
 8006540:	4618      	mov	r0, r3
 8006542:	3728      	adds	r7, #40	@ 0x28
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08c      	sub	sp, #48	@ 0x30
 800654c:	af04      	add	r7, sp, #16
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006558:	88fb      	ldrh	r3, [r7, #6]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4618      	mov	r0, r3
 800655e:	f001 fc7d 	bl	8007e5c <pvPortMalloc>
 8006562:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00e      	beq.n	8006588 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800656a:	20a8      	movs	r0, #168	@ 0xa8
 800656c:	f001 fc76 	bl	8007e5c <pvPortMalloc>
 8006570:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	631a      	str	r2, [r3, #48]	@ 0x30
 800657e:	e005      	b.n	800658c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006580:	6978      	ldr	r0, [r7, #20]
 8006582:	f001 fd39 	bl	8007ff8 <vPortFree>
 8006586:	e001      	b.n	800658c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006588:	2300      	movs	r3, #0
 800658a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d017      	beq.n	80065c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800659a:	88fa      	ldrh	r2, [r7, #6]
 800659c:	2300      	movs	r3, #0
 800659e:	9303      	str	r3, [sp, #12]
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	9302      	str	r3, [sp, #8]
 80065a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 f80f 	bl	80065d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065b6:	69f8      	ldr	r0, [r7, #28]
 80065b8:	f000 f8b4 	bl	8006724 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065bc:	2301      	movs	r3, #1
 80065be:	61bb      	str	r3, [r7, #24]
 80065c0:	e002      	b.n	80065c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065c2:	f04f 33ff 	mov.w	r3, #4294967295
 80065c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065c8:	69bb      	ldr	r3, [r7, #24]
	}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3720      	adds	r7, #32
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80065e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	461a      	mov	r2, r3
 80065ec:	21a5      	movs	r1, #165	@ 0xa5
 80065ee:	f002 f81b 	bl	8008628 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065fc:	3b01      	subs	r3, #1
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f023 0307 	bic.w	r3, r3, #7
 800660a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00b      	beq.n	800662e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	617b      	str	r3, [r7, #20]
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	e7fd      	b.n	800662a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01f      	beq.n	8006674 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006634:	2300      	movs	r3, #0
 8006636:	61fb      	str	r3, [r7, #28]
 8006638:	e012      	b.n	8006660 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	4413      	add	r3, r2
 8006640:	7819      	ldrb	r1, [r3, #0]
 8006642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	4413      	add	r3, r2
 8006648:	3334      	adds	r3, #52	@ 0x34
 800664a:	460a      	mov	r2, r1
 800664c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	4413      	add	r3, r2
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d006      	beq.n	8006668 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	3301      	adds	r3, #1
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	2b0f      	cmp	r3, #15
 8006664:	d9e9      	bls.n	800663a <prvInitialiseNewTask+0x66>
 8006666:	e000      	b.n	800666a <prvInitialiseNewTask+0x96>
			{
				break;
 8006668:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800666a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006672:	e003      	b.n	800667c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	2b37      	cmp	r3, #55	@ 0x37
 8006680:	d901      	bls.n	8006686 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006682:	2337      	movs	r3, #55	@ 0x37
 8006684:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800668a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800668c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006690:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	2200      	movs	r2, #0
 8006696:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669a:	3304      	adds	r3, #4
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff f8a7 	bl	80057f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	3318      	adds	r3, #24
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff f8a2 	bl	80057f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d4:	3354      	adds	r3, #84	@ 0x54
 80066d6:	224c      	movs	r2, #76	@ 0x4c
 80066d8:	2100      	movs	r1, #0
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 ffa4 	bl	8008628 <memset>
 80066e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006718 <prvInitialiseNewTask+0x144>)
 80066e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	4a0c      	ldr	r2, [pc, #48]	@ (800671c <prvInitialiseNewTask+0x148>)
 80066ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80066ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006720 <prvInitialiseNewTask+0x14c>)
 80066f0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	68f9      	ldr	r1, [r7, #12]
 80066f6:	69b8      	ldr	r0, [r7, #24]
 80066f8:	f001 f95a 	bl	80079b0 <pxPortInitialiseStack>
 80066fc:	4602      	mov	r2, r0
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800670c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800670e:	bf00      	nop
 8006710:	3720      	adds	r7, #32
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20006078 	.word	0x20006078
 800671c:	200060e0 	.word	0x200060e0
 8006720:	20006148 	.word	0x20006148

08006724 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800672c:	f001 fa74 	bl	8007c18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006730:	4b2d      	ldr	r3, [pc, #180]	@ (80067e8 <prvAddNewTaskToReadyList+0xc4>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3301      	adds	r3, #1
 8006736:	4a2c      	ldr	r2, [pc, #176]	@ (80067e8 <prvAddNewTaskToReadyList+0xc4>)
 8006738:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800673a:	4b2c      	ldr	r3, [pc, #176]	@ (80067ec <prvAddNewTaskToReadyList+0xc8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006742:	4a2a      	ldr	r2, [pc, #168]	@ (80067ec <prvAddNewTaskToReadyList+0xc8>)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006748:	4b27      	ldr	r3, [pc, #156]	@ (80067e8 <prvAddNewTaskToReadyList+0xc4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d110      	bne.n	8006772 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006750:	f000 fc2e 	bl	8006fb0 <prvInitialiseTaskLists>
 8006754:	e00d      	b.n	8006772 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006756:	4b26      	ldr	r3, [pc, #152]	@ (80067f0 <prvAddNewTaskToReadyList+0xcc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800675e:	4b23      	ldr	r3, [pc, #140]	@ (80067ec <prvAddNewTaskToReadyList+0xc8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006768:	429a      	cmp	r2, r3
 800676a:	d802      	bhi.n	8006772 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800676c:	4a1f      	ldr	r2, [pc, #124]	@ (80067ec <prvAddNewTaskToReadyList+0xc8>)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006772:	4b20      	ldr	r3, [pc, #128]	@ (80067f4 <prvAddNewTaskToReadyList+0xd0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3301      	adds	r3, #1
 8006778:	4a1e      	ldr	r2, [pc, #120]	@ (80067f4 <prvAddNewTaskToReadyList+0xd0>)
 800677a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800677c:	4b1d      	ldr	r3, [pc, #116]	@ (80067f4 <prvAddNewTaskToReadyList+0xd0>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006788:	4b1b      	ldr	r3, [pc, #108]	@ (80067f8 <prvAddNewTaskToReadyList+0xd4>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d903      	bls.n	8006798 <prvAddNewTaskToReadyList+0x74>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006794:	4a18      	ldr	r2, [pc, #96]	@ (80067f8 <prvAddNewTaskToReadyList+0xd4>)
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800679c:	4613      	mov	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4a15      	ldr	r2, [pc, #84]	@ (80067fc <prvAddNewTaskToReadyList+0xd8>)
 80067a6:	441a      	add	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4619      	mov	r1, r3
 80067ae:	4610      	mov	r0, r2
 80067b0:	f7ff f82b 	bl	800580a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067b4:	f001 fa62 	bl	8007c7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067b8:	4b0d      	ldr	r3, [pc, #52]	@ (80067f0 <prvAddNewTaskToReadyList+0xcc>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00e      	beq.n	80067de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067c0:	4b0a      	ldr	r3, [pc, #40]	@ (80067ec <prvAddNewTaskToReadyList+0xc8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d207      	bcs.n	80067de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006800 <prvAddNewTaskToReadyList+0xdc>)
 80067d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	200010d8 	.word	0x200010d8
 80067ec:	20000c04 	.word	0x20000c04
 80067f0:	200010e4 	.word	0x200010e4
 80067f4:	200010f4 	.word	0x200010f4
 80067f8:	200010e0 	.word	0x200010e0
 80067fc:	20000c08 	.word	0x20000c08
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d018      	beq.n	8006848 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006816:	4b14      	ldr	r3, [pc, #80]	@ (8006868 <vTaskDelay+0x64>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <vTaskDelay+0x32>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	60bb      	str	r3, [r7, #8]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006836:	f000 f88b 	bl	8006950 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800683a:	2100      	movs	r1, #0
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fd09 	bl	8007254 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006842:	f000 f893 	bl	800696c <xTaskResumeAll>
 8006846:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d107      	bne.n	800685e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800684e:	4b07      	ldr	r3, [pc, #28]	@ (800686c <vTaskDelay+0x68>)
 8006850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800685e:	bf00      	nop
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20001100 	.word	0x20001100
 800686c:	e000ed04 	.word	0xe000ed04

08006870 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08a      	sub	sp, #40	@ 0x28
 8006874:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800687e:	463a      	mov	r2, r7
 8006880:	1d39      	adds	r1, r7, #4
 8006882:	f107 0308 	add.w	r3, r7, #8
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe ff5e 	bl	8005748 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	9202      	str	r2, [sp, #8]
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	2300      	movs	r3, #0
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	2300      	movs	r3, #0
 800689c:	460a      	mov	r2, r1
 800689e:	4924      	ldr	r1, [pc, #144]	@ (8006930 <vTaskStartScheduler+0xc0>)
 80068a0:	4824      	ldr	r0, [pc, #144]	@ (8006934 <vTaskStartScheduler+0xc4>)
 80068a2:	f7ff fdf1 	bl	8006488 <xTaskCreateStatic>
 80068a6:	4603      	mov	r3, r0
 80068a8:	4a23      	ldr	r2, [pc, #140]	@ (8006938 <vTaskStartScheduler+0xc8>)
 80068aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068ac:	4b22      	ldr	r3, [pc, #136]	@ (8006938 <vTaskStartScheduler+0xc8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068b4:	2301      	movs	r3, #1
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e001      	b.n	80068be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d102      	bne.n	80068ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80068c4:	f000 fd1a 	bl	80072fc <xTimerCreateTimerTask>
 80068c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d11b      	bne.n	8006908 <vTaskStartScheduler+0x98>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	613b      	str	r3, [r7, #16]
}
 80068e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068e4:	4b15      	ldr	r3, [pc, #84]	@ (800693c <vTaskStartScheduler+0xcc>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3354      	adds	r3, #84	@ 0x54
 80068ea:	4a15      	ldr	r2, [pc, #84]	@ (8006940 <vTaskStartScheduler+0xd0>)
 80068ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068ee:	4b15      	ldr	r3, [pc, #84]	@ (8006944 <vTaskStartScheduler+0xd4>)
 80068f0:	f04f 32ff 	mov.w	r2, #4294967295
 80068f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068f6:	4b14      	ldr	r3, [pc, #80]	@ (8006948 <vTaskStartScheduler+0xd8>)
 80068f8:	2201      	movs	r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068fc:	4b13      	ldr	r3, [pc, #76]	@ (800694c <vTaskStartScheduler+0xdc>)
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006902:	f001 f8e5 	bl	8007ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006906:	e00f      	b.n	8006928 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690e:	d10b      	bne.n	8006928 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	60fb      	str	r3, [r7, #12]
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	e7fd      	b.n	8006924 <vTaskStartScheduler+0xb4>
}
 8006928:	bf00      	nop
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	08008d78 	.word	0x08008d78
 8006934:	08006f81 	.word	0x08006f81
 8006938:	200010fc 	.word	0x200010fc
 800693c:	20000c04 	.word	0x20000c04
 8006940:	2000001c 	.word	0x2000001c
 8006944:	200010f8 	.word	0x200010f8
 8006948:	200010e4 	.word	0x200010e4
 800694c:	200010dc 	.word	0x200010dc

08006950 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006954:	4b04      	ldr	r3, [pc, #16]	@ (8006968 <vTaskSuspendAll+0x18>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3301      	adds	r3, #1
 800695a:	4a03      	ldr	r2, [pc, #12]	@ (8006968 <vTaskSuspendAll+0x18>)
 800695c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800695e:	bf00      	nop
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	20001100 	.word	0x20001100

0800696c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006976:	2300      	movs	r3, #0
 8006978:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800697a:	4b42      	ldr	r3, [pc, #264]	@ (8006a84 <xTaskResumeAll+0x118>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10b      	bne.n	800699a <xTaskResumeAll+0x2e>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	603b      	str	r3, [r7, #0]
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop
 8006998:	e7fd      	b.n	8006996 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800699a:	f001 f93d 	bl	8007c18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800699e:	4b39      	ldr	r3, [pc, #228]	@ (8006a84 <xTaskResumeAll+0x118>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	4a37      	ldr	r2, [pc, #220]	@ (8006a84 <xTaskResumeAll+0x118>)
 80069a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a8:	4b36      	ldr	r3, [pc, #216]	@ (8006a84 <xTaskResumeAll+0x118>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d162      	bne.n	8006a76 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069b0:	4b35      	ldr	r3, [pc, #212]	@ (8006a88 <xTaskResumeAll+0x11c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d05e      	beq.n	8006a76 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069b8:	e02f      	b.n	8006a1a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ba:	4b34      	ldr	r3, [pc, #208]	@ (8006a8c <xTaskResumeAll+0x120>)
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3318      	adds	r3, #24
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe ff7c 	bl	80058c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe ff77 	bl	80058c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069da:	4b2d      	ldr	r3, [pc, #180]	@ (8006a90 <xTaskResumeAll+0x124>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d903      	bls.n	80069ea <xTaskResumeAll+0x7e>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a90 <xTaskResumeAll+0x124>)
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4a27      	ldr	r2, [pc, #156]	@ (8006a94 <xTaskResumeAll+0x128>)
 80069f8:	441a      	add	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3304      	adds	r3, #4
 80069fe:	4619      	mov	r1, r3
 8006a00:	4610      	mov	r0, r2
 8006a02:	f7fe ff02 	bl	800580a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0a:	4b23      	ldr	r3, [pc, #140]	@ (8006a98 <xTaskResumeAll+0x12c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d302      	bcc.n	8006a1a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006a14:	4b21      	ldr	r3, [pc, #132]	@ (8006a9c <xTaskResumeAll+0x130>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006a8c <xTaskResumeAll+0x120>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1cb      	bne.n	80069ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a28:	f000 fb66 	bl	80070f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8006aa0 <xTaskResumeAll+0x134>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d010      	beq.n	8006a5a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a38:	f000 f846 	bl	8006ac8 <xTaskIncrementTick>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006a42:	4b16      	ldr	r3, [pc, #88]	@ (8006a9c <xTaskResumeAll+0x130>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1f1      	bne.n	8006a38 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006a54:	4b12      	ldr	r3, [pc, #72]	@ (8006aa0 <xTaskResumeAll+0x134>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a5a:	4b10      	ldr	r3, [pc, #64]	@ (8006a9c <xTaskResumeAll+0x130>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a62:	2301      	movs	r3, #1
 8006a64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a66:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa4 <xTaskResumeAll+0x138>)
 8006a68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a76:	f001 f901 	bl	8007c7c <vPortExitCritical>

	return xAlreadyYielded;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20001100 	.word	0x20001100
 8006a88:	200010d8 	.word	0x200010d8
 8006a8c:	20001098 	.word	0x20001098
 8006a90:	200010e0 	.word	0x200010e0
 8006a94:	20000c08 	.word	0x20000c08
 8006a98:	20000c04 	.word	0x20000c04
 8006a9c:	200010ec 	.word	0x200010ec
 8006aa0:	200010e8 	.word	0x200010e8
 8006aa4:	e000ed04 	.word	0xe000ed04

08006aa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006aae:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <xTaskGetTickCount+0x1c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ab4:	687b      	ldr	r3, [r7, #4]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	200010dc 	.word	0x200010dc

08006ac8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8006c10 <xTaskIncrementTick+0x148>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f040 8090 	bne.w	8006bfc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006adc:	4b4d      	ldr	r3, [pc, #308]	@ (8006c14 <xTaskIncrementTick+0x14c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ae4:	4a4b      	ldr	r2, [pc, #300]	@ (8006c14 <xTaskIncrementTick+0x14c>)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d121      	bne.n	8006b34 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006af0:	4b49      	ldr	r3, [pc, #292]	@ (8006c18 <xTaskIncrementTick+0x150>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00b      	beq.n	8006b12 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	603b      	str	r3, [r7, #0]
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	e7fd      	b.n	8006b0e <xTaskIncrementTick+0x46>
 8006b12:	4b41      	ldr	r3, [pc, #260]	@ (8006c18 <xTaskIncrementTick+0x150>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	4b40      	ldr	r3, [pc, #256]	@ (8006c1c <xTaskIncrementTick+0x154>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a3e      	ldr	r2, [pc, #248]	@ (8006c18 <xTaskIncrementTick+0x150>)
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	4a3e      	ldr	r2, [pc, #248]	@ (8006c1c <xTaskIncrementTick+0x154>)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	4b3e      	ldr	r3, [pc, #248]	@ (8006c20 <xTaskIncrementTick+0x158>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	4a3c      	ldr	r2, [pc, #240]	@ (8006c20 <xTaskIncrementTick+0x158>)
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	f000 fae2 	bl	80070f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b34:	4b3b      	ldr	r3, [pc, #236]	@ (8006c24 <xTaskIncrementTick+0x15c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d349      	bcc.n	8006bd2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b3e:	4b36      	ldr	r3, [pc, #216]	@ (8006c18 <xTaskIncrementTick+0x150>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b48:	4b36      	ldr	r3, [pc, #216]	@ (8006c24 <xTaskIncrementTick+0x15c>)
 8006b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4e:	601a      	str	r2, [r3, #0]
					break;
 8006b50:	e03f      	b.n	8006bd2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b52:	4b31      	ldr	r3, [pc, #196]	@ (8006c18 <xTaskIncrementTick+0x150>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d203      	bcs.n	8006b72 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8006c24 <xTaskIncrementTick+0x15c>)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b70:	e02f      	b.n	8006bd2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	3304      	adds	r3, #4
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe fea4 	bl	80058c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	3318      	adds	r3, #24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe fe9b 	bl	80058c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b92:	4b25      	ldr	r3, [pc, #148]	@ (8006c28 <xTaskIncrementTick+0x160>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d903      	bls.n	8006ba2 <xTaskIncrementTick+0xda>
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9e:	4a22      	ldr	r2, [pc, #136]	@ (8006c28 <xTaskIncrementTick+0x160>)
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4a1f      	ldr	r2, [pc, #124]	@ (8006c2c <xTaskIncrementTick+0x164>)
 8006bb0:	441a      	add	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f7fe fe26 	bl	800580a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c30 <xTaskIncrementTick+0x168>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d3b8      	bcc.n	8006b3e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd0:	e7b5      	b.n	8006b3e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bd2:	4b17      	ldr	r3, [pc, #92]	@ (8006c30 <xTaskIncrementTick+0x168>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd8:	4914      	ldr	r1, [pc, #80]	@ (8006c2c <xTaskIncrementTick+0x164>)
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d901      	bls.n	8006bee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006bea:	2301      	movs	r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006bee:	4b11      	ldr	r3, [pc, #68]	@ (8006c34 <xTaskIncrementTick+0x16c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	e004      	b.n	8006c06 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8006c38 <xTaskIncrementTick+0x170>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3301      	adds	r3, #1
 8006c02:	4a0d      	ldr	r2, [pc, #52]	@ (8006c38 <xTaskIncrementTick+0x170>)
 8006c04:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c06:	697b      	ldr	r3, [r7, #20]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20001100 	.word	0x20001100
 8006c14:	200010dc 	.word	0x200010dc
 8006c18:	20001090 	.word	0x20001090
 8006c1c:	20001094 	.word	0x20001094
 8006c20:	200010f0 	.word	0x200010f0
 8006c24:	200010f8 	.word	0x200010f8
 8006c28:	200010e0 	.word	0x200010e0
 8006c2c:	20000c08 	.word	0x20000c08
 8006c30:	20000c04 	.word	0x20000c04
 8006c34:	200010ec 	.word	0x200010ec
 8006c38:	200010e8 	.word	0x200010e8

08006c3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c42:	4b2b      	ldr	r3, [pc, #172]	@ (8006cf0 <vTaskSwitchContext+0xb4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8006cf4 <vTaskSwitchContext+0xb8>)
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c50:	e047      	b.n	8006ce2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006c52:	4b28      	ldr	r3, [pc, #160]	@ (8006cf4 <vTaskSwitchContext+0xb8>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c58:	4b27      	ldr	r3, [pc, #156]	@ (8006cf8 <vTaskSwitchContext+0xbc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	e011      	b.n	8006c84 <vTaskSwitchContext+0x48>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10b      	bne.n	8006c7e <vTaskSwitchContext+0x42>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	607b      	str	r3, [r7, #4]
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	e7fd      	b.n	8006c7a <vTaskSwitchContext+0x3e>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	491d      	ldr	r1, [pc, #116]	@ (8006cfc <vTaskSwitchContext+0xc0>)
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	440b      	add	r3, r1
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0e3      	beq.n	8006c60 <vTaskSwitchContext+0x24>
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4a16      	ldr	r2, [pc, #88]	@ (8006cfc <vTaskSwitchContext+0xc0>)
 8006ca4:	4413      	add	r3, r2
 8006ca6:	60bb      	str	r3, [r7, #8]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	605a      	str	r2, [r3, #4]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	3308      	adds	r3, #8
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d104      	bne.n	8006cc8 <vTaskSwitchContext+0x8c>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	605a      	str	r2, [r3, #4]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	4a0c      	ldr	r2, [pc, #48]	@ (8006d00 <vTaskSwitchContext+0xc4>)
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	4a09      	ldr	r2, [pc, #36]	@ (8006cf8 <vTaskSwitchContext+0xbc>)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cd8:	4b09      	ldr	r3, [pc, #36]	@ (8006d00 <vTaskSwitchContext+0xc4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3354      	adds	r3, #84	@ 0x54
 8006cde:	4a09      	ldr	r2, [pc, #36]	@ (8006d04 <vTaskSwitchContext+0xc8>)
 8006ce0:	6013      	str	r3, [r2, #0]
}
 8006ce2:	bf00      	nop
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20001100 	.word	0x20001100
 8006cf4:	200010ec 	.word	0x200010ec
 8006cf8:	200010e0 	.word	0x200010e0
 8006cfc:	20000c08 	.word	0x20000c08
 8006d00:	20000c04 	.word	0x20000c04
 8006d04:	2000001c 	.word	0x2000001c

08006d08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10b      	bne.n	8006d30 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	60fb      	str	r3, [r7, #12]
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	e7fd      	b.n	8006d2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d30:	4b07      	ldr	r3, [pc, #28]	@ (8006d50 <vTaskPlaceOnEventList+0x48>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3318      	adds	r3, #24
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7fe fd8a 	bl	8005852 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d3e:	2101      	movs	r1, #1
 8006d40:	6838      	ldr	r0, [r7, #0]
 8006d42:	f000 fa87 	bl	8007254 <prvAddCurrentTaskToDelayedList>
}
 8006d46:	bf00      	nop
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000c04 	.word	0x20000c04

08006d54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10b      	bne.n	8006d7e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	617b      	str	r3, [r7, #20]
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	e7fd      	b.n	8006d7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006da8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3318      	adds	r3, #24
 8006d84:	4619      	mov	r1, r3
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7fe fd3f 	bl	800580a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006d92:	f04f 33ff 	mov.w	r3, #4294967295
 8006d96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	68b8      	ldr	r0, [r7, #8]
 8006d9c:	f000 fa5a 	bl	8007254 <prvAddCurrentTaskToDelayedList>
	}
 8006da0:	bf00      	nop
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000c04 	.word	0x20000c04

08006dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10b      	bne.n	8006dda <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	60fb      	str	r3, [r7, #12]
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop
 8006dd8:	e7fd      	b.n	8006dd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	3318      	adds	r3, #24
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe fd70 	bl	80058c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006de4:	4b1d      	ldr	r3, [pc, #116]	@ (8006e5c <xTaskRemoveFromEventList+0xb0>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d11d      	bne.n	8006e28 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fe fd67 	bl	80058c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dfa:	4b19      	ldr	r3, [pc, #100]	@ (8006e60 <xTaskRemoveFromEventList+0xb4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d903      	bls.n	8006e0a <xTaskRemoveFromEventList+0x5e>
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e06:	4a16      	ldr	r2, [pc, #88]	@ (8006e60 <xTaskRemoveFromEventList+0xb4>)
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4a13      	ldr	r2, [pc, #76]	@ (8006e64 <xTaskRemoveFromEventList+0xb8>)
 8006e18:	441a      	add	r2, r3
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f7fe fcf2 	bl	800580a <vListInsertEnd>
 8006e26:	e005      	b.n	8006e34 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	3318      	adds	r3, #24
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	480e      	ldr	r0, [pc, #56]	@ (8006e68 <xTaskRemoveFromEventList+0xbc>)
 8006e30:	f7fe fceb 	bl	800580a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e38:	4b0c      	ldr	r3, [pc, #48]	@ (8006e6c <xTaskRemoveFromEventList+0xc0>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d905      	bls.n	8006e4e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e42:	2301      	movs	r3, #1
 8006e44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e46:	4b0a      	ldr	r3, [pc, #40]	@ (8006e70 <xTaskRemoveFromEventList+0xc4>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	e001      	b.n	8006e52 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e52:	697b      	ldr	r3, [r7, #20]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20001100 	.word	0x20001100
 8006e60:	200010e0 	.word	0x200010e0
 8006e64:	20000c08 	.word	0x20000c08
 8006e68:	20001098 	.word	0x20001098
 8006e6c:	20000c04 	.word	0x20000c04
 8006e70:	200010ec 	.word	0x200010ec

08006e74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e7c:	4b06      	ldr	r3, [pc, #24]	@ (8006e98 <vTaskInternalSetTimeOutState+0x24>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e84:	4b05      	ldr	r3, [pc, #20]	@ (8006e9c <vTaskInternalSetTimeOutState+0x28>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	605a      	str	r2, [r3, #4]
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	200010f0 	.word	0x200010f0
 8006e9c:	200010dc 	.word	0x200010dc

08006ea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10b      	bne.n	8006ec8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	613b      	str	r3, [r7, #16]
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10b      	bne.n	8006ee6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	60fb      	str	r3, [r7, #12]
}
 8006ee0:	bf00      	nop
 8006ee2:	bf00      	nop
 8006ee4:	e7fd      	b.n	8006ee2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006ee6:	f000 fe97 	bl	8007c18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006eea:	4b1d      	ldr	r3, [pc, #116]	@ (8006f60 <xTaskCheckForTimeOut+0xc0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f02:	d102      	bne.n	8006f0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f04:	2300      	movs	r3, #0
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	e023      	b.n	8006f52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b15      	ldr	r3, [pc, #84]	@ (8006f64 <xTaskCheckForTimeOut+0xc4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d007      	beq.n	8006f26 <xTaskCheckForTimeOut+0x86>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d302      	bcc.n	8006f26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f20:	2301      	movs	r3, #1
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	e015      	b.n	8006f52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d20b      	bcs.n	8006f48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	1ad2      	subs	r2, r2, r3
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7ff ff99 	bl	8006e74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	61fb      	str	r3, [r7, #28]
 8006f46:	e004      	b.n	8006f52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f52:	f000 fe93 	bl	8007c7c <vPortExitCritical>

	return xReturn;
 8006f56:	69fb      	ldr	r3, [r7, #28]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3720      	adds	r7, #32
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	200010dc 	.word	0x200010dc
 8006f64:	200010f0 	.word	0x200010f0

08006f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f6c:	4b03      	ldr	r3, [pc, #12]	@ (8006f7c <vTaskMissedYield+0x14>)
 8006f6e:	2201      	movs	r2, #1
 8006f70:	601a      	str	r2, [r3, #0]
}
 8006f72:	bf00      	nop
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	200010ec 	.word	0x200010ec

08006f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f88:	f000 f852 	bl	8007030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f8c:	4b06      	ldr	r3, [pc, #24]	@ (8006fa8 <prvIdleTask+0x28>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d9f9      	bls.n	8006f88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f94:	4b05      	ldr	r3, [pc, #20]	@ (8006fac <prvIdleTask+0x2c>)
 8006f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006fa4:	e7f0      	b.n	8006f88 <prvIdleTask+0x8>
 8006fa6:	bf00      	nop
 8006fa8:	20000c08 	.word	0x20000c08
 8006fac:	e000ed04 	.word	0xe000ed04

08006fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	607b      	str	r3, [r7, #4]
 8006fba:	e00c      	b.n	8006fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4a12      	ldr	r2, [pc, #72]	@ (8007010 <prvInitialiseTaskLists+0x60>)
 8006fc8:	4413      	add	r3, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fbf0 	bl	80057b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	607b      	str	r3, [r7, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b37      	cmp	r3, #55	@ 0x37
 8006fda:	d9ef      	bls.n	8006fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fdc:	480d      	ldr	r0, [pc, #52]	@ (8007014 <prvInitialiseTaskLists+0x64>)
 8006fde:	f7fe fbe7 	bl	80057b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fe2:	480d      	ldr	r0, [pc, #52]	@ (8007018 <prvInitialiseTaskLists+0x68>)
 8006fe4:	f7fe fbe4 	bl	80057b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fe8:	480c      	ldr	r0, [pc, #48]	@ (800701c <prvInitialiseTaskLists+0x6c>)
 8006fea:	f7fe fbe1 	bl	80057b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fee:	480c      	ldr	r0, [pc, #48]	@ (8007020 <prvInitialiseTaskLists+0x70>)
 8006ff0:	f7fe fbde 	bl	80057b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ff4:	480b      	ldr	r0, [pc, #44]	@ (8007024 <prvInitialiseTaskLists+0x74>)
 8006ff6:	f7fe fbdb 	bl	80057b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8007028 <prvInitialiseTaskLists+0x78>)
 8006ffc:	4a05      	ldr	r2, [pc, #20]	@ (8007014 <prvInitialiseTaskLists+0x64>)
 8006ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007000:	4b0a      	ldr	r3, [pc, #40]	@ (800702c <prvInitialiseTaskLists+0x7c>)
 8007002:	4a05      	ldr	r2, [pc, #20]	@ (8007018 <prvInitialiseTaskLists+0x68>)
 8007004:	601a      	str	r2, [r3, #0]
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20000c08 	.word	0x20000c08
 8007014:	20001068 	.word	0x20001068
 8007018:	2000107c 	.word	0x2000107c
 800701c:	20001098 	.word	0x20001098
 8007020:	200010ac 	.word	0x200010ac
 8007024:	200010c4 	.word	0x200010c4
 8007028:	20001090 	.word	0x20001090
 800702c:	20001094 	.word	0x20001094

08007030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007036:	e019      	b.n	800706c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007038:	f000 fdee 	bl	8007c18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800703c:	4b10      	ldr	r3, [pc, #64]	@ (8007080 <prvCheckTasksWaitingTermination+0x50>)
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3304      	adds	r3, #4
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe fc3b 	bl	80058c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800704e:	4b0d      	ldr	r3, [pc, #52]	@ (8007084 <prvCheckTasksWaitingTermination+0x54>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3b01      	subs	r3, #1
 8007054:	4a0b      	ldr	r2, [pc, #44]	@ (8007084 <prvCheckTasksWaitingTermination+0x54>)
 8007056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007058:	4b0b      	ldr	r3, [pc, #44]	@ (8007088 <prvCheckTasksWaitingTermination+0x58>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3b01      	subs	r3, #1
 800705e:	4a0a      	ldr	r2, [pc, #40]	@ (8007088 <prvCheckTasksWaitingTermination+0x58>)
 8007060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007062:	f000 fe0b 	bl	8007c7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f810 	bl	800708c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800706c:	4b06      	ldr	r3, [pc, #24]	@ (8007088 <prvCheckTasksWaitingTermination+0x58>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e1      	bne.n	8007038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	200010ac 	.word	0x200010ac
 8007084:	200010d8 	.word	0x200010d8
 8007088:	200010c0 	.word	0x200010c0

0800708c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3354      	adds	r3, #84	@ 0x54
 8007098:	4618      	mov	r0, r3
 800709a:	f001 fadd 	bl	8008658 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d108      	bne.n	80070ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 ffa3 	bl	8007ff8 <vPortFree>
				vPortFree( pxTCB );
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 ffa0 	bl	8007ff8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070b8:	e019      	b.n	80070ee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d103      	bne.n	80070cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 ff97 	bl	8007ff8 <vPortFree>
	}
 80070ca:	e010      	b.n	80070ee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d00b      	beq.n	80070ee <prvDeleteTCB+0x62>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	60fb      	str	r3, [r7, #12]
}
 80070e8:	bf00      	nop
 80070ea:	bf00      	nop
 80070ec:	e7fd      	b.n	80070ea <prvDeleteTCB+0x5e>
	}
 80070ee:	bf00      	nop
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070fe:	4b0c      	ldr	r3, [pc, #48]	@ (8007130 <prvResetNextTaskUnblockTime+0x38>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d104      	bne.n	8007112 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007108:	4b0a      	ldr	r3, [pc, #40]	@ (8007134 <prvResetNextTaskUnblockTime+0x3c>)
 800710a:	f04f 32ff 	mov.w	r2, #4294967295
 800710e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007110:	e008      	b.n	8007124 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007112:	4b07      	ldr	r3, [pc, #28]	@ (8007130 <prvResetNextTaskUnblockTime+0x38>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	4a04      	ldr	r2, [pc, #16]	@ (8007134 <prvResetNextTaskUnblockTime+0x3c>)
 8007122:	6013      	str	r3, [r2, #0]
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	20001090 	.word	0x20001090
 8007134:	200010f8 	.word	0x200010f8

08007138 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800713e:	4b0b      	ldr	r3, [pc, #44]	@ (800716c <xTaskGetSchedulerState+0x34>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d102      	bne.n	800714c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007146:	2301      	movs	r3, #1
 8007148:	607b      	str	r3, [r7, #4]
 800714a:	e008      	b.n	800715e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800714c:	4b08      	ldr	r3, [pc, #32]	@ (8007170 <xTaskGetSchedulerState+0x38>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d102      	bne.n	800715a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007154:	2302      	movs	r3, #2
 8007156:	607b      	str	r3, [r7, #4]
 8007158:	e001      	b.n	800715e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800715a:	2300      	movs	r3, #0
 800715c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800715e:	687b      	ldr	r3, [r7, #4]
	}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	200010e4 	.word	0x200010e4
 8007170:	20001100 	.word	0x20001100

08007174 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007180:	2300      	movs	r3, #0
 8007182:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d058      	beq.n	800723c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800718a:	4b2f      	ldr	r3, [pc, #188]	@ (8007248 <xTaskPriorityDisinherit+0xd4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	429a      	cmp	r2, r3
 8007192:	d00b      	beq.n	80071ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	60fb      	str	r3, [r7, #12]
}
 80071a6:	bf00      	nop
 80071a8:	bf00      	nop
 80071aa:	e7fd      	b.n	80071a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10b      	bne.n	80071cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	60bb      	str	r3, [r7, #8]
}
 80071c6:	bf00      	nop
 80071c8:	bf00      	nop
 80071ca:	e7fd      	b.n	80071c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d0:	1e5a      	subs	r2, r3, #1
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071de:	429a      	cmp	r2, r3
 80071e0:	d02c      	beq.n	800723c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d128      	bne.n	800723c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe fb68 	bl	80058c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007200:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720c:	4b0f      	ldr	r3, [pc, #60]	@ (800724c <xTaskPriorityDisinherit+0xd8>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d903      	bls.n	800721c <xTaskPriorityDisinherit+0xa8>
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007218:	4a0c      	ldr	r2, [pc, #48]	@ (800724c <xTaskPriorityDisinherit+0xd8>)
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007220:	4613      	mov	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4a09      	ldr	r2, [pc, #36]	@ (8007250 <xTaskPriorityDisinherit+0xdc>)
 800722a:	441a      	add	r2, r3
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	3304      	adds	r3, #4
 8007230:	4619      	mov	r1, r3
 8007232:	4610      	mov	r0, r2
 8007234:	f7fe fae9 	bl	800580a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007238:	2301      	movs	r3, #1
 800723a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800723c:	697b      	ldr	r3, [r7, #20]
	}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20000c04 	.word	0x20000c04
 800724c:	200010e0 	.word	0x200010e0
 8007250:	20000c08 	.word	0x20000c08

08007254 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800725e:	4b21      	ldr	r3, [pc, #132]	@ (80072e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007264:	4b20      	ldr	r3, [pc, #128]	@ (80072e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3304      	adds	r3, #4
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fb2a 	bl	80058c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007276:	d10a      	bne.n	800728e <prvAddCurrentTaskToDelayedList+0x3a>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800727e:	4b1a      	ldr	r3, [pc, #104]	@ (80072e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3304      	adds	r3, #4
 8007284:	4619      	mov	r1, r3
 8007286:	4819      	ldr	r0, [pc, #100]	@ (80072ec <prvAddCurrentTaskToDelayedList+0x98>)
 8007288:	f7fe fabf 	bl	800580a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800728c:	e026      	b.n	80072dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4413      	add	r3, r2
 8007294:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007296:	4b14      	ldr	r3, [pc, #80]	@ (80072e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d209      	bcs.n	80072ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072a6:	4b12      	ldr	r3, [pc, #72]	@ (80072f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b0f      	ldr	r3, [pc, #60]	@ (80072e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4619      	mov	r1, r3
 80072b2:	4610      	mov	r0, r2
 80072b4:	f7fe facd 	bl	8005852 <vListInsert>
}
 80072b8:	e010      	b.n	80072dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ba:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	4b0a      	ldr	r3, [pc, #40]	@ (80072e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f7fe fac3 	bl	8005852 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072cc:	4b0a      	ldr	r3, [pc, #40]	@ (80072f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d202      	bcs.n	80072dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072d6:	4a08      	ldr	r2, [pc, #32]	@ (80072f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6013      	str	r3, [r2, #0]
}
 80072dc:	bf00      	nop
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	200010dc 	.word	0x200010dc
 80072e8:	20000c04 	.word	0x20000c04
 80072ec:	200010c4 	.word	0x200010c4
 80072f0:	20001094 	.word	0x20001094
 80072f4:	20001090 	.word	0x20001090
 80072f8:	200010f8 	.word	0x200010f8

080072fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08a      	sub	sp, #40	@ 0x28
 8007300:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007306:	f000 fb13 	bl	8007930 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800730a:	4b1d      	ldr	r3, [pc, #116]	@ (8007380 <xTimerCreateTimerTask+0x84>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d021      	beq.n	8007356 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800731a:	1d3a      	adds	r2, r7, #4
 800731c:	f107 0108 	add.w	r1, r7, #8
 8007320:	f107 030c 	add.w	r3, r7, #12
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe fa29 	bl	800577c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	9202      	str	r2, [sp, #8]
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	2302      	movs	r3, #2
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	2300      	movs	r3, #0
 800733a:	460a      	mov	r2, r1
 800733c:	4911      	ldr	r1, [pc, #68]	@ (8007384 <xTimerCreateTimerTask+0x88>)
 800733e:	4812      	ldr	r0, [pc, #72]	@ (8007388 <xTimerCreateTimerTask+0x8c>)
 8007340:	f7ff f8a2 	bl	8006488 <xTaskCreateStatic>
 8007344:	4603      	mov	r3, r0
 8007346:	4a11      	ldr	r2, [pc, #68]	@ (800738c <xTimerCreateTimerTask+0x90>)
 8007348:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800734a:	4b10      	ldr	r3, [pc, #64]	@ (800738c <xTimerCreateTimerTask+0x90>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007352:	2301      	movs	r3, #1
 8007354:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10b      	bne.n	8007374 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	613b      	str	r3, [r7, #16]
}
 800736e:	bf00      	nop
 8007370:	bf00      	nop
 8007372:	e7fd      	b.n	8007370 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007374:	697b      	ldr	r3, [r7, #20]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20001134 	.word	0x20001134
 8007384:	08008d80 	.word	0x08008d80
 8007388:	080074c9 	.word	0x080074c9
 800738c:	20001138 	.word	0x20001138

08007390 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08a      	sub	sp, #40	@ 0x28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800739e:	2300      	movs	r3, #0
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10b      	bne.n	80073c0 <xTimerGenericCommand+0x30>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	623b      	str	r3, [r7, #32]
}
 80073ba:	bf00      	nop
 80073bc:	bf00      	nop
 80073be:	e7fd      	b.n	80073bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073c0:	4b19      	ldr	r3, [pc, #100]	@ (8007428 <xTimerGenericCommand+0x98>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d02a      	beq.n	800741e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b05      	cmp	r3, #5
 80073d8:	dc18      	bgt.n	800740c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073da:	f7ff fead 	bl	8007138 <xTaskGetSchedulerState>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d109      	bne.n	80073f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073e4:	4b10      	ldr	r3, [pc, #64]	@ (8007428 <xTimerGenericCommand+0x98>)
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	f107 0110 	add.w	r1, r7, #16
 80073ec:	2300      	movs	r3, #0
 80073ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073f0:	f7fe fbd8 	bl	8005ba4 <xQueueGenericSend>
 80073f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80073f6:	e012      	b.n	800741e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007428 <xTimerGenericCommand+0x98>)
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	f107 0110 	add.w	r1, r7, #16
 8007400:	2300      	movs	r3, #0
 8007402:	2200      	movs	r2, #0
 8007404:	f7fe fbce 	bl	8005ba4 <xQueueGenericSend>
 8007408:	6278      	str	r0, [r7, #36]	@ 0x24
 800740a:	e008      	b.n	800741e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800740c:	4b06      	ldr	r3, [pc, #24]	@ (8007428 <xTimerGenericCommand+0x98>)
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	f107 0110 	add.w	r1, r7, #16
 8007414:	2300      	movs	r3, #0
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	f7fe fcc6 	bl	8005da8 <xQueueGenericSendFromISR>
 800741c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007420:	4618      	mov	r0, r3
 8007422:	3728      	adds	r7, #40	@ 0x28
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20001134 	.word	0x20001134

0800742c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af02      	add	r7, sp, #8
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007436:	4b23      	ldr	r3, [pc, #140]	@ (80074c4 <prvProcessExpiredTimer+0x98>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	3304      	adds	r3, #4
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fa3d 	bl	80058c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	d023      	beq.n	80074a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	699a      	ldr	r2, [r3, #24]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	18d1      	adds	r1, r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	6978      	ldr	r0, [r7, #20]
 8007466:	f000 f8d5 	bl	8007614 <prvInsertTimerInActiveList>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d020      	beq.n	80074b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007470:	2300      	movs	r3, #0
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	2300      	movs	r3, #0
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	2100      	movs	r1, #0
 800747a:	6978      	ldr	r0, [r7, #20]
 800747c:	f7ff ff88 	bl	8007390 <xTimerGenericCommand>
 8007480:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d114      	bne.n	80074b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	60fb      	str	r3, [r7, #12]
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	e7fd      	b.n	800749c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074a6:	f023 0301 	bic.w	r3, r3, #1
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	6978      	ldr	r0, [r7, #20]
 80074b8:	4798      	blx	r3
}
 80074ba:	bf00      	nop
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	2000112c 	.word	0x2000112c

080074c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074d0:	f107 0308 	add.w	r3, r7, #8
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 f859 	bl	800758c <prvGetNextExpireTime>
 80074da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4619      	mov	r1, r3
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 f805 	bl	80074f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80074e6:	f000 f8d7 	bl	8007698 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074ea:	bf00      	nop
 80074ec:	e7f0      	b.n	80074d0 <prvTimerTask+0x8>
	...

080074f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074fa:	f7ff fa29 	bl	8006950 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074fe:	f107 0308 	add.w	r3, r7, #8
 8007502:	4618      	mov	r0, r3
 8007504:	f000 f866 	bl	80075d4 <prvSampleTimeNow>
 8007508:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d130      	bne.n	8007572 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <prvProcessTimerOrBlockTask+0x3c>
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	429a      	cmp	r2, r3
 800751c:	d806      	bhi.n	800752c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800751e:	f7ff fa25 	bl	800696c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007522:	68f9      	ldr	r1, [r7, #12]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff ff81 	bl	800742c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800752a:	e024      	b.n	8007576 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d008      	beq.n	8007544 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007532:	4b13      	ldr	r3, [pc, #76]	@ (8007580 <prvProcessTimerOrBlockTask+0x90>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <prvProcessTimerOrBlockTask+0x50>
 800753c:	2301      	movs	r3, #1
 800753e:	e000      	b.n	8007542 <prvProcessTimerOrBlockTask+0x52>
 8007540:	2300      	movs	r3, #0
 8007542:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007544:	4b0f      	ldr	r3, [pc, #60]	@ (8007584 <prvProcessTimerOrBlockTask+0x94>)
 8007546:	6818      	ldr	r0, [r3, #0]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	4619      	mov	r1, r3
 8007552:	f7fe ff65 	bl	8006420 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007556:	f7ff fa09 	bl	800696c <xTaskResumeAll>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007560:	4b09      	ldr	r3, [pc, #36]	@ (8007588 <prvProcessTimerOrBlockTask+0x98>)
 8007562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	f3bf 8f6f 	isb	sy
}
 8007570:	e001      	b.n	8007576 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007572:	f7ff f9fb 	bl	800696c <xTaskResumeAll>
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20001130 	.word	0x20001130
 8007584:	20001134 	.word	0x20001134
 8007588:	e000ed04 	.word	0xe000ed04

0800758c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007594:	4b0e      	ldr	r3, [pc, #56]	@ (80075d0 <prvGetNextExpireTime+0x44>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <prvGetNextExpireTime+0x16>
 800759e:	2201      	movs	r2, #1
 80075a0:	e000      	b.n	80075a4 <prvGetNextExpireTime+0x18>
 80075a2:	2200      	movs	r2, #0
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d105      	bne.n	80075bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075b0:	4b07      	ldr	r3, [pc, #28]	@ (80075d0 <prvGetNextExpireTime+0x44>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	e001      	b.n	80075c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075c0:	68fb      	ldr	r3, [r7, #12]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	2000112c 	.word	0x2000112c

080075d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075dc:	f7ff fa64 	bl	8006aa8 <xTaskGetTickCount>
 80075e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80075e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007610 <prvSampleTimeNow+0x3c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d205      	bcs.n	80075f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075ec:	f000 f93a 	bl	8007864 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	e002      	b.n	80075fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075fe:	4a04      	ldr	r2, [pc, #16]	@ (8007610 <prvSampleTimeNow+0x3c>)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007604:	68fb      	ldr	r3, [r7, #12]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	2000113c 	.word	0x2000113c

08007614 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007622:	2300      	movs	r3, #0
 8007624:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	429a      	cmp	r2, r3
 8007638:	d812      	bhi.n	8007660 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	429a      	cmp	r2, r3
 8007646:	d302      	bcc.n	800764e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007648:	2301      	movs	r3, #1
 800764a:	617b      	str	r3, [r7, #20]
 800764c:	e01b      	b.n	8007686 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800764e:	4b10      	ldr	r3, [pc, #64]	@ (8007690 <prvInsertTimerInActiveList+0x7c>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3304      	adds	r3, #4
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f7fe f8fa 	bl	8005852 <vListInsert>
 800765e:	e012      	b.n	8007686 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	429a      	cmp	r2, r3
 8007666:	d206      	bcs.n	8007676 <prvInsertTimerInActiveList+0x62>
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d302      	bcc.n	8007676 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007670:	2301      	movs	r3, #1
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	e007      	b.n	8007686 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007676:	4b07      	ldr	r3, [pc, #28]	@ (8007694 <prvInsertTimerInActiveList+0x80>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3304      	adds	r3, #4
 800767e:	4619      	mov	r1, r3
 8007680:	4610      	mov	r0, r2
 8007682:	f7fe f8e6 	bl	8005852 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007686:	697b      	ldr	r3, [r7, #20]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	20001130 	.word	0x20001130
 8007694:	2000112c 	.word	0x2000112c

08007698 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08e      	sub	sp, #56	@ 0x38
 800769c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800769e:	e0ce      	b.n	800783e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da19      	bge.n	80076da <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076a6:	1d3b      	adds	r3, r7, #4
 80076a8:	3304      	adds	r3, #4
 80076aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10b      	bne.n	80076ca <prvProcessReceivedCommands+0x32>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	61fb      	str	r3, [r7, #28]
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop
 80076c8:	e7fd      	b.n	80076c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076d0:	6850      	ldr	r0, [r2, #4]
 80076d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076d4:	6892      	ldr	r2, [r2, #8]
 80076d6:	4611      	mov	r1, r2
 80076d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f2c0 80ae 	blt.w	800783e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d004      	beq.n	80076f8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	3304      	adds	r3, #4
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe f8e6 	bl	80058c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076f8:	463b      	mov	r3, r7
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff ff6a 	bl	80075d4 <prvSampleTimeNow>
 8007700:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b09      	cmp	r3, #9
 8007706:	f200 8097 	bhi.w	8007838 <prvProcessReceivedCommands+0x1a0>
 800770a:	a201      	add	r2, pc, #4	@ (adr r2, 8007710 <prvProcessReceivedCommands+0x78>)
 800770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007710:	08007739 	.word	0x08007739
 8007714:	08007739 	.word	0x08007739
 8007718:	08007739 	.word	0x08007739
 800771c:	080077af 	.word	0x080077af
 8007720:	080077c3 	.word	0x080077c3
 8007724:	0800780f 	.word	0x0800780f
 8007728:	08007739 	.word	0x08007739
 800772c:	08007739 	.word	0x08007739
 8007730:	080077af 	.word	0x080077af
 8007734:	080077c3 	.word	0x080077c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800773e:	f043 0301 	orr.w	r3, r3, #1
 8007742:	b2da      	uxtb	r2, r3
 8007744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007746:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	18d1      	adds	r1, r2, r3
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007758:	f7ff ff5c 	bl	8007614 <prvInsertTimerInActiveList>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d06c      	beq.n	800783c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007768:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800776a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007770:	f003 0304 	and.w	r3, r3, #4
 8007774:	2b00      	cmp	r3, #0
 8007776:	d061      	beq.n	800783c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	441a      	add	r2, r3
 8007780:	2300      	movs	r3, #0
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	2300      	movs	r3, #0
 8007786:	2100      	movs	r1, #0
 8007788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800778a:	f7ff fe01 	bl	8007390 <xTimerGenericCommand>
 800778e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d152      	bne.n	800783c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	61bb      	str	r3, [r7, #24]
}
 80077a8:	bf00      	nop
 80077aa:	bf00      	nop
 80077ac:	e7fd      	b.n	80077aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077b4:	f023 0301 	bic.w	r3, r3, #1
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80077c0:	e03d      	b.n	800783e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077c8:	f043 0301 	orr.w	r3, r3, #1
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10b      	bne.n	80077fa <prvProcessReceivedCommands+0x162>
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	617b      	str	r3, [r7, #20]
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	e7fd      	b.n	80077f6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	18d1      	adds	r1, r2, r3
 8007802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007808:	f7ff ff04 	bl	8007614 <prvInsertTimerInActiveList>
					break;
 800780c:	e017      	b.n	800783e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800780e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007810:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d103      	bne.n	8007824 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800781c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800781e:	f000 fbeb 	bl	8007ff8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007822:	e00c      	b.n	800783e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007826:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800782a:	f023 0301 	bic.w	r3, r3, #1
 800782e:	b2da      	uxtb	r2, r3
 8007830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007832:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007836:	e002      	b.n	800783e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007838:	bf00      	nop
 800783a:	e000      	b.n	800783e <prvProcessReceivedCommands+0x1a6>
					break;
 800783c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800783e:	4b08      	ldr	r3, [pc, #32]	@ (8007860 <prvProcessReceivedCommands+0x1c8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	1d39      	adds	r1, r7, #4
 8007844:	2200      	movs	r2, #0
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe fb4c 	bl	8005ee4 <xQueueReceive>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	f47f af26 	bne.w	80076a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop
 8007858:	3730      	adds	r7, #48	@ 0x30
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20001134 	.word	0x20001134

08007864 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800786a:	e049      	b.n	8007900 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800786c:	4b2e      	ldr	r3, [pc, #184]	@ (8007928 <prvSwitchTimerLists+0xc4>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007876:	4b2c      	ldr	r3, [pc, #176]	@ (8007928 <prvSwitchTimerLists+0xc4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3304      	adds	r3, #4
 8007884:	4618      	mov	r0, r3
 8007886:	f7fe f81d 	bl	80058c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b00      	cmp	r3, #0
 800789e:	d02f      	beq.n	8007900 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	4413      	add	r3, r2
 80078a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d90e      	bls.n	80078d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078be:	4b1a      	ldr	r3, [pc, #104]	@ (8007928 <prvSwitchTimerLists+0xc4>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f7fd ffc2 	bl	8005852 <vListInsert>
 80078ce:	e017      	b.n	8007900 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078d0:	2300      	movs	r3, #0
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	2100      	movs	r1, #0
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f7ff fd58 	bl	8007390 <xTimerGenericCommand>
 80078e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10b      	bne.n	8007900 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	603b      	str	r3, [r7, #0]
}
 80078fa:	bf00      	nop
 80078fc:	bf00      	nop
 80078fe:	e7fd      	b.n	80078fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007900:	4b09      	ldr	r3, [pc, #36]	@ (8007928 <prvSwitchTimerLists+0xc4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1b0      	bne.n	800786c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800790a:	4b07      	ldr	r3, [pc, #28]	@ (8007928 <prvSwitchTimerLists+0xc4>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007910:	4b06      	ldr	r3, [pc, #24]	@ (800792c <prvSwitchTimerLists+0xc8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a04      	ldr	r2, [pc, #16]	@ (8007928 <prvSwitchTimerLists+0xc4>)
 8007916:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007918:	4a04      	ldr	r2, [pc, #16]	@ (800792c <prvSwitchTimerLists+0xc8>)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	6013      	str	r3, [r2, #0]
}
 800791e:	bf00      	nop
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	2000112c 	.word	0x2000112c
 800792c:	20001130 	.word	0x20001130

08007930 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007936:	f000 f96f 	bl	8007c18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800793a:	4b15      	ldr	r3, [pc, #84]	@ (8007990 <prvCheckForValidListAndQueue+0x60>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d120      	bne.n	8007984 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007942:	4814      	ldr	r0, [pc, #80]	@ (8007994 <prvCheckForValidListAndQueue+0x64>)
 8007944:	f7fd ff34 	bl	80057b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007948:	4813      	ldr	r0, [pc, #76]	@ (8007998 <prvCheckForValidListAndQueue+0x68>)
 800794a:	f7fd ff31 	bl	80057b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800794e:	4b13      	ldr	r3, [pc, #76]	@ (800799c <prvCheckForValidListAndQueue+0x6c>)
 8007950:	4a10      	ldr	r2, [pc, #64]	@ (8007994 <prvCheckForValidListAndQueue+0x64>)
 8007952:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007954:	4b12      	ldr	r3, [pc, #72]	@ (80079a0 <prvCheckForValidListAndQueue+0x70>)
 8007956:	4a10      	ldr	r2, [pc, #64]	@ (8007998 <prvCheckForValidListAndQueue+0x68>)
 8007958:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800795a:	2300      	movs	r3, #0
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	4b11      	ldr	r3, [pc, #68]	@ (80079a4 <prvCheckForValidListAndQueue+0x74>)
 8007960:	4a11      	ldr	r2, [pc, #68]	@ (80079a8 <prvCheckForValidListAndQueue+0x78>)
 8007962:	2110      	movs	r1, #16
 8007964:	200a      	movs	r0, #10
 8007966:	f7fe f841 	bl	80059ec <xQueueGenericCreateStatic>
 800796a:	4603      	mov	r3, r0
 800796c:	4a08      	ldr	r2, [pc, #32]	@ (8007990 <prvCheckForValidListAndQueue+0x60>)
 800796e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007970:	4b07      	ldr	r3, [pc, #28]	@ (8007990 <prvCheckForValidListAndQueue+0x60>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d005      	beq.n	8007984 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007978:	4b05      	ldr	r3, [pc, #20]	@ (8007990 <prvCheckForValidListAndQueue+0x60>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	490b      	ldr	r1, [pc, #44]	@ (80079ac <prvCheckForValidListAndQueue+0x7c>)
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fd24 	bl	80063cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007984:	f000 f97a 	bl	8007c7c <vPortExitCritical>
}
 8007988:	bf00      	nop
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20001134 	.word	0x20001134
 8007994:	20001104 	.word	0x20001104
 8007998:	20001118 	.word	0x20001118
 800799c:	2000112c 	.word	0x2000112c
 80079a0:	20001130 	.word	0x20001130
 80079a4:	200011e0 	.word	0x200011e0
 80079a8:	20001140 	.word	0x20001140
 80079ac:	08008d88 	.word	0x08008d88

080079b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3b04      	subs	r3, #4
 80079c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3b04      	subs	r3, #4
 80079ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f023 0201 	bic.w	r2, r3, #1
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	3b04      	subs	r3, #4
 80079de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007a14 <pxPortInitialiseStack+0x64>)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3b14      	subs	r3, #20
 80079ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3b04      	subs	r3, #4
 80079f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f06f 0202 	mvn.w	r2, #2
 80079fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3b20      	subs	r3, #32
 8007a04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a06:	68fb      	ldr	r3, [r7, #12]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	08007a19 	.word	0x08007a19

08007a18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a22:	4b13      	ldr	r3, [pc, #76]	@ (8007a70 <prvTaskExitError+0x58>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2a:	d00b      	beq.n	8007a44 <prvTaskExitError+0x2c>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	60fb      	str	r3, [r7, #12]
}
 8007a3e:	bf00      	nop
 8007a40:	bf00      	nop
 8007a42:	e7fd      	b.n	8007a40 <prvTaskExitError+0x28>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	60bb      	str	r3, [r7, #8]
}
 8007a56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a58:	bf00      	nop
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0fc      	beq.n	8007a5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a60:	bf00      	nop
 8007a62:	bf00      	nop
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	2000000c 	.word	0x2000000c
	...

08007a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a80:	4b07      	ldr	r3, [pc, #28]	@ (8007aa0 <pxCurrentTCBConst2>)
 8007a82:	6819      	ldr	r1, [r3, #0]
 8007a84:	6808      	ldr	r0, [r1, #0]
 8007a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	f380 8809 	msr	PSP, r0
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f04f 0000 	mov.w	r0, #0
 8007a96:	f380 8811 	msr	BASEPRI, r0
 8007a9a:	4770      	bx	lr
 8007a9c:	f3af 8000 	nop.w

08007aa0 <pxCurrentTCBConst2>:
 8007aa0:	20000c04 	.word	0x20000c04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop

08007aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007aa8:	4808      	ldr	r0, [pc, #32]	@ (8007acc <prvPortStartFirstTask+0x24>)
 8007aaa:	6800      	ldr	r0, [r0, #0]
 8007aac:	6800      	ldr	r0, [r0, #0]
 8007aae:	f380 8808 	msr	MSP, r0
 8007ab2:	f04f 0000 	mov.w	r0, #0
 8007ab6:	f380 8814 	msr	CONTROL, r0
 8007aba:	b662      	cpsie	i
 8007abc:	b661      	cpsie	f
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	df00      	svc	0
 8007ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aca:	bf00      	nop
 8007acc:	e000ed08 	.word	0xe000ed08

08007ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ad6:	4b47      	ldr	r3, [pc, #284]	@ (8007bf4 <xPortStartScheduler+0x124>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a47      	ldr	r2, [pc, #284]	@ (8007bf8 <xPortStartScheduler+0x128>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d10b      	bne.n	8007af8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	60fb      	str	r3, [r7, #12]
}
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	e7fd      	b.n	8007af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007af8:	4b3e      	ldr	r3, [pc, #248]	@ (8007bf4 <xPortStartScheduler+0x124>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a3f      	ldr	r2, [pc, #252]	@ (8007bfc <xPortStartScheduler+0x12c>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d10b      	bne.n	8007b1a <xPortStartScheduler+0x4a>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	613b      	str	r3, [r7, #16]
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	e7fd      	b.n	8007b16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b1a:	4b39      	ldr	r3, [pc, #228]	@ (8007c00 <xPortStartScheduler+0x130>)
 8007b1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	22ff      	movs	r2, #255	@ 0xff
 8007b2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	4b31      	ldr	r3, [pc, #196]	@ (8007c04 <xPortStartScheduler+0x134>)
 8007b40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b42:	4b31      	ldr	r3, [pc, #196]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b44:	2207      	movs	r2, #7
 8007b46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b48:	e009      	b.n	8007b5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	4a2d      	ldr	r2, [pc, #180]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b66:	2b80      	cmp	r3, #128	@ 0x80
 8007b68:	d0ef      	beq.n	8007b4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b6a:	4b27      	ldr	r3, [pc, #156]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f1c3 0307 	rsb	r3, r3, #7
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d00b      	beq.n	8007b8e <xPortStartScheduler+0xbe>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	60bb      	str	r3, [r7, #8]
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	e7fd      	b.n	8007b8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	021b      	lsls	r3, r3, #8
 8007b94:	4a1c      	ldr	r2, [pc, #112]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b98:	4b1b      	ldr	r3, [pc, #108]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ba0:	4a19      	ldr	r2, [pc, #100]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007ba2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bac:	4b17      	ldr	r3, [pc, #92]	@ (8007c0c <xPortStartScheduler+0x13c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a16      	ldr	r2, [pc, #88]	@ (8007c0c <xPortStartScheduler+0x13c>)
 8007bb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007bb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007bb8:	4b14      	ldr	r3, [pc, #80]	@ (8007c0c <xPortStartScheduler+0x13c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a13      	ldr	r2, [pc, #76]	@ (8007c0c <xPortStartScheduler+0x13c>)
 8007bbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007bc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bc4:	f000 f8da 	bl	8007d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bc8:	4b11      	ldr	r3, [pc, #68]	@ (8007c10 <xPortStartScheduler+0x140>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bce:	f000 f8f9 	bl	8007dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bd2:	4b10      	ldr	r3, [pc, #64]	@ (8007c14 <xPortStartScheduler+0x144>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8007c14 <xPortStartScheduler+0x144>)
 8007bd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007bdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bde:	f7ff ff63 	bl	8007aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007be2:	f7ff f82b 	bl	8006c3c <vTaskSwitchContext>
	prvTaskExitError();
 8007be6:	f7ff ff17 	bl	8007a18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	e000ed00 	.word	0xe000ed00
 8007bf8:	410fc271 	.word	0x410fc271
 8007bfc:	410fc270 	.word	0x410fc270
 8007c00:	e000e400 	.word	0xe000e400
 8007c04:	20001230 	.word	0x20001230
 8007c08:	20001234 	.word	0x20001234
 8007c0c:	e000ed20 	.word	0xe000ed20
 8007c10:	2000000c 	.word	0x2000000c
 8007c14:	e000ef34 	.word	0xe000ef34

08007c18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	607b      	str	r3, [r7, #4]
}
 8007c30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c32:	4b10      	ldr	r3, [pc, #64]	@ (8007c74 <vPortEnterCritical+0x5c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3301      	adds	r3, #1
 8007c38:	4a0e      	ldr	r2, [pc, #56]	@ (8007c74 <vPortEnterCritical+0x5c>)
 8007c3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <vPortEnterCritical+0x5c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d110      	bne.n	8007c66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c44:	4b0c      	ldr	r3, [pc, #48]	@ (8007c78 <vPortEnterCritical+0x60>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00b      	beq.n	8007c66 <vPortEnterCritical+0x4e>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	603b      	str	r3, [r7, #0]
}
 8007c60:	bf00      	nop
 8007c62:	bf00      	nop
 8007c64:	e7fd      	b.n	8007c62 <vPortEnterCritical+0x4a>
	}
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	2000000c 	.word	0x2000000c
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c82:	4b12      	ldr	r3, [pc, #72]	@ (8007ccc <vPortExitCritical+0x50>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10b      	bne.n	8007ca2 <vPortExitCritical+0x26>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	607b      	str	r3, [r7, #4]
}
 8007c9c:	bf00      	nop
 8007c9e:	bf00      	nop
 8007ca0:	e7fd      	b.n	8007c9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <vPortExitCritical+0x50>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	4a08      	ldr	r2, [pc, #32]	@ (8007ccc <vPortExitCritical+0x50>)
 8007caa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cac:	4b07      	ldr	r3, [pc, #28]	@ (8007ccc <vPortExitCritical+0x50>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d105      	bne.n	8007cc0 <vPortExitCritical+0x44>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	f383 8811 	msr	BASEPRI, r3
}
 8007cbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	2000000c 	.word	0x2000000c

08007cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cd0:	f3ef 8009 	mrs	r0, PSP
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	4b15      	ldr	r3, [pc, #84]	@ (8007d30 <pxCurrentTCBConst>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	f01e 0f10 	tst.w	lr, #16
 8007ce0:	bf08      	it	eq
 8007ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cea:	6010      	str	r0, [r2, #0]
 8007cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007cf4:	f380 8811 	msr	BASEPRI, r0
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f7fe ff9c 	bl	8006c3c <vTaskSwitchContext>
 8007d04:	f04f 0000 	mov.w	r0, #0
 8007d08:	f380 8811 	msr	BASEPRI, r0
 8007d0c:	bc09      	pop	{r0, r3}
 8007d0e:	6819      	ldr	r1, [r3, #0]
 8007d10:	6808      	ldr	r0, [r1, #0]
 8007d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d16:	f01e 0f10 	tst.w	lr, #16
 8007d1a:	bf08      	it	eq
 8007d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d20:	f380 8809 	msr	PSP, r0
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	f3af 8000 	nop.w

08007d30 <pxCurrentTCBConst>:
 8007d30:	20000c04 	.word	0x20000c04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop

08007d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	607b      	str	r3, [r7, #4]
}
 8007d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d52:	f7fe feb9 	bl	8006ac8 <xTaskIncrementTick>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d5c:	4b06      	ldr	r3, [pc, #24]	@ (8007d78 <xPortSysTickHandler+0x40>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	2300      	movs	r3, #0
 8007d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	f383 8811 	msr	BASEPRI, r3
}
 8007d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	e000ed04 	.word	0xe000ed04

08007d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d80:	4b0b      	ldr	r3, [pc, #44]	@ (8007db0 <vPortSetupTimerInterrupt+0x34>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d86:	4b0b      	ldr	r3, [pc, #44]	@ (8007db4 <vPortSetupTimerInterrupt+0x38>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007db8 <vPortSetupTimerInterrupt+0x3c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a0a      	ldr	r2, [pc, #40]	@ (8007dbc <vPortSetupTimerInterrupt+0x40>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	099b      	lsrs	r3, r3, #6
 8007d98:	4a09      	ldr	r2, [pc, #36]	@ (8007dc0 <vPortSetupTimerInterrupt+0x44>)
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d9e:	4b04      	ldr	r3, [pc, #16]	@ (8007db0 <vPortSetupTimerInterrupt+0x34>)
 8007da0:	2207      	movs	r2, #7
 8007da2:	601a      	str	r2, [r3, #0]
}
 8007da4:	bf00      	nop
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	e000e010 	.word	0xe000e010
 8007db4:	e000e018 	.word	0xe000e018
 8007db8:	20000000 	.word	0x20000000
 8007dbc:	10624dd3 	.word	0x10624dd3
 8007dc0:	e000e014 	.word	0xe000e014

08007dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007dd4 <vPortEnableVFP+0x10>
 8007dc8:	6801      	ldr	r1, [r0, #0]
 8007dca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007dce:	6001      	str	r1, [r0, #0]
 8007dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007dd2:	bf00      	nop
 8007dd4:	e000ed88 	.word	0xe000ed88

08007dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dde:	f3ef 8305 	mrs	r3, IPSR
 8007de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b0f      	cmp	r3, #15
 8007de8:	d915      	bls.n	8007e16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dea:	4a18      	ldr	r2, [pc, #96]	@ (8007e4c <vPortValidateInterruptPriority+0x74>)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4413      	add	r3, r2
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007df4:	4b16      	ldr	r3, [pc, #88]	@ (8007e50 <vPortValidateInterruptPriority+0x78>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	7afa      	ldrb	r2, [r7, #11]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d20b      	bcs.n	8007e16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	607b      	str	r3, [r7, #4]
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	e7fd      	b.n	8007e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e16:	4b0f      	ldr	r3, [pc, #60]	@ (8007e54 <vPortValidateInterruptPriority+0x7c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e58 <vPortValidateInterruptPriority+0x80>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d90b      	bls.n	8007e3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	603b      	str	r3, [r7, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	e7fd      	b.n	8007e3a <vPortValidateInterruptPriority+0x62>
	}
 8007e3e:	bf00      	nop
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	e000e3f0 	.word	0xe000e3f0
 8007e50:	20001230 	.word	0x20001230
 8007e54:	e000ed0c 	.word	0xe000ed0c
 8007e58:	20001234 	.word	0x20001234

08007e5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08a      	sub	sp, #40	@ 0x28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e64:	2300      	movs	r3, #0
 8007e66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e68:	f7fe fd72 	bl	8006950 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e6c:	4b5c      	ldr	r3, [pc, #368]	@ (8007fe0 <pvPortMalloc+0x184>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e74:	f000 f924 	bl	80080c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e78:	4b5a      	ldr	r3, [pc, #360]	@ (8007fe4 <pvPortMalloc+0x188>)
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f040 8095 	bne.w	8007fb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01e      	beq.n	8007eca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e8c:	2208      	movs	r2, #8
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4413      	add	r3, r2
 8007e92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d015      	beq.n	8007eca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f023 0307 	bic.w	r3, r3, #7
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00b      	beq.n	8007eca <pvPortMalloc+0x6e>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	617b      	str	r3, [r7, #20]
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop
 8007ec8:	e7fd      	b.n	8007ec6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d06f      	beq.n	8007fb0 <pvPortMalloc+0x154>
 8007ed0:	4b45      	ldr	r3, [pc, #276]	@ (8007fe8 <pvPortMalloc+0x18c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d86a      	bhi.n	8007fb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007eda:	4b44      	ldr	r3, [pc, #272]	@ (8007fec <pvPortMalloc+0x190>)
 8007edc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ede:	4b43      	ldr	r3, [pc, #268]	@ (8007fec <pvPortMalloc+0x190>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ee4:	e004      	b.n	8007ef0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d903      	bls.n	8007f02 <pvPortMalloc+0xa6>
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1f1      	bne.n	8007ee6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f02:	4b37      	ldr	r3, [pc, #220]	@ (8007fe0 <pvPortMalloc+0x184>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d051      	beq.n	8007fb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2208      	movs	r2, #8
 8007f12:	4413      	add	r3, r2
 8007f14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	1ad2      	subs	r2, r2, r3
 8007f26:	2308      	movs	r3, #8
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d920      	bls.n	8007f70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4413      	add	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00b      	beq.n	8007f58 <pvPortMalloc+0xfc>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	613b      	str	r3, [r7, #16]
}
 8007f52:	bf00      	nop
 8007f54:	bf00      	nop
 8007f56:	e7fd      	b.n	8007f54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	1ad2      	subs	r2, r2, r3
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f6a:	69b8      	ldr	r0, [r7, #24]
 8007f6c:	f000 f90a 	bl	8008184 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f70:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe8 <pvPortMalloc+0x18c>)
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007fe8 <pvPortMalloc+0x18c>)
 8007f7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007fe8 <pvPortMalloc+0x18c>)
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	4b1b      	ldr	r3, [pc, #108]	@ (8007ff0 <pvPortMalloc+0x194>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d203      	bcs.n	8007f92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f8a:	4b17      	ldr	r3, [pc, #92]	@ (8007fe8 <pvPortMalloc+0x18c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a18      	ldr	r2, [pc, #96]	@ (8007ff0 <pvPortMalloc+0x194>)
 8007f90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	4b13      	ldr	r3, [pc, #76]	@ (8007fe4 <pvPortMalloc+0x188>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007fa6:	4b13      	ldr	r3, [pc, #76]	@ (8007ff4 <pvPortMalloc+0x198>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3301      	adds	r3, #1
 8007fac:	4a11      	ldr	r2, [pc, #68]	@ (8007ff4 <pvPortMalloc+0x198>)
 8007fae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fb0:	f7fe fcdc 	bl	800696c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <pvPortMalloc+0x17a>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	60fb      	str	r3, [r7, #12]
}
 8007fd0:	bf00      	nop
 8007fd2:	bf00      	nop
 8007fd4:	e7fd      	b.n	8007fd2 <pvPortMalloc+0x176>
	return pvReturn;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3728      	adds	r7, #40	@ 0x28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	20006060 	.word	0x20006060
 8007fe4:	20006074 	.word	0x20006074
 8007fe8:	20006064 	.word	0x20006064
 8007fec:	20006058 	.word	0x20006058
 8007ff0:	20006068 	.word	0x20006068
 8007ff4:	2000606c 	.word	0x2000606c

08007ff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d04f      	beq.n	80080aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800800a:	2308      	movs	r3, #8
 800800c:	425b      	negs	r3, r3
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	4413      	add	r3, r2
 8008012:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	4b25      	ldr	r3, [pc, #148]	@ (80080b4 <vPortFree+0xbc>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4013      	ands	r3, r2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10b      	bne.n	800803e <vPortFree+0x46>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	60fb      	str	r3, [r7, #12]
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	e7fd      	b.n	800803a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00b      	beq.n	800805e <vPortFree+0x66>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	60bb      	str	r3, [r7, #8]
}
 8008058:	bf00      	nop
 800805a:	bf00      	nop
 800805c:	e7fd      	b.n	800805a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	4b14      	ldr	r3, [pc, #80]	@ (80080b4 <vPortFree+0xbc>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4013      	ands	r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01e      	beq.n	80080aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d11a      	bne.n	80080aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	4b0e      	ldr	r3, [pc, #56]	@ (80080b4 <vPortFree+0xbc>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	43db      	mvns	r3, r3
 800807e:	401a      	ands	r2, r3
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008084:	f7fe fc64 	bl	8006950 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	4b0a      	ldr	r3, [pc, #40]	@ (80080b8 <vPortFree+0xc0>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4413      	add	r3, r2
 8008092:	4a09      	ldr	r2, [pc, #36]	@ (80080b8 <vPortFree+0xc0>)
 8008094:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008096:	6938      	ldr	r0, [r7, #16]
 8008098:	f000 f874 	bl	8008184 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800809c:	4b07      	ldr	r3, [pc, #28]	@ (80080bc <vPortFree+0xc4>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3301      	adds	r3, #1
 80080a2:	4a06      	ldr	r2, [pc, #24]	@ (80080bc <vPortFree+0xc4>)
 80080a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80080a6:	f7fe fc61 	bl	800696c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080aa:	bf00      	nop
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20006074 	.word	0x20006074
 80080b8:	20006064 	.word	0x20006064
 80080bc:	20006070 	.word	0x20006070

080080c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080c6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80080ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080cc:	4b27      	ldr	r3, [pc, #156]	@ (800816c <prvHeapInit+0xac>)
 80080ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f003 0307 	and.w	r3, r3, #7
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00c      	beq.n	80080f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3307      	adds	r3, #7
 80080de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 0307 	bic.w	r3, r3, #7
 80080e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	4a1f      	ldr	r2, [pc, #124]	@ (800816c <prvHeapInit+0xac>)
 80080f0:	4413      	add	r3, r2
 80080f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008170 <prvHeapInit+0xb0>)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008170 <prvHeapInit+0xb0>)
 8008100:	2200      	movs	r2, #0
 8008102:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	4413      	add	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800810c:	2208      	movs	r2, #8
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	1a9b      	subs	r3, r3, r2
 8008112:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0307 	bic.w	r3, r3, #7
 800811a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4a15      	ldr	r2, [pc, #84]	@ (8008174 <prvHeapInit+0xb4>)
 8008120:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008122:	4b14      	ldr	r3, [pc, #80]	@ (8008174 <prvHeapInit+0xb4>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2200      	movs	r2, #0
 8008128:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800812a:	4b12      	ldr	r3, [pc, #72]	@ (8008174 <prvHeapInit+0xb4>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2200      	movs	r2, #0
 8008130:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	1ad2      	subs	r2, r2, r3
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008140:	4b0c      	ldr	r3, [pc, #48]	@ (8008174 <prvHeapInit+0xb4>)
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	4a0a      	ldr	r2, [pc, #40]	@ (8008178 <prvHeapInit+0xb8>)
 800814e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	4a09      	ldr	r2, [pc, #36]	@ (800817c <prvHeapInit+0xbc>)
 8008156:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008158:	4b09      	ldr	r3, [pc, #36]	@ (8008180 <prvHeapInit+0xc0>)
 800815a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800815e:	601a      	str	r2, [r3, #0]
}
 8008160:	bf00      	nop
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	20001238 	.word	0x20001238
 8008170:	20006058 	.word	0x20006058
 8008174:	20006060 	.word	0x20006060
 8008178:	20006068 	.word	0x20006068
 800817c:	20006064 	.word	0x20006064
 8008180:	20006074 	.word	0x20006074

08008184 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800818c:	4b28      	ldr	r3, [pc, #160]	@ (8008230 <prvInsertBlockIntoFreeList+0xac>)
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	e002      	b.n	8008198 <prvInsertBlockIntoFreeList+0x14>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d8f7      	bhi.n	8008192 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	4413      	add	r3, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d108      	bne.n	80081c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	441a      	add	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	441a      	add	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d118      	bne.n	800820c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b15      	ldr	r3, [pc, #84]	@ (8008234 <prvInsertBlockIntoFreeList+0xb0>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d00d      	beq.n	8008202 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	441a      	add	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	e008      	b.n	8008214 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008202:	4b0c      	ldr	r3, [pc, #48]	@ (8008234 <prvInsertBlockIntoFreeList+0xb0>)
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	e003      	b.n	8008214 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	429a      	cmp	r2, r3
 800821a:	d002      	beq.n	8008222 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008222:	bf00      	nop
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	20006058 	.word	0x20006058
 8008234:	20006060 	.word	0x20006060

08008238 <std>:
 8008238:	2300      	movs	r3, #0
 800823a:	b510      	push	{r4, lr}
 800823c:	4604      	mov	r4, r0
 800823e:	e9c0 3300 	strd	r3, r3, [r0]
 8008242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008246:	6083      	str	r3, [r0, #8]
 8008248:	8181      	strh	r1, [r0, #12]
 800824a:	6643      	str	r3, [r0, #100]	@ 0x64
 800824c:	81c2      	strh	r2, [r0, #14]
 800824e:	6183      	str	r3, [r0, #24]
 8008250:	4619      	mov	r1, r3
 8008252:	2208      	movs	r2, #8
 8008254:	305c      	adds	r0, #92	@ 0x5c
 8008256:	f000 f9e7 	bl	8008628 <memset>
 800825a:	4b0d      	ldr	r3, [pc, #52]	@ (8008290 <std+0x58>)
 800825c:	6263      	str	r3, [r4, #36]	@ 0x24
 800825e:	4b0d      	ldr	r3, [pc, #52]	@ (8008294 <std+0x5c>)
 8008260:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008262:	4b0d      	ldr	r3, [pc, #52]	@ (8008298 <std+0x60>)
 8008264:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008266:	4b0d      	ldr	r3, [pc, #52]	@ (800829c <std+0x64>)
 8008268:	6323      	str	r3, [r4, #48]	@ 0x30
 800826a:	4b0d      	ldr	r3, [pc, #52]	@ (80082a0 <std+0x68>)
 800826c:	6224      	str	r4, [r4, #32]
 800826e:	429c      	cmp	r4, r3
 8008270:	d006      	beq.n	8008280 <std+0x48>
 8008272:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008276:	4294      	cmp	r4, r2
 8008278:	d002      	beq.n	8008280 <std+0x48>
 800827a:	33d0      	adds	r3, #208	@ 0xd0
 800827c:	429c      	cmp	r4, r3
 800827e:	d105      	bne.n	800828c <std+0x54>
 8008280:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008288:	f000 baa4 	b.w	80087d4 <__retarget_lock_init_recursive>
 800828c:	bd10      	pop	{r4, pc}
 800828e:	bf00      	nop
 8008290:	08008479 	.word	0x08008479
 8008294:	0800849b 	.word	0x0800849b
 8008298:	080084d3 	.word	0x080084d3
 800829c:	080084f7 	.word	0x080084f7
 80082a0:	20006078 	.word	0x20006078

080082a4 <stdio_exit_handler>:
 80082a4:	4a02      	ldr	r2, [pc, #8]	@ (80082b0 <stdio_exit_handler+0xc>)
 80082a6:	4903      	ldr	r1, [pc, #12]	@ (80082b4 <stdio_exit_handler+0x10>)
 80082a8:	4803      	ldr	r0, [pc, #12]	@ (80082b8 <stdio_exit_handler+0x14>)
 80082aa:	f000 b869 	b.w	8008380 <_fwalk_sglue>
 80082ae:	bf00      	nop
 80082b0:	20000010 	.word	0x20000010
 80082b4:	08008af1 	.word	0x08008af1
 80082b8:	20000020 	.word	0x20000020

080082bc <cleanup_stdio>:
 80082bc:	6841      	ldr	r1, [r0, #4]
 80082be:	4b0c      	ldr	r3, [pc, #48]	@ (80082f0 <cleanup_stdio+0x34>)
 80082c0:	4299      	cmp	r1, r3
 80082c2:	b510      	push	{r4, lr}
 80082c4:	4604      	mov	r4, r0
 80082c6:	d001      	beq.n	80082cc <cleanup_stdio+0x10>
 80082c8:	f000 fc12 	bl	8008af0 <_fflush_r>
 80082cc:	68a1      	ldr	r1, [r4, #8]
 80082ce:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <cleanup_stdio+0x38>)
 80082d0:	4299      	cmp	r1, r3
 80082d2:	d002      	beq.n	80082da <cleanup_stdio+0x1e>
 80082d4:	4620      	mov	r0, r4
 80082d6:	f000 fc0b 	bl	8008af0 <_fflush_r>
 80082da:	68e1      	ldr	r1, [r4, #12]
 80082dc:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <cleanup_stdio+0x3c>)
 80082de:	4299      	cmp	r1, r3
 80082e0:	d004      	beq.n	80082ec <cleanup_stdio+0x30>
 80082e2:	4620      	mov	r0, r4
 80082e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082e8:	f000 bc02 	b.w	8008af0 <_fflush_r>
 80082ec:	bd10      	pop	{r4, pc}
 80082ee:	bf00      	nop
 80082f0:	20006078 	.word	0x20006078
 80082f4:	200060e0 	.word	0x200060e0
 80082f8:	20006148 	.word	0x20006148

080082fc <global_stdio_init.part.0>:
 80082fc:	b510      	push	{r4, lr}
 80082fe:	4b0b      	ldr	r3, [pc, #44]	@ (800832c <global_stdio_init.part.0+0x30>)
 8008300:	4c0b      	ldr	r4, [pc, #44]	@ (8008330 <global_stdio_init.part.0+0x34>)
 8008302:	4a0c      	ldr	r2, [pc, #48]	@ (8008334 <global_stdio_init.part.0+0x38>)
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	4620      	mov	r0, r4
 8008308:	2200      	movs	r2, #0
 800830a:	2104      	movs	r1, #4
 800830c:	f7ff ff94 	bl	8008238 <std>
 8008310:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008314:	2201      	movs	r2, #1
 8008316:	2109      	movs	r1, #9
 8008318:	f7ff ff8e 	bl	8008238 <std>
 800831c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008320:	2202      	movs	r2, #2
 8008322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008326:	2112      	movs	r1, #18
 8008328:	f7ff bf86 	b.w	8008238 <std>
 800832c:	200061b0 	.word	0x200061b0
 8008330:	20006078 	.word	0x20006078
 8008334:	080082a5 	.word	0x080082a5

08008338 <__sfp_lock_acquire>:
 8008338:	4801      	ldr	r0, [pc, #4]	@ (8008340 <__sfp_lock_acquire+0x8>)
 800833a:	f000 ba4c 	b.w	80087d6 <__retarget_lock_acquire_recursive>
 800833e:	bf00      	nop
 8008340:	200061b9 	.word	0x200061b9

08008344 <__sfp_lock_release>:
 8008344:	4801      	ldr	r0, [pc, #4]	@ (800834c <__sfp_lock_release+0x8>)
 8008346:	f000 ba47 	b.w	80087d8 <__retarget_lock_release_recursive>
 800834a:	bf00      	nop
 800834c:	200061b9 	.word	0x200061b9

08008350 <__sinit>:
 8008350:	b510      	push	{r4, lr}
 8008352:	4604      	mov	r4, r0
 8008354:	f7ff fff0 	bl	8008338 <__sfp_lock_acquire>
 8008358:	6a23      	ldr	r3, [r4, #32]
 800835a:	b11b      	cbz	r3, 8008364 <__sinit+0x14>
 800835c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008360:	f7ff bff0 	b.w	8008344 <__sfp_lock_release>
 8008364:	4b04      	ldr	r3, [pc, #16]	@ (8008378 <__sinit+0x28>)
 8008366:	6223      	str	r3, [r4, #32]
 8008368:	4b04      	ldr	r3, [pc, #16]	@ (800837c <__sinit+0x2c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1f5      	bne.n	800835c <__sinit+0xc>
 8008370:	f7ff ffc4 	bl	80082fc <global_stdio_init.part.0>
 8008374:	e7f2      	b.n	800835c <__sinit+0xc>
 8008376:	bf00      	nop
 8008378:	080082bd 	.word	0x080082bd
 800837c:	200061b0 	.word	0x200061b0

08008380 <_fwalk_sglue>:
 8008380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008384:	4607      	mov	r7, r0
 8008386:	4688      	mov	r8, r1
 8008388:	4614      	mov	r4, r2
 800838a:	2600      	movs	r6, #0
 800838c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008390:	f1b9 0901 	subs.w	r9, r9, #1
 8008394:	d505      	bpl.n	80083a2 <_fwalk_sglue+0x22>
 8008396:	6824      	ldr	r4, [r4, #0]
 8008398:	2c00      	cmp	r4, #0
 800839a:	d1f7      	bne.n	800838c <_fwalk_sglue+0xc>
 800839c:	4630      	mov	r0, r6
 800839e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083a2:	89ab      	ldrh	r3, [r5, #12]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d907      	bls.n	80083b8 <_fwalk_sglue+0x38>
 80083a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083ac:	3301      	adds	r3, #1
 80083ae:	d003      	beq.n	80083b8 <_fwalk_sglue+0x38>
 80083b0:	4629      	mov	r1, r5
 80083b2:	4638      	mov	r0, r7
 80083b4:	47c0      	blx	r8
 80083b6:	4306      	orrs	r6, r0
 80083b8:	3568      	adds	r5, #104	@ 0x68
 80083ba:	e7e9      	b.n	8008390 <_fwalk_sglue+0x10>

080083bc <_puts_r>:
 80083bc:	6a03      	ldr	r3, [r0, #32]
 80083be:	b570      	push	{r4, r5, r6, lr}
 80083c0:	6884      	ldr	r4, [r0, #8]
 80083c2:	4605      	mov	r5, r0
 80083c4:	460e      	mov	r6, r1
 80083c6:	b90b      	cbnz	r3, 80083cc <_puts_r+0x10>
 80083c8:	f7ff ffc2 	bl	8008350 <__sinit>
 80083cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083ce:	07db      	lsls	r3, r3, #31
 80083d0:	d405      	bmi.n	80083de <_puts_r+0x22>
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	0598      	lsls	r0, r3, #22
 80083d6:	d402      	bmi.n	80083de <_puts_r+0x22>
 80083d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083da:	f000 f9fc 	bl	80087d6 <__retarget_lock_acquire_recursive>
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	0719      	lsls	r1, r3, #28
 80083e2:	d502      	bpl.n	80083ea <_puts_r+0x2e>
 80083e4:	6923      	ldr	r3, [r4, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d135      	bne.n	8008456 <_puts_r+0x9a>
 80083ea:	4621      	mov	r1, r4
 80083ec:	4628      	mov	r0, r5
 80083ee:	f000 f8c5 	bl	800857c <__swsetup_r>
 80083f2:	b380      	cbz	r0, 8008456 <_puts_r+0x9a>
 80083f4:	f04f 35ff 	mov.w	r5, #4294967295
 80083f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083fa:	07da      	lsls	r2, r3, #31
 80083fc:	d405      	bmi.n	800840a <_puts_r+0x4e>
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	059b      	lsls	r3, r3, #22
 8008402:	d402      	bmi.n	800840a <_puts_r+0x4e>
 8008404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008406:	f000 f9e7 	bl	80087d8 <__retarget_lock_release_recursive>
 800840a:	4628      	mov	r0, r5
 800840c:	bd70      	pop	{r4, r5, r6, pc}
 800840e:	2b00      	cmp	r3, #0
 8008410:	da04      	bge.n	800841c <_puts_r+0x60>
 8008412:	69a2      	ldr	r2, [r4, #24]
 8008414:	429a      	cmp	r2, r3
 8008416:	dc17      	bgt.n	8008448 <_puts_r+0x8c>
 8008418:	290a      	cmp	r1, #10
 800841a:	d015      	beq.n	8008448 <_puts_r+0x8c>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	1c5a      	adds	r2, r3, #1
 8008420:	6022      	str	r2, [r4, #0]
 8008422:	7019      	strb	r1, [r3, #0]
 8008424:	68a3      	ldr	r3, [r4, #8]
 8008426:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800842a:	3b01      	subs	r3, #1
 800842c:	60a3      	str	r3, [r4, #8]
 800842e:	2900      	cmp	r1, #0
 8008430:	d1ed      	bne.n	800840e <_puts_r+0x52>
 8008432:	2b00      	cmp	r3, #0
 8008434:	da11      	bge.n	800845a <_puts_r+0x9e>
 8008436:	4622      	mov	r2, r4
 8008438:	210a      	movs	r1, #10
 800843a:	4628      	mov	r0, r5
 800843c:	f000 f85f 	bl	80084fe <__swbuf_r>
 8008440:	3001      	adds	r0, #1
 8008442:	d0d7      	beq.n	80083f4 <_puts_r+0x38>
 8008444:	250a      	movs	r5, #10
 8008446:	e7d7      	b.n	80083f8 <_puts_r+0x3c>
 8008448:	4622      	mov	r2, r4
 800844a:	4628      	mov	r0, r5
 800844c:	f000 f857 	bl	80084fe <__swbuf_r>
 8008450:	3001      	adds	r0, #1
 8008452:	d1e7      	bne.n	8008424 <_puts_r+0x68>
 8008454:	e7ce      	b.n	80083f4 <_puts_r+0x38>
 8008456:	3e01      	subs	r6, #1
 8008458:	e7e4      	b.n	8008424 <_puts_r+0x68>
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	6022      	str	r2, [r4, #0]
 8008460:	220a      	movs	r2, #10
 8008462:	701a      	strb	r2, [r3, #0]
 8008464:	e7ee      	b.n	8008444 <_puts_r+0x88>
	...

08008468 <puts>:
 8008468:	4b02      	ldr	r3, [pc, #8]	@ (8008474 <puts+0xc>)
 800846a:	4601      	mov	r1, r0
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	f7ff bfa5 	b.w	80083bc <_puts_r>
 8008472:	bf00      	nop
 8008474:	2000001c 	.word	0x2000001c

08008478 <__sread>:
 8008478:	b510      	push	{r4, lr}
 800847a:	460c      	mov	r4, r1
 800847c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008480:	f000 f95a 	bl	8008738 <_read_r>
 8008484:	2800      	cmp	r0, #0
 8008486:	bfab      	itete	ge
 8008488:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800848a:	89a3      	ldrhlt	r3, [r4, #12]
 800848c:	181b      	addge	r3, r3, r0
 800848e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008492:	bfac      	ite	ge
 8008494:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008496:	81a3      	strhlt	r3, [r4, #12]
 8008498:	bd10      	pop	{r4, pc}

0800849a <__swrite>:
 800849a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800849e:	461f      	mov	r7, r3
 80084a0:	898b      	ldrh	r3, [r1, #12]
 80084a2:	05db      	lsls	r3, r3, #23
 80084a4:	4605      	mov	r5, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	4616      	mov	r6, r2
 80084aa:	d505      	bpl.n	80084b8 <__swrite+0x1e>
 80084ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b0:	2302      	movs	r3, #2
 80084b2:	2200      	movs	r2, #0
 80084b4:	f000 f92e 	bl	8008714 <_lseek_r>
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084c2:	81a3      	strh	r3, [r4, #12]
 80084c4:	4632      	mov	r2, r6
 80084c6:	463b      	mov	r3, r7
 80084c8:	4628      	mov	r0, r5
 80084ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ce:	f000 b945 	b.w	800875c <_write_r>

080084d2 <__sseek>:
 80084d2:	b510      	push	{r4, lr}
 80084d4:	460c      	mov	r4, r1
 80084d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084da:	f000 f91b 	bl	8008714 <_lseek_r>
 80084de:	1c43      	adds	r3, r0, #1
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	bf15      	itete	ne
 80084e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80084e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80084ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80084ee:	81a3      	strheq	r3, [r4, #12]
 80084f0:	bf18      	it	ne
 80084f2:	81a3      	strhne	r3, [r4, #12]
 80084f4:	bd10      	pop	{r4, pc}

080084f6 <__sclose>:
 80084f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fa:	f000 b89d 	b.w	8008638 <_close_r>

080084fe <__swbuf_r>:
 80084fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008500:	460e      	mov	r6, r1
 8008502:	4614      	mov	r4, r2
 8008504:	4605      	mov	r5, r0
 8008506:	b118      	cbz	r0, 8008510 <__swbuf_r+0x12>
 8008508:	6a03      	ldr	r3, [r0, #32]
 800850a:	b90b      	cbnz	r3, 8008510 <__swbuf_r+0x12>
 800850c:	f7ff ff20 	bl	8008350 <__sinit>
 8008510:	69a3      	ldr	r3, [r4, #24]
 8008512:	60a3      	str	r3, [r4, #8]
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	071a      	lsls	r2, r3, #28
 8008518:	d501      	bpl.n	800851e <__swbuf_r+0x20>
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	b943      	cbnz	r3, 8008530 <__swbuf_r+0x32>
 800851e:	4621      	mov	r1, r4
 8008520:	4628      	mov	r0, r5
 8008522:	f000 f82b 	bl	800857c <__swsetup_r>
 8008526:	b118      	cbz	r0, 8008530 <__swbuf_r+0x32>
 8008528:	f04f 37ff 	mov.w	r7, #4294967295
 800852c:	4638      	mov	r0, r7
 800852e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	6922      	ldr	r2, [r4, #16]
 8008534:	1a98      	subs	r0, r3, r2
 8008536:	6963      	ldr	r3, [r4, #20]
 8008538:	b2f6      	uxtb	r6, r6
 800853a:	4283      	cmp	r3, r0
 800853c:	4637      	mov	r7, r6
 800853e:	dc05      	bgt.n	800854c <__swbuf_r+0x4e>
 8008540:	4621      	mov	r1, r4
 8008542:	4628      	mov	r0, r5
 8008544:	f000 fad4 	bl	8008af0 <_fflush_r>
 8008548:	2800      	cmp	r0, #0
 800854a:	d1ed      	bne.n	8008528 <__swbuf_r+0x2a>
 800854c:	68a3      	ldr	r3, [r4, #8]
 800854e:	3b01      	subs	r3, #1
 8008550:	60a3      	str	r3, [r4, #8]
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	6022      	str	r2, [r4, #0]
 8008558:	701e      	strb	r6, [r3, #0]
 800855a:	6962      	ldr	r2, [r4, #20]
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	429a      	cmp	r2, r3
 8008560:	d004      	beq.n	800856c <__swbuf_r+0x6e>
 8008562:	89a3      	ldrh	r3, [r4, #12]
 8008564:	07db      	lsls	r3, r3, #31
 8008566:	d5e1      	bpl.n	800852c <__swbuf_r+0x2e>
 8008568:	2e0a      	cmp	r6, #10
 800856a:	d1df      	bne.n	800852c <__swbuf_r+0x2e>
 800856c:	4621      	mov	r1, r4
 800856e:	4628      	mov	r0, r5
 8008570:	f000 fabe 	bl	8008af0 <_fflush_r>
 8008574:	2800      	cmp	r0, #0
 8008576:	d0d9      	beq.n	800852c <__swbuf_r+0x2e>
 8008578:	e7d6      	b.n	8008528 <__swbuf_r+0x2a>
	...

0800857c <__swsetup_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4b29      	ldr	r3, [pc, #164]	@ (8008624 <__swsetup_r+0xa8>)
 8008580:	4605      	mov	r5, r0
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	460c      	mov	r4, r1
 8008586:	b118      	cbz	r0, 8008590 <__swsetup_r+0x14>
 8008588:	6a03      	ldr	r3, [r0, #32]
 800858a:	b90b      	cbnz	r3, 8008590 <__swsetup_r+0x14>
 800858c:	f7ff fee0 	bl	8008350 <__sinit>
 8008590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008594:	0719      	lsls	r1, r3, #28
 8008596:	d422      	bmi.n	80085de <__swsetup_r+0x62>
 8008598:	06da      	lsls	r2, r3, #27
 800859a:	d407      	bmi.n	80085ac <__swsetup_r+0x30>
 800859c:	2209      	movs	r2, #9
 800859e:	602a      	str	r2, [r5, #0]
 80085a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085a4:	81a3      	strh	r3, [r4, #12]
 80085a6:	f04f 30ff 	mov.w	r0, #4294967295
 80085aa:	e033      	b.n	8008614 <__swsetup_r+0x98>
 80085ac:	0758      	lsls	r0, r3, #29
 80085ae:	d512      	bpl.n	80085d6 <__swsetup_r+0x5a>
 80085b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085b2:	b141      	cbz	r1, 80085c6 <__swsetup_r+0x4a>
 80085b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085b8:	4299      	cmp	r1, r3
 80085ba:	d002      	beq.n	80085c2 <__swsetup_r+0x46>
 80085bc:	4628      	mov	r0, r5
 80085be:	f000 f91b 	bl	80087f8 <_free_r>
 80085c2:	2300      	movs	r3, #0
 80085c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085cc:	81a3      	strh	r3, [r4, #12]
 80085ce:	2300      	movs	r3, #0
 80085d0:	6063      	str	r3, [r4, #4]
 80085d2:	6923      	ldr	r3, [r4, #16]
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	f043 0308 	orr.w	r3, r3, #8
 80085dc:	81a3      	strh	r3, [r4, #12]
 80085de:	6923      	ldr	r3, [r4, #16]
 80085e0:	b94b      	cbnz	r3, 80085f6 <__swsetup_r+0x7a>
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80085e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085ec:	d003      	beq.n	80085f6 <__swsetup_r+0x7a>
 80085ee:	4621      	mov	r1, r4
 80085f0:	4628      	mov	r0, r5
 80085f2:	f000 facb 	bl	8008b8c <__smakebuf_r>
 80085f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085fa:	f013 0201 	ands.w	r2, r3, #1
 80085fe:	d00a      	beq.n	8008616 <__swsetup_r+0x9a>
 8008600:	2200      	movs	r2, #0
 8008602:	60a2      	str	r2, [r4, #8]
 8008604:	6962      	ldr	r2, [r4, #20]
 8008606:	4252      	negs	r2, r2
 8008608:	61a2      	str	r2, [r4, #24]
 800860a:	6922      	ldr	r2, [r4, #16]
 800860c:	b942      	cbnz	r2, 8008620 <__swsetup_r+0xa4>
 800860e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008612:	d1c5      	bne.n	80085a0 <__swsetup_r+0x24>
 8008614:	bd38      	pop	{r3, r4, r5, pc}
 8008616:	0799      	lsls	r1, r3, #30
 8008618:	bf58      	it	pl
 800861a:	6962      	ldrpl	r2, [r4, #20]
 800861c:	60a2      	str	r2, [r4, #8]
 800861e:	e7f4      	b.n	800860a <__swsetup_r+0x8e>
 8008620:	2000      	movs	r0, #0
 8008622:	e7f7      	b.n	8008614 <__swsetup_r+0x98>
 8008624:	2000001c 	.word	0x2000001c

08008628 <memset>:
 8008628:	4402      	add	r2, r0
 800862a:	4603      	mov	r3, r0
 800862c:	4293      	cmp	r3, r2
 800862e:	d100      	bne.n	8008632 <memset+0xa>
 8008630:	4770      	bx	lr
 8008632:	f803 1b01 	strb.w	r1, [r3], #1
 8008636:	e7f9      	b.n	800862c <memset+0x4>

08008638 <_close_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4d06      	ldr	r5, [pc, #24]	@ (8008654 <_close_r+0x1c>)
 800863c:	2300      	movs	r3, #0
 800863e:	4604      	mov	r4, r0
 8008640:	4608      	mov	r0, r1
 8008642:	602b      	str	r3, [r5, #0]
 8008644:	f7f9 f869 	bl	800171a <_close>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d102      	bne.n	8008652 <_close_r+0x1a>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b103      	cbz	r3, 8008652 <_close_r+0x1a>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	200061b4 	.word	0x200061b4

08008658 <_reclaim_reent>:
 8008658:	4b2d      	ldr	r3, [pc, #180]	@ (8008710 <_reclaim_reent+0xb8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4283      	cmp	r3, r0
 800865e:	b570      	push	{r4, r5, r6, lr}
 8008660:	4604      	mov	r4, r0
 8008662:	d053      	beq.n	800870c <_reclaim_reent+0xb4>
 8008664:	69c3      	ldr	r3, [r0, #28]
 8008666:	b31b      	cbz	r3, 80086b0 <_reclaim_reent+0x58>
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	b163      	cbz	r3, 8008686 <_reclaim_reent+0x2e>
 800866c:	2500      	movs	r5, #0
 800866e:	69e3      	ldr	r3, [r4, #28]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	5959      	ldr	r1, [r3, r5]
 8008674:	b9b1      	cbnz	r1, 80086a4 <_reclaim_reent+0x4c>
 8008676:	3504      	adds	r5, #4
 8008678:	2d80      	cmp	r5, #128	@ 0x80
 800867a:	d1f8      	bne.n	800866e <_reclaim_reent+0x16>
 800867c:	69e3      	ldr	r3, [r4, #28]
 800867e:	4620      	mov	r0, r4
 8008680:	68d9      	ldr	r1, [r3, #12]
 8008682:	f000 f8b9 	bl	80087f8 <_free_r>
 8008686:	69e3      	ldr	r3, [r4, #28]
 8008688:	6819      	ldr	r1, [r3, #0]
 800868a:	b111      	cbz	r1, 8008692 <_reclaim_reent+0x3a>
 800868c:	4620      	mov	r0, r4
 800868e:	f000 f8b3 	bl	80087f8 <_free_r>
 8008692:	69e3      	ldr	r3, [r4, #28]
 8008694:	689d      	ldr	r5, [r3, #8]
 8008696:	b15d      	cbz	r5, 80086b0 <_reclaim_reent+0x58>
 8008698:	4629      	mov	r1, r5
 800869a:	4620      	mov	r0, r4
 800869c:	682d      	ldr	r5, [r5, #0]
 800869e:	f000 f8ab 	bl	80087f8 <_free_r>
 80086a2:	e7f8      	b.n	8008696 <_reclaim_reent+0x3e>
 80086a4:	680e      	ldr	r6, [r1, #0]
 80086a6:	4620      	mov	r0, r4
 80086a8:	f000 f8a6 	bl	80087f8 <_free_r>
 80086ac:	4631      	mov	r1, r6
 80086ae:	e7e1      	b.n	8008674 <_reclaim_reent+0x1c>
 80086b0:	6961      	ldr	r1, [r4, #20]
 80086b2:	b111      	cbz	r1, 80086ba <_reclaim_reent+0x62>
 80086b4:	4620      	mov	r0, r4
 80086b6:	f000 f89f 	bl	80087f8 <_free_r>
 80086ba:	69e1      	ldr	r1, [r4, #28]
 80086bc:	b111      	cbz	r1, 80086c4 <_reclaim_reent+0x6c>
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 f89a 	bl	80087f8 <_free_r>
 80086c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80086c6:	b111      	cbz	r1, 80086ce <_reclaim_reent+0x76>
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 f895 	bl	80087f8 <_free_r>
 80086ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086d0:	b111      	cbz	r1, 80086d8 <_reclaim_reent+0x80>
 80086d2:	4620      	mov	r0, r4
 80086d4:	f000 f890 	bl	80087f8 <_free_r>
 80086d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80086da:	b111      	cbz	r1, 80086e2 <_reclaim_reent+0x8a>
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 f88b 	bl	80087f8 <_free_r>
 80086e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80086e4:	b111      	cbz	r1, 80086ec <_reclaim_reent+0x94>
 80086e6:	4620      	mov	r0, r4
 80086e8:	f000 f886 	bl	80087f8 <_free_r>
 80086ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80086ee:	b111      	cbz	r1, 80086f6 <_reclaim_reent+0x9e>
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 f881 	bl	80087f8 <_free_r>
 80086f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80086f8:	b111      	cbz	r1, 8008700 <_reclaim_reent+0xa8>
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 f87c 	bl	80087f8 <_free_r>
 8008700:	6a23      	ldr	r3, [r4, #32]
 8008702:	b11b      	cbz	r3, 800870c <_reclaim_reent+0xb4>
 8008704:	4620      	mov	r0, r4
 8008706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800870a:	4718      	bx	r3
 800870c:	bd70      	pop	{r4, r5, r6, pc}
 800870e:	bf00      	nop
 8008710:	2000001c 	.word	0x2000001c

08008714 <_lseek_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4d07      	ldr	r5, [pc, #28]	@ (8008734 <_lseek_r+0x20>)
 8008718:	4604      	mov	r4, r0
 800871a:	4608      	mov	r0, r1
 800871c:	4611      	mov	r1, r2
 800871e:	2200      	movs	r2, #0
 8008720:	602a      	str	r2, [r5, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	f7f9 f820 	bl	8001768 <_lseek>
 8008728:	1c43      	adds	r3, r0, #1
 800872a:	d102      	bne.n	8008732 <_lseek_r+0x1e>
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	b103      	cbz	r3, 8008732 <_lseek_r+0x1e>
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	200061b4 	.word	0x200061b4

08008738 <_read_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4d07      	ldr	r5, [pc, #28]	@ (8008758 <_read_r+0x20>)
 800873c:	4604      	mov	r4, r0
 800873e:	4608      	mov	r0, r1
 8008740:	4611      	mov	r1, r2
 8008742:	2200      	movs	r2, #0
 8008744:	602a      	str	r2, [r5, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	f7f8 ffca 	bl	80016e0 <_read>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d102      	bne.n	8008756 <_read_r+0x1e>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	b103      	cbz	r3, 8008756 <_read_r+0x1e>
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	200061b4 	.word	0x200061b4

0800875c <_write_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4d07      	ldr	r5, [pc, #28]	@ (800877c <_write_r+0x20>)
 8008760:	4604      	mov	r4, r0
 8008762:	4608      	mov	r0, r1
 8008764:	4611      	mov	r1, r2
 8008766:	2200      	movs	r2, #0
 8008768:	602a      	str	r2, [r5, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	f7f8 fbbe 	bl	8000eec <_write>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d102      	bne.n	800877a <_write_r+0x1e>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	b103      	cbz	r3, 800877a <_write_r+0x1e>
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	200061b4 	.word	0x200061b4

08008780 <__errno>:
 8008780:	4b01      	ldr	r3, [pc, #4]	@ (8008788 <__errno+0x8>)
 8008782:	6818      	ldr	r0, [r3, #0]
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	2000001c 	.word	0x2000001c

0800878c <__libc_init_array>:
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	4d0d      	ldr	r5, [pc, #52]	@ (80087c4 <__libc_init_array+0x38>)
 8008790:	4c0d      	ldr	r4, [pc, #52]	@ (80087c8 <__libc_init_array+0x3c>)
 8008792:	1b64      	subs	r4, r4, r5
 8008794:	10a4      	asrs	r4, r4, #2
 8008796:	2600      	movs	r6, #0
 8008798:	42a6      	cmp	r6, r4
 800879a:	d109      	bne.n	80087b0 <__libc_init_array+0x24>
 800879c:	4d0b      	ldr	r5, [pc, #44]	@ (80087cc <__libc_init_array+0x40>)
 800879e:	4c0c      	ldr	r4, [pc, #48]	@ (80087d0 <__libc_init_array+0x44>)
 80087a0:	f000 fa62 	bl	8008c68 <_init>
 80087a4:	1b64      	subs	r4, r4, r5
 80087a6:	10a4      	asrs	r4, r4, #2
 80087a8:	2600      	movs	r6, #0
 80087aa:	42a6      	cmp	r6, r4
 80087ac:	d105      	bne.n	80087ba <__libc_init_array+0x2e>
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b4:	4798      	blx	r3
 80087b6:	3601      	adds	r6, #1
 80087b8:	e7ee      	b.n	8008798 <__libc_init_array+0xc>
 80087ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80087be:	4798      	blx	r3
 80087c0:	3601      	adds	r6, #1
 80087c2:	e7f2      	b.n	80087aa <__libc_init_array+0x1e>
 80087c4:	08008e24 	.word	0x08008e24
 80087c8:	08008e24 	.word	0x08008e24
 80087cc:	08008e24 	.word	0x08008e24
 80087d0:	08008e28 	.word	0x08008e28

080087d4 <__retarget_lock_init_recursive>:
 80087d4:	4770      	bx	lr

080087d6 <__retarget_lock_acquire_recursive>:
 80087d6:	4770      	bx	lr

080087d8 <__retarget_lock_release_recursive>:
 80087d8:	4770      	bx	lr

080087da <memcpy>:
 80087da:	440a      	add	r2, r1
 80087dc:	4291      	cmp	r1, r2
 80087de:	f100 33ff 	add.w	r3, r0, #4294967295
 80087e2:	d100      	bne.n	80087e6 <memcpy+0xc>
 80087e4:	4770      	bx	lr
 80087e6:	b510      	push	{r4, lr}
 80087e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087f0:	4291      	cmp	r1, r2
 80087f2:	d1f9      	bne.n	80087e8 <memcpy+0xe>
 80087f4:	bd10      	pop	{r4, pc}
	...

080087f8 <_free_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4605      	mov	r5, r0
 80087fc:	2900      	cmp	r1, #0
 80087fe:	d041      	beq.n	8008884 <_free_r+0x8c>
 8008800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008804:	1f0c      	subs	r4, r1, #4
 8008806:	2b00      	cmp	r3, #0
 8008808:	bfb8      	it	lt
 800880a:	18e4      	addlt	r4, r4, r3
 800880c:	f000 f8e0 	bl	80089d0 <__malloc_lock>
 8008810:	4a1d      	ldr	r2, [pc, #116]	@ (8008888 <_free_r+0x90>)
 8008812:	6813      	ldr	r3, [r2, #0]
 8008814:	b933      	cbnz	r3, 8008824 <_free_r+0x2c>
 8008816:	6063      	str	r3, [r4, #4]
 8008818:	6014      	str	r4, [r2, #0]
 800881a:	4628      	mov	r0, r5
 800881c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008820:	f000 b8dc 	b.w	80089dc <__malloc_unlock>
 8008824:	42a3      	cmp	r3, r4
 8008826:	d908      	bls.n	800883a <_free_r+0x42>
 8008828:	6820      	ldr	r0, [r4, #0]
 800882a:	1821      	adds	r1, r4, r0
 800882c:	428b      	cmp	r3, r1
 800882e:	bf01      	itttt	eq
 8008830:	6819      	ldreq	r1, [r3, #0]
 8008832:	685b      	ldreq	r3, [r3, #4]
 8008834:	1809      	addeq	r1, r1, r0
 8008836:	6021      	streq	r1, [r4, #0]
 8008838:	e7ed      	b.n	8008816 <_free_r+0x1e>
 800883a:	461a      	mov	r2, r3
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	b10b      	cbz	r3, 8008844 <_free_r+0x4c>
 8008840:	42a3      	cmp	r3, r4
 8008842:	d9fa      	bls.n	800883a <_free_r+0x42>
 8008844:	6811      	ldr	r1, [r2, #0]
 8008846:	1850      	adds	r0, r2, r1
 8008848:	42a0      	cmp	r0, r4
 800884a:	d10b      	bne.n	8008864 <_free_r+0x6c>
 800884c:	6820      	ldr	r0, [r4, #0]
 800884e:	4401      	add	r1, r0
 8008850:	1850      	adds	r0, r2, r1
 8008852:	4283      	cmp	r3, r0
 8008854:	6011      	str	r1, [r2, #0]
 8008856:	d1e0      	bne.n	800881a <_free_r+0x22>
 8008858:	6818      	ldr	r0, [r3, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	6053      	str	r3, [r2, #4]
 800885e:	4408      	add	r0, r1
 8008860:	6010      	str	r0, [r2, #0]
 8008862:	e7da      	b.n	800881a <_free_r+0x22>
 8008864:	d902      	bls.n	800886c <_free_r+0x74>
 8008866:	230c      	movs	r3, #12
 8008868:	602b      	str	r3, [r5, #0]
 800886a:	e7d6      	b.n	800881a <_free_r+0x22>
 800886c:	6820      	ldr	r0, [r4, #0]
 800886e:	1821      	adds	r1, r4, r0
 8008870:	428b      	cmp	r3, r1
 8008872:	bf04      	itt	eq
 8008874:	6819      	ldreq	r1, [r3, #0]
 8008876:	685b      	ldreq	r3, [r3, #4]
 8008878:	6063      	str	r3, [r4, #4]
 800887a:	bf04      	itt	eq
 800887c:	1809      	addeq	r1, r1, r0
 800887e:	6021      	streq	r1, [r4, #0]
 8008880:	6054      	str	r4, [r2, #4]
 8008882:	e7ca      	b.n	800881a <_free_r+0x22>
 8008884:	bd38      	pop	{r3, r4, r5, pc}
 8008886:	bf00      	nop
 8008888:	200061c0 	.word	0x200061c0

0800888c <sbrk_aligned>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	4e0f      	ldr	r6, [pc, #60]	@ (80088cc <sbrk_aligned+0x40>)
 8008890:	460c      	mov	r4, r1
 8008892:	6831      	ldr	r1, [r6, #0]
 8008894:	4605      	mov	r5, r0
 8008896:	b911      	cbnz	r1, 800889e <sbrk_aligned+0x12>
 8008898:	f000 f9d6 	bl	8008c48 <_sbrk_r>
 800889c:	6030      	str	r0, [r6, #0]
 800889e:	4621      	mov	r1, r4
 80088a0:	4628      	mov	r0, r5
 80088a2:	f000 f9d1 	bl	8008c48 <_sbrk_r>
 80088a6:	1c43      	adds	r3, r0, #1
 80088a8:	d103      	bne.n	80088b2 <sbrk_aligned+0x26>
 80088aa:	f04f 34ff 	mov.w	r4, #4294967295
 80088ae:	4620      	mov	r0, r4
 80088b0:	bd70      	pop	{r4, r5, r6, pc}
 80088b2:	1cc4      	adds	r4, r0, #3
 80088b4:	f024 0403 	bic.w	r4, r4, #3
 80088b8:	42a0      	cmp	r0, r4
 80088ba:	d0f8      	beq.n	80088ae <sbrk_aligned+0x22>
 80088bc:	1a21      	subs	r1, r4, r0
 80088be:	4628      	mov	r0, r5
 80088c0:	f000 f9c2 	bl	8008c48 <_sbrk_r>
 80088c4:	3001      	adds	r0, #1
 80088c6:	d1f2      	bne.n	80088ae <sbrk_aligned+0x22>
 80088c8:	e7ef      	b.n	80088aa <sbrk_aligned+0x1e>
 80088ca:	bf00      	nop
 80088cc:	200061bc 	.word	0x200061bc

080088d0 <_malloc_r>:
 80088d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d4:	1ccd      	adds	r5, r1, #3
 80088d6:	f025 0503 	bic.w	r5, r5, #3
 80088da:	3508      	adds	r5, #8
 80088dc:	2d0c      	cmp	r5, #12
 80088de:	bf38      	it	cc
 80088e0:	250c      	movcc	r5, #12
 80088e2:	2d00      	cmp	r5, #0
 80088e4:	4606      	mov	r6, r0
 80088e6:	db01      	blt.n	80088ec <_malloc_r+0x1c>
 80088e8:	42a9      	cmp	r1, r5
 80088ea:	d904      	bls.n	80088f6 <_malloc_r+0x26>
 80088ec:	230c      	movs	r3, #12
 80088ee:	6033      	str	r3, [r6, #0]
 80088f0:	2000      	movs	r0, #0
 80088f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089cc <_malloc_r+0xfc>
 80088fa:	f000 f869 	bl	80089d0 <__malloc_lock>
 80088fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008902:	461c      	mov	r4, r3
 8008904:	bb44      	cbnz	r4, 8008958 <_malloc_r+0x88>
 8008906:	4629      	mov	r1, r5
 8008908:	4630      	mov	r0, r6
 800890a:	f7ff ffbf 	bl	800888c <sbrk_aligned>
 800890e:	1c43      	adds	r3, r0, #1
 8008910:	4604      	mov	r4, r0
 8008912:	d158      	bne.n	80089c6 <_malloc_r+0xf6>
 8008914:	f8d8 4000 	ldr.w	r4, [r8]
 8008918:	4627      	mov	r7, r4
 800891a:	2f00      	cmp	r7, #0
 800891c:	d143      	bne.n	80089a6 <_malloc_r+0xd6>
 800891e:	2c00      	cmp	r4, #0
 8008920:	d04b      	beq.n	80089ba <_malloc_r+0xea>
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	4639      	mov	r1, r7
 8008926:	4630      	mov	r0, r6
 8008928:	eb04 0903 	add.w	r9, r4, r3
 800892c:	f000 f98c 	bl	8008c48 <_sbrk_r>
 8008930:	4581      	cmp	r9, r0
 8008932:	d142      	bne.n	80089ba <_malloc_r+0xea>
 8008934:	6821      	ldr	r1, [r4, #0]
 8008936:	1a6d      	subs	r5, r5, r1
 8008938:	4629      	mov	r1, r5
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff ffa6 	bl	800888c <sbrk_aligned>
 8008940:	3001      	adds	r0, #1
 8008942:	d03a      	beq.n	80089ba <_malloc_r+0xea>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	442b      	add	r3, r5
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	f8d8 3000 	ldr.w	r3, [r8]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	bb62      	cbnz	r2, 80089ac <_malloc_r+0xdc>
 8008952:	f8c8 7000 	str.w	r7, [r8]
 8008956:	e00f      	b.n	8008978 <_malloc_r+0xa8>
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	1b52      	subs	r2, r2, r5
 800895c:	d420      	bmi.n	80089a0 <_malloc_r+0xd0>
 800895e:	2a0b      	cmp	r2, #11
 8008960:	d917      	bls.n	8008992 <_malloc_r+0xc2>
 8008962:	1961      	adds	r1, r4, r5
 8008964:	42a3      	cmp	r3, r4
 8008966:	6025      	str	r5, [r4, #0]
 8008968:	bf18      	it	ne
 800896a:	6059      	strne	r1, [r3, #4]
 800896c:	6863      	ldr	r3, [r4, #4]
 800896e:	bf08      	it	eq
 8008970:	f8c8 1000 	streq.w	r1, [r8]
 8008974:	5162      	str	r2, [r4, r5]
 8008976:	604b      	str	r3, [r1, #4]
 8008978:	4630      	mov	r0, r6
 800897a:	f000 f82f 	bl	80089dc <__malloc_unlock>
 800897e:	f104 000b 	add.w	r0, r4, #11
 8008982:	1d23      	adds	r3, r4, #4
 8008984:	f020 0007 	bic.w	r0, r0, #7
 8008988:	1ac2      	subs	r2, r0, r3
 800898a:	bf1c      	itt	ne
 800898c:	1a1b      	subne	r3, r3, r0
 800898e:	50a3      	strne	r3, [r4, r2]
 8008990:	e7af      	b.n	80088f2 <_malloc_r+0x22>
 8008992:	6862      	ldr	r2, [r4, #4]
 8008994:	42a3      	cmp	r3, r4
 8008996:	bf0c      	ite	eq
 8008998:	f8c8 2000 	streq.w	r2, [r8]
 800899c:	605a      	strne	r2, [r3, #4]
 800899e:	e7eb      	b.n	8008978 <_malloc_r+0xa8>
 80089a0:	4623      	mov	r3, r4
 80089a2:	6864      	ldr	r4, [r4, #4]
 80089a4:	e7ae      	b.n	8008904 <_malloc_r+0x34>
 80089a6:	463c      	mov	r4, r7
 80089a8:	687f      	ldr	r7, [r7, #4]
 80089aa:	e7b6      	b.n	800891a <_malloc_r+0x4a>
 80089ac:	461a      	mov	r2, r3
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	d1fb      	bne.n	80089ac <_malloc_r+0xdc>
 80089b4:	2300      	movs	r3, #0
 80089b6:	6053      	str	r3, [r2, #4]
 80089b8:	e7de      	b.n	8008978 <_malloc_r+0xa8>
 80089ba:	230c      	movs	r3, #12
 80089bc:	6033      	str	r3, [r6, #0]
 80089be:	4630      	mov	r0, r6
 80089c0:	f000 f80c 	bl	80089dc <__malloc_unlock>
 80089c4:	e794      	b.n	80088f0 <_malloc_r+0x20>
 80089c6:	6005      	str	r5, [r0, #0]
 80089c8:	e7d6      	b.n	8008978 <_malloc_r+0xa8>
 80089ca:	bf00      	nop
 80089cc:	200061c0 	.word	0x200061c0

080089d0 <__malloc_lock>:
 80089d0:	4801      	ldr	r0, [pc, #4]	@ (80089d8 <__malloc_lock+0x8>)
 80089d2:	f7ff bf00 	b.w	80087d6 <__retarget_lock_acquire_recursive>
 80089d6:	bf00      	nop
 80089d8:	200061b8 	.word	0x200061b8

080089dc <__malloc_unlock>:
 80089dc:	4801      	ldr	r0, [pc, #4]	@ (80089e4 <__malloc_unlock+0x8>)
 80089de:	f7ff befb 	b.w	80087d8 <__retarget_lock_release_recursive>
 80089e2:	bf00      	nop
 80089e4:	200061b8 	.word	0x200061b8

080089e8 <__sflush_r>:
 80089e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f0:	0716      	lsls	r6, r2, #28
 80089f2:	4605      	mov	r5, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	d454      	bmi.n	8008aa2 <__sflush_r+0xba>
 80089f8:	684b      	ldr	r3, [r1, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	dc02      	bgt.n	8008a04 <__sflush_r+0x1c>
 80089fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	dd48      	ble.n	8008a96 <__sflush_r+0xae>
 8008a04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	d045      	beq.n	8008a96 <__sflush_r+0xae>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a10:	682f      	ldr	r7, [r5, #0]
 8008a12:	6a21      	ldr	r1, [r4, #32]
 8008a14:	602b      	str	r3, [r5, #0]
 8008a16:	d030      	beq.n	8008a7a <__sflush_r+0x92>
 8008a18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	0759      	lsls	r1, r3, #29
 8008a1e:	d505      	bpl.n	8008a2c <__sflush_r+0x44>
 8008a20:	6863      	ldr	r3, [r4, #4]
 8008a22:	1ad2      	subs	r2, r2, r3
 8008a24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a26:	b10b      	cbz	r3, 8008a2c <__sflush_r+0x44>
 8008a28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a2a:	1ad2      	subs	r2, r2, r3
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a30:	6a21      	ldr	r1, [r4, #32]
 8008a32:	4628      	mov	r0, r5
 8008a34:	47b0      	blx	r6
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	d106      	bne.n	8008a4a <__sflush_r+0x62>
 8008a3c:	6829      	ldr	r1, [r5, #0]
 8008a3e:	291d      	cmp	r1, #29
 8008a40:	d82b      	bhi.n	8008a9a <__sflush_r+0xb2>
 8008a42:	4a2a      	ldr	r2, [pc, #168]	@ (8008aec <__sflush_r+0x104>)
 8008a44:	40ca      	lsrs	r2, r1
 8008a46:	07d6      	lsls	r6, r2, #31
 8008a48:	d527      	bpl.n	8008a9a <__sflush_r+0xb2>
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	6062      	str	r2, [r4, #4]
 8008a4e:	04d9      	lsls	r1, r3, #19
 8008a50:	6922      	ldr	r2, [r4, #16]
 8008a52:	6022      	str	r2, [r4, #0]
 8008a54:	d504      	bpl.n	8008a60 <__sflush_r+0x78>
 8008a56:	1c42      	adds	r2, r0, #1
 8008a58:	d101      	bne.n	8008a5e <__sflush_r+0x76>
 8008a5a:	682b      	ldr	r3, [r5, #0]
 8008a5c:	b903      	cbnz	r3, 8008a60 <__sflush_r+0x78>
 8008a5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a62:	602f      	str	r7, [r5, #0]
 8008a64:	b1b9      	cbz	r1, 8008a96 <__sflush_r+0xae>
 8008a66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a6a:	4299      	cmp	r1, r3
 8008a6c:	d002      	beq.n	8008a74 <__sflush_r+0x8c>
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f7ff fec2 	bl	80087f8 <_free_r>
 8008a74:	2300      	movs	r3, #0
 8008a76:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a78:	e00d      	b.n	8008a96 <__sflush_r+0xae>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	47b0      	blx	r6
 8008a80:	4602      	mov	r2, r0
 8008a82:	1c50      	adds	r0, r2, #1
 8008a84:	d1c9      	bne.n	8008a1a <__sflush_r+0x32>
 8008a86:	682b      	ldr	r3, [r5, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d0c6      	beq.n	8008a1a <__sflush_r+0x32>
 8008a8c:	2b1d      	cmp	r3, #29
 8008a8e:	d001      	beq.n	8008a94 <__sflush_r+0xac>
 8008a90:	2b16      	cmp	r3, #22
 8008a92:	d11e      	bne.n	8008ad2 <__sflush_r+0xea>
 8008a94:	602f      	str	r7, [r5, #0]
 8008a96:	2000      	movs	r0, #0
 8008a98:	e022      	b.n	8008ae0 <__sflush_r+0xf8>
 8008a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a9e:	b21b      	sxth	r3, r3
 8008aa0:	e01b      	b.n	8008ada <__sflush_r+0xf2>
 8008aa2:	690f      	ldr	r7, [r1, #16]
 8008aa4:	2f00      	cmp	r7, #0
 8008aa6:	d0f6      	beq.n	8008a96 <__sflush_r+0xae>
 8008aa8:	0793      	lsls	r3, r2, #30
 8008aaa:	680e      	ldr	r6, [r1, #0]
 8008aac:	bf08      	it	eq
 8008aae:	694b      	ldreq	r3, [r1, #20]
 8008ab0:	600f      	str	r7, [r1, #0]
 8008ab2:	bf18      	it	ne
 8008ab4:	2300      	movne	r3, #0
 8008ab6:	eba6 0807 	sub.w	r8, r6, r7
 8008aba:	608b      	str	r3, [r1, #8]
 8008abc:	f1b8 0f00 	cmp.w	r8, #0
 8008ac0:	dde9      	ble.n	8008a96 <__sflush_r+0xae>
 8008ac2:	6a21      	ldr	r1, [r4, #32]
 8008ac4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ac6:	4643      	mov	r3, r8
 8008ac8:	463a      	mov	r2, r7
 8008aca:	4628      	mov	r0, r5
 8008acc:	47b0      	blx	r6
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	dc08      	bgt.n	8008ae4 <__sflush_r+0xfc>
 8008ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae4:	4407      	add	r7, r0
 8008ae6:	eba8 0800 	sub.w	r8, r8, r0
 8008aea:	e7e7      	b.n	8008abc <__sflush_r+0xd4>
 8008aec:	20400001 	.word	0x20400001

08008af0 <_fflush_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	690b      	ldr	r3, [r1, #16]
 8008af4:	4605      	mov	r5, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	b913      	cbnz	r3, 8008b00 <_fflush_r+0x10>
 8008afa:	2500      	movs	r5, #0
 8008afc:	4628      	mov	r0, r5
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	b118      	cbz	r0, 8008b0a <_fflush_r+0x1a>
 8008b02:	6a03      	ldr	r3, [r0, #32]
 8008b04:	b90b      	cbnz	r3, 8008b0a <_fflush_r+0x1a>
 8008b06:	f7ff fc23 	bl	8008350 <__sinit>
 8008b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0f3      	beq.n	8008afa <_fflush_r+0xa>
 8008b12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b14:	07d0      	lsls	r0, r2, #31
 8008b16:	d404      	bmi.n	8008b22 <_fflush_r+0x32>
 8008b18:	0599      	lsls	r1, r3, #22
 8008b1a:	d402      	bmi.n	8008b22 <_fflush_r+0x32>
 8008b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b1e:	f7ff fe5a 	bl	80087d6 <__retarget_lock_acquire_recursive>
 8008b22:	4628      	mov	r0, r5
 8008b24:	4621      	mov	r1, r4
 8008b26:	f7ff ff5f 	bl	80089e8 <__sflush_r>
 8008b2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b2c:	07da      	lsls	r2, r3, #31
 8008b2e:	4605      	mov	r5, r0
 8008b30:	d4e4      	bmi.n	8008afc <_fflush_r+0xc>
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	059b      	lsls	r3, r3, #22
 8008b36:	d4e1      	bmi.n	8008afc <_fflush_r+0xc>
 8008b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b3a:	f7ff fe4d 	bl	80087d8 <__retarget_lock_release_recursive>
 8008b3e:	e7dd      	b.n	8008afc <_fflush_r+0xc>

08008b40 <__swhatbuf_r>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	460c      	mov	r4, r1
 8008b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	b096      	sub	sp, #88	@ 0x58
 8008b4c:	4615      	mov	r5, r2
 8008b4e:	461e      	mov	r6, r3
 8008b50:	da0d      	bge.n	8008b6e <__swhatbuf_r+0x2e>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b58:	f04f 0100 	mov.w	r1, #0
 8008b5c:	bf14      	ite	ne
 8008b5e:	2340      	movne	r3, #64	@ 0x40
 8008b60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b64:	2000      	movs	r0, #0
 8008b66:	6031      	str	r1, [r6, #0]
 8008b68:	602b      	str	r3, [r5, #0]
 8008b6a:	b016      	add	sp, #88	@ 0x58
 8008b6c:	bd70      	pop	{r4, r5, r6, pc}
 8008b6e:	466a      	mov	r2, sp
 8008b70:	f000 f848 	bl	8008c04 <_fstat_r>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	dbec      	blt.n	8008b52 <__swhatbuf_r+0x12>
 8008b78:	9901      	ldr	r1, [sp, #4]
 8008b7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b82:	4259      	negs	r1, r3
 8008b84:	4159      	adcs	r1, r3
 8008b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b8a:	e7eb      	b.n	8008b64 <__swhatbuf_r+0x24>

08008b8c <__smakebuf_r>:
 8008b8c:	898b      	ldrh	r3, [r1, #12]
 8008b8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b90:	079d      	lsls	r5, r3, #30
 8008b92:	4606      	mov	r6, r0
 8008b94:	460c      	mov	r4, r1
 8008b96:	d507      	bpl.n	8008ba8 <__smakebuf_r+0x1c>
 8008b98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	6123      	str	r3, [r4, #16]
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	6163      	str	r3, [r4, #20]
 8008ba4:	b003      	add	sp, #12
 8008ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ba8:	ab01      	add	r3, sp, #4
 8008baa:	466a      	mov	r2, sp
 8008bac:	f7ff ffc8 	bl	8008b40 <__swhatbuf_r>
 8008bb0:	9f00      	ldr	r7, [sp, #0]
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f7ff fe8a 	bl	80088d0 <_malloc_r>
 8008bbc:	b948      	cbnz	r0, 8008bd2 <__smakebuf_r+0x46>
 8008bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc2:	059a      	lsls	r2, r3, #22
 8008bc4:	d4ee      	bmi.n	8008ba4 <__smakebuf_r+0x18>
 8008bc6:	f023 0303 	bic.w	r3, r3, #3
 8008bca:	f043 0302 	orr.w	r3, r3, #2
 8008bce:	81a3      	strh	r3, [r4, #12]
 8008bd0:	e7e2      	b.n	8008b98 <__smakebuf_r+0xc>
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	6020      	str	r0, [r4, #0]
 8008bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bda:	81a3      	strh	r3, [r4, #12]
 8008bdc:	9b01      	ldr	r3, [sp, #4]
 8008bde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008be2:	b15b      	cbz	r3, 8008bfc <__smakebuf_r+0x70>
 8008be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008be8:	4630      	mov	r0, r6
 8008bea:	f000 f81d 	bl	8008c28 <_isatty_r>
 8008bee:	b128      	cbz	r0, 8008bfc <__smakebuf_r+0x70>
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	f043 0301 	orr.w	r3, r3, #1
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	431d      	orrs	r5, r3
 8008c00:	81a5      	strh	r5, [r4, #12]
 8008c02:	e7cf      	b.n	8008ba4 <__smakebuf_r+0x18>

08008c04 <_fstat_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4d07      	ldr	r5, [pc, #28]	@ (8008c24 <_fstat_r+0x20>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	f7f8 fd8e 	bl	8001732 <_fstat>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d102      	bne.n	8008c20 <_fstat_r+0x1c>
 8008c1a:	682b      	ldr	r3, [r5, #0]
 8008c1c:	b103      	cbz	r3, 8008c20 <_fstat_r+0x1c>
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	bd38      	pop	{r3, r4, r5, pc}
 8008c22:	bf00      	nop
 8008c24:	200061b4 	.word	0x200061b4

08008c28 <_isatty_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d06      	ldr	r5, [pc, #24]	@ (8008c44 <_isatty_r+0x1c>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	f7f8 fd8d 	bl	8001752 <_isatty>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_isatty_r+0x1a>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_isatty_r+0x1a>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	200061b4 	.word	0x200061b4

08008c48 <_sbrk_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d06      	ldr	r5, [pc, #24]	@ (8008c64 <_sbrk_r+0x1c>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	602b      	str	r3, [r5, #0]
 8008c54:	f7f8 fd96 	bl	8001784 <_sbrk>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_sbrk_r+0x1a>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_sbrk_r+0x1a>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	200061b4 	.word	0x200061b4

08008c68 <_init>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	bf00      	nop
 8008c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6e:	bc08      	pop	{r3}
 8008c70:	469e      	mov	lr, r3
 8008c72:	4770      	bx	lr

08008c74 <_fini>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	bf00      	nop
 8008c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7a:	bc08      	pop	{r3}
 8008c7c:	469e      	mov	lr, r3
 8008c7e:	4770      	bx	lr
