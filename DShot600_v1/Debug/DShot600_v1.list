
DShot600_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009174  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08009304  08009304  0000a304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009514  08009514  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009514  08009514  0000a514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800951c  0800951c  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800951c  0800951c  0000a51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009520  08009520  0000a520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009524  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b070  2**0
                  CONTENTS
 10 .bss          00005f08  20000070  20000070  0000b070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005f78  20005f78  0000b070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019bc1  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036e4  00000000  00000000  00024c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  00028348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001102  00000000  00000000  00029930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004400  00000000  00000000  0002aa32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017914  00000000  00000000  0002ee32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd2d8  00000000  00000000  00046746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113a1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066fc  00000000  00000000  00113a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0011a160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092ec 	.word	0x080092ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080092ec 	.word	0x080092ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b988 	b.w	8000d84 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	468e      	mov	lr, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d962      	bls.n	8000b68 <__udivmoddi4+0xdc>
 8000aa2:	fab2 f682 	clz	r6, r2
 8000aa6:	b14e      	cbz	r6, 8000abc <__udivmoddi4+0x30>
 8000aa8:	f1c6 0320 	rsb	r3, r6, #32
 8000aac:	fa01 f806 	lsl.w	r8, r1, r6
 8000ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab4:	40b7      	lsls	r7, r6
 8000ab6:	ea43 0808 	orr.w	r8, r3, r8
 8000aba:	40b4      	lsls	r4, r6
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ace:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ae0:	f080 80ea 	bcs.w	8000cb8 <__udivmoddi4+0x22c>
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f240 80e7 	bls.w	8000cb8 <__udivmoddi4+0x22c>
 8000aea:	3902      	subs	r1, #2
 8000aec:	443b      	add	r3, r7
 8000aee:	1a9a      	subs	r2, r3, r2
 8000af0:	b2a3      	uxth	r3, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b02:	459c      	cmp	ip, r3
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x8e>
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0c:	f080 80d6 	bcs.w	8000cbc <__udivmoddi4+0x230>
 8000b10:	459c      	cmp	ip, r3
 8000b12:	f240 80d3 	bls.w	8000cbc <__udivmoddi4+0x230>
 8000b16:	443b      	add	r3, r7
 8000b18:	3802      	subs	r0, #2
 8000b1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b1e:	eba3 030c 	sub.w	r3, r3, ip
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40f3      	lsrs	r3, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d905      	bls.n	8000b42 <__udivmoddi4+0xb6>
 8000b36:	b10d      	cbz	r5, 8000b3c <__udivmoddi4+0xb0>
 8000b38:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e7f5      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b42:	fab3 f183 	clz	r1, r3
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d146      	bne.n	8000bd8 <__udivmoddi4+0x14c>
 8000b4a:	4573      	cmp	r3, lr
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xc8>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 8105 	bhi.w	8000d5e <__udivmoddi4+0x2d2>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b62:	e9c5 4800 	strd	r4, r8, [r5]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f000 8090 	beq.w	8000c8e <__udivmoddi4+0x202>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	f040 80a4 	bne.w	8000cc0 <__udivmoddi4+0x234>
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b2bc      	uxth	r4, r7
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	fb04 f20c 	mul.w	r2, r4, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x11e>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x11c>
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f200 80e0 	bhi.w	8000d68 <__udivmoddi4+0x2dc>
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb8:	fb02 f404 	mul.w	r4, r2, r4
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x144>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x142>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f200 80ca 	bhi.w	8000d62 <__udivmoddi4+0x2d6>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0620 	rsb	r6, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 f706 	lsr.w	r7, r2, r6
 8000be2:	431f      	orrs	r7, r3
 8000be4:	fa0e f401 	lsl.w	r4, lr, r1
 8000be8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	fa1f fc87 	uxth.w	ip, r7
 8000bfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x1a0>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c1e:	f080 809c 	bcs.w	8000d5a <__udivmoddi4+0x2ce>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8099 	bls.w	8000d5a <__udivmoddi4+0x2ce>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	fa1f fe83 	uxth.w	lr, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1ce>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c4e:	f080 8082 	bcs.w	8000d56 <__udivmoddi4+0x2ca>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d97f      	bls.n	8000d56 <__udivmoddi4+0x2ca>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c66:	4564      	cmp	r4, ip
 8000c68:	4673      	mov	r3, lr
 8000c6a:	46e1      	mov	r9, ip
 8000c6c:	d362      	bcc.n	8000d34 <__udivmoddi4+0x2a8>
 8000c6e:	d05f      	beq.n	8000d30 <__udivmoddi4+0x2a4>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x1fe>
 8000c72:	ebb8 0203 	subs.w	r2, r8, r3
 8000c76:	eb64 0409 	sbc.w	r4, r4, r9
 8000c7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c82:	431e      	orrs	r6, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e74f      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000c8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c92:	0c01      	lsrs	r1, r0, #16
 8000c94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	46be      	mov	lr, r7
 8000ca8:	2620      	movs	r6, #32
 8000caa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cae:	eba2 0208 	sub.w	r2, r2, r8
 8000cb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cb6:	e766      	b.n	8000b86 <__udivmoddi4+0xfa>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	e718      	b.n	8000aee <__udivmoddi4+0x62>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	e72c      	b.n	8000b1a <__udivmoddi4+0x8e>
 8000cc0:	f1c6 0220 	rsb	r2, r6, #32
 8000cc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc8:	40b7      	lsls	r7, r6
 8000cca:	40b1      	lsls	r1, r6
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb08 f904 	mul.w	r9, r8, r4
 8000cea:	40b0      	lsls	r0, r6
 8000cec:	4589      	cmp	r9, r1
 8000cee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	d93e      	bls.n	8000d74 <__udivmoddi4+0x2e8>
 8000cf6:	1879      	adds	r1, r7, r1
 8000cf8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cfc:	d201      	bcs.n	8000d02 <__udivmoddi4+0x276>
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d81f      	bhi.n	8000d42 <__udivmoddi4+0x2b6>
 8000d02:	eba1 0109 	sub.w	r1, r1, r9
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fb09 f804 	mul.w	r8, r9, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	b292      	uxth	r2, r2
 8000d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d18:	4542      	cmp	r2, r8
 8000d1a:	d229      	bcs.n	8000d70 <__udivmoddi4+0x2e4>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d22:	d2c4      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d24:	4542      	cmp	r2, r8
 8000d26:	d2c2      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d28:	f1a9 0102 	sub.w	r1, r9, #2
 8000d2c:	443a      	add	r2, r7
 8000d2e:	e7be      	b.n	8000cae <__udivmoddi4+0x222>
 8000d30:	45f0      	cmp	r8, lr
 8000d32:	d29d      	bcs.n	8000c70 <__udivmoddi4+0x1e4>
 8000d34:	ebbe 0302 	subs.w	r3, lr, r2
 8000d38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	e796      	b.n	8000c70 <__udivmoddi4+0x1e4>
 8000d42:	eba7 0909 	sub.w	r9, r7, r9
 8000d46:	4449      	add	r1, r9
 8000d48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d50:	fb09 f804 	mul.w	r8, r9, r4
 8000d54:	e7db      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d56:	4673      	mov	r3, lr
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1ce>
 8000d5a:	4650      	mov	r0, sl
 8000d5c:	e766      	b.n	8000c2c <__udivmoddi4+0x1a0>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e6fd      	b.n	8000b5e <__udivmoddi4+0xd2>
 8000d62:	443b      	add	r3, r7
 8000d64:	3a02      	subs	r2, #2
 8000d66:	e733      	b.n	8000bd0 <__udivmoddi4+0x144>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443b      	add	r3, r7
 8000d6e:	e71c      	b.n	8000baa <__udivmoddi4+0x11e>
 8000d70:	4649      	mov	r1, r9
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x222>
 8000d74:	eba1 0109 	sub.w	r1, r1, r9
 8000d78:	46c4      	mov	ip, r8
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fb09 f804 	mul.w	r8, r9, r4
 8000d82:	e7c4      	b.n	8000d0e <__udivmoddi4+0x282>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f001 f96c 	bl	8002068 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8000d90:	f000 fbf6 	bl	8001580 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f842 	bl	8000e1c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 f94c 	bl	8001034 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d9c:	f000 f92a 	bl	8000ff4 <MX_DMA_Init>
  MX_TIM5_Init();
 8000da0:	f000 f8a6 	bl	8000ef0 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8000da4:	f000 f8fc 	bl	8000fa0 <MX_USART6_UART_Init>
  /* Create the thread(s) */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000da8:	f004 f93e 	bl	8005028 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  serialQueueHandle = osMessageQueueNew(SERIAL_QUEUE_LENGTH, SERIAL_QUEUE_ITEM_SIZE, NULL);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2180      	movs	r1, #128	@ 0x80
 8000db0:	200a      	movs	r0, #10
 8000db2:	f004 fa30 	bl	8005216 <osMessageQueueNew>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a0e      	ldr	r2, [pc, #56]	@ (8000df4 <main+0x6c>)
 8000dba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000df8 <main+0x70>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	480e      	ldr	r0, [pc, #56]	@ (8000dfc <main+0x74>)
 8000dc2:	f004 f97b 	bl	80050bc <osThreadNew>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <main+0x78>)
 8000dca:	6013      	str	r3, [r2, #0]

  /* creation of DShotTask_1 */
  DShotTask_1Handle = osThreadNew(DShotTask, NULL, &DShotTask_1_attributes);
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <main+0x7c>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <main+0x80>)
 8000dd2:	f004 f973 	bl	80050bc <osThreadNew>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e0c <main+0x84>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* creation of SerialTask */
  SerialTaskHandle = osThreadNew(StartSerialTask, NULL, &SerialTask_attributes);
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e10 <main+0x88>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <main+0x8c>)
 8000de2:	f004 f96b 	bl	80050bc <osThreadNew>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <main+0x90>)
 8000dea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dec:	f004 f940 	bl	8005070 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <main+0x68>
 8000df4:	200001d0 	.word	0x200001d0
 8000df8:	08009454 	.word	0x08009454
 8000dfc:	08001939 	.word	0x08001939
 8000e00:	2000017c 	.word	0x2000017c
 8000e04:	08009478 	.word	0x08009478
 8000e08:	08001949 	.word	0x08001949
 8000e0c:	20000180 	.word	0x20000180
 8000e10:	0800949c 	.word	0x0800949c
 8000e14:	08001b09 	.word	0x08001b09
 8000e18:	20000184 	.word	0x20000184

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b094      	sub	sp, #80	@ 0x50
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0320 	add.w	r3, r7, #32
 8000e26:	2230      	movs	r2, #48	@ 0x30
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f007 fac8 	bl	80083c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	4b28      	ldr	r3, [pc, #160]	@ (8000ee8 <SystemClock_Config+0xcc>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	4a27      	ldr	r2, [pc, #156]	@ (8000ee8 <SystemClock_Config+0xcc>)
 8000e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e50:	4b25      	ldr	r3, [pc, #148]	@ (8000ee8 <SystemClock_Config+0xcc>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <SystemClock_Config+0xd0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a21      	ldr	r2, [pc, #132]	@ (8000eec <SystemClock_Config+0xd0>)
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <SystemClock_Config+0xd0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e80:	2310      	movs	r3, #16
 8000e82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e84:	2302      	movs	r3, #2
 8000e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e90:	23a8      	movs	r3, #168	@ 0xa8
 8000e92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e94:	2302      	movs	r3, #2
 8000e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f001 ff43 	bl	8002d2c <HAL_RCC_OscConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000eac:	f000 fe64 	bl	8001b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ebc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ec0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2105      	movs	r1, #5
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 f9a4 	bl	800321c <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eda:	f000 fe4d 	bl	8001b78 <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3750      	adds	r7, #80	@ 0x50
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40007000 	.word	0x40007000

08000ef0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
 8000f0e:	615a      	str	r2, [r3, #20]
 8000f10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f12:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <MX_TIM5_Init+0xa8>)
 8000f14:	4a21      	ldr	r2, [pc, #132]	@ (8000f9c <MX_TIM5_Init+0xac>)
 8000f16:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <MX_TIM5_Init+0xa8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <MX_TIM5_Init+0xa8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 139;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <MX_TIM5_Init+0xa8>)
 8000f26:	228b      	movs	r2, #139	@ 0x8b
 8000f28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <MX_TIM5_Init+0xa8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <MX_TIM5_Init+0xa8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f36:	4818      	ldr	r0, [pc, #96]	@ (8000f98 <MX_TIM5_Init+0xa8>)
 8000f38:	f002 fc4c 	bl	80037d4 <HAL_TIM_PWM_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000f42:	f000 fe19 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	4619      	mov	r1, r3
 8000f54:	4810      	ldr	r0, [pc, #64]	@ (8000f98 <MX_TIM5_Init+0xa8>)
 8000f56:	f003 fb87 	bl	8004668 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000f60:	f000 fe0a 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f64:	2360      	movs	r3, #96	@ 0x60
 8000f66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <MX_TIM5_Init+0xa8>)
 8000f7c:	f002 ff32 	bl	8003de4 <HAL_TIM_PWM_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f86:	f000 fdf7 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000f8a:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <MX_TIM5_Init+0xa8>)
 8000f8c:	f000 fe7a 	bl	8001c84 <HAL_TIM_MspPostInit>

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	@ 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000008c 	.word	0x2000008c
 8000f9c:	40000c00 	.word	0x40000c00

08000fa0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	@ (8000ff0 <MX_USART6_UART_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fac:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000fb0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	@ (8000fec <MX_USART6_UART_Init+0x4c>)
 8000fd8:	f003 fbd6 	bl	8004788 <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000fe2:	f000 fdc9 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000134 	.word	0x20000134
 8000ff0:	40011400 	.word	0x40011400

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_DMA_Init+0x3c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a0b      	ldr	r2, [pc, #44]	@ (8001030 <MX_DMA_Init+0x3c>)
 8001004:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_DMA_Init+0x3c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	200d      	movs	r0, #13
 800101c:	f001 f91e 	bl	800225c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001020:	200d      	movs	r0, #13
 8001022:	f001 f937 	bl	8002294 <HAL_NVIC_EnableIRQ>

}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	4b27      	ldr	r3, [pc, #156]	@ (80010ec <MX_GPIO_Init+0xb8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a26      	ldr	r2, [pc, #152]	@ (80010ec <MX_GPIO_Init+0xb8>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <MX_GPIO_Init+0xb8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <MX_GPIO_Init+0xb8>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a1f      	ldr	r2, [pc, #124]	@ (80010ec <MX_GPIO_Init+0xb8>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <MX_GPIO_Init+0xb8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <MX_GPIO_Init+0xb8>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a18      	ldr	r2, [pc, #96]	@ (80010ec <MX_GPIO_Init+0xb8>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <MX_GPIO_Init+0xb8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2102      	movs	r1, #2
 80010a2:	4813      	ldr	r0, [pc, #76]	@ (80010f0 <MX_GPIO_Init+0xbc>)
 80010a4:	f001 fe28 	bl	8002cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010a8:	2302      	movs	r3, #2
 80010aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <MX_GPIO_Init+0xbc>)
 80010c0:	f001 fc66 	bl	8002990 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c4:	2301      	movs	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // USART1_RX
 80010d4:	2307      	movs	r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4619      	mov	r1, r3
 80010de:	4804      	ldr	r0, [pc, #16]	@ (80010f0 <MX_GPIO_Init+0xbc>)
 80010e0:	f001 fc56 	bl	8002990 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000

080010f4 <uart_print_int>:

/* USER CODE BEGIN 4 */
void uart_print_int(UART_HandleTypeDef *huart, int value) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
    char buf[12]; // Enough for -2147483648 + \0
    int idx = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24

    // Handle negative numbers
    if (value < 0) {
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	da0a      	bge.n	800111e <uart_print_int+0x2a>
        buf[idx++] = '-';
 8001108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	627a      	str	r2, [r7, #36]	@ 0x24
 800110e:	3328      	adds	r3, #40	@ 0x28
 8001110:	443b      	add	r3, r7
 8001112:	222d      	movs	r2, #45	@ 0x2d
 8001114:	f803 2c14 	strb.w	r2, [r3, #-20]
        value = -value;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	425b      	negs	r3, r3
 800111c:	603b      	str	r3, [r7, #0]
    }

    // Convert digits to ASCII in reverse
    char temp[10];
    int temp_idx = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
    if (value == 0) {
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d126      	bne.n	8001176 <uart_print_int+0x82>
        temp[temp_idx++] = '0';
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	623a      	str	r2, [r7, #32]
 800112e:	3328      	adds	r3, #40	@ 0x28
 8001130:	443b      	add	r3, r7
 8001132:	2230      	movs	r2, #48	@ 0x30
 8001134:	f803 2c20 	strb.w	r2, [r3, #-32]
 8001138:	e033      	b.n	80011a2 <uart_print_int+0xae>
    } else {
        while (value > 0 && temp_idx < sizeof(temp)) {
            temp[temp_idx++] = '0' + (value % 10);
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <uart_print_int+0xd0>)
 800113e:	fb83 1302 	smull	r1, r3, r3, r2
 8001142:	1099      	asrs	r1, r3, #2
 8001144:	17d3      	asrs	r3, r2, #31
 8001146:	1ac9      	subs	r1, r1, r3
 8001148:	460b      	mov	r3, r1
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	1ad1      	subs	r1, r2, r3
 8001152:	b2ca      	uxtb	r2, r1
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	1c59      	adds	r1, r3, #1
 8001158:	6239      	str	r1, [r7, #32]
 800115a:	3230      	adds	r2, #48	@ 0x30
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	3328      	adds	r3, #40	@ 0x28
 8001160:	443b      	add	r3, r7
 8001162:	f803 2c20 	strb.w	r2, [r3, #-32]
            value /= 10;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	4a16      	ldr	r2, [pc, #88]	@ (80011c4 <uart_print_int+0xd0>)
 800116a:	fb82 1203 	smull	r1, r2, r2, r3
 800116e:	1092      	asrs	r2, r2, #2
 8001170:	17db      	asrs	r3, r3, #31
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	603b      	str	r3, [r7, #0]
        while (value > 0 && temp_idx < sizeof(temp)) {
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	dd12      	ble.n	80011a2 <uart_print_int+0xae>
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	2b09      	cmp	r3, #9
 8001180:	d9db      	bls.n	800113a <uart_print_int+0x46>
        }
    }

    // Copy digits in correct order
    while (temp_idx > 0) {
 8001182:	e00e      	b.n	80011a2 <uart_print_int+0xae>
        buf[idx++] = temp[--temp_idx];
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	3b01      	subs	r3, #1
 8001188:	623b      	str	r3, [r7, #32]
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001190:	f107 0108 	add.w	r1, r7, #8
 8001194:	6a3a      	ldr	r2, [r7, #32]
 8001196:	440a      	add	r2, r1
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	3328      	adds	r3, #40	@ 0x28
 800119c:	443b      	add	r3, r7
 800119e:	f803 2c14 	strb.w	r2, [r3, #-20]
    while (temp_idx > 0) {
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	dced      	bgt.n	8001184 <uart_print_int+0x90>
    }

    // Send buffer via UART
    HAL_UART_Transmit(huart, (uint8_t *)buf, idx, HAL_MAX_DELAY);
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	f107 0114 	add.w	r1, r7, #20
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f003 fb37 	bl	8004828 <HAL_UART_Transmit>
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	@ 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	66666667 	.word	0x66666667

080011c8 <read_telemetry_pin>:

static inline uint8_t read_telemetry_pin(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(TELEMETRY_GPIO_PORT, TELEMETRY_PIN) ? 1 : 0;
 80011cc:	2101      	movs	r1, #1
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <read_telemetry_pin+0x1c>)
 80011d0:	f001 fd7a 	bl	8002cc8 <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf14      	ite	ne
 80011da:	2301      	movne	r3, #1
 80011dc:	2300      	moveq	r3, #0
 80011de:	b2db      	uxtb	r3, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40020000 	.word	0x40020000

080011e8 <receive_bdshot_telemetry>:

int receive_bdshot_telemetry(uint32_t *telemetry_out) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    uint32_t value = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

    // Wait for line to go low (start bit)
    uint32_t timeout = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
    while (read_telemetry_pin()) {
 80011f8:	e00e      	b.n	8001218 <receive_bdshot_telemetry+0x30>
        delay_us_precise(0.01f);
 80011fa:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001280 <receive_bdshot_telemetry+0x98>
 80011fe:	f000 f967 	bl	80014d0 <delay_us_precise>
        if (++timeout > TELEMETRY_TIMEOUT_US * 25)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	3301      	adds	r3, #1
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800120e:	4293      	cmp	r3, r2
 8001210:	d902      	bls.n	8001218 <receive_bdshot_telemetry+0x30>
            return -1; // Timeout
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	e02f      	b.n	8001278 <receive_bdshot_telemetry+0x90>
    while (read_telemetry_pin()) {
 8001218:	f7ff ffd6 	bl	80011c8 <read_telemetry_pin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1eb      	bne.n	80011fa <receive_bdshot_telemetry+0x12>
    }

    // Wait half a bit to center
    //delay_us_precise(TELEMETRY_BIT_US/2.0f);
    delay_us_precise(0.1f);
 8001222:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001284 <receive_bdshot_telemetry+0x9c>
 8001226:	f000 f953 	bl	80014d0 <delay_us_precise>

    // LSB-first: capture 20 bits
    for (int i = 0; i < 20; i++) {
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	e01c      	b.n	800126a <receive_bdshot_telemetry+0x82>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	2102      	movs	r1, #2
 8001234:	4814      	ldr	r0, [pc, #80]	@ (8001288 <receive_bdshot_telemetry+0xa0>)
 8001236:	f001 fd5f 	bl	8002cf8 <HAL_GPIO_WritePin>
        value |= (read_telemetry_pin() << (19-i)); // LSB-first
 800123a:	f7ff ffc5 	bl	80011c8 <read_telemetry_pin>
 800123e:	4603      	mov	r3, r0
 8001240:	461a      	mov	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1c3 0313 	rsb	r3, r3, #19
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	461a      	mov	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	4313      	orrs	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
        delay_us_busy(TELEMETRY_BIT_US);
 8001254:	2000      	movs	r0, #0
 8001256:	f000 f915 	bl	8001484 <delay_us_busy>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2102      	movs	r1, #2
 800125e:	480a      	ldr	r0, [pc, #40]	@ (8001288 <receive_bdshot_telemetry+0xa0>)
 8001260:	f001 fd4a 	bl	8002cf8 <HAL_GPIO_WritePin>
    for (int i = 0; i < 20; i++) {
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b13      	cmp	r3, #19
 800126e:	dddf      	ble.n	8001230 <receive_bdshot_telemetry+0x48>
    }

    *telemetry_out = value;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	601a      	str	r2, [r3, #0]
    return 0;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	3c23d70a 	.word	0x3c23d70a
 8001284:	3dcccccd 	.word	0x3dcccccd
 8001288:	40020000 	.word	0x40020000

0800128c <set_pin_input_PA0>:


void set_pin_input_PA0(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a0:	2301      	movs	r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <set_pin_input_PA0+0x34>)
 80012b2:	f001 fb6d 	bl	8002990 <HAL_GPIO_Init>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40020000 	.word	0x40020000

080012c4 <set_pin_pwm_PA0>:

void set_pin_pwm_PA0(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d8:	2301      	movs	r3, #1
 80012da:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5; // Alternate function for TIM5 CH1 on PA0
 80012e8:	2302      	movs	r3, #2
 80012ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	4619      	mov	r1, r3
 80012f0:	4803      	ldr	r0, [pc, #12]	@ (8001300 <set_pin_pwm_PA0+0x3c>)
 80012f2:	f001 fb4d 	bl	8002990 <HAL_GPIO_Init>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40020000 	.word	0x40020000

08001304 <prepare_bdshot_buffer>:


void prepare_bdshot_buffer(uint16_t frame)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
    uint32_t buffer_index = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]

    // 1️⃣ Insert a dummy 0 at the start to absorb the DMA skip
    //dshot_buffer[buffer_index++] = 0;  // Dummy preload entry

    // 2️⃣ Build the actual DSHOT waveform entries
    for (int i = 15; i >= 0; i--)
 8001312:	230f      	movs	r3, #15
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	e01c      	b.n	8001352 <prepare_bdshot_buffer+0x4e>
    {
        uint8_t bit = (frame >> i) & 0x01;
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	fa42 f303 	asr.w	r3, r2, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
        if (bit)
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <prepare_bdshot_buffer+0x3a>
        {
            dshot_buffer[buffer_index++] = DSHOT_T1L_TICKS;  // logic 1
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	617a      	str	r2, [r7, #20]
 8001334:	4a0f      	ldr	r2, [pc, #60]	@ (8001374 <prepare_bdshot_buffer+0x70>)
 8001336:	2169      	movs	r1, #105	@ 0x69
 8001338:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800133c:	e006      	b.n	800134c <prepare_bdshot_buffer+0x48>
            //dshot_buffer[buffer_index++] = 0;
        }
        else
        {
            dshot_buffer[buffer_index++] = DSHOT_T0L_TICKS;  // logic 0
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	617a      	str	r2, [r7, #20]
 8001344:	4a0b      	ldr	r2, [pc, #44]	@ (8001374 <prepare_bdshot_buffer+0x70>)
 8001346:	2132      	movs	r1, #50	@ 0x32
 8001348:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 15; i >= 0; i--)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	3b01      	subs	r3, #1
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	2b00      	cmp	r3, #0
 8001356:	dadf      	bge.n	8001318 <prepare_bdshot_buffer+0x14>
            //dshot_buffer[buffer_index++] = 0;
        }
    }

    // 3️⃣ Final low pulses (as before)
    dshot_buffer[buffer_index++] = 0;  // Final LOW
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	617a      	str	r2, [r7, #20]
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <prepare_bdshot_buffer+0x70>)
 8001360:	2100      	movs	r1, #0
 8001362:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    //dshot_buffer[buffer_index++] = 0;  // Extra delay
}
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000188 	.word	0x20000188

08001378 <bdshot_crc>:


// value_12bit should be 0...4095
uint8_t bdshot_crc(uint16_t value_12bit)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
    // Optional: Uncomment to assert 12-bit range in debug
    // assert(value_12bit < 4096);

    uint16_t crc = value_12bit ^ (value_12bit >> 4) ^ (value_12bit >> 8);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	b29a      	uxth	r2, r3
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4053      	eors	r3, r2
 800138c:	b29a      	uxth	r2, r3
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	b29b      	uxth	r3, r3
 8001394:	4053      	eors	r3, r2
 8001396:	81fb      	strh	r3, [r7, #14]
    crc = ~crc;           // Bitwise NOT
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	43db      	mvns	r3, r3
 800139c:	81fb      	strh	r3, [r7, #14]
    crc = crc & 0x0F;     // Mask to 4 bits
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)crc;
 80013a6:	89fb      	ldrh	r3, [r7, #14]
 80013a8:	b2db      	uxtb	r3, r3
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <make_bdshot_frame>:

// Create 16-bit DSHOT frame with correct CRC
uint16_t make_bdshot_frame(uint16_t value, bool telemetry) {
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	460a      	mov	r2, r1
 80013c0:	80fb      	strh	r3, [r7, #6]
 80013c2:	4613      	mov	r3, r2
 80013c4:	717b      	strb	r3, [r7, #5]
    if (value == 0) {
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <make_bdshot_frame+0x1a>
        return 0x000F; // hardware expects this special frame
 80013cc:	230f      	movs	r3, #15
 80013ce:	e01b      	b.n	8001408 <make_bdshot_frame+0x52>
    }
    value &= 0x07FF; // 11 bits
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d6:	80fb      	strh	r3, [r7, #6]
    uint16_t frame_no_crc = (value << 1) | (telemetry ? 1 : 0);
 80013d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	b21a      	sxth	r2, r3
 80013e0:	797b      	ldrb	r3, [r7, #5]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	81fb      	strh	r3, [r7, #14]
    uint8_t crc = bdshot_crc(frame_no_crc);
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ffc3 	bl	8001378 <bdshot_crc>
 80013f2:	4603      	mov	r3, r0
 80013f4:	737b      	strb	r3, [r7, #13]
    return (frame_no_crc << 4) | crc;
 80013f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	b21b      	sxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b21b      	sxth	r3, r3
 8001406:	b29b      	uxth	r3, r3
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <queue_bdshot_pulse>:

void queue_bdshot_pulse(uint16_t throttle, bool telemetry){
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	80fb      	strh	r3, [r7, #6]
 800141c:	4613      	mov	r3, r2
 800141e:	717b      	strb	r3, [r7, #5]
	uint16_t frame = make_bdshot_frame(throttle, telemetry);
 8001420:	797a      	ldrb	r2, [r7, #5]
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ffc5 	bl	80013b6 <make_bdshot_frame>
 800142c:	4603      	mov	r3, r0
 800142e:	81fb      	strh	r3, [r7, #14]
	prepare_bdshot_buffer(frame);
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff66 	bl	8001304 <prepare_bdshot_buffer>
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <send_bdshot>:

void send_bdshot(uint32_t channel){
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
    if (HAL_TIM_PWM_Start_DMA(&htim5, channel, (uint32_t*)dshot_buffer, DSHOT_BUFFER_SIZE) != HAL_OK)
 8001448:	2311      	movs	r3, #17
 800144a:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <send_bdshot+0x34>)
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	480a      	ldr	r0, [pc, #40]	@ (8001478 <send_bdshot+0x38>)
 8001450:	f002 fa10 	bl	8003874 <HAL_TIM_PWM_Start_DMA>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d004      	beq.n	8001464 <send_bdshot+0x24>
    {
        Error_Handler();
 800145a:	f000 fb8d 	bl	8001b78 <Error_Handler>
        printf("Error in send_bdshot()\r\n");
 800145e:	4807      	ldr	r0, [pc, #28]	@ (800147c <send_bdshot+0x3c>)
 8001460:	f006 feac 	bl	80081bc <puts>
    }
    //printf("%d\r\n",dshot_buffer);
    dshot_running = 1;
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <send_bdshot+0x40>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000188 	.word	0x20000188
 8001478:	2000008c 	.word	0x2000008c
 800147c:	08009328 	.word	0x08009328
 8001480:	200001cc 	.word	0x200001cc

08001484 <delay_us_busy>:

void delay_us_busy(uint32_t us) {
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 800148c:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <delay_us_busy+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <delay_us_busy+0x44>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0c9a      	lsrs	r2, r3, #18
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <delay_us_busy+0x48>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 80014a6:	bf00      	nop
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <delay_us_busy+0x48>)
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d8f8      	bhi.n	80014a8 <delay_us_busy+0x24>
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	20000004 	.word	0x20000004
 80014c8:	431bde83 	.word	0x431bde83
 80014cc:	e0001000 	.word	0xe0001000

080014d0 <delay_us_precise>:

void delay_us_precise(float us) {
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t cycles = (uint32_t)(SystemCoreClock * us / 1e6f);
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <delay_us_precise+0x54>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ee:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001528 <delay_us_precise+0x58>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014fa:	ee17 3a90 	vmov	r3, s15
 80014fe:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8001500:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <delay_us_precise+0x5c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8001506:	bf00      	nop
 8001508:	4b08      	ldr	r3, [pc, #32]	@ (800152c <delay_us_precise+0x5c>)
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	429a      	cmp	r2, r3
 8001514:	d8f8      	bhi.n	8001508 <delay_us_precise+0x38>
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	20000004 	.word	0x20000004
 8001528:	49742400 	.word	0x49742400
 800152c:	e0001000 	.word	0xe0001000

08001530 <_write>:
    }
}


int _write(int file, char *ptr, int len)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b0a4      	sub	sp, #144	@ 0x90
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
    // For safety, truncate messages to queue item size
    if (len > SERIAL_QUEUE_ITEM_SIZE - 1) len = SERIAL_QUEUE_ITEM_SIZE - 1;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001540:	dd01      	ble.n	8001546 <_write+0x16>
 8001542:	237f      	movs	r3, #127	@ 0x7f
 8001544:	607b      	str	r3, [r7, #4]

    char msg[SERIAL_QUEUE_ITEM_SIZE];
    memcpy(msg, ptr, len);
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	4618      	mov	r0, r3
 8001550:	f007 f80f 	bl	8008572 <memcpy>
    msg[len] = '\0'; // Null-terminate
 8001554:	f107 0210 	add.w	r2, r7, #16
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4413      	add	r3, r2
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]

    // Send to queue (in ISR context: use osMessageQueuePutFromISR, but here normal context)
    if (osMessageQueuePut(serialQueueHandle, msg, 0, 0) != osOK) {
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <_write+0x4c>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	f107 0110 	add.w	r1, r7, #16
 8001568:	2300      	movs	r3, #0
 800156a:	2200      	movs	r2, #0
 800156c:	f003 fec6 	bl	80052fc <osMessageQueuePut>
        // Handle queue full if needed
    }

    return len;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3790      	adds	r7, #144	@ 0x90
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200001d0 	.word	0x200001d0

08001580 <DWT_Init>:

void DWT_Init(void) {
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk)) {
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <DWT_Init+0x38>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10e      	bne.n	80015ae <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <DWT_Init+0x3c>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4a09      	ldr	r2, [pc, #36]	@ (80015bc <DWT_Init+0x3c>)
 8001596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800159a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <DWT_Init+0x38>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80015a2:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <DWT_Init+0x38>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a04      	ldr	r2, [pc, #16]	@ (80015b8 <DWT_Init+0x38>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6013      	str	r3, [r2, #0]
    }
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e0001000 	.word	0xe0001000
 80015bc:	e000edf0 	.word	0xe000edf0

080015c0 <HAL_TIM_PWM_PulseFinishedCallback>:
    }
    printf("\r\n");
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    //HAL_UART_Receive_DMA(&huart6, telemetry_buffer, 2);

    // Optionally set a flag
    dshot_running = 0;
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200001cc 	.word	0x200001cc

080015e0 <calculate_crc>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
    //printf("UART error callback!\r\n");
}

uint8_t calculate_crc(uint16_t value_12bit, const char *protocol) {
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	80fb      	strh	r3, [r7, #6]
    if (value_12bit > 0x0FFF) return 0xFF; // invalid input
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015f2:	d301      	bcc.n	80015f8 <calculate_crc+0x18>
 80015f4:	23ff      	movs	r3, #255	@ 0xff
 80015f6:	e038      	b.n	800166a <calculate_crc+0x8a>

    if (protocol[0] == 'B') { // BDShot
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b42      	cmp	r3, #66	@ 0x42
 80015fe:	d118      	bne.n	8001632 <calculate_crc+0x52>
        uint16_t value_16bit = value_12bit << 4;
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	817b      	strh	r3, [r7, #10]
        uint16_t csum = value_16bit;
 8001606:	897b      	ldrh	r3, [r7, #10]
 8001608:	813b      	strh	r3, [r7, #8]
        csum ^= (csum >> 8);
 800160a:	893b      	ldrh	r3, [r7, #8]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	b29a      	uxth	r2, r3
 8001610:	893b      	ldrh	r3, [r7, #8]
 8001612:	4053      	eors	r3, r2
 8001614:	813b      	strh	r3, [r7, #8]
        csum ^= (csum >> 4);
 8001616:	893b      	ldrh	r3, [r7, #8]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	b29a      	uxth	r2, r3
 800161c:	893b      	ldrh	r3, [r7, #8]
 800161e:	4053      	eors	r3, r2
 8001620:	813b      	strh	r3, [r7, #8]
        return (~csum) & 0xF;
 8001622:	893b      	ldrh	r3, [r7, #8]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	b2db      	uxtb	r3, r3
 8001630:	e01b      	b.n	800166a <calculate_crc+0x8a>
    } else if (protocol[0] == 'D') { // DShot
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b44      	cmp	r3, #68	@ 0x44
 8001638:	d116      	bne.n	8001668 <calculate_crc+0x88>
        uint16_t value = value_12bit;
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	81fb      	strh	r3, [r7, #14]
        uint8_t crc = value ^ (value >> 4) ^ (value >> 8);
 800163e:	89fb      	ldrh	r3, [r7, #14]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	b29b      	uxth	r3, r3
 8001644:	b2da      	uxtb	r2, r3
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4053      	eors	r3, r2
 800164c:	b2da      	uxtb	r2, r3
 800164e:	89fb      	ldrh	r3, [r7, #14]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	b29b      	uxth	r3, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	4053      	eors	r3, r2
 8001658:	737b      	strb	r3, [r7, #13]
        return (~crc) & 0xF;
 800165a:	7b7b      	ldrb	r3, [r7, #13]
 800165c:	43db      	mvns	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	b2db      	uxtb	r3, r3
 8001666:	e000      	b.n	800166a <calculate_crc+0x8a>
    }

    return 0xFF; // unsupported protocol
 8001668:	23ff      	movs	r3, #255	@ 0xff
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <decode_gcr_mapping>:
 * @param A value that represents a 20 bit GCR that has been mapped to 21 bits.
 * The first "starting" bit can be excluded for compatibility with a slightly cleaned 20 bit value.
 *
 * @return Returns the 20 bit GCR
 */
uint32_t decode_gcr_mapping(uint32_t value) {
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
    return value ^ (value >> 1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	085a      	lsrs	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4053      	eors	r3, r2
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <decode_gcr_20_to_16>:
 *
 * @return Returns the 20 bit GCR
 *
 * Initialized the whole map to 0xFF. This way, only explicitly defined entries are accepted
 */
int decode_gcr_20_to_16(uint32_t input_20bit, uint16_t *out_value) {
 8001692:	b480      	push	{r7}
 8001694:	b08f      	sub	sp, #60	@ 0x3c
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
    uint8_t decoding_map[32];
    for (int i = 0; i < 32; ++i) decoding_map[i] = 0xFF; // mark all invalid
 800169c:	2300      	movs	r3, #0
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
 80016a0:	e008      	b.n	80016b4 <decode_gcr_20_to_16+0x22>
 80016a2:	f107 0208 	add.w	r2, r7, #8
 80016a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a8:	4413      	add	r3, r2
 80016aa:	22ff      	movs	r2, #255	@ 0xff
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016b0:	3301      	adds	r3, #1
 80016b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80016b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016b6:	2b1f      	cmp	r3, #31
 80016b8:	ddf3      	ble.n	80016a2 <decode_gcr_20_to_16+0x10>
    decoding_map[0x19] = 0x0; decoding_map[0x1B] = 0x1; decoding_map[0x12] = 0x2;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80016c0:	2301      	movs	r3, #1
 80016c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016c6:	2302      	movs	r3, #2
 80016c8:	76bb      	strb	r3, [r7, #26]
    decoding_map[0x13] = 0x3; decoding_map[0x1D] = 0x4; decoding_map[0x15] = 0x5;
 80016ca:	2303      	movs	r3, #3
 80016cc:	76fb      	strb	r3, [r7, #27]
 80016ce:	2304      	movs	r3, #4
 80016d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80016d4:	2305      	movs	r3, #5
 80016d6:	777b      	strb	r3, [r7, #29]
    decoding_map[0x16] = 0x6; decoding_map[0x17] = 0x7; decoding_map[0x1A] = 0x8;
 80016d8:	2306      	movs	r3, #6
 80016da:	77bb      	strb	r3, [r7, #30]
 80016dc:	2307      	movs	r3, #7
 80016de:	77fb      	strb	r3, [r7, #31]
 80016e0:	2308      	movs	r3, #8
 80016e2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    decoding_map[0x09] = 0x9; decoding_map[0x0A] = 0xA; decoding_map[0x0B] = 0xB;
 80016e6:	2309      	movs	r3, #9
 80016e8:	747b      	strb	r3, [r7, #17]
 80016ea:	230a      	movs	r3, #10
 80016ec:	74bb      	strb	r3, [r7, #18]
 80016ee:	230b      	movs	r3, #11
 80016f0:	74fb      	strb	r3, [r7, #19]
    decoding_map[0x1E] = 0xC; decoding_map[0x0D] = 0xD; decoding_map[0x0E] = 0xE;
 80016f2:	230c      	movs	r3, #12
 80016f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80016f8:	230d      	movs	r3, #13
 80016fa:	757b      	strb	r3, [r7, #21]
 80016fc:	230e      	movs	r3, #14
 80016fe:	75bb      	strb	r3, [r7, #22]
    decoding_map[0x0F] = 0xF;
 8001700:	230f      	movs	r3, #15
 8001702:	75fb      	strb	r3, [r7, #23]

    uint16_t result = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	867b      	strh	r3, [r7, #50]	@ 0x32

    for (int i = 0; i < 4; i++) {
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800170c:	e029      	b.n	8001762 <decode_gcr_20_to_16+0xd0>
        uint8_t chunk = (input_20bit >> (15 - i * 5)) & 0x1F;
 800170e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001710:	4613      	mov	r3, r2
 8001712:	079b      	lsls	r3, r3, #30
 8001714:	1a9b      	subs	r3, r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	330f      	adds	r3, #15
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        if (decoding_map[chunk] == 0xFF) return 0; // invalid chunk
 800172c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001730:	3338      	adds	r3, #56	@ 0x38
 8001732:	443b      	add	r3, r7
 8001734:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001738:	2bff      	cmp	r3, #255	@ 0xff
 800173a:	d101      	bne.n	8001740 <decode_gcr_20_to_16+0xae>
 800173c:	2300      	movs	r3, #0
 800173e:	e017      	b.n	8001770 <decode_gcr_20_to_16+0xde>
        result = (result << 4) | decoding_map[chunk];
 8001740:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	b21a      	sxth	r2, r3
 8001748:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800174c:	3338      	adds	r3, #56	@ 0x38
 800174e:	443b      	add	r3, r7
 8001750:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001754:	b21b      	sxth	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b21b      	sxth	r3, r3
 800175a:	867b      	strh	r3, [r7, #50]	@ 0x32
    for (int i = 0; i < 4; i++) {
 800175c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800175e:	3301      	adds	r3, #1
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001764:	2b03      	cmp	r3, #3
 8001766:	ddd2      	ble.n	800170e <decode_gcr_20_to_16+0x7c>
    }

    *out_value = result;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800176c:	801a      	strh	r2, [r3, #0]
    return 1;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	373c      	adds	r7, #60	@ 0x3c
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <parse_edt_frame>:

int parse_edt_frame(uint16_t frame, char *type_out, float *value_out) {
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b08b      	sub	sp, #44	@ 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	81fb      	strh	r3, [r7, #14]
    if (frame > 0xFFFF || frame < 0){
    	return -1;
    }

    uint16_t data = (frame >> 4) & 0x0FFF;
 800178a:	89fb      	ldrh	r3, [r7, #14]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t crc_received = frame & 0x0F;
 8001790:	89fb      	ldrh	r3, [r7, #14]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t crc_calculated = calculate_crc(data, "BDShot");
 800179c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800179e:	4960      	ldr	r1, [pc, #384]	@ (8001920 <parse_edt_frame+0x1a4>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff1d 	bl	80015e0 <calculate_crc>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    if (crc_received != crc_calculated) return -2;
 80017ac:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80017b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d002      	beq.n	80017be <parse_edt_frame+0x42>
 80017b8:	f06f 0301 	mvn.w	r3, #1
 80017bc:	e0ab      	b.n	8001916 <parse_edt_frame+0x19a>

    uint8_t exponent = (data >> 9) & 0x07;
 80017be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017c0:	0a5b      	lsrs	r3, r3, #9
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint16_t base_period = data & 0x1FF;
 80017ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d4:	843b      	strh	r3, [r7, #32]
    if (exponent > 12) return -3;
 80017d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	d902      	bls.n	80017e4 <parse_edt_frame+0x68>
 80017de:	f06f 0302 	mvn.w	r3, #2
 80017e2:	e098      	b.n	8001916 <parse_edt_frame+0x19a>

    uint32_t period_us = base_period << exponent;
 80017e4:	8c3a      	ldrh	r2, [r7, #32]
 80017e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	61fb      	str	r3, [r7, #28]
    if (period_us == 0) return -3;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <parse_edt_frame+0x80>
 80017f6:	f06f 0302 	mvn.w	r3, #2
 80017fa:	e08c      	b.n	8001916 <parse_edt_frame+0x19a>

    bool is_edt = ((exponent & 1) == 0) && ((base_period & 0x100) == 0);
 80017fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d106      	bne.n	8001816 <parse_edt_frame+0x9a>
 8001808:	8c3b      	ldrh	r3, [r7, #32]
 800180a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <parse_edt_frame+0x9a>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <parse_edt_frame+0x9c>
 8001816:	2300      	movs	r3, #0
 8001818:	76fb      	strb	r3, [r7, #27]
 800181a:	7efb      	ldrb	r3, [r7, #27]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	76fb      	strb	r3, [r7, #27]

    if (is_edt) {
 8001822:	7efb      	ldrb	r3, [r7, #27]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d051      	beq.n	80018cc <parse_edt_frame+0x150>
        uint8_t telemetry_type = (data >> 8) & 0xF;
 8001828:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	b29b      	uxth	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	74fb      	strb	r3, [r7, #19]
        uint8_t telemetry_value = data & 0xFF;
 8001836:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001838:	74bb      	strb	r3, [r7, #18]

        switch (telemetry_type) {
 800183a:	7cfb      	ldrb	r3, [r7, #19]
 800183c:	2b04      	cmp	r3, #4
 800183e:	d002      	beq.n	8001846 <parse_edt_frame+0xca>
 8001840:	2b0e      	cmp	r3, #14
 8001842:	d018      	beq.n	8001876 <parse_edt_frame+0xfa>
 8001844:	e02d      	b.n	80018a2 <parse_edt_frame+0x126>
            case 0x04:
                *value_out = (float)(telemetry_value) / 0.25f;
 8001846:	7cbb      	ldrb	r3, [r7, #18]
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001850:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8001854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	edc3 7a00 	vstr	s15, [r3]
                if (type_out) strcpy(type_out, "Voltage (V)");
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d030      	beq.n	80018c6 <parse_edt_frame+0x14a>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4a2f      	ldr	r2, [pc, #188]	@ (8001924 <parse_edt_frame+0x1a8>)
 8001868:	461c      	mov	r4, r3
 800186a:	4613      	mov	r3, r2
 800186c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800186e:	6020      	str	r0, [r4, #0]
 8001870:	6061      	str	r1, [r4, #4]
 8001872:	60a2      	str	r2, [r4, #8]
                break;
 8001874:	e027      	b.n	80018c6 <parse_edt_frame+0x14a>
            case 0x0E:
                if (type_out) strcpy(type_out, "Status Frame");
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d009      	beq.n	8001890 <parse_edt_frame+0x114>
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4a2a      	ldr	r2, [pc, #168]	@ (8001928 <parse_edt_frame+0x1ac>)
 8001880:	461c      	mov	r4, r3
 8001882:	4613      	mov	r3, r2
 8001884:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001886:	6020      	str	r0, [r4, #0]
 8001888:	6061      	str	r1, [r4, #4]
 800188a:	60a2      	str	r2, [r4, #8]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	7323      	strb	r3, [r4, #12]
                *value_out = telemetry_value; // raw value, parse later if needed
 8001890:	7cbb      	ldrb	r3, [r7, #18]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	edc3 7a00 	vstr	s15, [r3]
                break;
 80018a0:	e012      	b.n	80018c8 <parse_edt_frame+0x14c>
            default:
                *value_out = telemetry_value;
 80018a2:	7cbb      	ldrb	r3, [r7, #18]
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	edc3 7a00 	vstr	s15, [r3]
                if (type_out) sprintf(type_out, "Unknown (0x%X)", telemetry_type);
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d007      	beq.n	80018c8 <parse_edt_frame+0x14c>
 80018b8:	7cfb      	ldrb	r3, [r7, #19]
 80018ba:	461a      	mov	r2, r3
 80018bc:	491b      	ldr	r1, [pc, #108]	@ (800192c <parse_edt_frame+0x1b0>)
 80018be:	68b8      	ldr	r0, [r7, #8]
 80018c0:	f006 fc84 	bl	80081cc <siprintf>
 80018c4:	e000      	b.n	80018c8 <parse_edt_frame+0x14c>
                break;
 80018c6:	bf00      	nop
        }

        return 1; // EDT frame
 80018c8:	2301      	movs	r3, #1
 80018ca:	e024      	b.n	8001916 <parse_edt_frame+0x19a>
    } else {
        if (base_period == 0 || base_period == 0x1FF) {
 80018cc:	8c3b      	ldrh	r3, [r7, #32]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d004      	beq.n	80018dc <parse_edt_frame+0x160>
 80018d2:	8c3b      	ldrh	r3, [r7, #32]
 80018d4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80018d8:	4293      	cmp	r3, r2
 80018da:	d104      	bne.n	80018e6 <parse_edt_frame+0x16a>
            *value_out = 0;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	e00d      	b.n	8001902 <parse_edt_frame+0x186>
        } else {
            float erpm = 60000000.0f / (float)period_us;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018f0:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001930 <parse_edt_frame+0x1b4>
 80018f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018f8:	edc7 7a05 	vstr	s15, [r7, #20]
            *value_out = erpm;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	601a      	str	r2, [r3, #0]
        }

        if (type_out) strcpy(type_out, "eRPM");
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <parse_edt_frame+0x198>
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <parse_edt_frame+0x1b8>)
 800190c:	6810      	ldr	r0, [r2, #0]
 800190e:	6018      	str	r0, [r3, #0]
 8001910:	7912      	ldrb	r2, [r2, #4]
 8001912:	711a      	strb	r2, [r3, #4]
        return 2; // eRPM frame
 8001914:	2302      	movs	r3, #2
    }

    return -3;
}
 8001916:	4618      	mov	r0, r3
 8001918:	372c      	adds	r7, #44	@ 0x2c
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	bf00      	nop
 8001920:	08009344 	.word	0x08009344
 8001924:	0800934c 	.word	0x0800934c
 8001928:	08009358 	.word	0x08009358
 800192c:	08009368 	.word	0x08009368
 8001930:	4c64e1c0 	.word	0x4c64e1c0
 8001934:	08009378 	.word	0x08009378

08001938 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001940:	2001      	movs	r0, #1
 8001942:	f003 fc4d 	bl	80051e0 <osDelay>
 8001946:	e7fb      	b.n	8001940 <StartDefaultTask+0x8>

08001948 <DShotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DShotTask */
void DShotTask(void *argument)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	@ 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DShotTask */
	printf("\nDShotTask Begin.\r\n");
 8001950:	485c      	ldr	r0, [pc, #368]	@ (8001ac4 <DShotTask+0x17c>)
 8001952:	f006 fc33 	bl	80081bc <puts>
	printf("SystemCoreClock=%lu\r\n", SystemCoreClock);
 8001956:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac8 <DShotTask+0x180>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4619      	mov	r1, r3
 800195c:	485b      	ldr	r0, [pc, #364]	@ (8001acc <DShotTask+0x184>)
 800195e:	f006 fbc5 	bl	80080ec <iprintf>
	uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 8001962:	f001 fe13 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8001966:	61f8      	str	r0, [r7, #28]
	uint32_t tim5_clk = pclk1;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
	if ((RCC->CFGR & RCC_CFGR_PPRE1) != RCC_CFGR_PPRE1_DIV1)
 800196c:	4b58      	ldr	r3, [pc, #352]	@ (8001ad0 <DShotTask+0x188>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <DShotTask+0x36>
	    tim5_clk *= 2;
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
	printf("TIM5 actual clk: %lu\r\n", tim5_clk);
 800197e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001980:	4854      	ldr	r0, [pc, #336]	@ (8001ad4 <DShotTask+0x18c>)
 8001982:	f006 fbb3 	bl	80080ec <iprintf>




    // Step 1: Send ARM command (value 0)
	printf("Arming.\r\n");
 8001986:	4854      	ldr	r0, [pc, #336]	@ (8001ad8 <DShotTask+0x190>)
 8001988:	f006 fc18 	bl	80081bc <puts>
	queue_bdshot_pulse(0, true);
 800198c:	2101      	movs	r1, #1
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fd3e 	bl	8001410 <queue_bdshot_pulse>
	for (int i = 0; i < 3000; i++){
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	e008      	b.n	80019ac <DShotTask+0x64>
		send_bdshot(TIM_CHANNEL_1);
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff fd50 	bl	8001440 <send_bdshot>
		vTaskDelay(1);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f004 fdc7 	bl	8006534 <vTaskDelay>
	for (int i = 0; i < 3000; i++){
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	3301      	adds	r3, #1
 80019aa:	623b      	str	r3, [r7, #32]
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019b2:	4293      	cmp	r3, r2
 80019b4:	ddf1      	ble.n	800199a <DShotTask+0x52>
	}
	printf("Done arming!\r\n");
 80019b6:	4849      	ldr	r0, [pc, #292]	@ (8001adc <DShotTask+0x194>)
 80019b8:	f006 fc00 	bl	80081bc <puts>
    vTaskDelay(50);  // Wait 300ms (Bluejay requires for arming)
 80019bc:	2032      	movs	r0, #50	@ 0x32
 80019be:	f004 fdb9 	bl	8006534 <vTaskDelay>



    //Approximately 84 ticks in 1 microsecond (Timer Clock = 84 MHz)
    printf("Throttling.\r\n");
 80019c2:	4847      	ldr	r0, [pc, #284]	@ (8001ae0 <DShotTask+0x198>)
 80019c4:	f006 fbfa 	bl	80081bc <puts>
    queue_bdshot_pulse(200, true);
 80019c8:	2101      	movs	r1, #1
 80019ca:	20c8      	movs	r0, #200	@ 0xc8
 80019cc:	f7ff fd20 	bl	8001410 <queue_bdshot_pulse>
    uint32_t telemetry;
    uint16_t telemetry_16bit;
    char telemetry_type;
    float telemetry_value;
    for (;;){
      while(dshot_running){
 80019d0:	e003      	b.n	80019da <DShotTask+0x92>
    	  delay_us_precise(5);
 80019d2:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80019d6:	f7ff fd7b 	bl	80014d0 <delay_us_precise>
      while(dshot_running){
 80019da:	4b42      	ldr	r3, [pc, #264]	@ (8001ae4 <DShotTask+0x19c>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f6      	bne.n	80019d2 <DShotTask+0x8a>
      }
      send_bdshot(TIM_CHANNEL_1);
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fd2b 	bl	8001440 <send_bdshot>
      delay_us_busy(40);
 80019ea:	2028      	movs	r0, #40	@ 0x28
 80019ec:	f7ff fd4a 	bl	8001484 <delay_us_busy>
      set_pin_input_PA0();
 80019f0:	f7ff fc4c 	bl	800128c <set_pin_input_PA0>
      if (receive_bdshot_telemetry(&telemetry) == 0) {
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fbf5 	bl	80011e8 <receive_bdshot_telemetry>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d159      	bne.n	8001ab8 <DShotTask+0x170>
    	  //print_binary(telemetry,20);
    	  uint32_t gcr = decode_gcr_mapping(telemetry);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fe35 	bl	8001676 <decode_gcr_mapping>
 8001a0c:	61b8      	str	r0, [r7, #24]
    	  if (!decode_gcr_20_to_16(gcr, &telemetry_16bit)) {
 8001a0e:	f107 030e 	add.w	r3, r7, #14
 8001a12:	4619      	mov	r1, r3
 8001a14:	69b8      	ldr	r0, [r7, #24]
 8001a16:	f7ff fe3c 	bl	8001692 <decode_gcr_20_to_16>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d104      	bne.n	8001a2a <DShotTask+0xe2>
    		  //printf("Invalid GCR encoding.\r\n");
    		  delay_us_precise(10);
 8001a20:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001a24:	f7ff fd54 	bl	80014d0 <delay_us_precise>
 8001a28:	e046      	b.n	8001ab8 <DShotTask+0x170>
    	  }
    	  else {
              int type = parse_edt_frame(telemetry_16bit, &telemetry_type, &telemetry_value);
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	f107 0208 	add.w	r2, r7, #8
 8001a30:	f107 010d 	add.w	r1, r7, #13
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fea1 	bl	800177c <parse_edt_frame>
 8001a3a:	6178      	str	r0, [r7, #20]
              if (type == 2) {
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d11c      	bne.n	8001a7c <DShotTask+0x134>
            	  rpm = (uint16_t)(telemetry_value / 7.0);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd7f 	bl	8000548 <__aeabi_f2d>
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <DShotTask+0x1a0>)
 8001a50:	f7fe fefc 	bl	800084c <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7fe ffde 	bl	8000a1c <__aeabi_d2uiz>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <DShotTask+0x1a4>)
 8001a66:	801a      	strh	r2, [r3, #0]
            	  uart_print_int(&huart6, rpm);
 8001a68:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <DShotTask+0x1a4>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4820      	ldr	r0, [pc, #128]	@ (8001af0 <DShotTask+0x1a8>)
 8001a70:	f7ff fb40 	bl	80010f4 <uart_print_int>
            	  printf("\r\n");
 8001a74:	481f      	ldr	r0, [pc, #124]	@ (8001af4 <DShotTask+0x1ac>)
 8001a76:	f006 fba1 	bl	80081bc <puts>
 8001a7a:	e01d      	b.n	8001ab8 <DShotTask+0x170>
              }

              else if (type == 1) {
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d103      	bne.n	8001a8a <DShotTask+0x142>
            	  printf("EDT\r\n");
 8001a82:	481d      	ldr	r0, [pc, #116]	@ (8001af8 <DShotTask+0x1b0>)
 8001a84:	f006 fb9a 	bl	80081bc <puts>
 8001a88:	e016      	b.n	8001ab8 <DShotTask+0x170>
                  //printf("EDT: %s = %d\r\n", telemetry_type, (int)telemetry_value);
              }
              else if (type == -1){
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d103      	bne.n	8001a9a <DShotTask+0x152>
                  printf("Invalid Telemetry frame.\r\n");
 8001a92:	481a      	ldr	r0, [pc, #104]	@ (8001afc <DShotTask+0x1b4>)
 8001a94:	f006 fb92 	bl	80081bc <puts>
 8001a98:	e00e      	b.n	8001ab8 <DShotTask+0x170>
              }
              else if (type == -2){
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f113 0f02 	cmn.w	r3, #2
 8001aa0:	d00a      	beq.n	8001ab8 <DShotTask+0x170>
            	  //printf("Invalid CRC.\r\n");
              }
              else if (type == -3){
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f113 0f03 	cmn.w	r3, #3
 8001aa8:	d103      	bne.n	8001ab2 <DShotTask+0x16a>
            	  printf("Something went wrong.\r\n");
 8001aaa:	4815      	ldr	r0, [pc, #84]	@ (8001b00 <DShotTask+0x1b8>)
 8001aac:	f006 fb86 	bl	80081bc <puts>
 8001ab0:	e002      	b.n	8001ab8 <DShotTask+0x170>
              }
              else {
            	  printf("Unknown Error.\r\n");
 8001ab2:	4814      	ldr	r0, [pc, #80]	@ (8001b04 <DShotTask+0x1bc>)
 8001ab4:	f006 fb82 	bl	80081bc <puts>
    	  }
      }
      else {
    	  //printf("Invalid Telemetry.\r\n");
      }
      set_pin_pwm_PA0();
 8001ab8:	f7ff fc04 	bl	80012c4 <set_pin_pwm_PA0>

      vTaskDelay(1);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f004 fd39 	bl	8006534 <vTaskDelay>
      while(dshot_running){
 8001ac2:	e78a      	b.n	80019da <DShotTask+0x92>
 8001ac4:	08009380 	.word	0x08009380
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	08009394 	.word	0x08009394
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	080093ac 	.word	0x080093ac
 8001ad8:	080093c4 	.word	0x080093c4
 8001adc:	080093d0 	.word	0x080093d0
 8001ae0:	080093e0 	.word	0x080093e0
 8001ae4:	200001cc 	.word	0x200001cc
 8001ae8:	401c0000 	.word	0x401c0000
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000134 	.word	0x20000134
 8001af4:	08009340 	.word	0x08009340
 8001af8:	080093f0 	.word	0x080093f0
 8001afc:	080093f8 	.word	0x080093f8
 8001b00:	08009414 	.word	0x08009414
 8001b04:	0800942c 	.word	0x0800942c

08001b08 <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void *argument)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0a2      	sub	sp, #136	@ 0x88
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  char msg[SERIAL_QUEUE_ITEM_SIZE];

  for (;;)
  {
      // 1️⃣ Process serial debug messages
      if (osMessageQueueGet(serialQueueHandle, msg, NULL, 10) == osOK)
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <StartSerialTask+0x44>)
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	f107 0108 	add.w	r1, r7, #8
 8001b18:	230a      	movs	r3, #10
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f003 fc4e 	bl	80053bc <osMessageQueueGet>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10d      	bne.n	8001b42 <StartSerialTask+0x3a>
      {
          HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fb50 	bl	80001d0 <strlen>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	f107 0108 	add.w	r1, r7, #8
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3c:	4804      	ldr	r0, [pc, #16]	@ (8001b50 <StartSerialTask+0x48>)
 8001b3e:	f002 fe73 	bl	8004828 <HAL_UART_Transmit>
      }

      osDelay(1); // Let other tasks run
 8001b42:	2001      	movs	r0, #1
 8001b44:	f003 fb4c 	bl	80051e0 <osDelay>
      if (osMessageQueueGet(serialQueueHandle, msg, NULL, 10) == osOK)
 8001b48:	e7e2      	b.n	8001b10 <StartSerialTask+0x8>
 8001b4a:	bf00      	nop
 8001b4c:	200001d0 	.word	0x200001d0
 8001b50:	20000134 	.word	0x20000134

08001b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001b66:	f000 faa1 	bl	80020ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  //printf("PeriodElapsedCallback\r\n");
  /* USER CODE END Callback 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40001c00 	.word	0x40001c00

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <Error_Handler+0x8>

08001b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_MspInit+0x54>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	4a11      	ldr	r2, [pc, #68]	@ (8001bd8 <HAL_MspInit+0x54>)
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <HAL_MspInit+0x54>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <HAL_MspInit+0x54>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <HAL_MspInit+0x54>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb6:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <HAL_MspInit+0x54>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	210f      	movs	r1, #15
 8001bc6:	f06f 0001 	mvn.w	r0, #1
 8001bca:	f000 fb47 	bl	800225c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a22      	ldr	r2, [pc, #136]	@ (8001c74 <HAL_TIM_PWM_MspInit+0x98>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d13e      	bne.n	8001c6c <HAL_TIM_PWM_MspInit+0x90>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <HAL_TIM_PWM_MspInit+0x9c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	4a20      	ldr	r2, [pc, #128]	@ (8001c78 <HAL_TIM_PWM_MspInit+0x9c>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <HAL_TIM_PWM_MspInit+0x9c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c80 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c0e:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c12:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001c16:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c18:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c1a:	2240      	movs	r2, #64	@ 0x40
 8001c1c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c24:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c2a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c32:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c3a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c48:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001c50:	480a      	ldr	r0, [pc, #40]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c52:	f000 fb2d 	bl	80022b0 <HAL_DMA_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8001c5c:	f7ff ff8c 	bl	8001b78 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a06      	ldr	r2, [pc, #24]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c66:	4a05      	ldr	r2, [pc, #20]	@ (8001c7c <HAL_TIM_PWM_MspInit+0xa0>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40000c00 	.word	0x40000c00
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	200000d4 	.word	0x200000d4
 8001c80:	40026040 	.word	0x40026040

08001c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <HAL_TIM_MspPostInit+0x68>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d11d      	bne.n	8001ce2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_TIM_MspPostInit+0x6c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <HAL_TIM_MspPostInit+0x70>)
 8001cde:	f000 fe57 	bl	8002990 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40000c00 	.word	0x40000c00
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020000 	.word	0x40020000

08001cf8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	@ 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	@ (8001d7c <HAL_UART_MspInit+0x84>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12b      	bne.n	8001d72 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d24:	f043 0320 	orr.w	r3, r3, #32
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_UART_MspInit+0x88>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d52:	23c0      	movs	r3, #192	@ 0xc0
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d62:	2308      	movs	r3, #8
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <HAL_UART_MspInit+0x8c>)
 8001d6e:	f000 fe0f 	bl	8002990 <HAL_GPIO_Init>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	@ 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40011400 	.word	0x40011400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020800 	.word	0x40020800

08001d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	@ 0x38
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	4b33      	ldr	r3, [pc, #204]	@ (8001e6c <HAL_InitTick+0xe4>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	4a32      	ldr	r2, [pc, #200]	@ (8001e6c <HAL_InitTick+0xe4>)
 8001da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da8:	4b30      	ldr	r3, [pc, #192]	@ (8001e6c <HAL_InitTick+0xe4>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001db4:	f107 0210 	add.w	r2, r7, #16
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 fc0c 	bl	80035dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dce:	f001 fbdd 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8001dd2:	6378      	str	r0, [r7, #52]	@ 0x34
 8001dd4:	e004      	b.n	8001de0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001dd6:	f001 fbd9 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de2:	4a23      	ldr	r2, [pc, #140]	@ (8001e70 <HAL_InitTick+0xe8>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	0c9b      	lsrs	r3, r3, #18
 8001dea:	3b01      	subs	r3, #1
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001dee:	4b21      	ldr	r3, [pc, #132]	@ (8001e74 <HAL_InitTick+0xec>)
 8001df0:	4a21      	ldr	r2, [pc, #132]	@ (8001e78 <HAL_InitTick+0xf0>)
 8001df2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001df4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e74 <HAL_InitTick+0xec>)
 8001df6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dfa:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001e74 <HAL_InitTick+0xec>)
 8001dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e00:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001e02:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <HAL_InitTick+0xec>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <HAL_InitTick+0xec>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <HAL_InitTick+0xec>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 8001e14:	4817      	ldr	r0, [pc, #92]	@ (8001e74 <HAL_InitTick+0xec>)
 8001e16:	f001 fc13 	bl	8003640 <HAL_TIM_Base_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001e20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 8001e28:	4812      	ldr	r0, [pc, #72]	@ (8001e74 <HAL_InitTick+0xec>)
 8001e2a:	f001 fc63 	bl	80036f4 <HAL_TIM_Base_Start_IT>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001e34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d111      	bne.n	8001e60 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001e3c:	202c      	movs	r0, #44	@ 0x2c
 8001e3e:	f000 fa29 	bl	8002294 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d808      	bhi.n	8001e5a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	202c      	movs	r0, #44	@ 0x2c
 8001e4e:	f000 fa05 	bl	800225c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <HAL_InitTick+0xf4>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	e002      	b.n	8001e60 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3738      	adds	r7, #56	@ 0x38
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	431bde83 	.word	0x431bde83
 8001e74:	200001d4 	.word	0x200001d4
 8001e78:	40001c00 	.word	0x40001c00
 8001e7c:	20000008 	.word	0x20000008

08001e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <NMI_Handler+0x4>

08001e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <HardFault_Handler+0x4>

08001e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <MemManage_Handler+0x4>

08001e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <BusFault_Handler+0x4>

08001ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <UsageFault_Handler+0x4>

08001ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <DMA1_Stream2_IRQHandler+0x10>)
 8001ebe:	f000 fafd 	bl	80024bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200000d4 	.word	0x200000d4

08001ecc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001ed0:	4802      	ldr	r0, [pc, #8]	@ (8001edc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001ed2:	f001 fe97 	bl	8003c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200001d4 	.word	0x200001d4

08001ee0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e00a      	b.n	8001f08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ef2:	f3af 8000 	nop.w
 8001ef6:	4601      	mov	r1, r0
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	60ba      	str	r2, [r7, #8]
 8001efe:	b2ca      	uxtb	r2, r1
 8001f00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbf0      	blt.n	8001ef2 <_read+0x12>
  }

  return len;
 8001f10:	687b      	ldr	r3, [r7, #4]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_close>:

int _close(int file)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f42:	605a      	str	r2, [r3, #4]
  return 0;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_isatty>:

int _isatty(int file)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	@ (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	@ (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f006 fab0 	bl	8008518 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	@ (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20020000 	.word	0x20020000
 8001fe4:	00000400 	.word	0x00000400
 8001fe8:	2000021c 	.word	0x2000021c
 8001fec:	20005f78 	.word	0x20005f78

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800204c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002018:	f7ff ffea 	bl	8001ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800201c:	480c      	ldr	r0, [pc, #48]	@ (8002050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800201e:	490d      	ldr	r1, [pc, #52]	@ (8002054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002020:	4a0d      	ldr	r2, [pc, #52]	@ (8002058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002034:	4c0a      	ldr	r4, [pc, #40]	@ (8002060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002042:	f006 fa6f 	bl	8008524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7fe fe9f 	bl	8000d88 <main>
  bx  lr    
 800204a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800204c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002058:	08009524 	.word	0x08009524
  ldr r2, =_sbss
 800205c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002060:	20005f78 	.word	0x20005f78

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <HAL_Init+0x40>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <HAL_Init+0x40>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a07      	ldr	r2, [pc, #28]	@ (80020a8 <HAL_Init+0x40>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 f8d8 	bl	8002246 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002096:	200f      	movs	r0, #15
 8002098:	f7ff fe76 	bl	8001d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800209c:	f7ff fd72 	bl	8001b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023c00 	.word	0x40023c00

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2000000c 	.word	0x2000000c
 80020d0:	20000220 	.word	0x20000220

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000220 	.word	0x20000220

080020ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	@ (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	db0b      	blt.n	800217a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4907      	ldr	r1, [pc, #28]	@ (8002188 <__NVIC_EnableIRQ+0x38>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2001      	movs	r0, #1
 8002172:	fa00 f202 	lsl.w	r2, r0, r2
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000e100 	.word	0xe000e100

0800218c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	6039      	str	r1, [r7, #0]
 8002196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	db0a      	blt.n	80021b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	490c      	ldr	r1, [pc, #48]	@ (80021d8 <__NVIC_SetPriority+0x4c>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	0112      	lsls	r2, r2, #4
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	440b      	add	r3, r1
 80021b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b4:	e00a      	b.n	80021cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4908      	ldr	r1, [pc, #32]	@ (80021dc <__NVIC_SetPriority+0x50>)
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	3b04      	subs	r3, #4
 80021c4:	0112      	lsls	r2, r2, #4
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	440b      	add	r3, r1
 80021ca:	761a      	strb	r2, [r3, #24]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000e100 	.word	0xe000e100
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	@ 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f1c3 0307 	rsb	r3, r3, #7
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	bf28      	it	cs
 80021fe:	2304      	movcs	r3, #4
 8002200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3304      	adds	r3, #4
 8002206:	2b06      	cmp	r3, #6
 8002208:	d902      	bls.n	8002210 <NVIC_EncodePriority+0x30>
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3b03      	subs	r3, #3
 800220e:	e000      	b.n	8002212 <NVIC_EncodePriority+0x32>
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	f04f 32ff 	mov.w	r2, #4294967295
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43da      	mvns	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	401a      	ands	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002228:	f04f 31ff 	mov.w	r1, #4294967295
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	43d9      	mvns	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	4313      	orrs	r3, r2
         );
}
 800223a:	4618      	mov	r0, r3
 800223c:	3724      	adds	r7, #36	@ 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff4c 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800226e:	f7ff ff61 	bl	8002134 <__NVIC_GetPriorityGrouping>
 8002272:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	6978      	ldr	r0, [r7, #20]
 800227a:	f7ff ffb1 	bl	80021e0 <NVIC_EncodePriority>
 800227e:	4602      	mov	r2, r0
 8002280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff80 	bl	800218c <__NVIC_SetPriority>
}
 800228c:	bf00      	nop
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff54 	bl	8002150 <__NVIC_EnableIRQ>
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff ff0a 	bl	80020d4 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e099      	b.n	8002400 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ec:	e00f      	b.n	800230e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ee:	f7ff fef1 	bl	80020d4 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	d908      	bls.n	800230e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2203      	movs	r2, #3
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e078      	b.n	8002400 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1e8      	bne.n	80022ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4b38      	ldr	r3, [pc, #224]	@ (8002408 <HAL_DMA_Init+0x158>)
 8002328:	4013      	ands	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002346:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002352:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002364:	2b04      	cmp	r3, #4
 8002366:	d107      	bne.n	8002378 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	4313      	orrs	r3, r2
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f023 0307 	bic.w	r3, r3, #7
 800238e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d117      	bne.n	80023d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00e      	beq.n	80023d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fa6f 	bl	8002898 <DMA_CheckFifoParam>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2240      	movs	r2, #64	@ 0x40
 80023c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023ce:	2301      	movs	r3, #1
 80023d0:	e016      	b.n	8002400 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fa26 	bl	800282c <DMA_CalcBaseAndBitshift>
 80023e0:	4603      	mov	r3, r0
 80023e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e8:	223f      	movs	r2, #63	@ 0x3f
 80023ea:	409a      	lsls	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	f010803f 	.word	0xf010803f

0800240c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002422:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_DMA_Start_IT+0x26>
 800242e:	2302      	movs	r3, #2
 8002430:	e040      	b.n	80024b4 <HAL_DMA_Start_IT+0xa8>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b01      	cmp	r3, #1
 8002444:	d12f      	bne.n	80024a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f9b8 	bl	80027d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002464:	223f      	movs	r2, #63	@ 0x3f
 8002466:	409a      	lsls	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0216 	orr.w	r2, r2, #22
 800247a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0208 	orr.w	r2, r2, #8
 8002492:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e005      	b.n	80024b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024ae:	2302      	movs	r3, #2
 80024b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024c8:	4b8e      	ldr	r3, [pc, #568]	@ (8002704 <HAL_DMA_IRQHandler+0x248>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a8e      	ldr	r2, [pc, #568]	@ (8002708 <HAL_DMA_IRQHandler+0x24c>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	0a9b      	lsrs	r3, r3, #10
 80024d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e6:	2208      	movs	r2, #8
 80024e8:	409a      	lsls	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01a      	beq.n	8002528 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0204 	bic.w	r2, r2, #4
 800250e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002514:	2208      	movs	r2, #8
 8002516:	409a      	lsls	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252c:	2201      	movs	r2, #1
 800252e:	409a      	lsls	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d012      	beq.n	800255e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	2201      	movs	r2, #1
 800254c:	409a      	lsls	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002556:	f043 0202 	orr.w	r2, r3, #2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002562:	2204      	movs	r2, #4
 8002564:	409a      	lsls	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d012      	beq.n	8002594 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00b      	beq.n	8002594 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002580:	2204      	movs	r2, #4
 8002582:	409a      	lsls	r2, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258c:	f043 0204 	orr.w	r2, r3, #4
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002598:	2210      	movs	r2, #16
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d043      	beq.n	800262c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d03c      	beq.n	800262c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b6:	2210      	movs	r2, #16
 80025b8:	409a      	lsls	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d018      	beq.n	80025fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d108      	bne.n	80025ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d024      	beq.n	800262c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
 80025ea:	e01f      	b.n	800262c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01b      	beq.n	800262c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	4798      	blx	r3
 80025fc:	e016      	b.n	800262c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d107      	bne.n	800261c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0208 	bic.w	r2, r2, #8
 800261a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002630:	2220      	movs	r2, #32
 8002632:	409a      	lsls	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 808f 	beq.w	800275c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8087 	beq.w	800275c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002652:	2220      	movs	r2, #32
 8002654:	409a      	lsls	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b05      	cmp	r3, #5
 8002664:	d136      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0216 	bic.w	r2, r2, #22
 8002674:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002684:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d103      	bne.n	8002696 <HAL_DMA_IRQHandler+0x1da>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0208 	bic.w	r2, r2, #8
 80026a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026aa:	223f      	movs	r2, #63	@ 0x3f
 80026ac:	409a      	lsls	r2, r3
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d07e      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
        }
        return;
 80026d2:	e079      	b.n	80027c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01d      	beq.n	800271e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10d      	bne.n	800270c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d031      	beq.n	800275c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	4798      	blx	r3
 8002700:	e02c      	b.n	800275c <HAL_DMA_IRQHandler+0x2a0>
 8002702:	bf00      	nop
 8002704:	20000004 	.word	0x20000004
 8002708:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d023      	beq.n	800275c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
 800271c:	e01e      	b.n	800275c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10f      	bne.n	800274c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0210 	bic.w	r2, r2, #16
 800273a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002760:	2b00      	cmp	r3, #0
 8002762:	d032      	beq.n	80027ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d022      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2205      	movs	r2, #5
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	3301      	adds	r3, #1
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	429a      	cmp	r2, r3
 8002792:	d307      	bcc.n	80027a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f2      	bne.n	8002788 <HAL_DMA_IRQHandler+0x2cc>
 80027a2:	e000      	b.n	80027a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
 80027c6:	e000      	b.n	80027ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80027c8:	bf00      	nop
    }
  }
}
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b40      	cmp	r3, #64	@ 0x40
 80027fc:	d108      	bne.n	8002810 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800280e:	e007      	b.n	8002820 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	60da      	str	r2, [r3, #12]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	3b10      	subs	r3, #16
 800283c:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <DMA_CalcBaseAndBitshift+0x64>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002846:	4a13      	ldr	r2, [pc, #76]	@ (8002894 <DMA_CalcBaseAndBitshift+0x68>)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d909      	bls.n	800286e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002862:	f023 0303 	bic.w	r3, r3, #3
 8002866:	1d1a      	adds	r2, r3, #4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	659a      	str	r2, [r3, #88]	@ 0x58
 800286c:	e007      	b.n	800287e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	aaaaaaab 	.word	0xaaaaaaab
 8002894:	080094d8 	.word	0x080094d8

08002898 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d11f      	bne.n	80028f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d856      	bhi.n	8002966 <DMA_CheckFifoParam+0xce>
 80028b8:	a201      	add	r2, pc, #4	@ (adr r2, 80028c0 <DMA_CheckFifoParam+0x28>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	080028d1 	.word	0x080028d1
 80028c4:	080028e3 	.word	0x080028e3
 80028c8:	080028d1 	.word	0x080028d1
 80028cc:	08002967 	.word	0x08002967
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d046      	beq.n	800296a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e0:	e043      	b.n	800296a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028ea:	d140      	bne.n	800296e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f0:	e03d      	b.n	800296e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028fa:	d121      	bne.n	8002940 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d837      	bhi.n	8002972 <DMA_CheckFifoParam+0xda>
 8002902:	a201      	add	r2, pc, #4	@ (adr r2, 8002908 <DMA_CheckFifoParam+0x70>)
 8002904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002908:	08002919 	.word	0x08002919
 800290c:	0800291f 	.word	0x0800291f
 8002910:	08002919 	.word	0x08002919
 8002914:	08002931 	.word	0x08002931
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
      break;
 800291c:	e030      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002922:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d025      	beq.n	8002976 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292e:	e022      	b.n	8002976 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002938:	d11f      	bne.n	800297a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800293e:	e01c      	b.n	800297a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d903      	bls.n	800294e <DMA_CheckFifoParam+0xb6>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b03      	cmp	r3, #3
 800294a:	d003      	beq.n	8002954 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800294c:	e018      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
      break;
 8002952:	e015      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00e      	beq.n	800297e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
      break;
 8002964:	e00b      	b.n	800297e <DMA_CheckFifoParam+0xe6>
      break;
 8002966:	bf00      	nop
 8002968:	e00a      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
 800296c:	e008      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      break;
 800296e:	bf00      	nop
 8002970:	e006      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
 8002974:	e004      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      break;
 8002976:	bf00      	nop
 8002978:	e002      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      break;   
 800297a:	bf00      	nop
 800297c:	e000      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      break;
 800297e:	bf00      	nop
    }
  } 
  
  return status; 
 8002980:	7bfb      	ldrb	r3, [r7, #15]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop

08002990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002990:	b480      	push	{r7}
 8002992:	b089      	sub	sp, #36	@ 0x24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	e16b      	b.n	8002c84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029ac:	2201      	movs	r2, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	f040 815a 	bne.w	8002c7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d005      	beq.n	80029e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d130      	bne.n	8002a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a18:	2201      	movs	r2, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 0201 	and.w	r2, r3, #1
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d017      	beq.n	8002a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d123      	bne.n	8002ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	08da      	lsrs	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3208      	adds	r2, #8
 8002ace:	69b9      	ldr	r1, [r7, #24]
 8002ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0203 	and.w	r2, r3, #3
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80b4 	beq.w	8002c7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	4b60      	ldr	r3, [pc, #384]	@ (8002c9c <HAL_GPIO_Init+0x30c>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c9c <HAL_GPIO_Init+0x30c>)
 8002b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b26:	4b5d      	ldr	r3, [pc, #372]	@ (8002c9c <HAL_GPIO_Init+0x30c>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ca0 <HAL_GPIO_Init+0x310>)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	089b      	lsrs	r3, r3, #2
 8002b38:	3302      	adds	r3, #2
 8002b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	220f      	movs	r2, #15
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a52      	ldr	r2, [pc, #328]	@ (8002ca4 <HAL_GPIO_Init+0x314>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d02b      	beq.n	8002bb6 <HAL_GPIO_Init+0x226>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a51      	ldr	r2, [pc, #324]	@ (8002ca8 <HAL_GPIO_Init+0x318>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d025      	beq.n	8002bb2 <HAL_GPIO_Init+0x222>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a50      	ldr	r2, [pc, #320]	@ (8002cac <HAL_GPIO_Init+0x31c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d01f      	beq.n	8002bae <HAL_GPIO_Init+0x21e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4f      	ldr	r2, [pc, #316]	@ (8002cb0 <HAL_GPIO_Init+0x320>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d019      	beq.n	8002baa <HAL_GPIO_Init+0x21a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4e      	ldr	r2, [pc, #312]	@ (8002cb4 <HAL_GPIO_Init+0x324>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d013      	beq.n	8002ba6 <HAL_GPIO_Init+0x216>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4d      	ldr	r2, [pc, #308]	@ (8002cb8 <HAL_GPIO_Init+0x328>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00d      	beq.n	8002ba2 <HAL_GPIO_Init+0x212>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4c      	ldr	r2, [pc, #304]	@ (8002cbc <HAL_GPIO_Init+0x32c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d007      	beq.n	8002b9e <HAL_GPIO_Init+0x20e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4b      	ldr	r2, [pc, #300]	@ (8002cc0 <HAL_GPIO_Init+0x330>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d101      	bne.n	8002b9a <HAL_GPIO_Init+0x20a>
 8002b96:	2307      	movs	r3, #7
 8002b98:	e00e      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	e00c      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002b9e:	2306      	movs	r3, #6
 8002ba0:	e00a      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc8:	4935      	ldr	r1, [pc, #212]	@ (8002ca0 <HAL_GPIO_Init+0x310>)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <HAL_GPIO_Init+0x334>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfa:	4a32      	ldr	r2, [pc, #200]	@ (8002cc4 <HAL_GPIO_Init+0x334>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c00:	4b30      	ldr	r3, [pc, #192]	@ (8002cc4 <HAL_GPIO_Init+0x334>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c24:	4a27      	ldr	r2, [pc, #156]	@ (8002cc4 <HAL_GPIO_Init+0x334>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c2a:	4b26      	ldr	r3, [pc, #152]	@ (8002cc4 <HAL_GPIO_Init+0x334>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc4 <HAL_GPIO_Init+0x334>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c54:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <HAL_GPIO_Init+0x334>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c78:	4a12      	ldr	r2, [pc, #72]	@ (8002cc4 <HAL_GPIO_Init+0x334>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	f67f ae90 	bls.w	80029ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3724      	adds	r7, #36	@ 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40021400 	.word	0x40021400
 8002cbc:	40021800 	.word	0x40021800
 8002cc0:	40021c00 	.word	0x40021c00
 8002cc4:	40013c00 	.word	0x40013c00

08002cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	e001      	b.n	8002cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
 8002d04:	4613      	mov	r3, r2
 8002d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d08:	787b      	ldrb	r3, [r7, #1]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d0e:	887a      	ldrh	r2, [r7, #2]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d14:	e003      	b.n	8002d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	041a      	lsls	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	619a      	str	r2, [r3, #24]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e267      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d075      	beq.n	8002e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d4a:	4b88      	ldr	r3, [pc, #544]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d00c      	beq.n	8002d70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d56:	4b85      	ldr	r3, [pc, #532]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d112      	bne.n	8002d88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d62:	4b82      	ldr	r3, [pc, #520]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d6e:	d10b      	bne.n	8002d88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	4b7e      	ldr	r3, [pc, #504]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d05b      	beq.n	8002e34 <HAL_RCC_OscConfig+0x108>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d157      	bne.n	8002e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e242      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d90:	d106      	bne.n	8002da0 <HAL_RCC_OscConfig+0x74>
 8002d92:	4b76      	ldr	r3, [pc, #472]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a75      	ldr	r2, [pc, #468]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e01d      	b.n	8002ddc <HAL_RCC_OscConfig+0xb0>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x98>
 8002daa:	4b70      	ldr	r3, [pc, #448]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6f      	ldr	r2, [pc, #444]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a6c      	ldr	r2, [pc, #432]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCC_OscConfig+0xb0>
 8002dc4:	4b69      	ldr	r3, [pc, #420]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a68      	ldr	r2, [pc, #416]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b66      	ldr	r3, [pc, #408]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a65      	ldr	r2, [pc, #404]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7ff f976 	bl	80020d4 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7ff f972 	bl	80020d4 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	@ 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e207      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0xc0>
 8002e0a:	e014      	b.n	8002e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7ff f962 	bl	80020d4 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e14:	f7ff f95e 	bl	80020d4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	@ 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e1f3      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e26:	4b51      	ldr	r3, [pc, #324]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0xe8>
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d063      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e42:	4b4a      	ldr	r3, [pc, #296]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4e:	4b47      	ldr	r3, [pc, #284]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d11c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5a:	4b44      	ldr	r3, [pc, #272]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d116      	bne.n	8002e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	4b41      	ldr	r3, [pc, #260]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_RCC_OscConfig+0x152>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e1c7      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4937      	ldr	r1, [pc, #220]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e92:	e03a      	b.n	8002f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d020      	beq.n	8002ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e9c:	4b34      	ldr	r3, [pc, #208]	@ (8002f70 <HAL_RCC_OscConfig+0x244>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7ff f917 	bl	80020d4 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eaa:	f7ff f913 	bl	80020d4 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e1a8      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec8:	4b28      	ldr	r3, [pc, #160]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4925      	ldr	r1, [pc, #148]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]
 8002edc:	e015      	b.n	8002f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ede:	4b24      	ldr	r3, [pc, #144]	@ (8002f70 <HAL_RCC_OscConfig+0x244>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7ff f8f6 	bl	80020d4 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eec:	f7ff f8f2 	bl	80020d4 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e187      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efe:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d036      	beq.n	8002f84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1e:	4b15      	ldr	r3, [pc, #84]	@ (8002f74 <HAL_RCC_OscConfig+0x248>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f24:	f7ff f8d6 	bl	80020d4 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2c:	f7ff f8d2 	bl	80020d4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e167      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x200>
 8002f4a:	e01b      	b.n	8002f84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4c:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <HAL_RCC_OscConfig+0x248>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f52:	f7ff f8bf 	bl	80020d4 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f58:	e00e      	b.n	8002f78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5a:	f7ff f8bb 	bl	80020d4 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d907      	bls.n	8002f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e150      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	42470000 	.word	0x42470000
 8002f74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f78:	4b88      	ldr	r3, [pc, #544]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ea      	bne.n	8002f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8097 	beq.w	80030c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f96:	4b81      	ldr	r3, [pc, #516]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b7d      	ldr	r3, [pc, #500]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	4a7c      	ldr	r2, [pc, #496]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fb2:	4b7a      	ldr	r3, [pc, #488]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	4b77      	ldr	r3, [pc, #476]	@ (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fce:	4b74      	ldr	r3, [pc, #464]	@ (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a73      	ldr	r2, [pc, #460]	@ (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fda:	f7ff f87b 	bl	80020d4 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7ff f877 	bl	80020d4 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e10c      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	4b6a      	ldr	r3, [pc, #424]	@ (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x2ea>
 8003008:	4b64      	ldr	r3, [pc, #400]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	4a63      	ldr	r2, [pc, #396]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	@ 0x70
 8003014:	e01c      	b.n	8003050 <HAL_RCC_OscConfig+0x324>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b05      	cmp	r3, #5
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x30c>
 800301e:	4b5f      	ldr	r3, [pc, #380]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003022:	4a5e      	ldr	r2, [pc, #376]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	6713      	str	r3, [r2, #112]	@ 0x70
 800302a:	4b5c      	ldr	r3, [pc, #368]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302e:	4a5b      	ldr	r2, [pc, #364]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6713      	str	r3, [r2, #112]	@ 0x70
 8003036:	e00b      	b.n	8003050 <HAL_RCC_OscConfig+0x324>
 8003038:	4b58      	ldr	r3, [pc, #352]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303c:	4a57      	ldr	r2, [pc, #348]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	@ 0x70
 8003044:	4b55      	ldr	r3, [pc, #340]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003048:	4a54      	ldr	r2, [pc, #336]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 0304 	bic.w	r3, r3, #4
 800304e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d015      	beq.n	8003084 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7ff f83c 	bl	80020d4 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7ff f838 	bl	80020d4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e0cb      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	4b49      	ldr	r3, [pc, #292]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ee      	beq.n	8003060 <HAL_RCC_OscConfig+0x334>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003084:	f7ff f826 	bl	80020d4 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7ff f822 	bl	80020d4 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0b5      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a2:	4b3e      	ldr	r3, [pc, #248]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ee      	bne.n	800308c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b4:	4b39      	ldr	r3, [pc, #228]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	4a38      	ldr	r2, [pc, #224]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 80030ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a1 	beq.w	800320c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ca:	4b34      	ldr	r3, [pc, #208]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d05c      	beq.n	8003190 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d141      	bne.n	8003162 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b31      	ldr	r3, [pc, #196]	@ (80031a4 <HAL_RCC_OscConfig+0x478>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fe fff6 	bl	80020d4 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fe fff2 	bl	80020d4 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e087      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b27      	ldr	r3, [pc, #156]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	019b      	lsls	r3, r3, #6
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	3b01      	subs	r3, #1
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	491b      	ldr	r1, [pc, #108]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003134:	4b1b      	ldr	r3, [pc, #108]	@ (80031a4 <HAL_RCC_OscConfig+0x478>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe ffcb 	bl	80020d4 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003142:	f7fe ffc7 	bl	80020d4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e05c      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003154:	4b11      	ldr	r3, [pc, #68]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x416>
 8003160:	e054      	b.n	800320c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <HAL_RCC_OscConfig+0x478>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe ffb4 	bl	80020d4 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe ffb0 	bl	80020d4 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e045      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x444>
 800318e:	e03d      	b.n	800320c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e038      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
 800319c:	40023800 	.word	0x40023800
 80031a0:	40007000 	.word	0x40007000
 80031a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003218 <HAL_RCC_OscConfig+0x4ec>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d028      	beq.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d121      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d11a      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d111      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	3b01      	subs	r3, #1
 80031f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800

0800321c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0cc      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003230:	4b68      	ldr	r3, [pc, #416]	@ (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d90c      	bls.n	8003258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b65      	ldr	r3, [pc, #404]	@ (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b63      	ldr	r3, [pc, #396]	@ (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0b8      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d020      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003270:	4b59      	ldr	r3, [pc, #356]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a58      	ldr	r2, [pc, #352]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800327a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003288:	4b53      	ldr	r3, [pc, #332]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a52      	ldr	r2, [pc, #328]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003294:	4b50      	ldr	r3, [pc, #320]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	494d      	ldr	r1, [pc, #308]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d044      	beq.n	800333c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	4b47      	ldr	r3, [pc, #284]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d119      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e07f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d003      	beq.n	80032da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032da:	4b3f      	ldr	r3, [pc, #252]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e06f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ea:	4b3b      	ldr	r3, [pc, #236]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e067      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fa:	4b37      	ldr	r3, [pc, #220]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4934      	ldr	r1, [pc, #208]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800330c:	f7fe fee2 	bl	80020d4 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	e00a      	b.n	800332a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7fe fede 	bl	80020d4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e04f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	4b2b      	ldr	r3, [pc, #172]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 020c 	and.w	r2, r3, #12
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	429a      	cmp	r2, r3
 800333a:	d1eb      	bne.n	8003314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b25      	ldr	r3, [pc, #148]	@ (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d20c      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b22      	ldr	r3, [pc, #136]	@ (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b20      	ldr	r3, [pc, #128]	@ (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e032      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	4b19      	ldr	r3, [pc, #100]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4916      	ldr	r1, [pc, #88]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338e:	4b12      	ldr	r3, [pc, #72]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	490e      	ldr	r1, [pc, #56]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033a2:	f000 f821 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 80033a6:	4602      	mov	r2, r0
 80033a8:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	490a      	ldr	r1, [pc, #40]	@ (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	5ccb      	ldrb	r3, [r1, r3]
 80033b6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ba:	4a09      	ldr	r2, [pc, #36]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033be:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fce0 	bl	8001d88 <HAL_InitTick>

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40023c00 	.word	0x40023c00
 80033d8:	40023800 	.word	0x40023800
 80033dc:	080094c0 	.word	0x080094c0
 80033e0:	20000004 	.word	0x20000004
 80033e4:	20000008 	.word	0x20000008

080033e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ec:	b090      	sub	sp, #64	@ 0x40
 80033ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003400:	4b59      	ldr	r3, [pc, #356]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x180>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b08      	cmp	r3, #8
 800340a:	d00d      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x40>
 800340c:	2b08      	cmp	r3, #8
 800340e:	f200 80a1 	bhi.w	8003554 <HAL_RCC_GetSysClockFreq+0x16c>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x34>
 8003416:	2b04      	cmp	r3, #4
 8003418:	d003      	beq.n	8003422 <HAL_RCC_GetSysClockFreq+0x3a>
 800341a:	e09b      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b53      	ldr	r3, [pc, #332]	@ (800356c <HAL_RCC_GetSysClockFreq+0x184>)
 800341e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003420:	e09b      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003422:	4b53      	ldr	r3, [pc, #332]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x188>)
 8003424:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003426:	e098      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003428:	4b4f      	ldr	r3, [pc, #316]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x180>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003430:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003432:	4b4d      	ldr	r3, [pc, #308]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x180>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d028      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343e:	4b4a      	ldr	r3, [pc, #296]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x180>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	2200      	movs	r2, #0
 8003446:	623b      	str	r3, [r7, #32]
 8003448:	627a      	str	r2, [r7, #36]	@ 0x24
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003450:	2100      	movs	r1, #0
 8003452:	4b47      	ldr	r3, [pc, #284]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x188>)
 8003454:	fb03 f201 	mul.w	r2, r3, r1
 8003458:	2300      	movs	r3, #0
 800345a:	fb00 f303 	mul.w	r3, r0, r3
 800345e:	4413      	add	r3, r2
 8003460:	4a43      	ldr	r2, [pc, #268]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x188>)
 8003462:	fba0 1202 	umull	r1, r2, r0, r2
 8003466:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003468:	460a      	mov	r2, r1
 800346a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800346c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800346e:	4413      	add	r3, r2
 8003470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003474:	2200      	movs	r2, #0
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	61fa      	str	r2, [r7, #28]
 800347a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800347e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003482:	f7fd faeb 	bl	8000a5c <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4613      	mov	r3, r2
 800348c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800348e:	e053      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003490:	4b35      	ldr	r3, [pc, #212]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x180>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	099b      	lsrs	r3, r3, #6
 8003496:	2200      	movs	r2, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	617a      	str	r2, [r7, #20]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034a2:	f04f 0b00 	mov.w	fp, #0
 80034a6:	4652      	mov	r2, sl
 80034a8:	465b      	mov	r3, fp
 80034aa:	f04f 0000 	mov.w	r0, #0
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	0159      	lsls	r1, r3, #5
 80034b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b8:	0150      	lsls	r0, r2, #5
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	ebb2 080a 	subs.w	r8, r2, sl
 80034c2:	eb63 090b 	sbc.w	r9, r3, fp
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034da:	ebb2 0408 	subs.w	r4, r2, r8
 80034de:	eb63 0509 	sbc.w	r5, r3, r9
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	00eb      	lsls	r3, r5, #3
 80034ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034f0:	00e2      	lsls	r2, r4, #3
 80034f2:	4614      	mov	r4, r2
 80034f4:	461d      	mov	r5, r3
 80034f6:	eb14 030a 	adds.w	r3, r4, sl
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	eb45 030b 	adc.w	r3, r5, fp
 8003500:	607b      	str	r3, [r7, #4]
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800350e:	4629      	mov	r1, r5
 8003510:	028b      	lsls	r3, r1, #10
 8003512:	4621      	mov	r1, r4
 8003514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003518:	4621      	mov	r1, r4
 800351a:	028a      	lsls	r2, r1, #10
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003522:	2200      	movs	r2, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	60fa      	str	r2, [r7, #12]
 8003528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800352c:	f7fd fa96 	bl	8000a5c <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4613      	mov	r3, r2
 8003536:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003538:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x180>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	0c1b      	lsrs	r3, r3, #16
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	3301      	adds	r3, #1
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003548:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003552:	e002      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <HAL_RCC_GetSysClockFreq+0x184>)
 8003556:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800355a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800355c:	4618      	mov	r0, r3
 800355e:	3740      	adds	r7, #64	@ 0x40
 8003560:	46bd      	mov	sp, r7
 8003562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800
 800356c:	00f42400 	.word	0x00f42400
 8003570:	00b71b00 	.word	0x00b71b00

08003574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003578:	4b03      	ldr	r3, [pc, #12]	@ (8003588 <HAL_RCC_GetHCLKFreq+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000004 	.word	0x20000004

0800358c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003590:	f7ff fff0 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	0a9b      	lsrs	r3, r3, #10
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	@ (80035b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	080094d0 	.word	0x080094d0

080035b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035b8:	f7ff ffdc 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0b5b      	lsrs	r3, r3, #13
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4903      	ldr	r1, [pc, #12]	@ (80035d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40023800 	.word	0x40023800
 80035d8:	080094d0 	.word	0x080094d0

080035dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	220f      	movs	r2, #15
 80035ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035ec:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <HAL_RCC_GetClockConfig+0x5c>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0203 	and.w	r2, r3, #3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003638 <HAL_RCC_GetClockConfig+0x5c>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003604:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <HAL_RCC_GetClockConfig+0x5c>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003610:	4b09      	ldr	r3, [pc, #36]	@ (8003638 <HAL_RCC_GetClockConfig+0x5c>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	08db      	lsrs	r3, r3, #3
 8003616:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800361e:	4b07      	ldr	r3, [pc, #28]	@ (800363c <HAL_RCC_GetClockConfig+0x60>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0207 	and.w	r2, r3, #7
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	601a      	str	r2, [r3, #0]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800
 800363c:	40023c00 	.word	0x40023c00

08003640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e041      	b.n	80036d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f839 	bl	80036de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4610      	mov	r0, r2
 8003680:	f000 fd76 	bl	8004170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d001      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e04e      	b.n	80037aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a23      	ldr	r2, [pc, #140]	@ (80037b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d022      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003736:	d01d      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1f      	ldr	r2, [pc, #124]	@ (80037bc <HAL_TIM_Base_Start_IT+0xc8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d018      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1e      	ldr	r2, [pc, #120]	@ (80037c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1c      	ldr	r2, [pc, #112]	@ (80037c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1b      	ldr	r2, [pc, #108]	@ (80037c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a19      	ldr	r2, [pc, #100]	@ (80037cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x80>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a18      	ldr	r2, [pc, #96]	@ (80037d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d111      	bne.n	8003798 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b06      	cmp	r3, #6
 8003784:	d010      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003796:	e007      	b.n	80037a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40010400 	.word	0x40010400
 80037cc:	40014000 	.word	0x40014000
 80037d0:	40001800 	.word	0x40001800

080037d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e041      	b.n	800386a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fe f9ee 	bl	8001bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f000 fcac 	bl	8004170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d109      	bne.n	80038a0 <HAL_TIM_PWM_Start_DMA+0x2c>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e022      	b.n	80038e6 <HAL_TIM_PWM_Start_DMA+0x72>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d109      	bne.n	80038ba <HAL_TIM_PWM_Start_DMA+0x46>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	bf0c      	ite	eq
 80038b2:	2301      	moveq	r3, #1
 80038b4:	2300      	movne	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	e015      	b.n	80038e6 <HAL_TIM_PWM_Start_DMA+0x72>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d109      	bne.n	80038d4 <HAL_TIM_PWM_Start_DMA+0x60>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	e008      	b.n	80038e6 <HAL_TIM_PWM_Start_DMA+0x72>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
 80038ec:	e171      	b.n	8003bd2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <HAL_TIM_PWM_Start_DMA+0x94>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	e022      	b.n	800394e <HAL_TIM_PWM_Start_DMA+0xda>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b04      	cmp	r3, #4
 800390c:	d109      	bne.n	8003922 <HAL_TIM_PWM_Start_DMA+0xae>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	bf0c      	ite	eq
 800391a:	2301      	moveq	r3, #1
 800391c:	2300      	movne	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	e015      	b.n	800394e <HAL_TIM_PWM_Start_DMA+0xda>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d109      	bne.n	800393c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e008      	b.n	800394e <HAL_TIM_PWM_Start_DMA+0xda>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d024      	beq.n	800399c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_TIM_PWM_Start_DMA+0xea>
 8003958:	887b      	ldrh	r3, [r7, #2]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e137      	b.n	8003bd2 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003970:	e016      	b.n	80039a0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b04      	cmp	r3, #4
 8003976:	d104      	bne.n	8003982 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d104      	bne.n	8003992 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003990:	e006      	b.n	80039a0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2202      	movs	r2, #2
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800399a:	e001      	b.n	80039a0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e118      	b.n	8003bd2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b0c      	cmp	r3, #12
 80039a4:	f200 80ae 	bhi.w	8003b04 <HAL_TIM_PWM_Start_DMA+0x290>
 80039a8:	a201      	add	r2, pc, #4	@ (adr r2, 80039b0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039e5 	.word	0x080039e5
 80039b4:	08003b05 	.word	0x08003b05
 80039b8:	08003b05 	.word	0x08003b05
 80039bc:	08003b05 	.word	0x08003b05
 80039c0:	08003a2d 	.word	0x08003a2d
 80039c4:	08003b05 	.word	0x08003b05
 80039c8:	08003b05 	.word	0x08003b05
 80039cc:	08003b05 	.word	0x08003b05
 80039d0:	08003a75 	.word	0x08003a75
 80039d4:	08003b05 	.word	0x08003b05
 80039d8:	08003b05 	.word	0x08003b05
 80039dc:	08003b05 	.word	0x08003b05
 80039e0:	08003abd 	.word	0x08003abd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	4a7c      	ldr	r2, [pc, #496]	@ (8003bdc <HAL_TIM_PWM_Start_DMA+0x368>)
 80039ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	4a7b      	ldr	r2, [pc, #492]	@ (8003be0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80039f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	4a7a      	ldr	r2, [pc, #488]	@ (8003be4 <HAL_TIM_PWM_Start_DMA+0x370>)
 80039fa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3334      	adds	r3, #52	@ 0x34
 8003a08:	461a      	mov	r2, r3
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	f7fe fcfe 	bl	800240c <HAL_DMA_Start_IT>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0db      	b.n	8003bd2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a28:	60da      	str	r2, [r3, #12]
      break;
 8003a2a:	e06e      	b.n	8003b0a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	4a6a      	ldr	r2, [pc, #424]	@ (8003bdc <HAL_TIM_PWM_Start_DMA+0x368>)
 8003a32:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	4a69      	ldr	r2, [pc, #420]	@ (8003be0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	4a68      	ldr	r2, [pc, #416]	@ (8003be4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003a42:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3338      	adds	r3, #56	@ 0x38
 8003a50:	461a      	mov	r2, r3
 8003a52:	887b      	ldrh	r3, [r7, #2]
 8003a54:	f7fe fcda 	bl	800240c <HAL_DMA_Start_IT>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e0b7      	b.n	8003bd2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a70:	60da      	str	r2, [r3, #12]
      break;
 8003a72:	e04a      	b.n	8003b0a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	4a58      	ldr	r2, [pc, #352]	@ (8003bdc <HAL_TIM_PWM_Start_DMA+0x368>)
 8003a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	4a57      	ldr	r2, [pc, #348]	@ (8003be0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003a82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	4a56      	ldr	r2, [pc, #344]	@ (8003be4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003a8a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	333c      	adds	r3, #60	@ 0x3c
 8003a98:	461a      	mov	r2, r3
 8003a9a:	887b      	ldrh	r3, [r7, #2]
 8003a9c:	f7fe fcb6 	bl	800240c <HAL_DMA_Start_IT>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e093      	b.n	8003bd2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ab8:	60da      	str	r2, [r3, #12]
      break;
 8003aba:	e026      	b.n	8003b0a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac0:	4a46      	ldr	r2, [pc, #280]	@ (8003bdc <HAL_TIM_PWM_Start_DMA+0x368>)
 8003ac2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac8:	4a45      	ldr	r2, [pc, #276]	@ (8003be0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003aca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad0:	4a44      	ldr	r2, [pc, #272]	@ (8003be4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003ad2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3340      	adds	r3, #64	@ 0x40
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	887b      	ldrh	r3, [r7, #2]
 8003ae4:	f7fe fc92 	bl	800240c <HAL_DMA_Start_IT>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e06f      	b.n	8003bd2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b00:	60da      	str	r2, [r3, #12]
      break;
 8003b02:	e002      	b.n	8003b0a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	75fb      	strb	r3, [r7, #23]
      break;
 8003b08:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d15f      	bne.n	8003bd0 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2201      	movs	r2, #1
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fd7f 	bl	800461c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a31      	ldr	r2, [pc, #196]	@ (8003be8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8003bec <HAL_TIM_PWM_Start_DMA+0x378>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b4a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a25      	ldr	r2, [pc, #148]	@ (8003be8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d022      	beq.n	8003b9c <HAL_TIM_PWM_Start_DMA+0x328>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5e:	d01d      	beq.n	8003b9c <HAL_TIM_PWM_Start_DMA+0x328>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a22      	ldr	r2, [pc, #136]	@ (8003bf0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d018      	beq.n	8003b9c <HAL_TIM_PWM_Start_DMA+0x328>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a21      	ldr	r2, [pc, #132]	@ (8003bf4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d013      	beq.n	8003b9c <HAL_TIM_PWM_Start_DMA+0x328>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00e      	beq.n	8003b9c <HAL_TIM_PWM_Start_DMA+0x328>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1a      	ldr	r2, [pc, #104]	@ (8003bec <HAL_TIM_PWM_Start_DMA+0x378>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d009      	beq.n	8003b9c <HAL_TIM_PWM_Start_DMA+0x328>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bfc <HAL_TIM_PWM_Start_DMA+0x388>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_TIM_PWM_Start_DMA+0x328>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1a      	ldr	r2, [pc, #104]	@ (8003c00 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d111      	bne.n	8003bc0 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b06      	cmp	r3, #6
 8003bac:	d010      	beq.n	8003bd0 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbe:	e007      	b.n	8003bd0 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	0800405f 	.word	0x0800405f
 8003be0:	08004107 	.word	0x08004107
 8003be4:	08003fcd 	.word	0x08003fcd
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40010400 	.word	0x40010400
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800
 8003bf8:	40000c00 	.word	0x40000c00
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40001800 	.word	0x40001800

08003c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d020      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01b      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0202 	mvn.w	r2, #2
 8003c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f994 	bl	8003f7c <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f986 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7fd fcaf 	bl	80015c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d020      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01b      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0204 	mvn.w	r2, #4
 8003c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f96e 	bl	8003f7c <HAL_TIM_IC_CaptureCallback>
 8003ca0:	e005      	b.n	8003cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f960 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7fd fc89 	bl	80015c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d020      	beq.n	8003d00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01b      	beq.n	8003d00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0208 	mvn.w	r2, #8
 8003cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f948 	bl	8003f7c <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f93a 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fd fc63 	bl	80015c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d020      	beq.n	8003d4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01b      	beq.n	8003d4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0210 	mvn.w	r2, #16
 8003d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2208      	movs	r2, #8
 8003d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f922 	bl	8003f7c <HAL_TIM_IC_CaptureCallback>
 8003d38:	e005      	b.n	8003d46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f914 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fd fc3d 	bl	80015c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00c      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0201 	mvn.w	r2, #1
 8003d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd fef2 	bl	8001b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fcf0 	bl	8004774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8f6 	bl	8003fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00c      	beq.n	8003ddc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0220 	mvn.w	r2, #32
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fcc2 	bl	8004760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ddc:	bf00      	nop
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e0ae      	b.n	8003f60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	f200 809f 	bhi.w	8003f50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e12:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003e4d 	.word	0x08003e4d
 8003e1c:	08003f51 	.word	0x08003f51
 8003e20:	08003f51 	.word	0x08003f51
 8003e24:	08003f51 	.word	0x08003f51
 8003e28:	08003e8d 	.word	0x08003e8d
 8003e2c:	08003f51 	.word	0x08003f51
 8003e30:	08003f51 	.word	0x08003f51
 8003e34:	08003f51 	.word	0x08003f51
 8003e38:	08003ecf 	.word	0x08003ecf
 8003e3c:	08003f51 	.word	0x08003f51
 8003e40:	08003f51 	.word	0x08003f51
 8003e44:	08003f51 	.word	0x08003f51
 8003e48:	08003f0f 	.word	0x08003f0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fa32 	bl	80042bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0208 	orr.w	r2, r2, #8
 8003e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0204 	bic.w	r2, r2, #4
 8003e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6999      	ldr	r1, [r3, #24]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	619a      	str	r2, [r3, #24]
      break;
 8003e8a:	e064      	b.n	8003f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fa82 	bl	800439c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6999      	ldr	r1, [r3, #24]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	021a      	lsls	r2, r3, #8
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	619a      	str	r2, [r3, #24]
      break;
 8003ecc:	e043      	b.n	8003f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fad7 	bl	8004488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0208 	orr.w	r2, r2, #8
 8003ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0204 	bic.w	r2, r2, #4
 8003ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69d9      	ldr	r1, [r3, #28]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	61da      	str	r2, [r3, #28]
      break;
 8003f0c:	e023      	b.n	8003f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fb2b 	bl	8004570 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69da      	ldr	r2, [r3, #28]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69d9      	ldr	r1, [r3, #28]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	021a      	lsls	r2, r3, #8
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	61da      	str	r2, [r3, #28]
      break;
 8003f4e:	e002      	b.n	8003f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	75fb      	strb	r3, [r7, #23]
      break;
 8003f54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d107      	bne.n	8003ff4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ff2:	e02a      	b.n	800404a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d107      	bne.n	800400e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2202      	movs	r2, #2
 8004002:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800400c:	e01d      	b.n	800404a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d107      	bne.n	8004028 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2204      	movs	r2, #4
 800401c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004026:	e010      	b.n	800404a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	d107      	bne.n	8004042 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2208      	movs	r2, #8
 8004036:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004040:	e003      	b.n	800404a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f7ff ffb4 	bl	8003fb8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	771a      	strb	r2, [r3, #28]
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d10b      	bne.n	800408e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d136      	bne.n	80040f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800408c:	e031      	b.n	80040f2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	429a      	cmp	r2, r3
 8004096:	d10b      	bne.n	80040b0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2202      	movs	r2, #2
 800409c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d125      	bne.n	80040f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040ae:	e020      	b.n	80040f2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d10b      	bne.n	80040d2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2204      	movs	r2, #4
 80040be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d114      	bne.n	80040f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040d0:	e00f      	b.n	80040f2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d10a      	bne.n	80040f2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2208      	movs	r2, #8
 80040e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f7fd fa64 	bl	80015c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	771a      	strb	r2, [r3, #28]
}
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004112:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d103      	bne.n	8004126 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	771a      	strb	r2, [r3, #28]
 8004124:	e019      	b.n	800415a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d103      	bne.n	8004138 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2202      	movs	r2, #2
 8004134:	771a      	strb	r2, [r3, #28]
 8004136:	e010      	b.n	800415a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	429a      	cmp	r2, r3
 8004140:	d103      	bne.n	800414a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2204      	movs	r2, #4
 8004146:	771a      	strb	r2, [r3, #28]
 8004148:	e007      	b.n	800415a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d102      	bne.n	800415a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2208      	movs	r2, #8
 8004158:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f7ff ff18 	bl	8003f90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	771a      	strb	r2, [r3, #28]
}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a43      	ldr	r2, [pc, #268]	@ (8004290 <TIM_Base_SetConfig+0x120>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d013      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418e:	d00f      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a40      	ldr	r2, [pc, #256]	@ (8004294 <TIM_Base_SetConfig+0x124>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00b      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a3f      	ldr	r2, [pc, #252]	@ (8004298 <TIM_Base_SetConfig+0x128>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a3e      	ldr	r2, [pc, #248]	@ (800429c <TIM_Base_SetConfig+0x12c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a3d      	ldr	r2, [pc, #244]	@ (80042a0 <TIM_Base_SetConfig+0x130>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d108      	bne.n	80041c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a32      	ldr	r2, [pc, #200]	@ (8004290 <TIM_Base_SetConfig+0x120>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d02b      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d0:	d027      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004294 <TIM_Base_SetConfig+0x124>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d023      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004298 <TIM_Base_SetConfig+0x128>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01f      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a2d      	ldr	r2, [pc, #180]	@ (800429c <TIM_Base_SetConfig+0x12c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01b      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a2c      	ldr	r2, [pc, #176]	@ (80042a0 <TIM_Base_SetConfig+0x130>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d017      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a2b      	ldr	r2, [pc, #172]	@ (80042a4 <TIM_Base_SetConfig+0x134>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a2a      	ldr	r2, [pc, #168]	@ (80042a8 <TIM_Base_SetConfig+0x138>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00f      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a29      	ldr	r2, [pc, #164]	@ (80042ac <TIM_Base_SetConfig+0x13c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00b      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a28      	ldr	r2, [pc, #160]	@ (80042b0 <TIM_Base_SetConfig+0x140>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a27      	ldr	r2, [pc, #156]	@ (80042b4 <TIM_Base_SetConfig+0x144>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a26      	ldr	r2, [pc, #152]	@ (80042b8 <TIM_Base_SetConfig+0x148>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d108      	bne.n	8004234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a0e      	ldr	r2, [pc, #56]	@ (8004290 <TIM_Base_SetConfig+0x120>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_Base_SetConfig+0xf2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a10      	ldr	r2, [pc, #64]	@ (80042a0 <TIM_Base_SetConfig+0x130>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d103      	bne.n	800426a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f043 0204 	orr.w	r2, r3, #4
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	601a      	str	r2, [r3, #0]
}
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40010000 	.word	0x40010000
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40010400 	.word	0x40010400
 80042a4:	40014000 	.word	0x40014000
 80042a8:	40014400 	.word	0x40014400
 80042ac:	40014800 	.word	0x40014800
 80042b0:	40001800 	.word	0x40001800
 80042b4:	40001c00 	.word	0x40001c00
 80042b8:	40002000 	.word	0x40002000

080042bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	f023 0201 	bic.w	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0303 	bic.w	r3, r3, #3
 80042f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f023 0302 	bic.w	r3, r3, #2
 8004304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a20      	ldr	r2, [pc, #128]	@ (8004394 <TIM_OC1_SetConfig+0xd8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_OC1_SetConfig+0x64>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a1f      	ldr	r2, [pc, #124]	@ (8004398 <TIM_OC1_SetConfig+0xdc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d10c      	bne.n	800433a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0308 	bic.w	r3, r3, #8
 8004326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f023 0304 	bic.w	r3, r3, #4
 8004338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a15      	ldr	r2, [pc, #84]	@ (8004394 <TIM_OC1_SetConfig+0xd8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_OC1_SetConfig+0x8e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a14      	ldr	r2, [pc, #80]	@ (8004398 <TIM_OC1_SetConfig+0xdc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d111      	bne.n	800436e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	621a      	str	r2, [r3, #32]
}
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40010000 	.word	0x40010000
 8004398:	40010400 	.word	0x40010400

0800439c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f023 0210 	bic.w	r2, r3, #16
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 0320 	bic.w	r3, r3, #32
 80043e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a22      	ldr	r2, [pc, #136]	@ (8004480 <TIM_OC2_SetConfig+0xe4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_OC2_SetConfig+0x68>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a21      	ldr	r2, [pc, #132]	@ (8004484 <TIM_OC2_SetConfig+0xe8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d10d      	bne.n	8004420 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800440a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800441e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a17      	ldr	r2, [pc, #92]	@ (8004480 <TIM_OC2_SetConfig+0xe4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_OC2_SetConfig+0x94>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a16      	ldr	r2, [pc, #88]	@ (8004484 <TIM_OC2_SetConfig+0xe8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d113      	bne.n	8004458 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004436:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800443e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	621a      	str	r2, [r3, #32]
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40010000 	.word	0x40010000
 8004484:	40010400 	.word	0x40010400

08004488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a21      	ldr	r2, [pc, #132]	@ (8004568 <TIM_OC3_SetConfig+0xe0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d003      	beq.n	80044ee <TIM_OC3_SetConfig+0x66>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a20      	ldr	r2, [pc, #128]	@ (800456c <TIM_OC3_SetConfig+0xe4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d10d      	bne.n	800450a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a16      	ldr	r2, [pc, #88]	@ (8004568 <TIM_OC3_SetConfig+0xe0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <TIM_OC3_SetConfig+0x92>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a15      	ldr	r2, [pc, #84]	@ (800456c <TIM_OC3_SetConfig+0xe4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d113      	bne.n	8004542 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	621a      	str	r2, [r3, #32]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40010000 	.word	0x40010000
 800456c:	40010400 	.word	0x40010400

08004570 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800459e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	021b      	lsls	r3, r3, #8
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	031b      	lsls	r3, r3, #12
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a12      	ldr	r2, [pc, #72]	@ (8004614 <TIM_OC4_SetConfig+0xa4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d003      	beq.n	80045d8 <TIM_OC4_SetConfig+0x68>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a11      	ldr	r2, [pc, #68]	@ (8004618 <TIM_OC4_SetConfig+0xa8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d109      	bne.n	80045ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	019b      	lsls	r3, r3, #6
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000
 8004618:	40010400 	.word	0x40010400

0800461c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	2201      	movs	r2, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1a      	ldr	r2, [r3, #32]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	43db      	mvns	r3, r3
 800463e:	401a      	ands	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a1a      	ldr	r2, [r3, #32]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800467c:	2302      	movs	r3, #2
 800467e:	e05a      	b.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a21      	ldr	r2, [pc, #132]	@ (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d022      	beq.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046cc:	d01d      	beq.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d018      	beq.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1b      	ldr	r2, [pc, #108]	@ (800474c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00e      	beq.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a18      	ldr	r2, [pc, #96]	@ (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d009      	beq.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a17      	ldr	r2, [pc, #92]	@ (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d004      	beq.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a15      	ldr	r2, [pc, #84]	@ (800475c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10c      	bne.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	4313      	orrs	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40010000 	.word	0x40010000
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40010400 	.word	0x40010400
 8004758:	40014000 	.word	0x40014000
 800475c:	40001800 	.word	0x40001800

08004760 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e042      	b.n	8004820 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fd faa2 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2224      	movs	r2, #36	@ 0x24
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f973 	bl	8004ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	@ 0x28
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b20      	cmp	r3, #32
 8004846:	d175      	bne.n	8004934 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_UART_Transmit+0x2c>
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e06e      	b.n	8004936 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2221      	movs	r2, #33	@ 0x21
 8004862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004866:	f7fd fc35 	bl	80020d4 <HAL_GetTick>
 800486a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	88fa      	ldrh	r2, [r7, #6]
 8004876:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004880:	d108      	bne.n	8004894 <HAL_UART_Transmit+0x6c>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	e003      	b.n	800489c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800489c:	e02e      	b.n	80048fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2200      	movs	r2, #0
 80048a6:	2180      	movs	r1, #128	@ 0x80
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f848 	bl	800493e <UART_WaitOnFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e03a      	b.n	8004936 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10b      	bne.n	80048de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	3302      	adds	r3, #2
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	e007      	b.n	80048ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	3301      	adds	r3, #1
 80048ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1cb      	bne.n	800489e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2200      	movs	r2, #0
 800490e:	2140      	movs	r1, #64	@ 0x40
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f814 	bl	800493e <UART_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e006      	b.n	8004936 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	e000      	b.n	8004936 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b086      	sub	sp, #24
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800494e:	e03b      	b.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	d037      	beq.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004958:	f7fd fbbc 	bl	80020d4 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	429a      	cmp	r2, r3
 8004966:	d302      	bcc.n	800496e <UART_WaitOnFlagUntilTimeout+0x30>
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e03a      	b.n	80049e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d023      	beq.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b80      	cmp	r3, #128	@ 0x80
 8004984:	d020      	beq.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b40      	cmp	r3, #64	@ 0x40
 800498a:	d01d      	beq.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b08      	cmp	r3, #8
 8004998:	d116      	bne.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f81d 	bl	80049f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2208      	movs	r2, #8
 80049ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e00f      	b.n	80049e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4013      	ands	r3, r2
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d0b4      	beq.n	8004950 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b095      	sub	sp, #84	@ 0x54
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a02:	e853 3f00 	ldrex	r3, [r3]
 8004a06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a18:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a20:	e841 2300 	strex	r3, r2, [r1]
 8004a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e5      	bne.n	80049f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3314      	adds	r3, #20
 8004a32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3314      	adds	r3, #20
 8004a4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e5      	bne.n	8004a2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d119      	bne.n	8004a9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	330c      	adds	r3, #12
 8004a6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f023 0310 	bic.w	r3, r3, #16
 8004a7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a88:	61ba      	str	r2, [r7, #24]
 8004a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6979      	ldr	r1, [r7, #20]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	613b      	str	r3, [r7, #16]
   return(result);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e5      	bne.n	8004a68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004aaa:	bf00      	nop
 8004aac:	3754      	adds	r7, #84	@ 0x54
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004abc:	b0c0      	sub	sp, #256	@ 0x100
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	68d9      	ldr	r1, [r3, #12]
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	ea40 0301 	orr.w	r3, r0, r1
 8004ae0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b10:	f021 010c 	bic.w	r1, r1, #12
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b32:	6999      	ldr	r1, [r3, #24]
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	ea40 0301 	orr.w	r3, r0, r1
 8004b3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b8f      	ldr	r3, [pc, #572]	@ (8004d84 <UART_SetConfig+0x2cc>)
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d005      	beq.n	8004b58 <UART_SetConfig+0xa0>
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4b8d      	ldr	r3, [pc, #564]	@ (8004d88 <UART_SetConfig+0x2d0>)
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d104      	bne.n	8004b62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b58:	f7fe fd2c 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8004b5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b60:	e003      	b.n	8004b6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b62:	f7fe fd13 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8004b66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b74:	f040 810c 	bne.w	8004d90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	462b      	mov	r3, r5
 8004b8e:	1891      	adds	r1, r2, r2
 8004b90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b92:	415b      	adcs	r3, r3
 8004b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	eb12 0801 	adds.w	r8, r2, r1
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	eb43 0901 	adc.w	r9, r3, r1
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bba:	4690      	mov	r8, r2
 8004bbc:	4699      	mov	r9, r3
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	eb18 0303 	adds.w	r3, r8, r3
 8004bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bc8:	462b      	mov	r3, r5
 8004bca:	eb49 0303 	adc.w	r3, r9, r3
 8004bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004be6:	460b      	mov	r3, r1
 8004be8:	18db      	adds	r3, r3, r3
 8004bea:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bec:	4613      	mov	r3, r2
 8004bee:	eb42 0303 	adc.w	r3, r2, r3
 8004bf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004bf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004bfc:	f7fb ff2e 	bl	8000a5c <__aeabi_uldivmod>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4b61      	ldr	r3, [pc, #388]	@ (8004d8c <UART_SetConfig+0x2d4>)
 8004c06:	fba3 2302 	umull	r2, r3, r3, r2
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	011c      	lsls	r4, r3, #4
 8004c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c20:	4642      	mov	r2, r8
 8004c22:	464b      	mov	r3, r9
 8004c24:	1891      	adds	r1, r2, r2
 8004c26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c28:	415b      	adcs	r3, r3
 8004c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c30:	4641      	mov	r1, r8
 8004c32:	eb12 0a01 	adds.w	sl, r2, r1
 8004c36:	4649      	mov	r1, r9
 8004c38:	eb43 0b01 	adc.w	fp, r3, r1
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c50:	4692      	mov	sl, r2
 8004c52:	469b      	mov	fp, r3
 8004c54:	4643      	mov	r3, r8
 8004c56:	eb1a 0303 	adds.w	r3, sl, r3
 8004c5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c5e:	464b      	mov	r3, r9
 8004c60:	eb4b 0303 	adc.w	r3, fp, r3
 8004c64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	18db      	adds	r3, r3, r3
 8004c80:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c82:	4613      	mov	r3, r2
 8004c84:	eb42 0303 	adc.w	r3, r2, r3
 8004c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c92:	f7fb fee3 	bl	8000a5c <__aeabi_uldivmod>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d8c <UART_SetConfig+0x2d4>)
 8004c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	2264      	movs	r2, #100	@ 0x64
 8004ca6:	fb02 f303 	mul.w	r3, r2, r3
 8004caa:	1acb      	subs	r3, r1, r3
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cb2:	4b36      	ldr	r3, [pc, #216]	@ (8004d8c <UART_SetConfig+0x2d4>)
 8004cb4:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004cc0:	441c      	add	r4, r3
 8004cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ccc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004cd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004cd4:	4642      	mov	r2, r8
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	1891      	adds	r1, r2, r2
 8004cda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cdc:	415b      	adcs	r3, r3
 8004cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ce4:	4641      	mov	r1, r8
 8004ce6:	1851      	adds	r1, r2, r1
 8004ce8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cea:	4649      	mov	r1, r9
 8004cec:	414b      	adcs	r3, r1
 8004cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004cfc:	4659      	mov	r1, fp
 8004cfe:	00cb      	lsls	r3, r1, #3
 8004d00:	4651      	mov	r1, sl
 8004d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d06:	4651      	mov	r1, sl
 8004d08:	00ca      	lsls	r2, r1, #3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4603      	mov	r3, r0
 8004d10:	4642      	mov	r2, r8
 8004d12:	189b      	adds	r3, r3, r2
 8004d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d18:	464b      	mov	r3, r9
 8004d1a:	460a      	mov	r2, r1
 8004d1c:	eb42 0303 	adc.w	r3, r2, r3
 8004d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d38:	460b      	mov	r3, r1
 8004d3a:	18db      	adds	r3, r3, r3
 8004d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d3e:	4613      	mov	r3, r2
 8004d40:	eb42 0303 	adc.w	r3, r2, r3
 8004d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d4e:	f7fb fe85 	bl	8000a5c <__aeabi_uldivmod>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <UART_SetConfig+0x2d4>)
 8004d58:	fba3 1302 	umull	r1, r3, r3, r2
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	2164      	movs	r1, #100	@ 0x64
 8004d60:	fb01 f303 	mul.w	r3, r1, r3
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	3332      	adds	r3, #50	@ 0x32
 8004d6a:	4a08      	ldr	r2, [pc, #32]	@ (8004d8c <UART_SetConfig+0x2d4>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	f003 0207 	and.w	r2, r3, #7
 8004d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4422      	add	r2, r4
 8004d7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d80:	e106      	b.n	8004f90 <UART_SetConfig+0x4d8>
 8004d82:	bf00      	nop
 8004d84:	40011000 	.word	0x40011000
 8004d88:	40011400 	.word	0x40011400
 8004d8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004da2:	4642      	mov	r2, r8
 8004da4:	464b      	mov	r3, r9
 8004da6:	1891      	adds	r1, r2, r2
 8004da8:	6239      	str	r1, [r7, #32]
 8004daa:	415b      	adcs	r3, r3
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004db2:	4641      	mov	r1, r8
 8004db4:	1854      	adds	r4, r2, r1
 8004db6:	4649      	mov	r1, r9
 8004db8:	eb43 0501 	adc.w	r5, r3, r1
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	00eb      	lsls	r3, r5, #3
 8004dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dca:	00e2      	lsls	r2, r4, #3
 8004dcc:	4614      	mov	r4, r2
 8004dce:	461d      	mov	r5, r3
 8004dd0:	4643      	mov	r3, r8
 8004dd2:	18e3      	adds	r3, r4, r3
 8004dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004dd8:	464b      	mov	r3, r9
 8004dda:	eb45 0303 	adc.w	r3, r5, r3
 8004dde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004dfe:	4629      	mov	r1, r5
 8004e00:	008b      	lsls	r3, r1, #2
 8004e02:	4621      	mov	r1, r4
 8004e04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e08:	4621      	mov	r1, r4
 8004e0a:	008a      	lsls	r2, r1, #2
 8004e0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e10:	f7fb fe24 	bl	8000a5c <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4b60      	ldr	r3, [pc, #384]	@ (8004f9c <UART_SetConfig+0x4e4>)
 8004e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	011c      	lsls	r4, r3, #4
 8004e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	1891      	adds	r1, r2, r2
 8004e3a:	61b9      	str	r1, [r7, #24]
 8004e3c:	415b      	adcs	r3, r3
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e44:	4641      	mov	r1, r8
 8004e46:	1851      	adds	r1, r2, r1
 8004e48:	6139      	str	r1, [r7, #16]
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	414b      	adcs	r3, r1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e5c:	4659      	mov	r1, fp
 8004e5e:	00cb      	lsls	r3, r1, #3
 8004e60:	4651      	mov	r1, sl
 8004e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e66:	4651      	mov	r1, sl
 8004e68:	00ca      	lsls	r2, r1, #3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4603      	mov	r3, r0
 8004e70:	4642      	mov	r2, r8
 8004e72:	189b      	adds	r3, r3, r2
 8004e74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e78:	464b      	mov	r3, r9
 8004e7a:	460a      	mov	r2, r1
 8004e7c:	eb42 0303 	adc.w	r3, r2, r3
 8004e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	008b      	lsls	r3, r1, #2
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	008a      	lsls	r2, r1, #2
 8004eaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004eae:	f7fb fdd5 	bl	8000a5c <__aeabi_uldivmod>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	4b38      	ldr	r3, [pc, #224]	@ (8004f9c <UART_SetConfig+0x4e4>)
 8004eba:	fba3 2301 	umull	r2, r3, r3, r1
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	2264      	movs	r2, #100	@ 0x64
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	1acb      	subs	r3, r1, r3
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	3332      	adds	r3, #50	@ 0x32
 8004ecc:	4a33      	ldr	r2, [pc, #204]	@ (8004f9c <UART_SetConfig+0x4e4>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ed8:	441c      	add	r4, r3
 8004eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ede:	2200      	movs	r2, #0
 8004ee0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ee2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ee4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ee8:	4642      	mov	r2, r8
 8004eea:	464b      	mov	r3, r9
 8004eec:	1891      	adds	r1, r2, r2
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	415b      	adcs	r3, r3
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ef8:	4641      	mov	r1, r8
 8004efa:	1851      	adds	r1, r2, r1
 8004efc:	6039      	str	r1, [r7, #0]
 8004efe:	4649      	mov	r1, r9
 8004f00:	414b      	adcs	r3, r1
 8004f02:	607b      	str	r3, [r7, #4]
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f10:	4659      	mov	r1, fp
 8004f12:	00cb      	lsls	r3, r1, #3
 8004f14:	4651      	mov	r1, sl
 8004f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1a:	4651      	mov	r1, sl
 8004f1c:	00ca      	lsls	r2, r1, #3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	4619      	mov	r1, r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	4642      	mov	r2, r8
 8004f26:	189b      	adds	r3, r3, r2
 8004f28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	460a      	mov	r2, r1
 8004f2e:	eb42 0303 	adc.w	r3, r2, r3
 8004f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	008b      	lsls	r3, r1, #2
 8004f50:	4641      	mov	r1, r8
 8004f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f56:	4641      	mov	r1, r8
 8004f58:	008a      	lsls	r2, r1, #2
 8004f5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f5e:	f7fb fd7d 	bl	8000a5c <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4b0d      	ldr	r3, [pc, #52]	@ (8004f9c <UART_SetConfig+0x4e4>)
 8004f68:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	2164      	movs	r1, #100	@ 0x64
 8004f70:	fb01 f303 	mul.w	r3, r1, r3
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	3332      	adds	r3, #50	@ 0x32
 8004f7a:	4a08      	ldr	r2, [pc, #32]	@ (8004f9c <UART_SetConfig+0x4e4>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	f003 020f 	and.w	r2, r3, #15
 8004f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4422      	add	r2, r4
 8004f8e:	609a      	str	r2, [r3, #8]
}
 8004f90:	bf00      	nop
 8004f92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f96:	46bd      	mov	sp, r7
 8004f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9c:	51eb851f 	.word	0x51eb851f

08004fa0 <__NVIC_SetPriority>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	6039      	str	r1, [r7, #0]
 8004faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	db0a      	blt.n	8004fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	490c      	ldr	r1, [pc, #48]	@ (8004fec <__NVIC_SetPriority+0x4c>)
 8004fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fbe:	0112      	lsls	r2, r2, #4
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004fc8:	e00a      	b.n	8004fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	4908      	ldr	r1, [pc, #32]	@ (8004ff0 <__NVIC_SetPriority+0x50>)
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	3b04      	subs	r3, #4
 8004fd8:	0112      	lsls	r2, r2, #4
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	440b      	add	r3, r1
 8004fde:	761a      	strb	r2, [r3, #24]
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	e000e100 	.word	0xe000e100
 8004ff0:	e000ed00 	.word	0xe000ed00

08004ff4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ff8:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <SysTick_Handler+0x1c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ffc:	f001 ff34 	bl	8006e68 <xTaskGetSchedulerState>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d001      	beq.n	800500a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005006:	f002 fd2f 	bl	8007a68 <xPortSysTickHandler>
  }
}
 800500a:	bf00      	nop
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	e000e010 	.word	0xe000e010

08005014 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005018:	2100      	movs	r1, #0
 800501a:	f06f 0004 	mvn.w	r0, #4
 800501e:	f7ff ffbf 	bl	8004fa0 <__NVIC_SetPriority>
#endif
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800502e:	f3ef 8305 	mrs	r3, IPSR
 8005032:	603b      	str	r3, [r7, #0]
  return(result);
 8005034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800503a:	f06f 0305 	mvn.w	r3, #5
 800503e:	607b      	str	r3, [r7, #4]
 8005040:	e00c      	b.n	800505c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005042:	4b0a      	ldr	r3, [pc, #40]	@ (800506c <osKernelInitialize+0x44>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d105      	bne.n	8005056 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800504a:	4b08      	ldr	r3, [pc, #32]	@ (800506c <osKernelInitialize+0x44>)
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005050:	2300      	movs	r3, #0
 8005052:	607b      	str	r3, [r7, #4]
 8005054:	e002      	b.n	800505c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005056:	f04f 33ff 	mov.w	r3, #4294967295
 800505a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800505c:	687b      	ldr	r3, [r7, #4]
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	20000224 	.word	0x20000224

08005070 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005076:	f3ef 8305 	mrs	r3, IPSR
 800507a:	603b      	str	r3, [r7, #0]
  return(result);
 800507c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005082:	f06f 0305 	mvn.w	r3, #5
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	e010      	b.n	80050ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800508a:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <osKernelStart+0x48>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d109      	bne.n	80050a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005092:	f7ff ffbf 	bl	8005014 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005096:	4b08      	ldr	r3, [pc, #32]	@ (80050b8 <osKernelStart+0x48>)
 8005098:	2202      	movs	r2, #2
 800509a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800509c:	f001 fa80 	bl	80065a0 <vTaskStartScheduler>
      stat = osOK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	607b      	str	r3, [r7, #4]
 80050a4:	e002      	b.n	80050ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295
 80050aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050ac:	687b      	ldr	r3, [r7, #4]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000224 	.word	0x20000224

080050bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08e      	sub	sp, #56	@ 0x38
 80050c0:	af04      	add	r7, sp, #16
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050cc:	f3ef 8305 	mrs	r3, IPSR
 80050d0:	617b      	str	r3, [r7, #20]
  return(result);
 80050d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d17e      	bne.n	80051d6 <osThreadNew+0x11a>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d07b      	beq.n	80051d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80050de:	2380      	movs	r3, #128	@ 0x80
 80050e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80050e2:	2318      	movs	r3, #24
 80050e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80050ea:	f04f 33ff 	mov.w	r3, #4294967295
 80050ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d045      	beq.n	8005182 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <osThreadNew+0x48>
        name = attr->name;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <osThreadNew+0x6e>
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b38      	cmp	r3, #56	@ 0x38
 800511c:	d805      	bhi.n	800512a <osThreadNew+0x6e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <osThreadNew+0x72>
        return (NULL);
 800512a:	2300      	movs	r3, #0
 800512c:	e054      	b.n	80051d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	089b      	lsrs	r3, r3, #2
 800513c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00e      	beq.n	8005164 <osThreadNew+0xa8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2ba7      	cmp	r3, #167	@ 0xa7
 800514c:	d90a      	bls.n	8005164 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005152:	2b00      	cmp	r3, #0
 8005154:	d006      	beq.n	8005164 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <osThreadNew+0xa8>
        mem = 1;
 800515e:	2301      	movs	r3, #1
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	e010      	b.n	8005186 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10c      	bne.n	8005186 <osThreadNew+0xca>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d108      	bne.n	8005186 <osThreadNew+0xca>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <osThreadNew+0xca>
          mem = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	e001      	b.n	8005186 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d110      	bne.n	80051ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005194:	9202      	str	r2, [sp, #8]
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	6a3a      	ldr	r2, [r7, #32]
 80051a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f001 f808 	bl	80061b8 <xTaskCreateStatic>
 80051a8:	4603      	mov	r3, r0
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	e013      	b.n	80051d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d110      	bne.n	80051d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	f107 0310 	add.w	r3, r7, #16
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f001 f856 	bl	8006278 <xTaskCreate>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d001      	beq.n	80051d6 <osThreadNew+0x11a>
            hTask = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051d6:	693b      	ldr	r3, [r7, #16]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3728      	adds	r7, #40	@ 0x28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051e8:	f3ef 8305 	mrs	r3, IPSR
 80051ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80051ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <osDelay+0x1c>
    stat = osErrorISR;
 80051f4:	f06f 0305 	mvn.w	r3, #5
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	e007      	b.n	800520c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f001 f994 	bl	8006534 <vTaskDelay>
    }
  }

  return (stat);
 800520c:	68fb      	ldr	r3, [r7, #12]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005216:	b580      	push	{r7, lr}
 8005218:	b08a      	sub	sp, #40	@ 0x28
 800521a:	af02      	add	r7, sp, #8
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005226:	f3ef 8305 	mrs	r3, IPSR
 800522a:	613b      	str	r3, [r7, #16]
  return(result);
 800522c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800522e:	2b00      	cmp	r3, #0
 8005230:	d15f      	bne.n	80052f2 <osMessageQueueNew+0xdc>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d05c      	beq.n	80052f2 <osMessageQueueNew+0xdc>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d059      	beq.n	80052f2 <osMessageQueueNew+0xdc>
    mem = -1;
 800523e:	f04f 33ff 	mov.w	r3, #4294967295
 8005242:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d029      	beq.n	800529e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d012      	beq.n	8005278 <osMessageQueueNew+0x62>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b4f      	cmp	r3, #79	@ 0x4f
 8005258:	d90e      	bls.n	8005278 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	fb01 f303 	mul.w	r3, r1, r3
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <osMessageQueueNew+0x62>
        mem = 1;
 8005272:	2301      	movs	r3, #1
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	e014      	b.n	80052a2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d110      	bne.n	80052a2 <osMessageQueueNew+0x8c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10c      	bne.n	80052a2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800528c:	2b00      	cmp	r3, #0
 800528e:	d108      	bne.n	80052a2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <osMessageQueueNew+0x8c>
          mem = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	e001      	b.n	80052a2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d10b      	bne.n	80052c0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2100      	movs	r1, #0
 80052b2:	9100      	str	r1, [sp, #0]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 fa30 	bl	800571c <xQueueGenericCreateStatic>
 80052bc:	61f8      	str	r0, [r7, #28]
 80052be:	e008      	b.n	80052d2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d105      	bne.n	80052d2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80052c6:	2200      	movs	r2, #0
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 faa3 	bl	8005816 <xQueueGenericCreate>
 80052d0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00c      	beq.n	80052f2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	e001      	b.n	80052ea <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80052ea:	6979      	ldr	r1, [r7, #20]
 80052ec:	69f8      	ldr	r0, [r7, #28]
 80052ee:	f000 ff05 	bl	80060fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80052f2:	69fb      	ldr	r3, [r7, #28]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3720      	adds	r7, #32
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	4613      	mov	r3, r2
 800530a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005310:	2300      	movs	r3, #0
 8005312:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005314:	f3ef 8305 	mrs	r3, IPSR
 8005318:	617b      	str	r3, [r7, #20]
  return(result);
 800531a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800531c:	2b00      	cmp	r3, #0
 800531e:	d028      	beq.n	8005372 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <osMessageQueuePut+0x36>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <osMessageQueuePut+0x36>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005332:	f06f 0303 	mvn.w	r3, #3
 8005336:	61fb      	str	r3, [r7, #28]
 8005338:	e038      	b.n	80053ac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800533e:	f107 0210 	add.w	r2, r7, #16
 8005342:	2300      	movs	r3, #0
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	69b8      	ldr	r0, [r7, #24]
 8005348:	f000 fbc6 	bl	8005ad8 <xQueueGenericSendFromISR>
 800534c:	4603      	mov	r3, r0
 800534e:	2b01      	cmp	r3, #1
 8005350:	d003      	beq.n	800535a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005352:	f06f 0302 	mvn.w	r3, #2
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	e028      	b.n	80053ac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d025      	beq.n	80053ac <osMessageQueuePut+0xb0>
 8005360:	4b15      	ldr	r3, [pc, #84]	@ (80053b8 <osMessageQueuePut+0xbc>)
 8005362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	e01c      	b.n	80053ac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <osMessageQueuePut+0x82>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d103      	bne.n	8005386 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800537e:	f06f 0303 	mvn.w	r3, #3
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	e012      	b.n	80053ac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005386:	2300      	movs	r3, #0
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	69b8      	ldr	r0, [r7, #24]
 800538e:	f000 faa1 	bl	80058d4 <xQueueGenericSend>
 8005392:	4603      	mov	r3, r0
 8005394:	2b01      	cmp	r3, #1
 8005396:	d009      	beq.n	80053ac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800539e:	f06f 0301 	mvn.w	r3, #1
 80053a2:	61fb      	str	r3, [r7, #28]
 80053a4:	e002      	b.n	80053ac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80053a6:	f06f 0302 	mvn.w	r3, #2
 80053aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80053ac:	69fb      	ldr	r3, [r7, #28]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d2:	f3ef 8305 	mrs	r3, IPSR
 80053d6:	617b      	str	r3, [r7, #20]
  return(result);
 80053d8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d028      	beq.n	8005430 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <osMessageQueueGet+0x34>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <osMessageQueueGet+0x34>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80053f0:	f06f 0303 	mvn.w	r3, #3
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	e037      	b.n	8005468 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80053fc:	f107 0310 	add.w	r3, r7, #16
 8005400:	461a      	mov	r2, r3
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	69b8      	ldr	r0, [r7, #24]
 8005406:	f000 fce7 	bl	8005dd8 <xQueueReceiveFromISR>
 800540a:	4603      	mov	r3, r0
 800540c:	2b01      	cmp	r3, #1
 800540e:	d003      	beq.n	8005418 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005410:	f06f 0302 	mvn.w	r3, #2
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	e027      	b.n	8005468 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d024      	beq.n	8005468 <osMessageQueueGet+0xac>
 800541e:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <osMessageQueueGet+0xb8>)
 8005420:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	e01b      	b.n	8005468 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <osMessageQueueGet+0x80>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d103      	bne.n	8005444 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800543c:	f06f 0303 	mvn.w	r3, #3
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	e011      	b.n	8005468 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	69b8      	ldr	r0, [r7, #24]
 800544a:	f000 fbe3 	bl	8005c14 <xQueueReceive>
 800544e:	4603      	mov	r3, r0
 8005450:	2b01      	cmp	r3, #1
 8005452:	d009      	beq.n	8005468 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800545a:	f06f 0301 	mvn.w	r3, #1
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	e002      	b.n	8005468 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005462:	f06f 0302 	mvn.w	r3, #2
 8005466:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005468:	69fb      	ldr	r3, [r7, #28]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4a07      	ldr	r2, [pc, #28]	@ (80054a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005488:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4a06      	ldr	r2, [pc, #24]	@ (80054a8 <vApplicationGetIdleTaskMemory+0x30>)
 800548e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2280      	movs	r2, #128	@ 0x80
 8005494:	601a      	str	r2, [r3, #0]
}
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000228 	.word	0x20000228
 80054a8:	200002d0 	.word	0x200002d0

080054ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a07      	ldr	r2, [pc, #28]	@ (80054d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80054bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4a06      	ldr	r2, [pc, #24]	@ (80054dc <vApplicationGetTimerTaskMemory+0x30>)
 80054c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054ca:	601a      	str	r2, [r3, #0]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	200004d0 	.word	0x200004d0
 80054dc:	20000578 	.word	0x20000578

080054e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f103 0208 	add.w	r2, r3, #8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f04f 32ff 	mov.w	r2, #4294967295
 80054f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f103 0208 	add.w	r2, r3, #8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f103 0208 	add.w	r2, r3, #8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	601a      	str	r2, [r3, #0]
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d103      	bne.n	80055a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e00c      	b.n	80055bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3308      	adds	r3, #8
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e002      	b.n	80055b0 <vListInsert+0x2e>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d2f6      	bcs.n	80055aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	601a      	str	r2, [r3, #0]
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6892      	ldr	r2, [r2, #8]
 800560a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6852      	ldr	r2, [r2, #4]
 8005614:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	d103      	bne.n	8005628 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	1e5a      	subs	r2, r3, #1
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800566e:	bf00      	nop
 8005670:	bf00      	nop
 8005672:	e7fd      	b.n	8005670 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005674:	f002 f968 	bl	8007948 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005680:	68f9      	ldr	r1, [r7, #12]
 8005682:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005684:	fb01 f303 	mul.w	r3, r1, r3
 8005688:	441a      	add	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a4:	3b01      	subs	r3, #1
 80056a6:	68f9      	ldr	r1, [r7, #12]
 80056a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	441a      	add	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	22ff      	movs	r2, #255	@ 0xff
 80056b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	22ff      	movs	r2, #255	@ 0xff
 80056c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d114      	bne.n	80056f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01a      	beq.n	8005708 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3310      	adds	r3, #16
 80056d6:	4618      	mov	r0, r3
 80056d8:	f001 fa00 	bl	8006adc <xTaskRemoveFromEventList>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d012      	beq.n	8005708 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005718 <xQueueGenericReset+0xd0>)
 80056e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	e009      	b.n	8005708 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3310      	adds	r3, #16
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff fef1 	bl	80054e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3324      	adds	r3, #36	@ 0x24
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff feec 	bl	80054e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005708:	f002 f950 	bl	80079ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800570c:	2301      	movs	r3, #1
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08e      	sub	sp, #56	@ 0x38
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	e7fd      	b.n	8005744 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10b      	bne.n	8005766 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	e7fd      	b.n	8005762 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <xQueueGenericCreateStatic+0x56>
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <xQueueGenericCreateStatic+0x5a>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <xQueueGenericCreateStatic+0x5c>
 8005776:	2300      	movs	r3, #0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10b      	bne.n	8005794 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	623b      	str	r3, [r7, #32]
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	e7fd      	b.n	8005790 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d102      	bne.n	80057a0 <xQueueGenericCreateStatic+0x84>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <xQueueGenericCreateStatic+0x88>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <xQueueGenericCreateStatic+0x8a>
 80057a4:	2300      	movs	r3, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	61fb      	str	r3, [r7, #28]
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057c2:	2350      	movs	r3, #80	@ 0x50
 80057c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b50      	cmp	r3, #80	@ 0x50
 80057ca:	d00b      	beq.n	80057e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	61bb      	str	r3, [r7, #24]
}
 80057de:	bf00      	nop
 80057e0:	bf00      	nop
 80057e2:	e7fd      	b.n	80057e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80057e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80057ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00d      	beq.n	800580c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80057f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80057fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 f840 	bl	800588c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800580c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800580e:	4618      	mov	r0, r3
 8005810:	3730      	adds	r7, #48	@ 0x30
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005816:	b580      	push	{r7, lr}
 8005818:	b08a      	sub	sp, #40	@ 0x28
 800581a:	af02      	add	r7, sp, #8
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	4613      	mov	r3, r2
 8005822:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10b      	bne.n	8005842 <xQueueGenericCreate+0x2c>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	613b      	str	r3, [r7, #16]
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	e7fd      	b.n	800583e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	3350      	adds	r3, #80	@ 0x50
 8005850:	4618      	mov	r0, r3
 8005852:	f002 f99b 	bl	8007b8c <pvPortMalloc>
 8005856:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d011      	beq.n	8005882 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	3350      	adds	r3, #80	@ 0x50
 8005866:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005870:	79fa      	ldrb	r2, [r7, #7]
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	4613      	mov	r3, r2
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f805 	bl	800588c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005882:	69bb      	ldr	r3, [r7, #24]
	}
 8005884:	4618      	mov	r0, r3
 8005886:	3720      	adds	r7, #32
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e002      	b.n	80058ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058ba:	2101      	movs	r1, #1
 80058bc:	69b8      	ldr	r0, [r7, #24]
 80058be:	f7ff fec3 	bl	8005648 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08e      	sub	sp, #56	@ 0x38
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058e2:	2300      	movs	r3, #0
 80058e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10b      	bne.n	8005908 <xQueueGenericSend+0x34>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005902:	bf00      	nop
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <xQueueGenericSend+0x42>
 800590e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <xQueueGenericSend+0x46>
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <xQueueGenericSend+0x48>
 800591a:	2300      	movs	r3, #0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10b      	bne.n	8005938 <xQueueGenericSend+0x64>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005932:	bf00      	nop
 8005934:	bf00      	nop
 8005936:	e7fd      	b.n	8005934 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d103      	bne.n	8005946 <xQueueGenericSend+0x72>
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <xQueueGenericSend+0x76>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <xQueueGenericSend+0x78>
 800594a:	2300      	movs	r3, #0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <xQueueGenericSend+0x94>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	623b      	str	r3, [r7, #32]
}
 8005962:	bf00      	nop
 8005964:	bf00      	nop
 8005966:	e7fd      	b.n	8005964 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005968:	f001 fa7e 	bl	8006e68 <xTaskGetSchedulerState>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <xQueueGenericSend+0xa4>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <xQueueGenericSend+0xa8>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <xQueueGenericSend+0xaa>
 800597c:	2300      	movs	r3, #0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <xQueueGenericSend+0xc6>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	61fb      	str	r3, [r7, #28]
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop
 8005998:	e7fd      	b.n	8005996 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800599a:	f001 ffd5 	bl	8007948 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800599e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d302      	bcc.n	80059b0 <xQueueGenericSend+0xdc>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d129      	bne.n	8005a04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059b6:	f000 fa91 	bl	8005edc <prvCopyDataToQueue>
 80059ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d010      	beq.n	80059e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c6:	3324      	adds	r3, #36	@ 0x24
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 f887 	bl	8006adc <xTaskRemoveFromEventList>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d013      	beq.n	80059fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059d4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad4 <xQueueGenericSend+0x200>)
 80059d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	e00a      	b.n	80059fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d007      	beq.n	80059fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059ec:	4b39      	ldr	r3, [pc, #228]	@ (8005ad4 <xQueueGenericSend+0x200>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059fc:	f001 ffd6 	bl	80079ac <vPortExitCritical>
				return pdPASS;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e063      	b.n	8005acc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a0a:	f001 ffcf 	bl	80079ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e05c      	b.n	8005acc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a18:	f107 0314 	add.w	r3, r7, #20
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f001 f8c1 	bl	8006ba4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a22:	2301      	movs	r3, #1
 8005a24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a26:	f001 ffc1 	bl	80079ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a2a:	f000 fe29 	bl	8006680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a2e:	f001 ff8b 	bl	8007948 <vPortEnterCritical>
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a38:	b25b      	sxtb	r3, r3
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d103      	bne.n	8005a48 <xQueueGenericSend+0x174>
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a4e:	b25b      	sxtb	r3, r3
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a54:	d103      	bne.n	8005a5e <xQueueGenericSend+0x18a>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a5e:	f001 ffa5 	bl	80079ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a62:	1d3a      	adds	r2, r7, #4
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	4611      	mov	r1, r2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f001 f8b0 	bl	8006bd0 <xTaskCheckForTimeOut>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d124      	bne.n	8005ac0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a78:	f000 fb28 	bl	80060cc <prvIsQueueFull>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d018      	beq.n	8005ab4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	3310      	adds	r3, #16
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4611      	mov	r1, r2
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 ffd4 	bl	8006a38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a92:	f000 fab3 	bl	8005ffc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a96:	f000 fe01 	bl	800669c <xTaskResumeAll>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f47f af7c 	bne.w	800599a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad4 <xQueueGenericSend+0x200>)
 8005aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	e772      	b.n	800599a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ab6:	f000 faa1 	bl	8005ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aba:	f000 fdef 	bl	800669c <xTaskResumeAll>
 8005abe:	e76c      	b.n	800599a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ac2:	f000 fa9b 	bl	8005ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ac6:	f000 fde9 	bl	800669c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005aca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3738      	adds	r7, #56	@ 0x38
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	e000ed04 	.word	0xe000ed04

08005ad8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b090      	sub	sp, #64	@ 0x40
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10b      	bne.n	8005b08 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d103      	bne.n	8005b16 <xQueueGenericSendFromISR+0x3e>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <xQueueGenericSendFromISR+0x42>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <xQueueGenericSendFromISR+0x44>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10b      	bne.n	8005b38 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b32:	bf00      	nop
 8005b34:	bf00      	nop
 8005b36:	e7fd      	b.n	8005b34 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d103      	bne.n	8005b46 <xQueueGenericSendFromISR+0x6e>
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <xQueueGenericSendFromISR+0x72>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <xQueueGenericSendFromISR+0x74>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	623b      	str	r3, [r7, #32]
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	e7fd      	b.n	8005b64 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b68:	f001 ffce 	bl	8007b08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b6c:	f3ef 8211 	mrs	r2, BASEPRI
 8005b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	61fa      	str	r2, [r7, #28]
 8005b82:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b84:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b86:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d302      	bcc.n	8005b9a <xQueueGenericSendFromISR+0xc2>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d12f      	bne.n	8005bfa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ba0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005bb0:	f000 f994 	bl	8005edc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bb4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d112      	bne.n	8005be4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d016      	beq.n	8005bf4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	3324      	adds	r3, #36	@ 0x24
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 ff86 	bl	8006adc <xTaskRemoveFromEventList>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00e      	beq.n	8005bf4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	e007      	b.n	8005bf4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005be4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005be8:	3301      	adds	r3, #1
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	b25a      	sxtb	r2, r3
 8005bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005bf8:	e001      	b.n	8005bfe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c00:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3740      	adds	r7, #64	@ 0x40
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08c      	sub	sp, #48	@ 0x30
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c20:	2300      	movs	r3, #0
 8005c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10b      	bne.n	8005c46 <xQueueReceive+0x32>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	623b      	str	r3, [r7, #32]
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	e7fd      	b.n	8005c42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d103      	bne.n	8005c54 <xQueueReceive+0x40>
 8005c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <xQueueReceive+0x44>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <xQueueReceive+0x46>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <xQueueReceive+0x62>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	61fb      	str	r3, [r7, #28]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c76:	f001 f8f7 	bl	8006e68 <xTaskGetSchedulerState>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <xQueueReceive+0x72>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <xQueueReceive+0x76>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <xQueueReceive+0x78>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10b      	bne.n	8005ca8 <xQueueReceive+0x94>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	61bb      	str	r3, [r7, #24]
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ca8:	f001 fe4e 	bl	8007948 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d01f      	beq.n	8005cf8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cbc:	f000 f978 	bl	8005fb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	1e5a      	subs	r2, r3, #1
 8005cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00f      	beq.n	8005cf0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd2:	3310      	adds	r3, #16
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 ff01 	bl	8006adc <xTaskRemoveFromEventList>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d007      	beq.n	8005cf0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8005dd4 <xQueueReceive+0x1c0>)
 8005ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cf0:	f001 fe5c 	bl	80079ac <vPortExitCritical>
				return pdPASS;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e069      	b.n	8005dcc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cfe:	f001 fe55 	bl	80079ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e062      	b.n	8005dcc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d0c:	f107 0310 	add.w	r3, r7, #16
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 ff47 	bl	8006ba4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d1a:	f001 fe47 	bl	80079ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d1e:	f000 fcaf 	bl	8006680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d22:	f001 fe11 	bl	8007948 <vPortEnterCritical>
 8005d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d2c:	b25b      	sxtb	r3, r3
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d103      	bne.n	8005d3c <xQueueReceive+0x128>
 8005d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d42:	b25b      	sxtb	r3, r3
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d103      	bne.n	8005d52 <xQueueReceive+0x13e>
 8005d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d52:	f001 fe2b 	bl	80079ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d56:	1d3a      	adds	r2, r7, #4
 8005d58:	f107 0310 	add.w	r3, r7, #16
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 ff36 	bl	8006bd0 <xTaskCheckForTimeOut>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d123      	bne.n	8005db2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d6c:	f000 f998 	bl	80060a0 <prvIsQueueEmpty>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d017      	beq.n	8005da6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d78:	3324      	adds	r3, #36	@ 0x24
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fe5a 	bl	8006a38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d86:	f000 f939 	bl	8005ffc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d8a:	f000 fc87 	bl	800669c <xTaskResumeAll>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d189      	bne.n	8005ca8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005d94:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd4 <xQueueReceive+0x1c0>)
 8005d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	e780      	b.n	8005ca8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005da6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005da8:	f000 f928 	bl	8005ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dac:	f000 fc76 	bl	800669c <xTaskResumeAll>
 8005db0:	e77a      	b.n	8005ca8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005db4:	f000 f922 	bl	8005ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005db8:	f000 fc70 	bl	800669c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dbe:	f000 f96f 	bl	80060a0 <prvIsQueueEmpty>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f43f af6f 	beq.w	8005ca8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3730      	adds	r7, #48	@ 0x30
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08e      	sub	sp, #56	@ 0x38
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	623b      	str	r3, [r7, #32]
}
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	e7fd      	b.n	8005e02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d103      	bne.n	8005e14 <xQueueReceiveFromISR+0x3c>
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <xQueueReceiveFromISR+0x40>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <xQueueReceiveFromISR+0x42>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	61fb      	str	r3, [r7, #28]
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	e7fd      	b.n	8005e32 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e36:	f001 fe67 	bl	8007b08 <vPortValidateInterruptPriority>
	__asm volatile
 8005e3a:	f3ef 8211 	mrs	r2, BASEPRI
 8005e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	61ba      	str	r2, [r7, #24]
 8005e50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d02f      	beq.n	8005ec2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e70:	f000 f89e 	bl	8005fb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	1e5a      	subs	r2, r3, #1
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005e7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d112      	bne.n	8005eac <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d016      	beq.n	8005ebc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	3310      	adds	r3, #16
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fe22 	bl	8006adc <xTaskRemoveFromEventList>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00e      	beq.n	8005ebc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	e007      	b.n	8005ebc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005eac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	b25a      	sxtb	r2, r3
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ec0:	e001      	b.n	8005ec6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f383 8811 	msr	BASEPRI, r3
}
 8005ed0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3738      	adds	r7, #56	@ 0x38
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10d      	bne.n	8005f16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d14d      	bne.n	8005f9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 ffcc 	bl	8006ea4 <xTaskPriorityDisinherit>
 8005f0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	609a      	str	r2, [r3, #8]
 8005f14:	e043      	b.n	8005f9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d119      	bne.n	8005f50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6858      	ldr	r0, [r3, #4]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f24:	461a      	mov	r2, r3
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	f002 fb23 	bl	8008572 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f34:	441a      	add	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d32b      	bcc.n	8005f9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	605a      	str	r2, [r3, #4]
 8005f4e:	e026      	b.n	8005f9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68d8      	ldr	r0, [r3, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f58:	461a      	mov	r2, r3
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	f002 fb09 	bl	8008572 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	425b      	negs	r3, r3
 8005f6a:	441a      	add	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d207      	bcs.n	8005f8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	425b      	negs	r3, r3
 8005f86:	441a      	add	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d105      	bne.n	8005f9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005fa6:	697b      	ldr	r3, [r7, #20]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d018      	beq.n	8005ff4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fca:	441a      	add	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d303      	bcc.n	8005fe4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68d9      	ldr	r1, [r3, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fec:	461a      	mov	r2, r3
 8005fee:	6838      	ldr	r0, [r7, #0]
 8005ff0:	f002 fabf 	bl	8008572 <memcpy>
	}
}
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006004:	f001 fca0 	bl	8007948 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800600e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006010:	e011      	b.n	8006036 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006016:	2b00      	cmp	r3, #0
 8006018:	d012      	beq.n	8006040 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3324      	adds	r3, #36	@ 0x24
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fd5c 	bl	8006adc <xTaskRemoveFromEventList>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800602a:	f000 fe35 	bl	8006c98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	3b01      	subs	r3, #1
 8006032:	b2db      	uxtb	r3, r3
 8006034:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800603a:	2b00      	cmp	r3, #0
 800603c:	dce9      	bgt.n	8006012 <prvUnlockQueue+0x16>
 800603e:	e000      	b.n	8006042 <prvUnlockQueue+0x46>
					break;
 8006040:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	22ff      	movs	r2, #255	@ 0xff
 8006046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800604a:	f001 fcaf 	bl	80079ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800604e:	f001 fc7b 	bl	8007948 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006058:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800605a:	e011      	b.n	8006080 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d012      	beq.n	800608a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3310      	adds	r3, #16
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fd37 	bl	8006adc <xTaskRemoveFromEventList>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006074:	f000 fe10 	bl	8006c98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	3b01      	subs	r3, #1
 800607c:	b2db      	uxtb	r3, r3
 800607e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006084:	2b00      	cmp	r3, #0
 8006086:	dce9      	bgt.n	800605c <prvUnlockQueue+0x60>
 8006088:	e000      	b.n	800608c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800608a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	22ff      	movs	r2, #255	@ 0xff
 8006090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006094:	f001 fc8a 	bl	80079ac <vPortExitCritical>
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060a8:	f001 fc4e 	bl	8007948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d102      	bne.n	80060ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060b4:	2301      	movs	r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	e001      	b.n	80060be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060be:	f001 fc75 	bl	80079ac <vPortExitCritical>

	return xReturn;
 80060c2:	68fb      	ldr	r3, [r7, #12]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060d4:	f001 fc38 	bl	8007948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d102      	bne.n	80060ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060e4:	2301      	movs	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	e001      	b.n	80060ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060ee:	f001 fc5d 	bl	80079ac <vPortExitCritical>

	return xReturn;
 80060f2:	68fb      	ldr	r3, [r7, #12]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e014      	b.n	8006136 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800610c:	4a0f      	ldr	r2, [pc, #60]	@ (800614c <vQueueAddToRegistry+0x50>)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10b      	bne.n	8006130 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006118:	490c      	ldr	r1, [pc, #48]	@ (800614c <vQueueAddToRegistry+0x50>)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006122:	4a0a      	ldr	r2, [pc, #40]	@ (800614c <vQueueAddToRegistry+0x50>)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	4413      	add	r3, r2
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800612e:	e006      	b.n	800613e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3301      	adds	r3, #1
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b07      	cmp	r3, #7
 800613a:	d9e7      	bls.n	800610c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	20000978 	.word	0x20000978

08006150 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006160:	f001 fbf2 	bl	8007948 <vPortEnterCritical>
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800616a:	b25b      	sxtb	r3, r3
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d103      	bne.n	800617a <vQueueWaitForMessageRestricted+0x2a>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006180:	b25b      	sxtb	r3, r3
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006186:	d103      	bne.n	8006190 <vQueueWaitForMessageRestricted+0x40>
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006190:	f001 fc0c 	bl	80079ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006198:	2b00      	cmp	r3, #0
 800619a:	d106      	bne.n	80061aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	3324      	adds	r3, #36	@ 0x24
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fc6d 	bl	8006a84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061aa:	6978      	ldr	r0, [r7, #20]
 80061ac:	f7ff ff26 	bl	8005ffc <prvUnlockQueue>
	}
 80061b0:	bf00      	nop
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08e      	sub	sp, #56	@ 0x38
 80061bc:	af04      	add	r7, sp, #16
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10b      	bne.n	80061e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	623b      	str	r3, [r7, #32]
}
 80061de:	bf00      	nop
 80061e0:	bf00      	nop
 80061e2:	e7fd      	b.n	80061e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10b      	bne.n	8006202 <xTaskCreateStatic+0x4a>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	61fb      	str	r3, [r7, #28]
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	e7fd      	b.n	80061fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006202:	23a8      	movs	r3, #168	@ 0xa8
 8006204:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2ba8      	cmp	r3, #168	@ 0xa8
 800620a:	d00b      	beq.n	8006224 <xTaskCreateStatic+0x6c>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	61bb      	str	r3, [r7, #24]
}
 800621e:	bf00      	nop
 8006220:	bf00      	nop
 8006222:	e7fd      	b.n	8006220 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006224:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01e      	beq.n	800626a <xTaskCreateStatic+0xb2>
 800622c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01b      	beq.n	800626a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	2202      	movs	r2, #2
 8006240:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006244:	2300      	movs	r3, #0
 8006246:	9303      	str	r3, [sp, #12]
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	9302      	str	r3, [sp, #8]
 800624c:	f107 0314 	add.w	r3, r7, #20
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f851 	bl	8006304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006262:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006264:	f000 f8f6 	bl	8006454 <prvAddNewTaskToReadyList>
 8006268:	e001      	b.n	800626e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800626e:	697b      	ldr	r3, [r7, #20]
	}
 8006270:	4618      	mov	r0, r3
 8006272:	3728      	adds	r7, #40	@ 0x28
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08c      	sub	sp, #48	@ 0x30
 800627c:	af04      	add	r7, sp, #16
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4618      	mov	r0, r3
 800628e:	f001 fc7d 	bl	8007b8c <pvPortMalloc>
 8006292:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00e      	beq.n	80062b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800629a:	20a8      	movs	r0, #168	@ 0xa8
 800629c:	f001 fc76 	bl	8007b8c <pvPortMalloc>
 80062a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80062ae:	e005      	b.n	80062bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062b0:	6978      	ldr	r0, [r7, #20]
 80062b2:	f001 fd39 	bl	8007d28 <vPortFree>
 80062b6:	e001      	b.n	80062bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d017      	beq.n	80062f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062ca:	88fa      	ldrh	r2, [r7, #6]
 80062cc:	2300      	movs	r3, #0
 80062ce:	9303      	str	r3, [sp, #12]
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	9302      	str	r3, [sp, #8]
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f80f 	bl	8006304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062e6:	69f8      	ldr	r0, [r7, #28]
 80062e8:	f000 f8b4 	bl	8006454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062ec:	2301      	movs	r3, #1
 80062ee:	61bb      	str	r3, [r7, #24]
 80062f0:	e002      	b.n	80062f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062f2:	f04f 33ff 	mov.w	r3, #4294967295
 80062f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062f8:	69bb      	ldr	r3, [r7, #24]
	}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3720      	adds	r7, #32
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	461a      	mov	r2, r3
 800631c:	21a5      	movs	r1, #165	@ 0xa5
 800631e:	f002 f84f 	bl	80083c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800632c:	3b01      	subs	r3, #1
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	f023 0307 	bic.w	r3, r3, #7
 800633a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00b      	beq.n	800635e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	617b      	str	r3, [r7, #20]
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	e7fd      	b.n	800635a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01f      	beq.n	80063a4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	e012      	b.n	8006390 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	7819      	ldrb	r1, [r3, #0]
 8006372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	3334      	adds	r3, #52	@ 0x34
 800637a:	460a      	mov	r2, r1
 800637c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	4413      	add	r3, r2
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d006      	beq.n	8006398 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	3301      	adds	r3, #1
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	2b0f      	cmp	r3, #15
 8006394:	d9e9      	bls.n	800636a <prvInitialiseNewTask+0x66>
 8006396:	e000      	b.n	800639a <prvInitialiseNewTask+0x96>
			{
				break;
 8006398:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800639a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063a2:	e003      	b.n	80063ac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	2b37      	cmp	r3, #55	@ 0x37
 80063b0:	d901      	bls.n	80063b6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063b2:	2337      	movs	r3, #55	@ 0x37
 80063b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063c0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	2200      	movs	r2, #0
 80063c6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	3304      	adds	r3, #4
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff f8a7 	bl	8005520 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	3318      	adds	r3, #24
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff f8a2 	bl	8005520 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80063e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	3354      	adds	r3, #84	@ 0x54
 8006406:	224c      	movs	r2, #76	@ 0x4c
 8006408:	2100      	movs	r1, #0
 800640a:	4618      	mov	r0, r3
 800640c:	f001 ffd8 	bl	80083c0 <memset>
 8006410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006412:	4a0d      	ldr	r2, [pc, #52]	@ (8006448 <prvInitialiseNewTask+0x144>)
 8006414:	659a      	str	r2, [r3, #88]	@ 0x58
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	4a0c      	ldr	r2, [pc, #48]	@ (800644c <prvInitialiseNewTask+0x148>)
 800641a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800641c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641e:	4a0c      	ldr	r2, [pc, #48]	@ (8006450 <prvInitialiseNewTask+0x14c>)
 8006420:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	68f9      	ldr	r1, [r7, #12]
 8006426:	69b8      	ldr	r0, [r7, #24]
 8006428:	f001 f95a 	bl	80076e0 <pxPortInitialiseStack>
 800642c:	4602      	mov	r2, r0
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800643c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800643e:	bf00      	nop
 8006440:	3720      	adds	r7, #32
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20005e2c 	.word	0x20005e2c
 800644c:	20005e94 	.word	0x20005e94
 8006450:	20005efc 	.word	0x20005efc

08006454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800645c:	f001 fa74 	bl	8007948 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006460:	4b2d      	ldr	r3, [pc, #180]	@ (8006518 <prvAddNewTaskToReadyList+0xc4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3301      	adds	r3, #1
 8006466:	4a2c      	ldr	r2, [pc, #176]	@ (8006518 <prvAddNewTaskToReadyList+0xc4>)
 8006468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800646a:	4b2c      	ldr	r3, [pc, #176]	@ (800651c <prvAddNewTaskToReadyList+0xc8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006472:	4a2a      	ldr	r2, [pc, #168]	@ (800651c <prvAddNewTaskToReadyList+0xc8>)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006478:	4b27      	ldr	r3, [pc, #156]	@ (8006518 <prvAddNewTaskToReadyList+0xc4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d110      	bne.n	80064a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006480:	f000 fc2e 	bl	8006ce0 <prvInitialiseTaskLists>
 8006484:	e00d      	b.n	80064a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006486:	4b26      	ldr	r3, [pc, #152]	@ (8006520 <prvAddNewTaskToReadyList+0xcc>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d109      	bne.n	80064a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800648e:	4b23      	ldr	r3, [pc, #140]	@ (800651c <prvAddNewTaskToReadyList+0xc8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006498:	429a      	cmp	r2, r3
 800649a:	d802      	bhi.n	80064a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800649c:	4a1f      	ldr	r2, [pc, #124]	@ (800651c <prvAddNewTaskToReadyList+0xc8>)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064a2:	4b20      	ldr	r3, [pc, #128]	@ (8006524 <prvAddNewTaskToReadyList+0xd0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3301      	adds	r3, #1
 80064a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006524 <prvAddNewTaskToReadyList+0xd0>)
 80064aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006524 <prvAddNewTaskToReadyList+0xd0>)
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006528 <prvAddNewTaskToReadyList+0xd4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d903      	bls.n	80064c8 <prvAddNewTaskToReadyList+0x74>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c4:	4a18      	ldr	r2, [pc, #96]	@ (8006528 <prvAddNewTaskToReadyList+0xd4>)
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4a15      	ldr	r2, [pc, #84]	@ (800652c <prvAddNewTaskToReadyList+0xd8>)
 80064d6:	441a      	add	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3304      	adds	r3, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f7ff f82b 	bl	800553a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064e4:	f001 fa62 	bl	80079ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006520 <prvAddNewTaskToReadyList+0xcc>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00e      	beq.n	800650e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064f0:	4b0a      	ldr	r3, [pc, #40]	@ (800651c <prvAddNewTaskToReadyList+0xc8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d207      	bcs.n	800650e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006530 <prvAddNewTaskToReadyList+0xdc>)
 8006500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800650e:	bf00      	nop
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000e8c 	.word	0x20000e8c
 800651c:	200009b8 	.word	0x200009b8
 8006520:	20000e98 	.word	0x20000e98
 8006524:	20000ea8 	.word	0x20000ea8
 8006528:	20000e94 	.word	0x20000e94
 800652c:	200009bc 	.word	0x200009bc
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d018      	beq.n	8006578 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006546:	4b14      	ldr	r3, [pc, #80]	@ (8006598 <vTaskDelay+0x64>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <vTaskDelay+0x32>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	60bb      	str	r3, [r7, #8]
}
 8006560:	bf00      	nop
 8006562:	bf00      	nop
 8006564:	e7fd      	b.n	8006562 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006566:	f000 f88b 	bl	8006680 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800656a:	2100      	movs	r1, #0
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fd09 	bl	8006f84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006572:	f000 f893 	bl	800669c <xTaskResumeAll>
 8006576:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d107      	bne.n	800658e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800657e:	4b07      	ldr	r3, [pc, #28]	@ (800659c <vTaskDelay+0x68>)
 8006580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800658e:	bf00      	nop
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000eb4 	.word	0x20000eb4
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08a      	sub	sp, #40	@ 0x28
 80065a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065ae:	463a      	mov	r2, r7
 80065b0:	1d39      	adds	r1, r7, #4
 80065b2:	f107 0308 	add.w	r3, r7, #8
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe ff5e 	bl	8005478 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	9202      	str	r2, [sp, #8]
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	2300      	movs	r3, #0
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	2300      	movs	r3, #0
 80065cc:	460a      	mov	r2, r1
 80065ce:	4924      	ldr	r1, [pc, #144]	@ (8006660 <vTaskStartScheduler+0xc0>)
 80065d0:	4824      	ldr	r0, [pc, #144]	@ (8006664 <vTaskStartScheduler+0xc4>)
 80065d2:	f7ff fdf1 	bl	80061b8 <xTaskCreateStatic>
 80065d6:	4603      	mov	r3, r0
 80065d8:	4a23      	ldr	r2, [pc, #140]	@ (8006668 <vTaskStartScheduler+0xc8>)
 80065da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065dc:	4b22      	ldr	r3, [pc, #136]	@ (8006668 <vTaskStartScheduler+0xc8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065e4:	2301      	movs	r3, #1
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e001      	b.n	80065ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d102      	bne.n	80065fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065f4:	f000 fd1a 	bl	800702c <xTimerCreateTimerTask>
 80065f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d11b      	bne.n	8006638 <vTaskStartScheduler+0x98>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	613b      	str	r3, [r7, #16]
}
 8006612:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006614:	4b15      	ldr	r3, [pc, #84]	@ (800666c <vTaskStartScheduler+0xcc>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3354      	adds	r3, #84	@ 0x54
 800661a:	4a15      	ldr	r2, [pc, #84]	@ (8006670 <vTaskStartScheduler+0xd0>)
 800661c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800661e:	4b15      	ldr	r3, [pc, #84]	@ (8006674 <vTaskStartScheduler+0xd4>)
 8006620:	f04f 32ff 	mov.w	r2, #4294967295
 8006624:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006626:	4b14      	ldr	r3, [pc, #80]	@ (8006678 <vTaskStartScheduler+0xd8>)
 8006628:	2201      	movs	r2, #1
 800662a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800662c:	4b13      	ldr	r3, [pc, #76]	@ (800667c <vTaskStartScheduler+0xdc>)
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006632:	f001 f8e5 	bl	8007800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006636:	e00f      	b.n	8006658 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663e:	d10b      	bne.n	8006658 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60fb      	str	r3, [r7, #12]
}
 8006652:	bf00      	nop
 8006654:	bf00      	nop
 8006656:	e7fd      	b.n	8006654 <vTaskStartScheduler+0xb4>
}
 8006658:	bf00      	nop
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	0800943c 	.word	0x0800943c
 8006664:	08006cb1 	.word	0x08006cb1
 8006668:	20000eb0 	.word	0x20000eb0
 800666c:	200009b8 	.word	0x200009b8
 8006670:	20000020 	.word	0x20000020
 8006674:	20000eac 	.word	0x20000eac
 8006678:	20000e98 	.word	0x20000e98
 800667c:	20000e90 	.word	0x20000e90

08006680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006684:	4b04      	ldr	r3, [pc, #16]	@ (8006698 <vTaskSuspendAll+0x18>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	4a03      	ldr	r2, [pc, #12]	@ (8006698 <vTaskSuspendAll+0x18>)
 800668c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800668e:	bf00      	nop
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20000eb4 	.word	0x20000eb4

0800669c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066aa:	4b42      	ldr	r3, [pc, #264]	@ (80067b4 <xTaskResumeAll+0x118>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10b      	bne.n	80066ca <xTaskResumeAll+0x2e>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	603b      	str	r3, [r7, #0]
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop
 80066c8:	e7fd      	b.n	80066c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066ca:	f001 f93d 	bl	8007948 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066ce:	4b39      	ldr	r3, [pc, #228]	@ (80067b4 <xTaskResumeAll+0x118>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	4a37      	ldr	r2, [pc, #220]	@ (80067b4 <xTaskResumeAll+0x118>)
 80066d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066d8:	4b36      	ldr	r3, [pc, #216]	@ (80067b4 <xTaskResumeAll+0x118>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d162      	bne.n	80067a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066e0:	4b35      	ldr	r3, [pc, #212]	@ (80067b8 <xTaskResumeAll+0x11c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d05e      	beq.n	80067a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066e8:	e02f      	b.n	800674a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ea:	4b34      	ldr	r3, [pc, #208]	@ (80067bc <xTaskResumeAll+0x120>)
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3318      	adds	r3, #24
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe ff7c 	bl	80055f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3304      	adds	r3, #4
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe ff77 	bl	80055f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670a:	4b2d      	ldr	r3, [pc, #180]	@ (80067c0 <xTaskResumeAll+0x124>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d903      	bls.n	800671a <xTaskResumeAll+0x7e>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006716:	4a2a      	ldr	r2, [pc, #168]	@ (80067c0 <xTaskResumeAll+0x124>)
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4a27      	ldr	r2, [pc, #156]	@ (80067c4 <xTaskResumeAll+0x128>)
 8006728:	441a      	add	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3304      	adds	r3, #4
 800672e:	4619      	mov	r1, r3
 8006730:	4610      	mov	r0, r2
 8006732:	f7fe ff02 	bl	800553a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673a:	4b23      	ldr	r3, [pc, #140]	@ (80067c8 <xTaskResumeAll+0x12c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006740:	429a      	cmp	r2, r3
 8006742:	d302      	bcc.n	800674a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006744:	4b21      	ldr	r3, [pc, #132]	@ (80067cc <xTaskResumeAll+0x130>)
 8006746:	2201      	movs	r2, #1
 8006748:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800674a:	4b1c      	ldr	r3, [pc, #112]	@ (80067bc <xTaskResumeAll+0x120>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1cb      	bne.n	80066ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006758:	f000 fb66 	bl	8006e28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800675c:	4b1c      	ldr	r3, [pc, #112]	@ (80067d0 <xTaskResumeAll+0x134>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d010      	beq.n	800678a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006768:	f000 f846 	bl	80067f8 <xTaskIncrementTick>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006772:	4b16      	ldr	r3, [pc, #88]	@ (80067cc <xTaskResumeAll+0x130>)
 8006774:	2201      	movs	r2, #1
 8006776:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3b01      	subs	r3, #1
 800677c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1f1      	bne.n	8006768 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006784:	4b12      	ldr	r3, [pc, #72]	@ (80067d0 <xTaskResumeAll+0x134>)
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800678a:	4b10      	ldr	r3, [pc, #64]	@ (80067cc <xTaskResumeAll+0x130>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d009      	beq.n	80067a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006792:	2301      	movs	r3, #1
 8006794:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006796:	4b0f      	ldr	r3, [pc, #60]	@ (80067d4 <xTaskResumeAll+0x138>)
 8006798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067a6:	f001 f901 	bl	80079ac <vPortExitCritical>

	return xAlreadyYielded;
 80067aa:	68bb      	ldr	r3, [r7, #8]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20000eb4 	.word	0x20000eb4
 80067b8:	20000e8c 	.word	0x20000e8c
 80067bc:	20000e4c 	.word	0x20000e4c
 80067c0:	20000e94 	.word	0x20000e94
 80067c4:	200009bc 	.word	0x200009bc
 80067c8:	200009b8 	.word	0x200009b8
 80067cc:	20000ea0 	.word	0x20000ea0
 80067d0:	20000e9c 	.word	0x20000e9c
 80067d4:	e000ed04 	.word	0xe000ed04

080067d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067de:	4b05      	ldr	r3, [pc, #20]	@ (80067f4 <xTaskGetTickCount+0x1c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067e4:	687b      	ldr	r3, [r7, #4]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000e90 	.word	0x20000e90

080067f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006802:	4b4f      	ldr	r3, [pc, #316]	@ (8006940 <xTaskIncrementTick+0x148>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 8090 	bne.w	800692c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800680c:	4b4d      	ldr	r3, [pc, #308]	@ (8006944 <xTaskIncrementTick+0x14c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006814:	4a4b      	ldr	r2, [pc, #300]	@ (8006944 <xTaskIncrementTick+0x14c>)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d121      	bne.n	8006864 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006820:	4b49      	ldr	r3, [pc, #292]	@ (8006948 <xTaskIncrementTick+0x150>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <xTaskIncrementTick+0x4a>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	603b      	str	r3, [r7, #0]
}
 800683c:	bf00      	nop
 800683e:	bf00      	nop
 8006840:	e7fd      	b.n	800683e <xTaskIncrementTick+0x46>
 8006842:	4b41      	ldr	r3, [pc, #260]	@ (8006948 <xTaskIncrementTick+0x150>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	4b40      	ldr	r3, [pc, #256]	@ (800694c <xTaskIncrementTick+0x154>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a3e      	ldr	r2, [pc, #248]	@ (8006948 <xTaskIncrementTick+0x150>)
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	4a3e      	ldr	r2, [pc, #248]	@ (800694c <xTaskIncrementTick+0x154>)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	4b3e      	ldr	r3, [pc, #248]	@ (8006950 <xTaskIncrementTick+0x158>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3301      	adds	r3, #1
 800685c:	4a3c      	ldr	r2, [pc, #240]	@ (8006950 <xTaskIncrementTick+0x158>)
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	f000 fae2 	bl	8006e28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006864:	4b3b      	ldr	r3, [pc, #236]	@ (8006954 <xTaskIncrementTick+0x15c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	429a      	cmp	r2, r3
 800686c:	d349      	bcc.n	8006902 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800686e:	4b36      	ldr	r3, [pc, #216]	@ (8006948 <xTaskIncrementTick+0x150>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006878:	4b36      	ldr	r3, [pc, #216]	@ (8006954 <xTaskIncrementTick+0x15c>)
 800687a:	f04f 32ff 	mov.w	r2, #4294967295
 800687e:	601a      	str	r2, [r3, #0]
					break;
 8006880:	e03f      	b.n	8006902 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006882:	4b31      	ldr	r3, [pc, #196]	@ (8006948 <xTaskIncrementTick+0x150>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	429a      	cmp	r2, r3
 8006898:	d203      	bcs.n	80068a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800689a:	4a2e      	ldr	r2, [pc, #184]	@ (8006954 <xTaskIncrementTick+0x15c>)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068a0:	e02f      	b.n	8006902 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe fea4 	bl	80055f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d004      	beq.n	80068be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	3318      	adds	r3, #24
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fe9b 	bl	80055f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c2:	4b25      	ldr	r3, [pc, #148]	@ (8006958 <xTaskIncrementTick+0x160>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d903      	bls.n	80068d2 <xTaskIncrementTick+0xda>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ce:	4a22      	ldr	r2, [pc, #136]	@ (8006958 <xTaskIncrementTick+0x160>)
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4a1f      	ldr	r2, [pc, #124]	@ (800695c <xTaskIncrementTick+0x164>)
 80068e0:	441a      	add	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7fe fe26 	bl	800553a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006960 <xTaskIncrementTick+0x168>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d3b8      	bcc.n	800686e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006900:	e7b5      	b.n	800686e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006902:	4b17      	ldr	r3, [pc, #92]	@ (8006960 <xTaskIncrementTick+0x168>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006908:	4914      	ldr	r1, [pc, #80]	@ (800695c <xTaskIncrementTick+0x164>)
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	440b      	add	r3, r1
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d901      	bls.n	800691e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800691a:	2301      	movs	r3, #1
 800691c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800691e:	4b11      	ldr	r3, [pc, #68]	@ (8006964 <xTaskIncrementTick+0x16c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d007      	beq.n	8006936 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006926:	2301      	movs	r3, #1
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	e004      	b.n	8006936 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800692c:	4b0e      	ldr	r3, [pc, #56]	@ (8006968 <xTaskIncrementTick+0x170>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	4a0d      	ldr	r2, [pc, #52]	@ (8006968 <xTaskIncrementTick+0x170>)
 8006934:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006936:	697b      	ldr	r3, [r7, #20]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20000eb4 	.word	0x20000eb4
 8006944:	20000e90 	.word	0x20000e90
 8006948:	20000e44 	.word	0x20000e44
 800694c:	20000e48 	.word	0x20000e48
 8006950:	20000ea4 	.word	0x20000ea4
 8006954:	20000eac 	.word	0x20000eac
 8006958:	20000e94 	.word	0x20000e94
 800695c:	200009bc 	.word	0x200009bc
 8006960:	200009b8 	.word	0x200009b8
 8006964:	20000ea0 	.word	0x20000ea0
 8006968:	20000e9c 	.word	0x20000e9c

0800696c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006972:	4b2b      	ldr	r3, [pc, #172]	@ (8006a20 <vTaskSwitchContext+0xb4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800697a:	4b2a      	ldr	r3, [pc, #168]	@ (8006a24 <vTaskSwitchContext+0xb8>)
 800697c:	2201      	movs	r2, #1
 800697e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006980:	e047      	b.n	8006a12 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006982:	4b28      	ldr	r3, [pc, #160]	@ (8006a24 <vTaskSwitchContext+0xb8>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006988:	4b27      	ldr	r3, [pc, #156]	@ (8006a28 <vTaskSwitchContext+0xbc>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	e011      	b.n	80069b4 <vTaskSwitchContext+0x48>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10b      	bne.n	80069ae <vTaskSwitchContext+0x42>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	607b      	str	r3, [r7, #4]
}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	e7fd      	b.n	80069aa <vTaskSwitchContext+0x3e>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	491d      	ldr	r1, [pc, #116]	@ (8006a2c <vTaskSwitchContext+0xc0>)
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4613      	mov	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0e3      	beq.n	8006990 <vTaskSwitchContext+0x24>
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4613      	mov	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4a16      	ldr	r2, [pc, #88]	@ (8006a2c <vTaskSwitchContext+0xc0>)
 80069d4:	4413      	add	r3, r2
 80069d6:	60bb      	str	r3, [r7, #8]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	605a      	str	r2, [r3, #4]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	3308      	adds	r3, #8
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d104      	bne.n	80069f8 <vTaskSwitchContext+0x8c>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	605a      	str	r2, [r3, #4]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006a30 <vTaskSwitchContext+0xc4>)
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	4a09      	ldr	r2, [pc, #36]	@ (8006a28 <vTaskSwitchContext+0xbc>)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a08:	4b09      	ldr	r3, [pc, #36]	@ (8006a30 <vTaskSwitchContext+0xc4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3354      	adds	r3, #84	@ 0x54
 8006a0e:	4a09      	ldr	r2, [pc, #36]	@ (8006a34 <vTaskSwitchContext+0xc8>)
 8006a10:	6013      	str	r3, [r2, #0]
}
 8006a12:	bf00      	nop
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	20000eb4 	.word	0x20000eb4
 8006a24:	20000ea0 	.word	0x20000ea0
 8006a28:	20000e94 	.word	0x20000e94
 8006a2c:	200009bc 	.word	0x200009bc
 8006a30:	200009b8 	.word	0x200009b8
 8006a34:	20000020 	.word	0x20000020

08006a38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	60fb      	str	r3, [r7, #12]
}
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
 8006a5e:	e7fd      	b.n	8006a5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a60:	4b07      	ldr	r3, [pc, #28]	@ (8006a80 <vTaskPlaceOnEventList+0x48>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3318      	adds	r3, #24
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7fe fd8a 	bl	8005582 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a6e:	2101      	movs	r1, #1
 8006a70:	6838      	ldr	r0, [r7, #0]
 8006a72:	f000 fa87 	bl	8006f84 <prvAddCurrentTaskToDelayedList>
}
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	200009b8 	.word	0x200009b8

08006a84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	617b      	str	r3, [r7, #20]
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006aae:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3318      	adds	r3, #24
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f7fe fd3f 	bl	800553a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ac8:	6879      	ldr	r1, [r7, #4]
 8006aca:	68b8      	ldr	r0, [r7, #8]
 8006acc:	f000 fa5a 	bl	8006f84 <prvAddCurrentTaskToDelayedList>
	}
 8006ad0:	bf00      	nop
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	200009b8 	.word	0x200009b8

08006adc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10b      	bne.n	8006b0a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	60fb      	str	r3, [r7, #12]
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	e7fd      	b.n	8006b06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3318      	adds	r3, #24
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe fd70 	bl	80055f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b14:	4b1d      	ldr	r3, [pc, #116]	@ (8006b8c <xTaskRemoveFromEventList+0xb0>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d11d      	bne.n	8006b58 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fd67 	bl	80055f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2a:	4b19      	ldr	r3, [pc, #100]	@ (8006b90 <xTaskRemoveFromEventList+0xb4>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d903      	bls.n	8006b3a <xTaskRemoveFromEventList+0x5e>
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b36:	4a16      	ldr	r2, [pc, #88]	@ (8006b90 <xTaskRemoveFromEventList+0xb4>)
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4a13      	ldr	r2, [pc, #76]	@ (8006b94 <xTaskRemoveFromEventList+0xb8>)
 8006b48:	441a      	add	r2, r3
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4610      	mov	r0, r2
 8006b52:	f7fe fcf2 	bl	800553a <vListInsertEnd>
 8006b56:	e005      	b.n	8006b64 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	3318      	adds	r3, #24
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	480e      	ldr	r0, [pc, #56]	@ (8006b98 <xTaskRemoveFromEventList+0xbc>)
 8006b60:	f7fe fceb 	bl	800553a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b68:	4b0c      	ldr	r3, [pc, #48]	@ (8006b9c <xTaskRemoveFromEventList+0xc0>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d905      	bls.n	8006b7e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b72:	2301      	movs	r3, #1
 8006b74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b76:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba0 <xTaskRemoveFromEventList+0xc4>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	e001      	b.n	8006b82 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b82:	697b      	ldr	r3, [r7, #20]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20000eb4 	.word	0x20000eb4
 8006b90:	20000e94 	.word	0x20000e94
 8006b94:	200009bc 	.word	0x200009bc
 8006b98:	20000e4c 	.word	0x20000e4c
 8006b9c:	200009b8 	.word	0x200009b8
 8006ba0:	20000ea0 	.word	0x20000ea0

08006ba4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bac:	4b06      	ldr	r3, [pc, #24]	@ (8006bc8 <vTaskInternalSetTimeOutState+0x24>)
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bb4:	4b05      	ldr	r3, [pc, #20]	@ (8006bcc <vTaskInternalSetTimeOutState+0x28>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	605a      	str	r2, [r3, #4]
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	20000ea4 	.word	0x20000ea4
 8006bcc:	20000e90 	.word	0x20000e90

08006bd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10b      	bne.n	8006bf8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	613b      	str	r3, [r7, #16]
}
 8006bf2:	bf00      	nop
 8006bf4:	bf00      	nop
 8006bf6:	e7fd      	b.n	8006bf4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10b      	bne.n	8006c16 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	60fb      	str	r3, [r7, #12]
}
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop
 8006c14:	e7fd      	b.n	8006c12 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006c16:	f000 fe97 	bl	8007948 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c90 <xTaskCheckForTimeOut+0xc0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c32:	d102      	bne.n	8006c3a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	61fb      	str	r3, [r7, #28]
 8006c38:	e023      	b.n	8006c82 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4b15      	ldr	r3, [pc, #84]	@ (8006c94 <xTaskCheckForTimeOut+0xc4>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d007      	beq.n	8006c56 <xTaskCheckForTimeOut+0x86>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d302      	bcc.n	8006c56 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c50:	2301      	movs	r3, #1
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	e015      	b.n	8006c82 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d20b      	bcs.n	8006c78 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	1ad2      	subs	r2, r2, r3
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff ff99 	bl	8006ba4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	e004      	b.n	8006c82 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c82:	f000 fe93 	bl	80079ac <vPortExitCritical>

	return xReturn;
 8006c86:	69fb      	ldr	r3, [r7, #28]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3720      	adds	r7, #32
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20000e90 	.word	0x20000e90
 8006c94:	20000ea4 	.word	0x20000ea4

08006c98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c9c:	4b03      	ldr	r3, [pc, #12]	@ (8006cac <vTaskMissedYield+0x14>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
}
 8006ca2:	bf00      	nop
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	20000ea0 	.word	0x20000ea0

08006cb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cb8:	f000 f852 	bl	8006d60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006cbc:	4b06      	ldr	r3, [pc, #24]	@ (8006cd8 <prvIdleTask+0x28>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d9f9      	bls.n	8006cb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006cc4:	4b05      	ldr	r3, [pc, #20]	@ (8006cdc <prvIdleTask+0x2c>)
 8006cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cd4:	e7f0      	b.n	8006cb8 <prvIdleTask+0x8>
 8006cd6:	bf00      	nop
 8006cd8:	200009bc 	.word	0x200009bc
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	e00c      	b.n	8006d06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4a12      	ldr	r2, [pc, #72]	@ (8006d40 <prvInitialiseTaskLists+0x60>)
 8006cf8:	4413      	add	r3, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fbf0 	bl	80054e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3301      	adds	r3, #1
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b37      	cmp	r3, #55	@ 0x37
 8006d0a:	d9ef      	bls.n	8006cec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d0c:	480d      	ldr	r0, [pc, #52]	@ (8006d44 <prvInitialiseTaskLists+0x64>)
 8006d0e:	f7fe fbe7 	bl	80054e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d12:	480d      	ldr	r0, [pc, #52]	@ (8006d48 <prvInitialiseTaskLists+0x68>)
 8006d14:	f7fe fbe4 	bl	80054e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d18:	480c      	ldr	r0, [pc, #48]	@ (8006d4c <prvInitialiseTaskLists+0x6c>)
 8006d1a:	f7fe fbe1 	bl	80054e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d1e:	480c      	ldr	r0, [pc, #48]	@ (8006d50 <prvInitialiseTaskLists+0x70>)
 8006d20:	f7fe fbde 	bl	80054e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d24:	480b      	ldr	r0, [pc, #44]	@ (8006d54 <prvInitialiseTaskLists+0x74>)
 8006d26:	f7fe fbdb 	bl	80054e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d58 <prvInitialiseTaskLists+0x78>)
 8006d2c:	4a05      	ldr	r2, [pc, #20]	@ (8006d44 <prvInitialiseTaskLists+0x64>)
 8006d2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d30:	4b0a      	ldr	r3, [pc, #40]	@ (8006d5c <prvInitialiseTaskLists+0x7c>)
 8006d32:	4a05      	ldr	r2, [pc, #20]	@ (8006d48 <prvInitialiseTaskLists+0x68>)
 8006d34:	601a      	str	r2, [r3, #0]
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	200009bc 	.word	0x200009bc
 8006d44:	20000e1c 	.word	0x20000e1c
 8006d48:	20000e30 	.word	0x20000e30
 8006d4c:	20000e4c 	.word	0x20000e4c
 8006d50:	20000e60 	.word	0x20000e60
 8006d54:	20000e78 	.word	0x20000e78
 8006d58:	20000e44 	.word	0x20000e44
 8006d5c:	20000e48 	.word	0x20000e48

08006d60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d66:	e019      	b.n	8006d9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d68:	f000 fdee 	bl	8007948 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d6c:	4b10      	ldr	r3, [pc, #64]	@ (8006db0 <prvCheckTasksWaitingTermination+0x50>)
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe fc3b 	bl	80055f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006db4 <prvCheckTasksWaitingTermination+0x54>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	4a0b      	ldr	r2, [pc, #44]	@ (8006db4 <prvCheckTasksWaitingTermination+0x54>)
 8006d86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d88:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <prvCheckTasksWaitingTermination+0x58>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006db8 <prvCheckTasksWaitingTermination+0x58>)
 8006d90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d92:	f000 fe0b 	bl	80079ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f810 	bl	8006dbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d9c:	4b06      	ldr	r3, [pc, #24]	@ (8006db8 <prvCheckTasksWaitingTermination+0x58>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e1      	bne.n	8006d68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000e60 	.word	0x20000e60
 8006db4:	20000e8c 	.word	0x20000e8c
 8006db8:	20000e74 	.word	0x20000e74

08006dbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3354      	adds	r3, #84	@ 0x54
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f001 fb11 	bl	80083f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d108      	bne.n	8006dea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 ffa3 	bl	8007d28 <vPortFree>
				vPortFree( pxTCB );
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 ffa0 	bl	8007d28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006de8:	e019      	b.n	8006e1e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d103      	bne.n	8006dfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 ff97 	bl	8007d28 <vPortFree>
	}
 8006dfa:	e010      	b.n	8006e1e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d00b      	beq.n	8006e1e <prvDeleteTCB+0x62>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	60fb      	str	r3, [r7, #12]
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	e7fd      	b.n	8006e1a <prvDeleteTCB+0x5e>
	}
 8006e1e:	bf00      	nop
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e60 <prvResetNextTaskUnblockTime+0x38>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d104      	bne.n	8006e42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e38:	4b0a      	ldr	r3, [pc, #40]	@ (8006e64 <prvResetNextTaskUnblockTime+0x3c>)
 8006e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e40:	e008      	b.n	8006e54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e42:	4b07      	ldr	r3, [pc, #28]	@ (8006e60 <prvResetNextTaskUnblockTime+0x38>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	4a04      	ldr	r2, [pc, #16]	@ (8006e64 <prvResetNextTaskUnblockTime+0x3c>)
 8006e52:	6013      	str	r3, [r2, #0]
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	20000e44 	.word	0x20000e44
 8006e64:	20000eac 	.word	0x20000eac

08006e68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e9c <xTaskGetSchedulerState+0x34>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d102      	bne.n	8006e7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e76:	2301      	movs	r3, #1
 8006e78:	607b      	str	r3, [r7, #4]
 8006e7a:	e008      	b.n	8006e8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e7c:	4b08      	ldr	r3, [pc, #32]	@ (8006ea0 <xTaskGetSchedulerState+0x38>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e84:	2302      	movs	r3, #2
 8006e86:	607b      	str	r3, [r7, #4]
 8006e88:	e001      	b.n	8006e8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e8e:	687b      	ldr	r3, [r7, #4]
	}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	20000e98 	.word	0x20000e98
 8006ea0:	20000eb4 	.word	0x20000eb4

08006ea4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d058      	beq.n	8006f6c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006eba:	4b2f      	ldr	r3, [pc, #188]	@ (8006f78 <xTaskPriorityDisinherit+0xd4>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d00b      	beq.n	8006edc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	60fb      	str	r3, [r7, #12]
}
 8006ed6:	bf00      	nop
 8006ed8:	bf00      	nop
 8006eda:	e7fd      	b.n	8006ed8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	60bb      	str	r3, [r7, #8]
}
 8006ef6:	bf00      	nop
 8006ef8:	bf00      	nop
 8006efa:	e7fd      	b.n	8006ef8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f00:	1e5a      	subs	r2, r3, #1
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d02c      	beq.n	8006f6c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d128      	bne.n	8006f6c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fb68 	bl	80055f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f7c <xTaskPriorityDisinherit+0xd8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d903      	bls.n	8006f4c <xTaskPriorityDisinherit+0xa8>
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f48:	4a0c      	ldr	r2, [pc, #48]	@ (8006f7c <xTaskPriorityDisinherit+0xd8>)
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4a09      	ldr	r2, [pc, #36]	@ (8006f80 <xTaskPriorityDisinherit+0xdc>)
 8006f5a:	441a      	add	r2, r3
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4619      	mov	r1, r3
 8006f62:	4610      	mov	r0, r2
 8006f64:	f7fe fae9 	bl	800553a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f6c:	697b      	ldr	r3, [r7, #20]
	}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	200009b8 	.word	0x200009b8
 8006f7c:	20000e94 	.word	0x20000e94
 8006f80:	200009bc 	.word	0x200009bc

08006f84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f8e:	4b21      	ldr	r3, [pc, #132]	@ (8007014 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f94:	4b20      	ldr	r3, [pc, #128]	@ (8007018 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe fb2a 	bl	80055f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa6:	d10a      	bne.n	8006fbe <prvAddCurrentTaskToDelayedList+0x3a>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d007      	beq.n	8006fbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fae:	4b1a      	ldr	r3, [pc, #104]	@ (8007018 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4819      	ldr	r0, [pc, #100]	@ (800701c <prvAddCurrentTaskToDelayedList+0x98>)
 8006fb8:	f7fe fabf 	bl	800553a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fbc:	e026      	b.n	800700c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fc6:	4b14      	ldr	r3, [pc, #80]	@ (8007018 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d209      	bcs.n	8006fea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fd6:	4b12      	ldr	r3, [pc, #72]	@ (8007020 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b0f      	ldr	r3, [pc, #60]	@ (8007018 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	f7fe facd 	bl	8005582 <vListInsert>
}
 8006fe8:	e010      	b.n	800700c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fea:	4b0e      	ldr	r3, [pc, #56]	@ (8007024 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f7fe fac3 	bl	8005582 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8007028 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	429a      	cmp	r2, r3
 8007004:	d202      	bcs.n	800700c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007006:	4a08      	ldr	r2, [pc, #32]	@ (8007028 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	6013      	str	r3, [r2, #0]
}
 800700c:	bf00      	nop
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20000e90 	.word	0x20000e90
 8007018:	200009b8 	.word	0x200009b8
 800701c:	20000e78 	.word	0x20000e78
 8007020:	20000e48 	.word	0x20000e48
 8007024:	20000e44 	.word	0x20000e44
 8007028:	20000eac 	.word	0x20000eac

0800702c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08a      	sub	sp, #40	@ 0x28
 8007030:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007036:	f000 fb13 	bl	8007660 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800703a:	4b1d      	ldr	r3, [pc, #116]	@ (80070b0 <xTimerCreateTimerTask+0x84>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d021      	beq.n	8007086 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007046:	2300      	movs	r3, #0
 8007048:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800704a:	1d3a      	adds	r2, r7, #4
 800704c:	f107 0108 	add.w	r1, r7, #8
 8007050:	f107 030c 	add.w	r3, r7, #12
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe fa29 	bl	80054ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800705a:	6879      	ldr	r1, [r7, #4]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	9202      	str	r2, [sp, #8]
 8007062:	9301      	str	r3, [sp, #4]
 8007064:	2302      	movs	r3, #2
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	2300      	movs	r3, #0
 800706a:	460a      	mov	r2, r1
 800706c:	4911      	ldr	r1, [pc, #68]	@ (80070b4 <xTimerCreateTimerTask+0x88>)
 800706e:	4812      	ldr	r0, [pc, #72]	@ (80070b8 <xTimerCreateTimerTask+0x8c>)
 8007070:	f7ff f8a2 	bl	80061b8 <xTaskCreateStatic>
 8007074:	4603      	mov	r3, r0
 8007076:	4a11      	ldr	r2, [pc, #68]	@ (80070bc <xTimerCreateTimerTask+0x90>)
 8007078:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800707a:	4b10      	ldr	r3, [pc, #64]	@ (80070bc <xTimerCreateTimerTask+0x90>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007082:	2301      	movs	r3, #1
 8007084:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10b      	bne.n	80070a4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	613b      	str	r3, [r7, #16]
}
 800709e:	bf00      	nop
 80070a0:	bf00      	nop
 80070a2:	e7fd      	b.n	80070a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80070a4:	697b      	ldr	r3, [r7, #20]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20000ee8 	.word	0x20000ee8
 80070b4:	08009444 	.word	0x08009444
 80070b8:	080071f9 	.word	0x080071f9
 80070bc:	20000eec 	.word	0x20000eec

080070c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08a      	sub	sp, #40	@ 0x28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10b      	bne.n	80070f0 <xTimerGenericCommand+0x30>
	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	623b      	str	r3, [r7, #32]
}
 80070ea:	bf00      	nop
 80070ec:	bf00      	nop
 80070ee:	e7fd      	b.n	80070ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070f0:	4b19      	ldr	r3, [pc, #100]	@ (8007158 <xTimerGenericCommand+0x98>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d02a      	beq.n	800714e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b05      	cmp	r3, #5
 8007108:	dc18      	bgt.n	800713c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800710a:	f7ff fead 	bl	8006e68 <xTaskGetSchedulerState>
 800710e:	4603      	mov	r3, r0
 8007110:	2b02      	cmp	r3, #2
 8007112:	d109      	bne.n	8007128 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007114:	4b10      	ldr	r3, [pc, #64]	@ (8007158 <xTimerGenericCommand+0x98>)
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	f107 0110 	add.w	r1, r7, #16
 800711c:	2300      	movs	r3, #0
 800711e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007120:	f7fe fbd8 	bl	80058d4 <xQueueGenericSend>
 8007124:	6278      	str	r0, [r7, #36]	@ 0x24
 8007126:	e012      	b.n	800714e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007128:	4b0b      	ldr	r3, [pc, #44]	@ (8007158 <xTimerGenericCommand+0x98>)
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	f107 0110 	add.w	r1, r7, #16
 8007130:	2300      	movs	r3, #0
 8007132:	2200      	movs	r2, #0
 8007134:	f7fe fbce 	bl	80058d4 <xQueueGenericSend>
 8007138:	6278      	str	r0, [r7, #36]	@ 0x24
 800713a:	e008      	b.n	800714e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800713c:	4b06      	ldr	r3, [pc, #24]	@ (8007158 <xTimerGenericCommand+0x98>)
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	f107 0110 	add.w	r1, r7, #16
 8007144:	2300      	movs	r3, #0
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	f7fe fcc6 	bl	8005ad8 <xQueueGenericSendFromISR>
 800714c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007150:	4618      	mov	r0, r3
 8007152:	3728      	adds	r7, #40	@ 0x28
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20000ee8 	.word	0x20000ee8

0800715c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af02      	add	r7, sp, #8
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007166:	4b23      	ldr	r3, [pc, #140]	@ (80071f4 <prvProcessExpiredTimer+0x98>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	3304      	adds	r3, #4
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe fa3d 	bl	80055f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	d023      	beq.n	80071d0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	699a      	ldr	r2, [r3, #24]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	18d1      	adds	r1, r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	6978      	ldr	r0, [r7, #20]
 8007196:	f000 f8d5 	bl	8007344 <prvInsertTimerInActiveList>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d020      	beq.n	80071e2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071a0:	2300      	movs	r3, #0
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	2300      	movs	r3, #0
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	2100      	movs	r1, #0
 80071aa:	6978      	ldr	r0, [r7, #20]
 80071ac:	f7ff ff88 	bl	80070c0 <xTimerGenericCommand>
 80071b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d114      	bne.n	80071e2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	60fb      	str	r3, [r7, #12]
}
 80071ca:	bf00      	nop
 80071cc:	bf00      	nop
 80071ce:	e7fd      	b.n	80071cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071d6:	f023 0301 	bic.w	r3, r3, #1
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	6978      	ldr	r0, [r7, #20]
 80071e8:	4798      	blx	r3
}
 80071ea:	bf00      	nop
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000ee0 	.word	0x20000ee0

080071f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007200:	f107 0308 	add.w	r3, r7, #8
 8007204:	4618      	mov	r0, r3
 8007206:	f000 f859 	bl	80072bc <prvGetNextExpireTime>
 800720a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4619      	mov	r1, r3
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f805 	bl	8007220 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007216:	f000 f8d7 	bl	80073c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800721a:	bf00      	nop
 800721c:	e7f0      	b.n	8007200 <prvTimerTask+0x8>
	...

08007220 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800722a:	f7ff fa29 	bl	8006680 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800722e:	f107 0308 	add.w	r3, r7, #8
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f866 	bl	8007304 <prvSampleTimeNow>
 8007238:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d130      	bne.n	80072a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10a      	bne.n	800725c <prvProcessTimerOrBlockTask+0x3c>
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	429a      	cmp	r2, r3
 800724c:	d806      	bhi.n	800725c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800724e:	f7ff fa25 	bl	800669c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007252:	68f9      	ldr	r1, [r7, #12]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff ff81 	bl	800715c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800725a:	e024      	b.n	80072a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d008      	beq.n	8007274 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007262:	4b13      	ldr	r3, [pc, #76]	@ (80072b0 <prvProcessTimerOrBlockTask+0x90>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <prvProcessTimerOrBlockTask+0x50>
 800726c:	2301      	movs	r3, #1
 800726e:	e000      	b.n	8007272 <prvProcessTimerOrBlockTask+0x52>
 8007270:	2300      	movs	r3, #0
 8007272:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007274:	4b0f      	ldr	r3, [pc, #60]	@ (80072b4 <prvProcessTimerOrBlockTask+0x94>)
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	4619      	mov	r1, r3
 8007282:	f7fe ff65 	bl	8006150 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007286:	f7ff fa09 	bl	800669c <xTaskResumeAll>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10a      	bne.n	80072a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007290:	4b09      	ldr	r3, [pc, #36]	@ (80072b8 <prvProcessTimerOrBlockTask+0x98>)
 8007292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	f3bf 8f6f 	isb	sy
}
 80072a0:	e001      	b.n	80072a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072a2:	f7ff f9fb 	bl	800669c <xTaskResumeAll>
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000ee4 	.word	0x20000ee4
 80072b4:	20000ee8 	.word	0x20000ee8
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007300 <prvGetNextExpireTime+0x44>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <prvGetNextExpireTime+0x16>
 80072ce:	2201      	movs	r2, #1
 80072d0:	e000      	b.n	80072d4 <prvGetNextExpireTime+0x18>
 80072d2:	2200      	movs	r2, #0
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d105      	bne.n	80072ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072e0:	4b07      	ldr	r3, [pc, #28]	@ (8007300 <prvGetNextExpireTime+0x44>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e001      	b.n	80072f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072f0:	68fb      	ldr	r3, [r7, #12]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	20000ee0 	.word	0x20000ee0

08007304 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800730c:	f7ff fa64 	bl	80067d8 <xTaskGetTickCount>
 8007310:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007312:	4b0b      	ldr	r3, [pc, #44]	@ (8007340 <prvSampleTimeNow+0x3c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	429a      	cmp	r2, r3
 800731a:	d205      	bcs.n	8007328 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800731c:	f000 f93a 	bl	8007594 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	e002      	b.n	800732e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800732e:	4a04      	ldr	r2, [pc, #16]	@ (8007340 <prvSampleTimeNow+0x3c>)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007334:	68fb      	ldr	r3, [r7, #12]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20000ef0 	.word	0x20000ef0

08007344 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	429a      	cmp	r2, r3
 8007368:	d812      	bhi.n	8007390 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	429a      	cmp	r2, r3
 8007376:	d302      	bcc.n	800737e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007378:	2301      	movs	r3, #1
 800737a:	617b      	str	r3, [r7, #20]
 800737c:	e01b      	b.n	80073b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800737e:	4b10      	ldr	r3, [pc, #64]	@ (80073c0 <prvInsertTimerInActiveList+0x7c>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3304      	adds	r3, #4
 8007386:	4619      	mov	r1, r3
 8007388:	4610      	mov	r0, r2
 800738a:	f7fe f8fa 	bl	8005582 <vListInsert>
 800738e:	e012      	b.n	80073b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d206      	bcs.n	80073a6 <prvInsertTimerInActiveList+0x62>
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d302      	bcc.n	80073a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073a0:	2301      	movs	r3, #1
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	e007      	b.n	80073b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073a6:	4b07      	ldr	r3, [pc, #28]	@ (80073c4 <prvInsertTimerInActiveList+0x80>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4619      	mov	r1, r3
 80073b0:	4610      	mov	r0, r2
 80073b2:	f7fe f8e6 	bl	8005582 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073b6:	697b      	ldr	r3, [r7, #20]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20000ee4 	.word	0x20000ee4
 80073c4:	20000ee0 	.word	0x20000ee0

080073c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08e      	sub	sp, #56	@ 0x38
 80073cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073ce:	e0ce      	b.n	800756e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	da19      	bge.n	800740a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073d6:	1d3b      	adds	r3, r7, #4
 80073d8:	3304      	adds	r3, #4
 80073da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10b      	bne.n	80073fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	61fb      	str	r3, [r7, #28]
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007400:	6850      	ldr	r0, [r2, #4]
 8007402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007404:	6892      	ldr	r2, [r2, #8]
 8007406:	4611      	mov	r1, r2
 8007408:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f2c0 80ae 	blt.w	800756e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d004      	beq.n	8007428 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800741e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007420:	3304      	adds	r3, #4
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe f8e6 	bl	80055f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007428:	463b      	mov	r3, r7
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff ff6a 	bl	8007304 <prvSampleTimeNow>
 8007430:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b09      	cmp	r3, #9
 8007436:	f200 8097 	bhi.w	8007568 <prvProcessReceivedCommands+0x1a0>
 800743a:	a201      	add	r2, pc, #4	@ (adr r2, 8007440 <prvProcessReceivedCommands+0x78>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007469 	.word	0x08007469
 8007444:	08007469 	.word	0x08007469
 8007448:	08007469 	.word	0x08007469
 800744c:	080074df 	.word	0x080074df
 8007450:	080074f3 	.word	0x080074f3
 8007454:	0800753f 	.word	0x0800753f
 8007458:	08007469 	.word	0x08007469
 800745c:	08007469 	.word	0x08007469
 8007460:	080074df 	.word	0x080074df
 8007464:	080074f3 	.word	0x080074f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800746e:	f043 0301 	orr.w	r3, r3, #1
 8007472:	b2da      	uxtb	r2, r3
 8007474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007476:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	18d1      	adds	r1, r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007488:	f7ff ff5c 	bl	8007344 <prvInsertTimerInActiveList>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d06c      	beq.n	800756c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007498:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d061      	beq.n	800756c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	441a      	add	r2, r3
 80074b0:	2300      	movs	r3, #0
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	2300      	movs	r3, #0
 80074b6:	2100      	movs	r1, #0
 80074b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074ba:	f7ff fe01 	bl	80070c0 <xTimerGenericCommand>
 80074be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d152      	bne.n	800756c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	61bb      	str	r3, [r7, #24]
}
 80074d8:	bf00      	nop
 80074da:	bf00      	nop
 80074dc:	e7fd      	b.n	80074da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074f0:	e03d      	b.n	800756e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074f8:	f043 0301 	orr.w	r3, r3, #1
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007500:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007508:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800750a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10b      	bne.n	800752a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	617b      	str	r3, [r7, #20]
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop
 8007528:	e7fd      	b.n	8007526 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	699a      	ldr	r2, [r3, #24]
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	18d1      	adds	r1, r2, r3
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007538:	f7ff ff04 	bl	8007344 <prvInsertTimerInActiveList>
					break;
 800753c:	e017      	b.n	800756e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800753e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d103      	bne.n	8007554 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800754c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800754e:	f000 fbeb 	bl	8007d28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007552:	e00c      	b.n	800756e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800755a:	f023 0301 	bic.w	r3, r3, #1
 800755e:	b2da      	uxtb	r2, r3
 8007560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007562:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007566:	e002      	b.n	800756e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007568:	bf00      	nop
 800756a:	e000      	b.n	800756e <prvProcessReceivedCommands+0x1a6>
					break;
 800756c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800756e:	4b08      	ldr	r3, [pc, #32]	@ (8007590 <prvProcessReceivedCommands+0x1c8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	1d39      	adds	r1, r7, #4
 8007574:	2200      	movs	r2, #0
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fb4c 	bl	8005c14 <xQueueReceive>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	f47f af26 	bne.w	80073d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	3730      	adds	r7, #48	@ 0x30
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000ee8 	.word	0x20000ee8

08007594 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b088      	sub	sp, #32
 8007598:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800759a:	e049      	b.n	8007630 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800759c:	4b2e      	ldr	r3, [pc, #184]	@ (8007658 <prvSwitchTimerLists+0xc4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007658 <prvSwitchTimerLists+0xc4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3304      	adds	r3, #4
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe f81d 	bl	80055f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d02f      	beq.n	8007630 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	4413      	add	r3, r2
 80075d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d90e      	bls.n	8007600 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007658 <prvSwitchTimerLists+0xc4>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3304      	adds	r3, #4
 80075f6:	4619      	mov	r1, r3
 80075f8:	4610      	mov	r0, r2
 80075fa:	f7fd ffc2 	bl	8005582 <vListInsert>
 80075fe:	e017      	b.n	8007630 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007600:	2300      	movs	r3, #0
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	2300      	movs	r3, #0
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	2100      	movs	r1, #0
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff fd58 	bl	80070c0 <xTimerGenericCommand>
 8007610:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10b      	bne.n	8007630 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	603b      	str	r3, [r7, #0]
}
 800762a:	bf00      	nop
 800762c:	bf00      	nop
 800762e:	e7fd      	b.n	800762c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007630:	4b09      	ldr	r3, [pc, #36]	@ (8007658 <prvSwitchTimerLists+0xc4>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1b0      	bne.n	800759c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800763a:	4b07      	ldr	r3, [pc, #28]	@ (8007658 <prvSwitchTimerLists+0xc4>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007640:	4b06      	ldr	r3, [pc, #24]	@ (800765c <prvSwitchTimerLists+0xc8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a04      	ldr	r2, [pc, #16]	@ (8007658 <prvSwitchTimerLists+0xc4>)
 8007646:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007648:	4a04      	ldr	r2, [pc, #16]	@ (800765c <prvSwitchTimerLists+0xc8>)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	6013      	str	r3, [r2, #0]
}
 800764e:	bf00      	nop
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000ee0 	.word	0x20000ee0
 800765c:	20000ee4 	.word	0x20000ee4

08007660 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007666:	f000 f96f 	bl	8007948 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800766a:	4b15      	ldr	r3, [pc, #84]	@ (80076c0 <prvCheckForValidListAndQueue+0x60>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d120      	bne.n	80076b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007672:	4814      	ldr	r0, [pc, #80]	@ (80076c4 <prvCheckForValidListAndQueue+0x64>)
 8007674:	f7fd ff34 	bl	80054e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007678:	4813      	ldr	r0, [pc, #76]	@ (80076c8 <prvCheckForValidListAndQueue+0x68>)
 800767a:	f7fd ff31 	bl	80054e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800767e:	4b13      	ldr	r3, [pc, #76]	@ (80076cc <prvCheckForValidListAndQueue+0x6c>)
 8007680:	4a10      	ldr	r2, [pc, #64]	@ (80076c4 <prvCheckForValidListAndQueue+0x64>)
 8007682:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007684:	4b12      	ldr	r3, [pc, #72]	@ (80076d0 <prvCheckForValidListAndQueue+0x70>)
 8007686:	4a10      	ldr	r2, [pc, #64]	@ (80076c8 <prvCheckForValidListAndQueue+0x68>)
 8007688:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800768a:	2300      	movs	r3, #0
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	4b11      	ldr	r3, [pc, #68]	@ (80076d4 <prvCheckForValidListAndQueue+0x74>)
 8007690:	4a11      	ldr	r2, [pc, #68]	@ (80076d8 <prvCheckForValidListAndQueue+0x78>)
 8007692:	2110      	movs	r1, #16
 8007694:	200a      	movs	r0, #10
 8007696:	f7fe f841 	bl	800571c <xQueueGenericCreateStatic>
 800769a:	4603      	mov	r3, r0
 800769c:	4a08      	ldr	r2, [pc, #32]	@ (80076c0 <prvCheckForValidListAndQueue+0x60>)
 800769e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076a0:	4b07      	ldr	r3, [pc, #28]	@ (80076c0 <prvCheckForValidListAndQueue+0x60>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076a8:	4b05      	ldr	r3, [pc, #20]	@ (80076c0 <prvCheckForValidListAndQueue+0x60>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	490b      	ldr	r1, [pc, #44]	@ (80076dc <prvCheckForValidListAndQueue+0x7c>)
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe fd24 	bl	80060fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076b4:	f000 f97a 	bl	80079ac <vPortExitCritical>
}
 80076b8:	bf00      	nop
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000ee8 	.word	0x20000ee8
 80076c4:	20000eb8 	.word	0x20000eb8
 80076c8:	20000ecc 	.word	0x20000ecc
 80076cc:	20000ee0 	.word	0x20000ee0
 80076d0:	20000ee4 	.word	0x20000ee4
 80076d4:	20000f94 	.word	0x20000f94
 80076d8:	20000ef4 	.word	0x20000ef4
 80076dc:	0800944c 	.word	0x0800944c

080076e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3b04      	subs	r3, #4
 80076f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3b04      	subs	r3, #4
 80076fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f023 0201 	bic.w	r2, r3, #1
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3b04      	subs	r3, #4
 800770e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007710:	4a0c      	ldr	r2, [pc, #48]	@ (8007744 <pxPortInitialiseStack+0x64>)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3b14      	subs	r3, #20
 800771a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3b04      	subs	r3, #4
 8007726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f06f 0202 	mvn.w	r2, #2
 800772e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3b20      	subs	r3, #32
 8007734:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007736:	68fb      	ldr	r3, [r7, #12]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	08007749 	.word	0x08007749

08007748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800774e:	2300      	movs	r3, #0
 8007750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007752:	4b13      	ldr	r3, [pc, #76]	@ (80077a0 <prvTaskExitError+0x58>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775a:	d00b      	beq.n	8007774 <prvTaskExitError+0x2c>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	60fb      	str	r3, [r7, #12]
}
 800776e:	bf00      	nop
 8007770:	bf00      	nop
 8007772:	e7fd      	b.n	8007770 <prvTaskExitError+0x28>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	60bb      	str	r3, [r7, #8]
}
 8007786:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007788:	bf00      	nop
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0fc      	beq.n	800778a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007790:	bf00      	nop
 8007792:	bf00      	nop
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000010 	.word	0x20000010
	...

080077b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077b0:	4b07      	ldr	r3, [pc, #28]	@ (80077d0 <pxCurrentTCBConst2>)
 80077b2:	6819      	ldr	r1, [r3, #0]
 80077b4:	6808      	ldr	r0, [r1, #0]
 80077b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	f380 8809 	msr	PSP, r0
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8811 	msr	BASEPRI, r0
 80077ca:	4770      	bx	lr
 80077cc:	f3af 8000 	nop.w

080077d0 <pxCurrentTCBConst2>:
 80077d0:	200009b8 	.word	0x200009b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop

080077d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077d8:	4808      	ldr	r0, [pc, #32]	@ (80077fc <prvPortStartFirstTask+0x24>)
 80077da:	6800      	ldr	r0, [r0, #0]
 80077dc:	6800      	ldr	r0, [r0, #0]
 80077de:	f380 8808 	msr	MSP, r0
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f380 8814 	msr	CONTROL, r0
 80077ea:	b662      	cpsie	i
 80077ec:	b661      	cpsie	f
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	df00      	svc	0
 80077f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077fa:	bf00      	nop
 80077fc:	e000ed08 	.word	0xe000ed08

08007800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007806:	4b47      	ldr	r3, [pc, #284]	@ (8007924 <xPortStartScheduler+0x124>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a47      	ldr	r2, [pc, #284]	@ (8007928 <xPortStartScheduler+0x128>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d10b      	bne.n	8007828 <xPortStartScheduler+0x28>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	60fb      	str	r3, [r7, #12]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007828:	4b3e      	ldr	r3, [pc, #248]	@ (8007924 <xPortStartScheduler+0x124>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a3f      	ldr	r2, [pc, #252]	@ (800792c <xPortStartScheduler+0x12c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d10b      	bne.n	800784a <xPortStartScheduler+0x4a>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	613b      	str	r3, [r7, #16]
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	e7fd      	b.n	8007846 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800784a:	4b39      	ldr	r3, [pc, #228]	@ (8007930 <xPortStartScheduler+0x130>)
 800784c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	22ff      	movs	r2, #255	@ 0xff
 800785a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800786c:	b2da      	uxtb	r2, r3
 800786e:	4b31      	ldr	r3, [pc, #196]	@ (8007934 <xPortStartScheduler+0x134>)
 8007870:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007872:	4b31      	ldr	r3, [pc, #196]	@ (8007938 <xPortStartScheduler+0x138>)
 8007874:	2207      	movs	r2, #7
 8007876:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007878:	e009      	b.n	800788e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800787a:	4b2f      	ldr	r3, [pc, #188]	@ (8007938 <xPortStartScheduler+0x138>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3b01      	subs	r3, #1
 8007880:	4a2d      	ldr	r2, [pc, #180]	@ (8007938 <xPortStartScheduler+0x138>)
 8007882:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007884:	78fb      	ldrb	r3, [r7, #3]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	b2db      	uxtb	r3, r3
 800788c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800788e:	78fb      	ldrb	r3, [r7, #3]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007896:	2b80      	cmp	r3, #128	@ 0x80
 8007898:	d0ef      	beq.n	800787a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800789a:	4b27      	ldr	r3, [pc, #156]	@ (8007938 <xPortStartScheduler+0x138>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f1c3 0307 	rsb	r3, r3, #7
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d00b      	beq.n	80078be <xPortStartScheduler+0xbe>
	__asm volatile
 80078a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	60bb      	str	r3, [r7, #8]
}
 80078b8:	bf00      	nop
 80078ba:	bf00      	nop
 80078bc:	e7fd      	b.n	80078ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078be:	4b1e      	ldr	r3, [pc, #120]	@ (8007938 <xPortStartScheduler+0x138>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007938 <xPortStartScheduler+0x138>)
 80078c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007938 <xPortStartScheduler+0x138>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078d0:	4a19      	ldr	r2, [pc, #100]	@ (8007938 <xPortStartScheduler+0x138>)
 80078d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078dc:	4b17      	ldr	r3, [pc, #92]	@ (800793c <xPortStartScheduler+0x13c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a16      	ldr	r2, [pc, #88]	@ (800793c <xPortStartScheduler+0x13c>)
 80078e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078e8:	4b14      	ldr	r3, [pc, #80]	@ (800793c <xPortStartScheduler+0x13c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a13      	ldr	r2, [pc, #76]	@ (800793c <xPortStartScheduler+0x13c>)
 80078ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078f4:	f000 f8da 	bl	8007aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078f8:	4b11      	ldr	r3, [pc, #68]	@ (8007940 <xPortStartScheduler+0x140>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078fe:	f000 f8f9 	bl	8007af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007902:	4b10      	ldr	r3, [pc, #64]	@ (8007944 <xPortStartScheduler+0x144>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a0f      	ldr	r2, [pc, #60]	@ (8007944 <xPortStartScheduler+0x144>)
 8007908:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800790c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800790e:	f7ff ff63 	bl	80077d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007912:	f7ff f82b 	bl	800696c <vTaskSwitchContext>
	prvTaskExitError();
 8007916:	f7ff ff17 	bl	8007748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	e000ed00 	.word	0xe000ed00
 8007928:	410fc271 	.word	0x410fc271
 800792c:	410fc270 	.word	0x410fc270
 8007930:	e000e400 	.word	0xe000e400
 8007934:	20000fe4 	.word	0x20000fe4
 8007938:	20000fe8 	.word	0x20000fe8
 800793c:	e000ed20 	.word	0xe000ed20
 8007940:	20000010 	.word	0x20000010
 8007944:	e000ef34 	.word	0xe000ef34

08007948 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
}
 8007960:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007962:	4b10      	ldr	r3, [pc, #64]	@ (80079a4 <vPortEnterCritical+0x5c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3301      	adds	r3, #1
 8007968:	4a0e      	ldr	r2, [pc, #56]	@ (80079a4 <vPortEnterCritical+0x5c>)
 800796a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800796c:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <vPortEnterCritical+0x5c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d110      	bne.n	8007996 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007974:	4b0c      	ldr	r3, [pc, #48]	@ (80079a8 <vPortEnterCritical+0x60>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00b      	beq.n	8007996 <vPortEnterCritical+0x4e>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	603b      	str	r3, [r7, #0]
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	e7fd      	b.n	8007992 <vPortEnterCritical+0x4a>
	}
}
 8007996:	bf00      	nop
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	20000010 	.word	0x20000010
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079b2:	4b12      	ldr	r3, [pc, #72]	@ (80079fc <vPortExitCritical+0x50>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10b      	bne.n	80079d2 <vPortExitCritical+0x26>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	607b      	str	r3, [r7, #4]
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	e7fd      	b.n	80079ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079d2:	4b0a      	ldr	r3, [pc, #40]	@ (80079fc <vPortExitCritical+0x50>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	4a08      	ldr	r2, [pc, #32]	@ (80079fc <vPortExitCritical+0x50>)
 80079da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079dc:	4b07      	ldr	r3, [pc, #28]	@ (80079fc <vPortExitCritical+0x50>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d105      	bne.n	80079f0 <vPortExitCritical+0x44>
 80079e4:	2300      	movs	r3, #0
 80079e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f383 8811 	msr	BASEPRI, r3
}
 80079ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	20000010 	.word	0x20000010

08007a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a00:	f3ef 8009 	mrs	r0, PSP
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	4b15      	ldr	r3, [pc, #84]	@ (8007a60 <pxCurrentTCBConst>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	f01e 0f10 	tst.w	lr, #16
 8007a10:	bf08      	it	eq
 8007a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	6010      	str	r0, [r2, #0]
 8007a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a24:	f380 8811 	msr	BASEPRI, r0
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f7fe ff9c 	bl	800696c <vTaskSwitchContext>
 8007a34:	f04f 0000 	mov.w	r0, #0
 8007a38:	f380 8811 	msr	BASEPRI, r0
 8007a3c:	bc09      	pop	{r0, r3}
 8007a3e:	6819      	ldr	r1, [r3, #0]
 8007a40:	6808      	ldr	r0, [r1, #0]
 8007a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a46:	f01e 0f10 	tst.w	lr, #16
 8007a4a:	bf08      	it	eq
 8007a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a50:	f380 8809 	msr	PSP, r0
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	f3af 8000 	nop.w

08007a60 <pxCurrentTCBConst>:
 8007a60:	200009b8 	.word	0x200009b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop

08007a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	607b      	str	r3, [r7, #4]
}
 8007a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a82:	f7fe feb9 	bl	80067f8 <xTaskIncrementTick>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a8c:	4b06      	ldr	r3, [pc, #24]	@ (8007aa8 <xPortSysTickHandler+0x40>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f383 8811 	msr	BASEPRI, r3
}
 8007a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae4 <vPortSetupTimerInterrupt+0x38>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007abc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae8 <vPortSetupTimerInterrupt+0x3c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8007aec <vPortSetupTimerInterrupt+0x40>)
 8007ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac6:	099b      	lsrs	r3, r3, #6
 8007ac8:	4a09      	ldr	r2, [pc, #36]	@ (8007af0 <vPortSetupTimerInterrupt+0x44>)
 8007aca:	3b01      	subs	r3, #1
 8007acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ace:	4b04      	ldr	r3, [pc, #16]	@ (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	e000e010 	.word	0xe000e010
 8007ae4:	e000e018 	.word	0xe000e018
 8007ae8:	20000004 	.word	0x20000004
 8007aec:	10624dd3 	.word	0x10624dd3
 8007af0:	e000e014 	.word	0xe000e014

08007af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007af4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007b04 <vPortEnableVFP+0x10>
 8007af8:	6801      	ldr	r1, [r0, #0]
 8007afa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007afe:	6001      	str	r1, [r0, #0]
 8007b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b02:	bf00      	nop
 8007b04:	e000ed88 	.word	0xe000ed88

08007b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b0e:	f3ef 8305 	mrs	r3, IPSR
 8007b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b0f      	cmp	r3, #15
 8007b18:	d915      	bls.n	8007b46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b1a:	4a18      	ldr	r2, [pc, #96]	@ (8007b7c <vPortValidateInterruptPriority+0x74>)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b24:	4b16      	ldr	r3, [pc, #88]	@ (8007b80 <vPortValidateInterruptPriority+0x78>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	7afa      	ldrb	r2, [r7, #11]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d20b      	bcs.n	8007b46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	607b      	str	r3, [r7, #4]
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop
 8007b44:	e7fd      	b.n	8007b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b46:	4b0f      	ldr	r3, [pc, #60]	@ (8007b84 <vPortValidateInterruptPriority+0x7c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b88 <vPortValidateInterruptPriority+0x80>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d90b      	bls.n	8007b6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	603b      	str	r3, [r7, #0]
}
 8007b68:	bf00      	nop
 8007b6a:	bf00      	nop
 8007b6c:	e7fd      	b.n	8007b6a <vPortValidateInterruptPriority+0x62>
	}
 8007b6e:	bf00      	nop
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	e000e3f0 	.word	0xe000e3f0
 8007b80:	20000fe4 	.word	0x20000fe4
 8007b84:	e000ed0c 	.word	0xe000ed0c
 8007b88:	20000fe8 	.word	0x20000fe8

08007b8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08a      	sub	sp, #40	@ 0x28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b98:	f7fe fd72 	bl	8006680 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b9c:	4b5c      	ldr	r3, [pc, #368]	@ (8007d10 <pvPortMalloc+0x184>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ba4:	f000 f924 	bl	8007df0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ba8:	4b5a      	ldr	r3, [pc, #360]	@ (8007d14 <pvPortMalloc+0x188>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f040 8095 	bne.w	8007ce0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01e      	beq.n	8007bfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007bbc:	2208      	movs	r2, #8
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d015      	beq.n	8007bfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f023 0307 	bic.w	r3, r3, #7
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f003 0307 	and.w	r3, r3, #7
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00b      	beq.n	8007bfa <pvPortMalloc+0x6e>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	617b      	str	r3, [r7, #20]
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop
 8007bf8:	e7fd      	b.n	8007bf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d06f      	beq.n	8007ce0 <pvPortMalloc+0x154>
 8007c00:	4b45      	ldr	r3, [pc, #276]	@ (8007d18 <pvPortMalloc+0x18c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d86a      	bhi.n	8007ce0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c0a:	4b44      	ldr	r3, [pc, #272]	@ (8007d1c <pvPortMalloc+0x190>)
 8007c0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c0e:	4b43      	ldr	r3, [pc, #268]	@ (8007d1c <pvPortMalloc+0x190>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c14:	e004      	b.n	8007c20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d903      	bls.n	8007c32 <pvPortMalloc+0xa6>
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f1      	bne.n	8007c16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c32:	4b37      	ldr	r3, [pc, #220]	@ (8007d10 <pvPortMalloc+0x184>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d051      	beq.n	8007ce0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2208      	movs	r2, #8
 8007c42:	4413      	add	r3, r2
 8007c44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	1ad2      	subs	r2, r2, r3
 8007c56:	2308      	movs	r3, #8
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d920      	bls.n	8007ca0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4413      	add	r3, r2
 8007c64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00b      	beq.n	8007c88 <pvPortMalloc+0xfc>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	613b      	str	r3, [r7, #16]
}
 8007c82:	bf00      	nop
 8007c84:	bf00      	nop
 8007c86:	e7fd      	b.n	8007c84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	1ad2      	subs	r2, r2, r3
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c9a:	69b8      	ldr	r0, [r7, #24]
 8007c9c:	f000 f90a 	bl	8007eb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d18 <pvPortMalloc+0x18c>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	4a1b      	ldr	r2, [pc, #108]	@ (8007d18 <pvPortMalloc+0x18c>)
 8007cac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cae:	4b1a      	ldr	r3, [pc, #104]	@ (8007d18 <pvPortMalloc+0x18c>)
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007d20 <pvPortMalloc+0x194>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d203      	bcs.n	8007cc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cba:	4b17      	ldr	r3, [pc, #92]	@ (8007d18 <pvPortMalloc+0x18c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a18      	ldr	r2, [pc, #96]	@ (8007d20 <pvPortMalloc+0x194>)
 8007cc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	4b13      	ldr	r3, [pc, #76]	@ (8007d14 <pvPortMalloc+0x188>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cd6:	4b13      	ldr	r3, [pc, #76]	@ (8007d24 <pvPortMalloc+0x198>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	4a11      	ldr	r2, [pc, #68]	@ (8007d24 <pvPortMalloc+0x198>)
 8007cde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ce0:	f7fe fcdc 	bl	800669c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00b      	beq.n	8007d06 <pvPortMalloc+0x17a>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	60fb      	str	r3, [r7, #12]
}
 8007d00:	bf00      	nop
 8007d02:	bf00      	nop
 8007d04:	e7fd      	b.n	8007d02 <pvPortMalloc+0x176>
	return pvReturn;
 8007d06:	69fb      	ldr	r3, [r7, #28]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3728      	adds	r7, #40	@ 0x28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	20005e14 	.word	0x20005e14
 8007d14:	20005e28 	.word	0x20005e28
 8007d18:	20005e18 	.word	0x20005e18
 8007d1c:	20005e0c 	.word	0x20005e0c
 8007d20:	20005e1c 	.word	0x20005e1c
 8007d24:	20005e20 	.word	0x20005e20

08007d28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d04f      	beq.n	8007dda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d3a:	2308      	movs	r3, #8
 8007d3c:	425b      	negs	r3, r3
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	4413      	add	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	4b25      	ldr	r3, [pc, #148]	@ (8007de4 <vPortFree+0xbc>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4013      	ands	r3, r2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10b      	bne.n	8007d6e <vPortFree+0x46>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60fb      	str	r3, [r7, #12]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00b      	beq.n	8007d8e <vPortFree+0x66>
	__asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	60bb      	str	r3, [r7, #8]
}
 8007d88:	bf00      	nop
 8007d8a:	bf00      	nop
 8007d8c:	e7fd      	b.n	8007d8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	4b14      	ldr	r3, [pc, #80]	@ (8007de4 <vPortFree+0xbc>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4013      	ands	r3, r2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01e      	beq.n	8007dda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d11a      	bne.n	8007dda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	4b0e      	ldr	r3, [pc, #56]	@ (8007de4 <vPortFree+0xbc>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	43db      	mvns	r3, r3
 8007dae:	401a      	ands	r2, r3
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007db4:	f7fe fc64 	bl	8006680 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8007de8 <vPortFree+0xc0>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	4a09      	ldr	r2, [pc, #36]	@ (8007de8 <vPortFree+0xc0>)
 8007dc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dc6:	6938      	ldr	r0, [r7, #16]
 8007dc8:	f000 f874 	bl	8007eb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dcc:	4b07      	ldr	r3, [pc, #28]	@ (8007dec <vPortFree+0xc4>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	4a06      	ldr	r2, [pc, #24]	@ (8007dec <vPortFree+0xc4>)
 8007dd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dd6:	f7fe fc61 	bl	800669c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dda:	bf00      	nop
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20005e28 	.word	0x20005e28
 8007de8:	20005e18 	.word	0x20005e18
 8007dec:	20005e24 	.word	0x20005e24

08007df0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007df6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8007dfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007dfc:	4b27      	ldr	r3, [pc, #156]	@ (8007e9c <prvHeapInit+0xac>)
 8007dfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00c      	beq.n	8007e24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3307      	adds	r3, #7
 8007e0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f023 0307 	bic.w	r3, r3, #7
 8007e16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007e9c <prvHeapInit+0xac>)
 8007e20:	4413      	add	r3, r2
 8007e22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea0 <prvHeapInit+0xb0>)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ea0 <prvHeapInit+0xb0>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	4413      	add	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e3c:	2208      	movs	r2, #8
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0307 	bic.w	r3, r3, #7
 8007e4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4a15      	ldr	r2, [pc, #84]	@ (8007ea4 <prvHeapInit+0xb4>)
 8007e50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e52:	4b14      	ldr	r3, [pc, #80]	@ (8007ea4 <prvHeapInit+0xb4>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2200      	movs	r2, #0
 8007e58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e5a:	4b12      	ldr	r3, [pc, #72]	@ (8007ea4 <prvHeapInit+0xb4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	1ad2      	subs	r2, r2, r3
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e70:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea4 <prvHeapInit+0xb4>)
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ea8 <prvHeapInit+0xb8>)
 8007e7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	4a09      	ldr	r2, [pc, #36]	@ (8007eac <prvHeapInit+0xbc>)
 8007e86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e88:	4b09      	ldr	r3, [pc, #36]	@ (8007eb0 <prvHeapInit+0xc0>)
 8007e8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e8e:	601a      	str	r2, [r3, #0]
}
 8007e90:	bf00      	nop
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	20000fec 	.word	0x20000fec
 8007ea0:	20005e0c 	.word	0x20005e0c
 8007ea4:	20005e14 	.word	0x20005e14
 8007ea8:	20005e1c 	.word	0x20005e1c
 8007eac:	20005e18 	.word	0x20005e18
 8007eb0:	20005e28 	.word	0x20005e28

08007eb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ebc:	4b28      	ldr	r3, [pc, #160]	@ (8007f60 <prvInsertBlockIntoFreeList+0xac>)
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	e002      	b.n	8007ec8 <prvInsertBlockIntoFreeList+0x14>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d8f7      	bhi.n	8007ec2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d108      	bne.n	8007ef6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	441a      	add	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	441a      	add	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d118      	bne.n	8007f3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	4b15      	ldr	r3, [pc, #84]	@ (8007f64 <prvInsertBlockIntoFreeList+0xb0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d00d      	beq.n	8007f32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	441a      	add	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	e008      	b.n	8007f44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f32:	4b0c      	ldr	r3, [pc, #48]	@ (8007f64 <prvInsertBlockIntoFreeList+0xb0>)
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	e003      	b.n	8007f44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d002      	beq.n	8007f52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f52:	bf00      	nop
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	20005e0c 	.word	0x20005e0c
 8007f64:	20005e14 	.word	0x20005e14

08007f68 <std>:
 8007f68:	2300      	movs	r3, #0
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f76:	6083      	str	r3, [r0, #8]
 8007f78:	8181      	strh	r1, [r0, #12]
 8007f7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f7c:	81c2      	strh	r2, [r0, #14]
 8007f7e:	6183      	str	r3, [r0, #24]
 8007f80:	4619      	mov	r1, r3
 8007f82:	2208      	movs	r2, #8
 8007f84:	305c      	adds	r0, #92	@ 0x5c
 8007f86:	f000 fa1b 	bl	80083c0 <memset>
 8007f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc0 <std+0x58>)
 8007f8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <std+0x5c>)
 8007f90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f92:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc8 <std+0x60>)
 8007f94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f96:	4b0d      	ldr	r3, [pc, #52]	@ (8007fcc <std+0x64>)
 8007f98:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd0 <std+0x68>)
 8007f9c:	6224      	str	r4, [r4, #32]
 8007f9e:	429c      	cmp	r4, r3
 8007fa0:	d006      	beq.n	8007fb0 <std+0x48>
 8007fa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fa6:	4294      	cmp	r4, r2
 8007fa8:	d002      	beq.n	8007fb0 <std+0x48>
 8007faa:	33d0      	adds	r3, #208	@ 0xd0
 8007fac:	429c      	cmp	r4, r3
 8007fae:	d105      	bne.n	8007fbc <std+0x54>
 8007fb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb8:	f000 bad8 	b.w	800856c <__retarget_lock_init_recursive>
 8007fbc:	bd10      	pop	{r4, pc}
 8007fbe:	bf00      	nop
 8007fc0:	08008211 	.word	0x08008211
 8007fc4:	08008233 	.word	0x08008233
 8007fc8:	0800826b 	.word	0x0800826b
 8007fcc:	0800828f 	.word	0x0800828f
 8007fd0:	20005e2c 	.word	0x20005e2c

08007fd4 <stdio_exit_handler>:
 8007fd4:	4a02      	ldr	r2, [pc, #8]	@ (8007fe0 <stdio_exit_handler+0xc>)
 8007fd6:	4903      	ldr	r1, [pc, #12]	@ (8007fe4 <stdio_exit_handler+0x10>)
 8007fd8:	4803      	ldr	r0, [pc, #12]	@ (8007fe8 <stdio_exit_handler+0x14>)
 8007fda:	f000 b869 	b.w	80080b0 <_fwalk_sglue>
 8007fde:	bf00      	nop
 8007fe0:	20000014 	.word	0x20000014
 8007fe4:	080090d5 	.word	0x080090d5
 8007fe8:	20000024 	.word	0x20000024

08007fec <cleanup_stdio>:
 8007fec:	6841      	ldr	r1, [r0, #4]
 8007fee:	4b0c      	ldr	r3, [pc, #48]	@ (8008020 <cleanup_stdio+0x34>)
 8007ff0:	4299      	cmp	r1, r3
 8007ff2:	b510      	push	{r4, lr}
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	d001      	beq.n	8007ffc <cleanup_stdio+0x10>
 8007ff8:	f001 f86c 	bl	80090d4 <_fflush_r>
 8007ffc:	68a1      	ldr	r1, [r4, #8]
 8007ffe:	4b09      	ldr	r3, [pc, #36]	@ (8008024 <cleanup_stdio+0x38>)
 8008000:	4299      	cmp	r1, r3
 8008002:	d002      	beq.n	800800a <cleanup_stdio+0x1e>
 8008004:	4620      	mov	r0, r4
 8008006:	f001 f865 	bl	80090d4 <_fflush_r>
 800800a:	68e1      	ldr	r1, [r4, #12]
 800800c:	4b06      	ldr	r3, [pc, #24]	@ (8008028 <cleanup_stdio+0x3c>)
 800800e:	4299      	cmp	r1, r3
 8008010:	d004      	beq.n	800801c <cleanup_stdio+0x30>
 8008012:	4620      	mov	r0, r4
 8008014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008018:	f001 b85c 	b.w	80090d4 <_fflush_r>
 800801c:	bd10      	pop	{r4, pc}
 800801e:	bf00      	nop
 8008020:	20005e2c 	.word	0x20005e2c
 8008024:	20005e94 	.word	0x20005e94
 8008028:	20005efc 	.word	0x20005efc

0800802c <global_stdio_init.part.0>:
 800802c:	b510      	push	{r4, lr}
 800802e:	4b0b      	ldr	r3, [pc, #44]	@ (800805c <global_stdio_init.part.0+0x30>)
 8008030:	4c0b      	ldr	r4, [pc, #44]	@ (8008060 <global_stdio_init.part.0+0x34>)
 8008032:	4a0c      	ldr	r2, [pc, #48]	@ (8008064 <global_stdio_init.part.0+0x38>)
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	4620      	mov	r0, r4
 8008038:	2200      	movs	r2, #0
 800803a:	2104      	movs	r1, #4
 800803c:	f7ff ff94 	bl	8007f68 <std>
 8008040:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008044:	2201      	movs	r2, #1
 8008046:	2109      	movs	r1, #9
 8008048:	f7ff ff8e 	bl	8007f68 <std>
 800804c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008050:	2202      	movs	r2, #2
 8008052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008056:	2112      	movs	r1, #18
 8008058:	f7ff bf86 	b.w	8007f68 <std>
 800805c:	20005f64 	.word	0x20005f64
 8008060:	20005e2c 	.word	0x20005e2c
 8008064:	08007fd5 	.word	0x08007fd5

08008068 <__sfp_lock_acquire>:
 8008068:	4801      	ldr	r0, [pc, #4]	@ (8008070 <__sfp_lock_acquire+0x8>)
 800806a:	f000 ba80 	b.w	800856e <__retarget_lock_acquire_recursive>
 800806e:	bf00      	nop
 8008070:	20005f6d 	.word	0x20005f6d

08008074 <__sfp_lock_release>:
 8008074:	4801      	ldr	r0, [pc, #4]	@ (800807c <__sfp_lock_release+0x8>)
 8008076:	f000 ba7b 	b.w	8008570 <__retarget_lock_release_recursive>
 800807a:	bf00      	nop
 800807c:	20005f6d 	.word	0x20005f6d

08008080 <__sinit>:
 8008080:	b510      	push	{r4, lr}
 8008082:	4604      	mov	r4, r0
 8008084:	f7ff fff0 	bl	8008068 <__sfp_lock_acquire>
 8008088:	6a23      	ldr	r3, [r4, #32]
 800808a:	b11b      	cbz	r3, 8008094 <__sinit+0x14>
 800808c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008090:	f7ff bff0 	b.w	8008074 <__sfp_lock_release>
 8008094:	4b04      	ldr	r3, [pc, #16]	@ (80080a8 <__sinit+0x28>)
 8008096:	6223      	str	r3, [r4, #32]
 8008098:	4b04      	ldr	r3, [pc, #16]	@ (80080ac <__sinit+0x2c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1f5      	bne.n	800808c <__sinit+0xc>
 80080a0:	f7ff ffc4 	bl	800802c <global_stdio_init.part.0>
 80080a4:	e7f2      	b.n	800808c <__sinit+0xc>
 80080a6:	bf00      	nop
 80080a8:	08007fed 	.word	0x08007fed
 80080ac:	20005f64 	.word	0x20005f64

080080b0 <_fwalk_sglue>:
 80080b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080b4:	4607      	mov	r7, r0
 80080b6:	4688      	mov	r8, r1
 80080b8:	4614      	mov	r4, r2
 80080ba:	2600      	movs	r6, #0
 80080bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080c0:	f1b9 0901 	subs.w	r9, r9, #1
 80080c4:	d505      	bpl.n	80080d2 <_fwalk_sglue+0x22>
 80080c6:	6824      	ldr	r4, [r4, #0]
 80080c8:	2c00      	cmp	r4, #0
 80080ca:	d1f7      	bne.n	80080bc <_fwalk_sglue+0xc>
 80080cc:	4630      	mov	r0, r6
 80080ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080d2:	89ab      	ldrh	r3, [r5, #12]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d907      	bls.n	80080e8 <_fwalk_sglue+0x38>
 80080d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080dc:	3301      	adds	r3, #1
 80080de:	d003      	beq.n	80080e8 <_fwalk_sglue+0x38>
 80080e0:	4629      	mov	r1, r5
 80080e2:	4638      	mov	r0, r7
 80080e4:	47c0      	blx	r8
 80080e6:	4306      	orrs	r6, r0
 80080e8:	3568      	adds	r5, #104	@ 0x68
 80080ea:	e7e9      	b.n	80080c0 <_fwalk_sglue+0x10>

080080ec <iprintf>:
 80080ec:	b40f      	push	{r0, r1, r2, r3}
 80080ee:	b507      	push	{r0, r1, r2, lr}
 80080f0:	4906      	ldr	r1, [pc, #24]	@ (800810c <iprintf+0x20>)
 80080f2:	ab04      	add	r3, sp, #16
 80080f4:	6808      	ldr	r0, [r1, #0]
 80080f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fa:	6881      	ldr	r1, [r0, #8]
 80080fc:	9301      	str	r3, [sp, #4]
 80080fe:	f000 fcc1 	bl	8008a84 <_vfiprintf_r>
 8008102:	b003      	add	sp, #12
 8008104:	f85d eb04 	ldr.w	lr, [sp], #4
 8008108:	b004      	add	sp, #16
 800810a:	4770      	bx	lr
 800810c:	20000020 	.word	0x20000020

08008110 <_puts_r>:
 8008110:	6a03      	ldr	r3, [r0, #32]
 8008112:	b570      	push	{r4, r5, r6, lr}
 8008114:	6884      	ldr	r4, [r0, #8]
 8008116:	4605      	mov	r5, r0
 8008118:	460e      	mov	r6, r1
 800811a:	b90b      	cbnz	r3, 8008120 <_puts_r+0x10>
 800811c:	f7ff ffb0 	bl	8008080 <__sinit>
 8008120:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008122:	07db      	lsls	r3, r3, #31
 8008124:	d405      	bmi.n	8008132 <_puts_r+0x22>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	0598      	lsls	r0, r3, #22
 800812a:	d402      	bmi.n	8008132 <_puts_r+0x22>
 800812c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800812e:	f000 fa1e 	bl	800856e <__retarget_lock_acquire_recursive>
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	0719      	lsls	r1, r3, #28
 8008136:	d502      	bpl.n	800813e <_puts_r+0x2e>
 8008138:	6923      	ldr	r3, [r4, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d135      	bne.n	80081aa <_puts_r+0x9a>
 800813e:	4621      	mov	r1, r4
 8008140:	4628      	mov	r0, r5
 8008142:	f000 f8e7 	bl	8008314 <__swsetup_r>
 8008146:	b380      	cbz	r0, 80081aa <_puts_r+0x9a>
 8008148:	f04f 35ff 	mov.w	r5, #4294967295
 800814c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800814e:	07da      	lsls	r2, r3, #31
 8008150:	d405      	bmi.n	800815e <_puts_r+0x4e>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	059b      	lsls	r3, r3, #22
 8008156:	d402      	bmi.n	800815e <_puts_r+0x4e>
 8008158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800815a:	f000 fa09 	bl	8008570 <__retarget_lock_release_recursive>
 800815e:	4628      	mov	r0, r5
 8008160:	bd70      	pop	{r4, r5, r6, pc}
 8008162:	2b00      	cmp	r3, #0
 8008164:	da04      	bge.n	8008170 <_puts_r+0x60>
 8008166:	69a2      	ldr	r2, [r4, #24]
 8008168:	429a      	cmp	r2, r3
 800816a:	dc17      	bgt.n	800819c <_puts_r+0x8c>
 800816c:	290a      	cmp	r1, #10
 800816e:	d015      	beq.n	800819c <_puts_r+0x8c>
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	6022      	str	r2, [r4, #0]
 8008176:	7019      	strb	r1, [r3, #0]
 8008178:	68a3      	ldr	r3, [r4, #8]
 800817a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800817e:	3b01      	subs	r3, #1
 8008180:	60a3      	str	r3, [r4, #8]
 8008182:	2900      	cmp	r1, #0
 8008184:	d1ed      	bne.n	8008162 <_puts_r+0x52>
 8008186:	2b00      	cmp	r3, #0
 8008188:	da11      	bge.n	80081ae <_puts_r+0x9e>
 800818a:	4622      	mov	r2, r4
 800818c:	210a      	movs	r1, #10
 800818e:	4628      	mov	r0, r5
 8008190:	f000 f881 	bl	8008296 <__swbuf_r>
 8008194:	3001      	adds	r0, #1
 8008196:	d0d7      	beq.n	8008148 <_puts_r+0x38>
 8008198:	250a      	movs	r5, #10
 800819a:	e7d7      	b.n	800814c <_puts_r+0x3c>
 800819c:	4622      	mov	r2, r4
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 f879 	bl	8008296 <__swbuf_r>
 80081a4:	3001      	adds	r0, #1
 80081a6:	d1e7      	bne.n	8008178 <_puts_r+0x68>
 80081a8:	e7ce      	b.n	8008148 <_puts_r+0x38>
 80081aa:	3e01      	subs	r6, #1
 80081ac:	e7e4      	b.n	8008178 <_puts_r+0x68>
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	6022      	str	r2, [r4, #0]
 80081b4:	220a      	movs	r2, #10
 80081b6:	701a      	strb	r2, [r3, #0]
 80081b8:	e7ee      	b.n	8008198 <_puts_r+0x88>
	...

080081bc <puts>:
 80081bc:	4b02      	ldr	r3, [pc, #8]	@ (80081c8 <puts+0xc>)
 80081be:	4601      	mov	r1, r0
 80081c0:	6818      	ldr	r0, [r3, #0]
 80081c2:	f7ff bfa5 	b.w	8008110 <_puts_r>
 80081c6:	bf00      	nop
 80081c8:	20000020 	.word	0x20000020

080081cc <siprintf>:
 80081cc:	b40e      	push	{r1, r2, r3}
 80081ce:	b510      	push	{r4, lr}
 80081d0:	b09d      	sub	sp, #116	@ 0x74
 80081d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80081d4:	9002      	str	r0, [sp, #8]
 80081d6:	9006      	str	r0, [sp, #24]
 80081d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80081dc:	480a      	ldr	r0, [pc, #40]	@ (8008208 <siprintf+0x3c>)
 80081de:	9107      	str	r1, [sp, #28]
 80081e0:	9104      	str	r1, [sp, #16]
 80081e2:	490a      	ldr	r1, [pc, #40]	@ (800820c <siprintf+0x40>)
 80081e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80081e8:	9105      	str	r1, [sp, #20]
 80081ea:	2400      	movs	r4, #0
 80081ec:	a902      	add	r1, sp, #8
 80081ee:	6800      	ldr	r0, [r0, #0]
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80081f4:	f000 fb20 	bl	8008838 <_svfiprintf_r>
 80081f8:	9b02      	ldr	r3, [sp, #8]
 80081fa:	701c      	strb	r4, [r3, #0]
 80081fc:	b01d      	add	sp, #116	@ 0x74
 80081fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008202:	b003      	add	sp, #12
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20000020 	.word	0x20000020
 800820c:	ffff0208 	.word	0xffff0208

08008210 <__sread>:
 8008210:	b510      	push	{r4, lr}
 8008212:	460c      	mov	r4, r1
 8008214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008218:	f000 f95a 	bl	80084d0 <_read_r>
 800821c:	2800      	cmp	r0, #0
 800821e:	bfab      	itete	ge
 8008220:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008222:	89a3      	ldrhlt	r3, [r4, #12]
 8008224:	181b      	addge	r3, r3, r0
 8008226:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800822a:	bfac      	ite	ge
 800822c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800822e:	81a3      	strhlt	r3, [r4, #12]
 8008230:	bd10      	pop	{r4, pc}

08008232 <__swrite>:
 8008232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008236:	461f      	mov	r7, r3
 8008238:	898b      	ldrh	r3, [r1, #12]
 800823a:	05db      	lsls	r3, r3, #23
 800823c:	4605      	mov	r5, r0
 800823e:	460c      	mov	r4, r1
 8008240:	4616      	mov	r6, r2
 8008242:	d505      	bpl.n	8008250 <__swrite+0x1e>
 8008244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008248:	2302      	movs	r3, #2
 800824a:	2200      	movs	r2, #0
 800824c:	f000 f92e 	bl	80084ac <_lseek_r>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008256:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	4632      	mov	r2, r6
 800825e:	463b      	mov	r3, r7
 8008260:	4628      	mov	r0, r5
 8008262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008266:	f000 b945 	b.w	80084f4 <_write_r>

0800826a <__sseek>:
 800826a:	b510      	push	{r4, lr}
 800826c:	460c      	mov	r4, r1
 800826e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008272:	f000 f91b 	bl	80084ac <_lseek_r>
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	bf15      	itete	ne
 800827c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800827e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008282:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008286:	81a3      	strheq	r3, [r4, #12]
 8008288:	bf18      	it	ne
 800828a:	81a3      	strhne	r3, [r4, #12]
 800828c:	bd10      	pop	{r4, pc}

0800828e <__sclose>:
 800828e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008292:	f000 b89d 	b.w	80083d0 <_close_r>

08008296 <__swbuf_r>:
 8008296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008298:	460e      	mov	r6, r1
 800829a:	4614      	mov	r4, r2
 800829c:	4605      	mov	r5, r0
 800829e:	b118      	cbz	r0, 80082a8 <__swbuf_r+0x12>
 80082a0:	6a03      	ldr	r3, [r0, #32]
 80082a2:	b90b      	cbnz	r3, 80082a8 <__swbuf_r+0x12>
 80082a4:	f7ff feec 	bl	8008080 <__sinit>
 80082a8:	69a3      	ldr	r3, [r4, #24]
 80082aa:	60a3      	str	r3, [r4, #8]
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	071a      	lsls	r2, r3, #28
 80082b0:	d501      	bpl.n	80082b6 <__swbuf_r+0x20>
 80082b2:	6923      	ldr	r3, [r4, #16]
 80082b4:	b943      	cbnz	r3, 80082c8 <__swbuf_r+0x32>
 80082b6:	4621      	mov	r1, r4
 80082b8:	4628      	mov	r0, r5
 80082ba:	f000 f82b 	bl	8008314 <__swsetup_r>
 80082be:	b118      	cbz	r0, 80082c8 <__swbuf_r+0x32>
 80082c0:	f04f 37ff 	mov.w	r7, #4294967295
 80082c4:	4638      	mov	r0, r7
 80082c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	6922      	ldr	r2, [r4, #16]
 80082cc:	1a98      	subs	r0, r3, r2
 80082ce:	6963      	ldr	r3, [r4, #20]
 80082d0:	b2f6      	uxtb	r6, r6
 80082d2:	4283      	cmp	r3, r0
 80082d4:	4637      	mov	r7, r6
 80082d6:	dc05      	bgt.n	80082e4 <__swbuf_r+0x4e>
 80082d8:	4621      	mov	r1, r4
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 fefa 	bl	80090d4 <_fflush_r>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d1ed      	bne.n	80082c0 <__swbuf_r+0x2a>
 80082e4:	68a3      	ldr	r3, [r4, #8]
 80082e6:	3b01      	subs	r3, #1
 80082e8:	60a3      	str	r3, [r4, #8]
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	6022      	str	r2, [r4, #0]
 80082f0:	701e      	strb	r6, [r3, #0]
 80082f2:	6962      	ldr	r2, [r4, #20]
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d004      	beq.n	8008304 <__swbuf_r+0x6e>
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	07db      	lsls	r3, r3, #31
 80082fe:	d5e1      	bpl.n	80082c4 <__swbuf_r+0x2e>
 8008300:	2e0a      	cmp	r6, #10
 8008302:	d1df      	bne.n	80082c4 <__swbuf_r+0x2e>
 8008304:	4621      	mov	r1, r4
 8008306:	4628      	mov	r0, r5
 8008308:	f000 fee4 	bl	80090d4 <_fflush_r>
 800830c:	2800      	cmp	r0, #0
 800830e:	d0d9      	beq.n	80082c4 <__swbuf_r+0x2e>
 8008310:	e7d6      	b.n	80082c0 <__swbuf_r+0x2a>
	...

08008314 <__swsetup_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4b29      	ldr	r3, [pc, #164]	@ (80083bc <__swsetup_r+0xa8>)
 8008318:	4605      	mov	r5, r0
 800831a:	6818      	ldr	r0, [r3, #0]
 800831c:	460c      	mov	r4, r1
 800831e:	b118      	cbz	r0, 8008328 <__swsetup_r+0x14>
 8008320:	6a03      	ldr	r3, [r0, #32]
 8008322:	b90b      	cbnz	r3, 8008328 <__swsetup_r+0x14>
 8008324:	f7ff feac 	bl	8008080 <__sinit>
 8008328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832c:	0719      	lsls	r1, r3, #28
 800832e:	d422      	bmi.n	8008376 <__swsetup_r+0x62>
 8008330:	06da      	lsls	r2, r3, #27
 8008332:	d407      	bmi.n	8008344 <__swsetup_r+0x30>
 8008334:	2209      	movs	r2, #9
 8008336:	602a      	str	r2, [r5, #0]
 8008338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800833c:	81a3      	strh	r3, [r4, #12]
 800833e:	f04f 30ff 	mov.w	r0, #4294967295
 8008342:	e033      	b.n	80083ac <__swsetup_r+0x98>
 8008344:	0758      	lsls	r0, r3, #29
 8008346:	d512      	bpl.n	800836e <__swsetup_r+0x5a>
 8008348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800834a:	b141      	cbz	r1, 800835e <__swsetup_r+0x4a>
 800834c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008350:	4299      	cmp	r1, r3
 8008352:	d002      	beq.n	800835a <__swsetup_r+0x46>
 8008354:	4628      	mov	r0, r5
 8008356:	f000 f91b 	bl	8008590 <_free_r>
 800835a:	2300      	movs	r3, #0
 800835c:	6363      	str	r3, [r4, #52]	@ 0x34
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008364:	81a3      	strh	r3, [r4, #12]
 8008366:	2300      	movs	r3, #0
 8008368:	6063      	str	r3, [r4, #4]
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	f043 0308 	orr.w	r3, r3, #8
 8008374:	81a3      	strh	r3, [r4, #12]
 8008376:	6923      	ldr	r3, [r4, #16]
 8008378:	b94b      	cbnz	r3, 800838e <__swsetup_r+0x7a>
 800837a:	89a3      	ldrh	r3, [r4, #12]
 800837c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008384:	d003      	beq.n	800838e <__swsetup_r+0x7a>
 8008386:	4621      	mov	r1, r4
 8008388:	4628      	mov	r0, r5
 800838a:	f000 fef1 	bl	8009170 <__smakebuf_r>
 800838e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008392:	f013 0201 	ands.w	r2, r3, #1
 8008396:	d00a      	beq.n	80083ae <__swsetup_r+0x9a>
 8008398:	2200      	movs	r2, #0
 800839a:	60a2      	str	r2, [r4, #8]
 800839c:	6962      	ldr	r2, [r4, #20]
 800839e:	4252      	negs	r2, r2
 80083a0:	61a2      	str	r2, [r4, #24]
 80083a2:	6922      	ldr	r2, [r4, #16]
 80083a4:	b942      	cbnz	r2, 80083b8 <__swsetup_r+0xa4>
 80083a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083aa:	d1c5      	bne.n	8008338 <__swsetup_r+0x24>
 80083ac:	bd38      	pop	{r3, r4, r5, pc}
 80083ae:	0799      	lsls	r1, r3, #30
 80083b0:	bf58      	it	pl
 80083b2:	6962      	ldrpl	r2, [r4, #20]
 80083b4:	60a2      	str	r2, [r4, #8]
 80083b6:	e7f4      	b.n	80083a2 <__swsetup_r+0x8e>
 80083b8:	2000      	movs	r0, #0
 80083ba:	e7f7      	b.n	80083ac <__swsetup_r+0x98>
 80083bc:	20000020 	.word	0x20000020

080083c0 <memset>:
 80083c0:	4402      	add	r2, r0
 80083c2:	4603      	mov	r3, r0
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d100      	bne.n	80083ca <memset+0xa>
 80083c8:	4770      	bx	lr
 80083ca:	f803 1b01 	strb.w	r1, [r3], #1
 80083ce:	e7f9      	b.n	80083c4 <memset+0x4>

080083d0 <_close_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4d06      	ldr	r5, [pc, #24]	@ (80083ec <_close_r+0x1c>)
 80083d4:	2300      	movs	r3, #0
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	602b      	str	r3, [r5, #0]
 80083dc:	f7f9 fd9d 	bl	8001f1a <_close>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_close_r+0x1a>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_close_r+0x1a>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	20005f68 	.word	0x20005f68

080083f0 <_reclaim_reent>:
 80083f0:	4b2d      	ldr	r3, [pc, #180]	@ (80084a8 <_reclaim_reent+0xb8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4283      	cmp	r3, r0
 80083f6:	b570      	push	{r4, r5, r6, lr}
 80083f8:	4604      	mov	r4, r0
 80083fa:	d053      	beq.n	80084a4 <_reclaim_reent+0xb4>
 80083fc:	69c3      	ldr	r3, [r0, #28]
 80083fe:	b31b      	cbz	r3, 8008448 <_reclaim_reent+0x58>
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	b163      	cbz	r3, 800841e <_reclaim_reent+0x2e>
 8008404:	2500      	movs	r5, #0
 8008406:	69e3      	ldr	r3, [r4, #28]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	5959      	ldr	r1, [r3, r5]
 800840c:	b9b1      	cbnz	r1, 800843c <_reclaim_reent+0x4c>
 800840e:	3504      	adds	r5, #4
 8008410:	2d80      	cmp	r5, #128	@ 0x80
 8008412:	d1f8      	bne.n	8008406 <_reclaim_reent+0x16>
 8008414:	69e3      	ldr	r3, [r4, #28]
 8008416:	4620      	mov	r0, r4
 8008418:	68d9      	ldr	r1, [r3, #12]
 800841a:	f000 f8b9 	bl	8008590 <_free_r>
 800841e:	69e3      	ldr	r3, [r4, #28]
 8008420:	6819      	ldr	r1, [r3, #0]
 8008422:	b111      	cbz	r1, 800842a <_reclaim_reent+0x3a>
 8008424:	4620      	mov	r0, r4
 8008426:	f000 f8b3 	bl	8008590 <_free_r>
 800842a:	69e3      	ldr	r3, [r4, #28]
 800842c:	689d      	ldr	r5, [r3, #8]
 800842e:	b15d      	cbz	r5, 8008448 <_reclaim_reent+0x58>
 8008430:	4629      	mov	r1, r5
 8008432:	4620      	mov	r0, r4
 8008434:	682d      	ldr	r5, [r5, #0]
 8008436:	f000 f8ab 	bl	8008590 <_free_r>
 800843a:	e7f8      	b.n	800842e <_reclaim_reent+0x3e>
 800843c:	680e      	ldr	r6, [r1, #0]
 800843e:	4620      	mov	r0, r4
 8008440:	f000 f8a6 	bl	8008590 <_free_r>
 8008444:	4631      	mov	r1, r6
 8008446:	e7e1      	b.n	800840c <_reclaim_reent+0x1c>
 8008448:	6961      	ldr	r1, [r4, #20]
 800844a:	b111      	cbz	r1, 8008452 <_reclaim_reent+0x62>
 800844c:	4620      	mov	r0, r4
 800844e:	f000 f89f 	bl	8008590 <_free_r>
 8008452:	69e1      	ldr	r1, [r4, #28]
 8008454:	b111      	cbz	r1, 800845c <_reclaim_reent+0x6c>
 8008456:	4620      	mov	r0, r4
 8008458:	f000 f89a 	bl	8008590 <_free_r>
 800845c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800845e:	b111      	cbz	r1, 8008466 <_reclaim_reent+0x76>
 8008460:	4620      	mov	r0, r4
 8008462:	f000 f895 	bl	8008590 <_free_r>
 8008466:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008468:	b111      	cbz	r1, 8008470 <_reclaim_reent+0x80>
 800846a:	4620      	mov	r0, r4
 800846c:	f000 f890 	bl	8008590 <_free_r>
 8008470:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008472:	b111      	cbz	r1, 800847a <_reclaim_reent+0x8a>
 8008474:	4620      	mov	r0, r4
 8008476:	f000 f88b 	bl	8008590 <_free_r>
 800847a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800847c:	b111      	cbz	r1, 8008484 <_reclaim_reent+0x94>
 800847e:	4620      	mov	r0, r4
 8008480:	f000 f886 	bl	8008590 <_free_r>
 8008484:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008486:	b111      	cbz	r1, 800848e <_reclaim_reent+0x9e>
 8008488:	4620      	mov	r0, r4
 800848a:	f000 f881 	bl	8008590 <_free_r>
 800848e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008490:	b111      	cbz	r1, 8008498 <_reclaim_reent+0xa8>
 8008492:	4620      	mov	r0, r4
 8008494:	f000 f87c 	bl	8008590 <_free_r>
 8008498:	6a23      	ldr	r3, [r4, #32]
 800849a:	b11b      	cbz	r3, 80084a4 <_reclaim_reent+0xb4>
 800849c:	4620      	mov	r0, r4
 800849e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084a2:	4718      	bx	r3
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
 80084a6:	bf00      	nop
 80084a8:	20000020 	.word	0x20000020

080084ac <_lseek_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4d07      	ldr	r5, [pc, #28]	@ (80084cc <_lseek_r+0x20>)
 80084b0:	4604      	mov	r4, r0
 80084b2:	4608      	mov	r0, r1
 80084b4:	4611      	mov	r1, r2
 80084b6:	2200      	movs	r2, #0
 80084b8:	602a      	str	r2, [r5, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	f7f9 fd54 	bl	8001f68 <_lseek>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_lseek_r+0x1e>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_lseek_r+0x1e>
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	20005f68 	.word	0x20005f68

080084d0 <_read_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4d07      	ldr	r5, [pc, #28]	@ (80084f0 <_read_r+0x20>)
 80084d4:	4604      	mov	r4, r0
 80084d6:	4608      	mov	r0, r1
 80084d8:	4611      	mov	r1, r2
 80084da:	2200      	movs	r2, #0
 80084dc:	602a      	str	r2, [r5, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	f7f9 fcfe 	bl	8001ee0 <_read>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_read_r+0x1e>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_read_r+0x1e>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	20005f68 	.word	0x20005f68

080084f4 <_write_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d07      	ldr	r5, [pc, #28]	@ (8008514 <_write_r+0x20>)
 80084f8:	4604      	mov	r4, r0
 80084fa:	4608      	mov	r0, r1
 80084fc:	4611      	mov	r1, r2
 80084fe:	2200      	movs	r2, #0
 8008500:	602a      	str	r2, [r5, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	f7f9 f814 	bl	8001530 <_write>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d102      	bne.n	8008512 <_write_r+0x1e>
 800850c:	682b      	ldr	r3, [r5, #0]
 800850e:	b103      	cbz	r3, 8008512 <_write_r+0x1e>
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	20005f68 	.word	0x20005f68

08008518 <__errno>:
 8008518:	4b01      	ldr	r3, [pc, #4]	@ (8008520 <__errno+0x8>)
 800851a:	6818      	ldr	r0, [r3, #0]
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	20000020 	.word	0x20000020

08008524 <__libc_init_array>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	4d0d      	ldr	r5, [pc, #52]	@ (800855c <__libc_init_array+0x38>)
 8008528:	4c0d      	ldr	r4, [pc, #52]	@ (8008560 <__libc_init_array+0x3c>)
 800852a:	1b64      	subs	r4, r4, r5
 800852c:	10a4      	asrs	r4, r4, #2
 800852e:	2600      	movs	r6, #0
 8008530:	42a6      	cmp	r6, r4
 8008532:	d109      	bne.n	8008548 <__libc_init_array+0x24>
 8008534:	4d0b      	ldr	r5, [pc, #44]	@ (8008564 <__libc_init_array+0x40>)
 8008536:	4c0c      	ldr	r4, [pc, #48]	@ (8008568 <__libc_init_array+0x44>)
 8008538:	f000 fed8 	bl	80092ec <_init>
 800853c:	1b64      	subs	r4, r4, r5
 800853e:	10a4      	asrs	r4, r4, #2
 8008540:	2600      	movs	r6, #0
 8008542:	42a6      	cmp	r6, r4
 8008544:	d105      	bne.n	8008552 <__libc_init_array+0x2e>
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	f855 3b04 	ldr.w	r3, [r5], #4
 800854c:	4798      	blx	r3
 800854e:	3601      	adds	r6, #1
 8008550:	e7ee      	b.n	8008530 <__libc_init_array+0xc>
 8008552:	f855 3b04 	ldr.w	r3, [r5], #4
 8008556:	4798      	blx	r3
 8008558:	3601      	adds	r6, #1
 800855a:	e7f2      	b.n	8008542 <__libc_init_array+0x1e>
 800855c:	0800951c 	.word	0x0800951c
 8008560:	0800951c 	.word	0x0800951c
 8008564:	0800951c 	.word	0x0800951c
 8008568:	08009520 	.word	0x08009520

0800856c <__retarget_lock_init_recursive>:
 800856c:	4770      	bx	lr

0800856e <__retarget_lock_acquire_recursive>:
 800856e:	4770      	bx	lr

08008570 <__retarget_lock_release_recursive>:
 8008570:	4770      	bx	lr

08008572 <memcpy>:
 8008572:	440a      	add	r2, r1
 8008574:	4291      	cmp	r1, r2
 8008576:	f100 33ff 	add.w	r3, r0, #4294967295
 800857a:	d100      	bne.n	800857e <memcpy+0xc>
 800857c:	4770      	bx	lr
 800857e:	b510      	push	{r4, lr}
 8008580:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008584:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008588:	4291      	cmp	r1, r2
 800858a:	d1f9      	bne.n	8008580 <memcpy+0xe>
 800858c:	bd10      	pop	{r4, pc}
	...

08008590 <_free_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4605      	mov	r5, r0
 8008594:	2900      	cmp	r1, #0
 8008596:	d041      	beq.n	800861c <_free_r+0x8c>
 8008598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800859c:	1f0c      	subs	r4, r1, #4
 800859e:	2b00      	cmp	r3, #0
 80085a0:	bfb8      	it	lt
 80085a2:	18e4      	addlt	r4, r4, r3
 80085a4:	f000 f8e0 	bl	8008768 <__malloc_lock>
 80085a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008620 <_free_r+0x90>)
 80085aa:	6813      	ldr	r3, [r2, #0]
 80085ac:	b933      	cbnz	r3, 80085bc <_free_r+0x2c>
 80085ae:	6063      	str	r3, [r4, #4]
 80085b0:	6014      	str	r4, [r2, #0]
 80085b2:	4628      	mov	r0, r5
 80085b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085b8:	f000 b8dc 	b.w	8008774 <__malloc_unlock>
 80085bc:	42a3      	cmp	r3, r4
 80085be:	d908      	bls.n	80085d2 <_free_r+0x42>
 80085c0:	6820      	ldr	r0, [r4, #0]
 80085c2:	1821      	adds	r1, r4, r0
 80085c4:	428b      	cmp	r3, r1
 80085c6:	bf01      	itttt	eq
 80085c8:	6819      	ldreq	r1, [r3, #0]
 80085ca:	685b      	ldreq	r3, [r3, #4]
 80085cc:	1809      	addeq	r1, r1, r0
 80085ce:	6021      	streq	r1, [r4, #0]
 80085d0:	e7ed      	b.n	80085ae <_free_r+0x1e>
 80085d2:	461a      	mov	r2, r3
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	b10b      	cbz	r3, 80085dc <_free_r+0x4c>
 80085d8:	42a3      	cmp	r3, r4
 80085da:	d9fa      	bls.n	80085d2 <_free_r+0x42>
 80085dc:	6811      	ldr	r1, [r2, #0]
 80085de:	1850      	adds	r0, r2, r1
 80085e0:	42a0      	cmp	r0, r4
 80085e2:	d10b      	bne.n	80085fc <_free_r+0x6c>
 80085e4:	6820      	ldr	r0, [r4, #0]
 80085e6:	4401      	add	r1, r0
 80085e8:	1850      	adds	r0, r2, r1
 80085ea:	4283      	cmp	r3, r0
 80085ec:	6011      	str	r1, [r2, #0]
 80085ee:	d1e0      	bne.n	80085b2 <_free_r+0x22>
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	6053      	str	r3, [r2, #4]
 80085f6:	4408      	add	r0, r1
 80085f8:	6010      	str	r0, [r2, #0]
 80085fa:	e7da      	b.n	80085b2 <_free_r+0x22>
 80085fc:	d902      	bls.n	8008604 <_free_r+0x74>
 80085fe:	230c      	movs	r3, #12
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	e7d6      	b.n	80085b2 <_free_r+0x22>
 8008604:	6820      	ldr	r0, [r4, #0]
 8008606:	1821      	adds	r1, r4, r0
 8008608:	428b      	cmp	r3, r1
 800860a:	bf04      	itt	eq
 800860c:	6819      	ldreq	r1, [r3, #0]
 800860e:	685b      	ldreq	r3, [r3, #4]
 8008610:	6063      	str	r3, [r4, #4]
 8008612:	bf04      	itt	eq
 8008614:	1809      	addeq	r1, r1, r0
 8008616:	6021      	streq	r1, [r4, #0]
 8008618:	6054      	str	r4, [r2, #4]
 800861a:	e7ca      	b.n	80085b2 <_free_r+0x22>
 800861c:	bd38      	pop	{r3, r4, r5, pc}
 800861e:	bf00      	nop
 8008620:	20005f74 	.word	0x20005f74

08008624 <sbrk_aligned>:
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	4e0f      	ldr	r6, [pc, #60]	@ (8008664 <sbrk_aligned+0x40>)
 8008628:	460c      	mov	r4, r1
 800862a:	6831      	ldr	r1, [r6, #0]
 800862c:	4605      	mov	r5, r0
 800862e:	b911      	cbnz	r1, 8008636 <sbrk_aligned+0x12>
 8008630:	f000 fe16 	bl	8009260 <_sbrk_r>
 8008634:	6030      	str	r0, [r6, #0]
 8008636:	4621      	mov	r1, r4
 8008638:	4628      	mov	r0, r5
 800863a:	f000 fe11 	bl	8009260 <_sbrk_r>
 800863e:	1c43      	adds	r3, r0, #1
 8008640:	d103      	bne.n	800864a <sbrk_aligned+0x26>
 8008642:	f04f 34ff 	mov.w	r4, #4294967295
 8008646:	4620      	mov	r0, r4
 8008648:	bd70      	pop	{r4, r5, r6, pc}
 800864a:	1cc4      	adds	r4, r0, #3
 800864c:	f024 0403 	bic.w	r4, r4, #3
 8008650:	42a0      	cmp	r0, r4
 8008652:	d0f8      	beq.n	8008646 <sbrk_aligned+0x22>
 8008654:	1a21      	subs	r1, r4, r0
 8008656:	4628      	mov	r0, r5
 8008658:	f000 fe02 	bl	8009260 <_sbrk_r>
 800865c:	3001      	adds	r0, #1
 800865e:	d1f2      	bne.n	8008646 <sbrk_aligned+0x22>
 8008660:	e7ef      	b.n	8008642 <sbrk_aligned+0x1e>
 8008662:	bf00      	nop
 8008664:	20005f70 	.word	0x20005f70

08008668 <_malloc_r>:
 8008668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800866c:	1ccd      	adds	r5, r1, #3
 800866e:	f025 0503 	bic.w	r5, r5, #3
 8008672:	3508      	adds	r5, #8
 8008674:	2d0c      	cmp	r5, #12
 8008676:	bf38      	it	cc
 8008678:	250c      	movcc	r5, #12
 800867a:	2d00      	cmp	r5, #0
 800867c:	4606      	mov	r6, r0
 800867e:	db01      	blt.n	8008684 <_malloc_r+0x1c>
 8008680:	42a9      	cmp	r1, r5
 8008682:	d904      	bls.n	800868e <_malloc_r+0x26>
 8008684:	230c      	movs	r3, #12
 8008686:	6033      	str	r3, [r6, #0]
 8008688:	2000      	movs	r0, #0
 800868a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800868e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008764 <_malloc_r+0xfc>
 8008692:	f000 f869 	bl	8008768 <__malloc_lock>
 8008696:	f8d8 3000 	ldr.w	r3, [r8]
 800869a:	461c      	mov	r4, r3
 800869c:	bb44      	cbnz	r4, 80086f0 <_malloc_r+0x88>
 800869e:	4629      	mov	r1, r5
 80086a0:	4630      	mov	r0, r6
 80086a2:	f7ff ffbf 	bl	8008624 <sbrk_aligned>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	4604      	mov	r4, r0
 80086aa:	d158      	bne.n	800875e <_malloc_r+0xf6>
 80086ac:	f8d8 4000 	ldr.w	r4, [r8]
 80086b0:	4627      	mov	r7, r4
 80086b2:	2f00      	cmp	r7, #0
 80086b4:	d143      	bne.n	800873e <_malloc_r+0xd6>
 80086b6:	2c00      	cmp	r4, #0
 80086b8:	d04b      	beq.n	8008752 <_malloc_r+0xea>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	4639      	mov	r1, r7
 80086be:	4630      	mov	r0, r6
 80086c0:	eb04 0903 	add.w	r9, r4, r3
 80086c4:	f000 fdcc 	bl	8009260 <_sbrk_r>
 80086c8:	4581      	cmp	r9, r0
 80086ca:	d142      	bne.n	8008752 <_malloc_r+0xea>
 80086cc:	6821      	ldr	r1, [r4, #0]
 80086ce:	1a6d      	subs	r5, r5, r1
 80086d0:	4629      	mov	r1, r5
 80086d2:	4630      	mov	r0, r6
 80086d4:	f7ff ffa6 	bl	8008624 <sbrk_aligned>
 80086d8:	3001      	adds	r0, #1
 80086da:	d03a      	beq.n	8008752 <_malloc_r+0xea>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	442b      	add	r3, r5
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	f8d8 3000 	ldr.w	r3, [r8]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	bb62      	cbnz	r2, 8008744 <_malloc_r+0xdc>
 80086ea:	f8c8 7000 	str.w	r7, [r8]
 80086ee:	e00f      	b.n	8008710 <_malloc_r+0xa8>
 80086f0:	6822      	ldr	r2, [r4, #0]
 80086f2:	1b52      	subs	r2, r2, r5
 80086f4:	d420      	bmi.n	8008738 <_malloc_r+0xd0>
 80086f6:	2a0b      	cmp	r2, #11
 80086f8:	d917      	bls.n	800872a <_malloc_r+0xc2>
 80086fa:	1961      	adds	r1, r4, r5
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	6025      	str	r5, [r4, #0]
 8008700:	bf18      	it	ne
 8008702:	6059      	strne	r1, [r3, #4]
 8008704:	6863      	ldr	r3, [r4, #4]
 8008706:	bf08      	it	eq
 8008708:	f8c8 1000 	streq.w	r1, [r8]
 800870c:	5162      	str	r2, [r4, r5]
 800870e:	604b      	str	r3, [r1, #4]
 8008710:	4630      	mov	r0, r6
 8008712:	f000 f82f 	bl	8008774 <__malloc_unlock>
 8008716:	f104 000b 	add.w	r0, r4, #11
 800871a:	1d23      	adds	r3, r4, #4
 800871c:	f020 0007 	bic.w	r0, r0, #7
 8008720:	1ac2      	subs	r2, r0, r3
 8008722:	bf1c      	itt	ne
 8008724:	1a1b      	subne	r3, r3, r0
 8008726:	50a3      	strne	r3, [r4, r2]
 8008728:	e7af      	b.n	800868a <_malloc_r+0x22>
 800872a:	6862      	ldr	r2, [r4, #4]
 800872c:	42a3      	cmp	r3, r4
 800872e:	bf0c      	ite	eq
 8008730:	f8c8 2000 	streq.w	r2, [r8]
 8008734:	605a      	strne	r2, [r3, #4]
 8008736:	e7eb      	b.n	8008710 <_malloc_r+0xa8>
 8008738:	4623      	mov	r3, r4
 800873a:	6864      	ldr	r4, [r4, #4]
 800873c:	e7ae      	b.n	800869c <_malloc_r+0x34>
 800873e:	463c      	mov	r4, r7
 8008740:	687f      	ldr	r7, [r7, #4]
 8008742:	e7b6      	b.n	80086b2 <_malloc_r+0x4a>
 8008744:	461a      	mov	r2, r3
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	42a3      	cmp	r3, r4
 800874a:	d1fb      	bne.n	8008744 <_malloc_r+0xdc>
 800874c:	2300      	movs	r3, #0
 800874e:	6053      	str	r3, [r2, #4]
 8008750:	e7de      	b.n	8008710 <_malloc_r+0xa8>
 8008752:	230c      	movs	r3, #12
 8008754:	6033      	str	r3, [r6, #0]
 8008756:	4630      	mov	r0, r6
 8008758:	f000 f80c 	bl	8008774 <__malloc_unlock>
 800875c:	e794      	b.n	8008688 <_malloc_r+0x20>
 800875e:	6005      	str	r5, [r0, #0]
 8008760:	e7d6      	b.n	8008710 <_malloc_r+0xa8>
 8008762:	bf00      	nop
 8008764:	20005f74 	.word	0x20005f74

08008768 <__malloc_lock>:
 8008768:	4801      	ldr	r0, [pc, #4]	@ (8008770 <__malloc_lock+0x8>)
 800876a:	f7ff bf00 	b.w	800856e <__retarget_lock_acquire_recursive>
 800876e:	bf00      	nop
 8008770:	20005f6c 	.word	0x20005f6c

08008774 <__malloc_unlock>:
 8008774:	4801      	ldr	r0, [pc, #4]	@ (800877c <__malloc_unlock+0x8>)
 8008776:	f7ff befb 	b.w	8008570 <__retarget_lock_release_recursive>
 800877a:	bf00      	nop
 800877c:	20005f6c 	.word	0x20005f6c

08008780 <__ssputs_r>:
 8008780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008784:	688e      	ldr	r6, [r1, #8]
 8008786:	461f      	mov	r7, r3
 8008788:	42be      	cmp	r6, r7
 800878a:	680b      	ldr	r3, [r1, #0]
 800878c:	4682      	mov	sl, r0
 800878e:	460c      	mov	r4, r1
 8008790:	4690      	mov	r8, r2
 8008792:	d82d      	bhi.n	80087f0 <__ssputs_r+0x70>
 8008794:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008798:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800879c:	d026      	beq.n	80087ec <__ssputs_r+0x6c>
 800879e:	6965      	ldr	r5, [r4, #20]
 80087a0:	6909      	ldr	r1, [r1, #16]
 80087a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087a6:	eba3 0901 	sub.w	r9, r3, r1
 80087aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087ae:	1c7b      	adds	r3, r7, #1
 80087b0:	444b      	add	r3, r9
 80087b2:	106d      	asrs	r5, r5, #1
 80087b4:	429d      	cmp	r5, r3
 80087b6:	bf38      	it	cc
 80087b8:	461d      	movcc	r5, r3
 80087ba:	0553      	lsls	r3, r2, #21
 80087bc:	d527      	bpl.n	800880e <__ssputs_r+0x8e>
 80087be:	4629      	mov	r1, r5
 80087c0:	f7ff ff52 	bl	8008668 <_malloc_r>
 80087c4:	4606      	mov	r6, r0
 80087c6:	b360      	cbz	r0, 8008822 <__ssputs_r+0xa2>
 80087c8:	6921      	ldr	r1, [r4, #16]
 80087ca:	464a      	mov	r2, r9
 80087cc:	f7ff fed1 	bl	8008572 <memcpy>
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	6126      	str	r6, [r4, #16]
 80087de:	6165      	str	r5, [r4, #20]
 80087e0:	444e      	add	r6, r9
 80087e2:	eba5 0509 	sub.w	r5, r5, r9
 80087e6:	6026      	str	r6, [r4, #0]
 80087e8:	60a5      	str	r5, [r4, #8]
 80087ea:	463e      	mov	r6, r7
 80087ec:	42be      	cmp	r6, r7
 80087ee:	d900      	bls.n	80087f2 <__ssputs_r+0x72>
 80087f0:	463e      	mov	r6, r7
 80087f2:	6820      	ldr	r0, [r4, #0]
 80087f4:	4632      	mov	r2, r6
 80087f6:	4641      	mov	r1, r8
 80087f8:	f000 fcf6 	bl	80091e8 <memmove>
 80087fc:	68a3      	ldr	r3, [r4, #8]
 80087fe:	1b9b      	subs	r3, r3, r6
 8008800:	60a3      	str	r3, [r4, #8]
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	4433      	add	r3, r6
 8008806:	6023      	str	r3, [r4, #0]
 8008808:	2000      	movs	r0, #0
 800880a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880e:	462a      	mov	r2, r5
 8008810:	f000 fd36 	bl	8009280 <_realloc_r>
 8008814:	4606      	mov	r6, r0
 8008816:	2800      	cmp	r0, #0
 8008818:	d1e0      	bne.n	80087dc <__ssputs_r+0x5c>
 800881a:	6921      	ldr	r1, [r4, #16]
 800881c:	4650      	mov	r0, sl
 800881e:	f7ff feb7 	bl	8008590 <_free_r>
 8008822:	230c      	movs	r3, #12
 8008824:	f8ca 3000 	str.w	r3, [sl]
 8008828:	89a3      	ldrh	r3, [r4, #12]
 800882a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800882e:	81a3      	strh	r3, [r4, #12]
 8008830:	f04f 30ff 	mov.w	r0, #4294967295
 8008834:	e7e9      	b.n	800880a <__ssputs_r+0x8a>
	...

08008838 <_svfiprintf_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	4698      	mov	r8, r3
 800883e:	898b      	ldrh	r3, [r1, #12]
 8008840:	061b      	lsls	r3, r3, #24
 8008842:	b09d      	sub	sp, #116	@ 0x74
 8008844:	4607      	mov	r7, r0
 8008846:	460d      	mov	r5, r1
 8008848:	4614      	mov	r4, r2
 800884a:	d510      	bpl.n	800886e <_svfiprintf_r+0x36>
 800884c:	690b      	ldr	r3, [r1, #16]
 800884e:	b973      	cbnz	r3, 800886e <_svfiprintf_r+0x36>
 8008850:	2140      	movs	r1, #64	@ 0x40
 8008852:	f7ff ff09 	bl	8008668 <_malloc_r>
 8008856:	6028      	str	r0, [r5, #0]
 8008858:	6128      	str	r0, [r5, #16]
 800885a:	b930      	cbnz	r0, 800886a <_svfiprintf_r+0x32>
 800885c:	230c      	movs	r3, #12
 800885e:	603b      	str	r3, [r7, #0]
 8008860:	f04f 30ff 	mov.w	r0, #4294967295
 8008864:	b01d      	add	sp, #116	@ 0x74
 8008866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886a:	2340      	movs	r3, #64	@ 0x40
 800886c:	616b      	str	r3, [r5, #20]
 800886e:	2300      	movs	r3, #0
 8008870:	9309      	str	r3, [sp, #36]	@ 0x24
 8008872:	2320      	movs	r3, #32
 8008874:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008878:	f8cd 800c 	str.w	r8, [sp, #12]
 800887c:	2330      	movs	r3, #48	@ 0x30
 800887e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a1c <_svfiprintf_r+0x1e4>
 8008882:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008886:	f04f 0901 	mov.w	r9, #1
 800888a:	4623      	mov	r3, r4
 800888c:	469a      	mov	sl, r3
 800888e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008892:	b10a      	cbz	r2, 8008898 <_svfiprintf_r+0x60>
 8008894:	2a25      	cmp	r2, #37	@ 0x25
 8008896:	d1f9      	bne.n	800888c <_svfiprintf_r+0x54>
 8008898:	ebba 0b04 	subs.w	fp, sl, r4
 800889c:	d00b      	beq.n	80088b6 <_svfiprintf_r+0x7e>
 800889e:	465b      	mov	r3, fp
 80088a0:	4622      	mov	r2, r4
 80088a2:	4629      	mov	r1, r5
 80088a4:	4638      	mov	r0, r7
 80088a6:	f7ff ff6b 	bl	8008780 <__ssputs_r>
 80088aa:	3001      	adds	r0, #1
 80088ac:	f000 80a7 	beq.w	80089fe <_svfiprintf_r+0x1c6>
 80088b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088b2:	445a      	add	r2, fp
 80088b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80088b6:	f89a 3000 	ldrb.w	r3, [sl]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 809f 	beq.w	80089fe <_svfiprintf_r+0x1c6>
 80088c0:	2300      	movs	r3, #0
 80088c2:	f04f 32ff 	mov.w	r2, #4294967295
 80088c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088ca:	f10a 0a01 	add.w	sl, sl, #1
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	9307      	str	r3, [sp, #28]
 80088d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80088d8:	4654      	mov	r4, sl
 80088da:	2205      	movs	r2, #5
 80088dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e0:	484e      	ldr	r0, [pc, #312]	@ (8008a1c <_svfiprintf_r+0x1e4>)
 80088e2:	f7f7 fc7d 	bl	80001e0 <memchr>
 80088e6:	9a04      	ldr	r2, [sp, #16]
 80088e8:	b9d8      	cbnz	r0, 8008922 <_svfiprintf_r+0xea>
 80088ea:	06d0      	lsls	r0, r2, #27
 80088ec:	bf44      	itt	mi
 80088ee:	2320      	movmi	r3, #32
 80088f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088f4:	0711      	lsls	r1, r2, #28
 80088f6:	bf44      	itt	mi
 80088f8:	232b      	movmi	r3, #43	@ 0x2b
 80088fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008902:	2b2a      	cmp	r3, #42	@ 0x2a
 8008904:	d015      	beq.n	8008932 <_svfiprintf_r+0xfa>
 8008906:	9a07      	ldr	r2, [sp, #28]
 8008908:	4654      	mov	r4, sl
 800890a:	2000      	movs	r0, #0
 800890c:	f04f 0c0a 	mov.w	ip, #10
 8008910:	4621      	mov	r1, r4
 8008912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008916:	3b30      	subs	r3, #48	@ 0x30
 8008918:	2b09      	cmp	r3, #9
 800891a:	d94b      	bls.n	80089b4 <_svfiprintf_r+0x17c>
 800891c:	b1b0      	cbz	r0, 800894c <_svfiprintf_r+0x114>
 800891e:	9207      	str	r2, [sp, #28]
 8008920:	e014      	b.n	800894c <_svfiprintf_r+0x114>
 8008922:	eba0 0308 	sub.w	r3, r0, r8
 8008926:	fa09 f303 	lsl.w	r3, r9, r3
 800892a:	4313      	orrs	r3, r2
 800892c:	9304      	str	r3, [sp, #16]
 800892e:	46a2      	mov	sl, r4
 8008930:	e7d2      	b.n	80088d8 <_svfiprintf_r+0xa0>
 8008932:	9b03      	ldr	r3, [sp, #12]
 8008934:	1d19      	adds	r1, r3, #4
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	9103      	str	r1, [sp, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	bfbb      	ittet	lt
 800893e:	425b      	neglt	r3, r3
 8008940:	f042 0202 	orrlt.w	r2, r2, #2
 8008944:	9307      	strge	r3, [sp, #28]
 8008946:	9307      	strlt	r3, [sp, #28]
 8008948:	bfb8      	it	lt
 800894a:	9204      	strlt	r2, [sp, #16]
 800894c:	7823      	ldrb	r3, [r4, #0]
 800894e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008950:	d10a      	bne.n	8008968 <_svfiprintf_r+0x130>
 8008952:	7863      	ldrb	r3, [r4, #1]
 8008954:	2b2a      	cmp	r3, #42	@ 0x2a
 8008956:	d132      	bne.n	80089be <_svfiprintf_r+0x186>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	1d1a      	adds	r2, r3, #4
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	9203      	str	r2, [sp, #12]
 8008960:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008964:	3402      	adds	r4, #2
 8008966:	9305      	str	r3, [sp, #20]
 8008968:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a2c <_svfiprintf_r+0x1f4>
 800896c:	7821      	ldrb	r1, [r4, #0]
 800896e:	2203      	movs	r2, #3
 8008970:	4650      	mov	r0, sl
 8008972:	f7f7 fc35 	bl	80001e0 <memchr>
 8008976:	b138      	cbz	r0, 8008988 <_svfiprintf_r+0x150>
 8008978:	9b04      	ldr	r3, [sp, #16]
 800897a:	eba0 000a 	sub.w	r0, r0, sl
 800897e:	2240      	movs	r2, #64	@ 0x40
 8008980:	4082      	lsls	r2, r0
 8008982:	4313      	orrs	r3, r2
 8008984:	3401      	adds	r4, #1
 8008986:	9304      	str	r3, [sp, #16]
 8008988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800898c:	4824      	ldr	r0, [pc, #144]	@ (8008a20 <_svfiprintf_r+0x1e8>)
 800898e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008992:	2206      	movs	r2, #6
 8008994:	f7f7 fc24 	bl	80001e0 <memchr>
 8008998:	2800      	cmp	r0, #0
 800899a:	d036      	beq.n	8008a0a <_svfiprintf_r+0x1d2>
 800899c:	4b21      	ldr	r3, [pc, #132]	@ (8008a24 <_svfiprintf_r+0x1ec>)
 800899e:	bb1b      	cbnz	r3, 80089e8 <_svfiprintf_r+0x1b0>
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	3307      	adds	r3, #7
 80089a4:	f023 0307 	bic.w	r3, r3, #7
 80089a8:	3308      	adds	r3, #8
 80089aa:	9303      	str	r3, [sp, #12]
 80089ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ae:	4433      	add	r3, r6
 80089b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80089b2:	e76a      	b.n	800888a <_svfiprintf_r+0x52>
 80089b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80089b8:	460c      	mov	r4, r1
 80089ba:	2001      	movs	r0, #1
 80089bc:	e7a8      	b.n	8008910 <_svfiprintf_r+0xd8>
 80089be:	2300      	movs	r3, #0
 80089c0:	3401      	adds	r4, #1
 80089c2:	9305      	str	r3, [sp, #20]
 80089c4:	4619      	mov	r1, r3
 80089c6:	f04f 0c0a 	mov.w	ip, #10
 80089ca:	4620      	mov	r0, r4
 80089cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089d0:	3a30      	subs	r2, #48	@ 0x30
 80089d2:	2a09      	cmp	r2, #9
 80089d4:	d903      	bls.n	80089de <_svfiprintf_r+0x1a6>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0c6      	beq.n	8008968 <_svfiprintf_r+0x130>
 80089da:	9105      	str	r1, [sp, #20]
 80089dc:	e7c4      	b.n	8008968 <_svfiprintf_r+0x130>
 80089de:	fb0c 2101 	mla	r1, ip, r1, r2
 80089e2:	4604      	mov	r4, r0
 80089e4:	2301      	movs	r3, #1
 80089e6:	e7f0      	b.n	80089ca <_svfiprintf_r+0x192>
 80089e8:	ab03      	add	r3, sp, #12
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	462a      	mov	r2, r5
 80089ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008a28 <_svfiprintf_r+0x1f0>)
 80089f0:	a904      	add	r1, sp, #16
 80089f2:	4638      	mov	r0, r7
 80089f4:	f3af 8000 	nop.w
 80089f8:	1c42      	adds	r2, r0, #1
 80089fa:	4606      	mov	r6, r0
 80089fc:	d1d6      	bne.n	80089ac <_svfiprintf_r+0x174>
 80089fe:	89ab      	ldrh	r3, [r5, #12]
 8008a00:	065b      	lsls	r3, r3, #25
 8008a02:	f53f af2d 	bmi.w	8008860 <_svfiprintf_r+0x28>
 8008a06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a08:	e72c      	b.n	8008864 <_svfiprintf_r+0x2c>
 8008a0a:	ab03      	add	r3, sp, #12
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	462a      	mov	r2, r5
 8008a10:	4b05      	ldr	r3, [pc, #20]	@ (8008a28 <_svfiprintf_r+0x1f0>)
 8008a12:	a904      	add	r1, sp, #16
 8008a14:	4638      	mov	r0, r7
 8008a16:	f000 f9bb 	bl	8008d90 <_printf_i>
 8008a1a:	e7ed      	b.n	80089f8 <_svfiprintf_r+0x1c0>
 8008a1c:	080094e0 	.word	0x080094e0
 8008a20:	080094ea 	.word	0x080094ea
 8008a24:	00000000 	.word	0x00000000
 8008a28:	08008781 	.word	0x08008781
 8008a2c:	080094e6 	.word	0x080094e6

08008a30 <__sfputc_r>:
 8008a30:	6893      	ldr	r3, [r2, #8]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	b410      	push	{r4}
 8008a38:	6093      	str	r3, [r2, #8]
 8008a3a:	da08      	bge.n	8008a4e <__sfputc_r+0x1e>
 8008a3c:	6994      	ldr	r4, [r2, #24]
 8008a3e:	42a3      	cmp	r3, r4
 8008a40:	db01      	blt.n	8008a46 <__sfputc_r+0x16>
 8008a42:	290a      	cmp	r1, #10
 8008a44:	d103      	bne.n	8008a4e <__sfputc_r+0x1e>
 8008a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a4a:	f7ff bc24 	b.w	8008296 <__swbuf_r>
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	1c58      	adds	r0, r3, #1
 8008a52:	6010      	str	r0, [r2, #0]
 8008a54:	7019      	strb	r1, [r3, #0]
 8008a56:	4608      	mov	r0, r1
 8008a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <__sfputs_r>:
 8008a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a60:	4606      	mov	r6, r0
 8008a62:	460f      	mov	r7, r1
 8008a64:	4614      	mov	r4, r2
 8008a66:	18d5      	adds	r5, r2, r3
 8008a68:	42ac      	cmp	r4, r5
 8008a6a:	d101      	bne.n	8008a70 <__sfputs_r+0x12>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	e007      	b.n	8008a80 <__sfputs_r+0x22>
 8008a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a74:	463a      	mov	r2, r7
 8008a76:	4630      	mov	r0, r6
 8008a78:	f7ff ffda 	bl	8008a30 <__sfputc_r>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d1f3      	bne.n	8008a68 <__sfputs_r+0xa>
 8008a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a84 <_vfiprintf_r>:
 8008a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a88:	460d      	mov	r5, r1
 8008a8a:	b09d      	sub	sp, #116	@ 0x74
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	4698      	mov	r8, r3
 8008a90:	4606      	mov	r6, r0
 8008a92:	b118      	cbz	r0, 8008a9c <_vfiprintf_r+0x18>
 8008a94:	6a03      	ldr	r3, [r0, #32]
 8008a96:	b90b      	cbnz	r3, 8008a9c <_vfiprintf_r+0x18>
 8008a98:	f7ff faf2 	bl	8008080 <__sinit>
 8008a9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a9e:	07d9      	lsls	r1, r3, #31
 8008aa0:	d405      	bmi.n	8008aae <_vfiprintf_r+0x2a>
 8008aa2:	89ab      	ldrh	r3, [r5, #12]
 8008aa4:	059a      	lsls	r2, r3, #22
 8008aa6:	d402      	bmi.n	8008aae <_vfiprintf_r+0x2a>
 8008aa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aaa:	f7ff fd60 	bl	800856e <__retarget_lock_acquire_recursive>
 8008aae:	89ab      	ldrh	r3, [r5, #12]
 8008ab0:	071b      	lsls	r3, r3, #28
 8008ab2:	d501      	bpl.n	8008ab8 <_vfiprintf_r+0x34>
 8008ab4:	692b      	ldr	r3, [r5, #16]
 8008ab6:	b99b      	cbnz	r3, 8008ae0 <_vfiprintf_r+0x5c>
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4630      	mov	r0, r6
 8008abc:	f7ff fc2a 	bl	8008314 <__swsetup_r>
 8008ac0:	b170      	cbz	r0, 8008ae0 <_vfiprintf_r+0x5c>
 8008ac2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ac4:	07dc      	lsls	r4, r3, #31
 8008ac6:	d504      	bpl.n	8008ad2 <_vfiprintf_r+0x4e>
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	b01d      	add	sp, #116	@ 0x74
 8008ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad2:	89ab      	ldrh	r3, [r5, #12]
 8008ad4:	0598      	lsls	r0, r3, #22
 8008ad6:	d4f7      	bmi.n	8008ac8 <_vfiprintf_r+0x44>
 8008ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ada:	f7ff fd49 	bl	8008570 <__retarget_lock_release_recursive>
 8008ade:	e7f3      	b.n	8008ac8 <_vfiprintf_r+0x44>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ae4:	2320      	movs	r3, #32
 8008ae6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aee:	2330      	movs	r3, #48	@ 0x30
 8008af0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ca0 <_vfiprintf_r+0x21c>
 8008af4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008af8:	f04f 0901 	mov.w	r9, #1
 8008afc:	4623      	mov	r3, r4
 8008afe:	469a      	mov	sl, r3
 8008b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b04:	b10a      	cbz	r2, 8008b0a <_vfiprintf_r+0x86>
 8008b06:	2a25      	cmp	r2, #37	@ 0x25
 8008b08:	d1f9      	bne.n	8008afe <_vfiprintf_r+0x7a>
 8008b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b0e:	d00b      	beq.n	8008b28 <_vfiprintf_r+0xa4>
 8008b10:	465b      	mov	r3, fp
 8008b12:	4622      	mov	r2, r4
 8008b14:	4629      	mov	r1, r5
 8008b16:	4630      	mov	r0, r6
 8008b18:	f7ff ffa1 	bl	8008a5e <__sfputs_r>
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	f000 80a7 	beq.w	8008c70 <_vfiprintf_r+0x1ec>
 8008b22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b24:	445a      	add	r2, fp
 8008b26:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b28:	f89a 3000 	ldrb.w	r3, [sl]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 809f 	beq.w	8008c70 <_vfiprintf_r+0x1ec>
 8008b32:	2300      	movs	r3, #0
 8008b34:	f04f 32ff 	mov.w	r2, #4294967295
 8008b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b3c:	f10a 0a01 	add.w	sl, sl, #1
 8008b40:	9304      	str	r3, [sp, #16]
 8008b42:	9307      	str	r3, [sp, #28]
 8008b44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b48:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b4a:	4654      	mov	r4, sl
 8008b4c:	2205      	movs	r2, #5
 8008b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b52:	4853      	ldr	r0, [pc, #332]	@ (8008ca0 <_vfiprintf_r+0x21c>)
 8008b54:	f7f7 fb44 	bl	80001e0 <memchr>
 8008b58:	9a04      	ldr	r2, [sp, #16]
 8008b5a:	b9d8      	cbnz	r0, 8008b94 <_vfiprintf_r+0x110>
 8008b5c:	06d1      	lsls	r1, r2, #27
 8008b5e:	bf44      	itt	mi
 8008b60:	2320      	movmi	r3, #32
 8008b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b66:	0713      	lsls	r3, r2, #28
 8008b68:	bf44      	itt	mi
 8008b6a:	232b      	movmi	r3, #43	@ 0x2b
 8008b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b70:	f89a 3000 	ldrb.w	r3, [sl]
 8008b74:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b76:	d015      	beq.n	8008ba4 <_vfiprintf_r+0x120>
 8008b78:	9a07      	ldr	r2, [sp, #28]
 8008b7a:	4654      	mov	r4, sl
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	f04f 0c0a 	mov.w	ip, #10
 8008b82:	4621      	mov	r1, r4
 8008b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b88:	3b30      	subs	r3, #48	@ 0x30
 8008b8a:	2b09      	cmp	r3, #9
 8008b8c:	d94b      	bls.n	8008c26 <_vfiprintf_r+0x1a2>
 8008b8e:	b1b0      	cbz	r0, 8008bbe <_vfiprintf_r+0x13a>
 8008b90:	9207      	str	r2, [sp, #28]
 8008b92:	e014      	b.n	8008bbe <_vfiprintf_r+0x13a>
 8008b94:	eba0 0308 	sub.w	r3, r0, r8
 8008b98:	fa09 f303 	lsl.w	r3, r9, r3
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	9304      	str	r3, [sp, #16]
 8008ba0:	46a2      	mov	sl, r4
 8008ba2:	e7d2      	b.n	8008b4a <_vfiprintf_r+0xc6>
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	1d19      	adds	r1, r3, #4
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	9103      	str	r1, [sp, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bfbb      	ittet	lt
 8008bb0:	425b      	neglt	r3, r3
 8008bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8008bb6:	9307      	strge	r3, [sp, #28]
 8008bb8:	9307      	strlt	r3, [sp, #28]
 8008bba:	bfb8      	it	lt
 8008bbc:	9204      	strlt	r2, [sp, #16]
 8008bbe:	7823      	ldrb	r3, [r4, #0]
 8008bc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bc2:	d10a      	bne.n	8008bda <_vfiprintf_r+0x156>
 8008bc4:	7863      	ldrb	r3, [r4, #1]
 8008bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bc8:	d132      	bne.n	8008c30 <_vfiprintf_r+0x1ac>
 8008bca:	9b03      	ldr	r3, [sp, #12]
 8008bcc:	1d1a      	adds	r2, r3, #4
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	9203      	str	r2, [sp, #12]
 8008bd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bd6:	3402      	adds	r4, #2
 8008bd8:	9305      	str	r3, [sp, #20]
 8008bda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008cb0 <_vfiprintf_r+0x22c>
 8008bde:	7821      	ldrb	r1, [r4, #0]
 8008be0:	2203      	movs	r2, #3
 8008be2:	4650      	mov	r0, sl
 8008be4:	f7f7 fafc 	bl	80001e0 <memchr>
 8008be8:	b138      	cbz	r0, 8008bfa <_vfiprintf_r+0x176>
 8008bea:	9b04      	ldr	r3, [sp, #16]
 8008bec:	eba0 000a 	sub.w	r0, r0, sl
 8008bf0:	2240      	movs	r2, #64	@ 0x40
 8008bf2:	4082      	lsls	r2, r0
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	3401      	adds	r4, #1
 8008bf8:	9304      	str	r3, [sp, #16]
 8008bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bfe:	4829      	ldr	r0, [pc, #164]	@ (8008ca4 <_vfiprintf_r+0x220>)
 8008c00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c04:	2206      	movs	r2, #6
 8008c06:	f7f7 faeb 	bl	80001e0 <memchr>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d03f      	beq.n	8008c8e <_vfiprintf_r+0x20a>
 8008c0e:	4b26      	ldr	r3, [pc, #152]	@ (8008ca8 <_vfiprintf_r+0x224>)
 8008c10:	bb1b      	cbnz	r3, 8008c5a <_vfiprintf_r+0x1d6>
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	3307      	adds	r3, #7
 8008c16:	f023 0307 	bic.w	r3, r3, #7
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	9303      	str	r3, [sp, #12]
 8008c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c20:	443b      	add	r3, r7
 8008c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c24:	e76a      	b.n	8008afc <_vfiprintf_r+0x78>
 8008c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	2001      	movs	r0, #1
 8008c2e:	e7a8      	b.n	8008b82 <_vfiprintf_r+0xfe>
 8008c30:	2300      	movs	r3, #0
 8008c32:	3401      	adds	r4, #1
 8008c34:	9305      	str	r3, [sp, #20]
 8008c36:	4619      	mov	r1, r3
 8008c38:	f04f 0c0a 	mov.w	ip, #10
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c42:	3a30      	subs	r2, #48	@ 0x30
 8008c44:	2a09      	cmp	r2, #9
 8008c46:	d903      	bls.n	8008c50 <_vfiprintf_r+0x1cc>
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d0c6      	beq.n	8008bda <_vfiprintf_r+0x156>
 8008c4c:	9105      	str	r1, [sp, #20]
 8008c4e:	e7c4      	b.n	8008bda <_vfiprintf_r+0x156>
 8008c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c54:	4604      	mov	r4, r0
 8008c56:	2301      	movs	r3, #1
 8008c58:	e7f0      	b.n	8008c3c <_vfiprintf_r+0x1b8>
 8008c5a:	ab03      	add	r3, sp, #12
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	462a      	mov	r2, r5
 8008c60:	4b12      	ldr	r3, [pc, #72]	@ (8008cac <_vfiprintf_r+0x228>)
 8008c62:	a904      	add	r1, sp, #16
 8008c64:	4630      	mov	r0, r6
 8008c66:	f3af 8000 	nop.w
 8008c6a:	4607      	mov	r7, r0
 8008c6c:	1c78      	adds	r0, r7, #1
 8008c6e:	d1d6      	bne.n	8008c1e <_vfiprintf_r+0x19a>
 8008c70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c72:	07d9      	lsls	r1, r3, #31
 8008c74:	d405      	bmi.n	8008c82 <_vfiprintf_r+0x1fe>
 8008c76:	89ab      	ldrh	r3, [r5, #12]
 8008c78:	059a      	lsls	r2, r3, #22
 8008c7a:	d402      	bmi.n	8008c82 <_vfiprintf_r+0x1fe>
 8008c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c7e:	f7ff fc77 	bl	8008570 <__retarget_lock_release_recursive>
 8008c82:	89ab      	ldrh	r3, [r5, #12]
 8008c84:	065b      	lsls	r3, r3, #25
 8008c86:	f53f af1f 	bmi.w	8008ac8 <_vfiprintf_r+0x44>
 8008c8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c8c:	e71e      	b.n	8008acc <_vfiprintf_r+0x48>
 8008c8e:	ab03      	add	r3, sp, #12
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	462a      	mov	r2, r5
 8008c94:	4b05      	ldr	r3, [pc, #20]	@ (8008cac <_vfiprintf_r+0x228>)
 8008c96:	a904      	add	r1, sp, #16
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f000 f879 	bl	8008d90 <_printf_i>
 8008c9e:	e7e4      	b.n	8008c6a <_vfiprintf_r+0x1e6>
 8008ca0:	080094e0 	.word	0x080094e0
 8008ca4:	080094ea 	.word	0x080094ea
 8008ca8:	00000000 	.word	0x00000000
 8008cac:	08008a5f 	.word	0x08008a5f
 8008cb0:	080094e6 	.word	0x080094e6

08008cb4 <_printf_common>:
 8008cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	4616      	mov	r6, r2
 8008cba:	4698      	mov	r8, r3
 8008cbc:	688a      	ldr	r2, [r1, #8]
 8008cbe:	690b      	ldr	r3, [r1, #16]
 8008cc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	bfb8      	it	lt
 8008cc8:	4613      	movlt	r3, r2
 8008cca:	6033      	str	r3, [r6, #0]
 8008ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	b10a      	cbz	r2, 8008cda <_printf_common+0x26>
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	6033      	str	r3, [r6, #0]
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	0699      	lsls	r1, r3, #26
 8008cde:	bf42      	ittt	mi
 8008ce0:	6833      	ldrmi	r3, [r6, #0]
 8008ce2:	3302      	addmi	r3, #2
 8008ce4:	6033      	strmi	r3, [r6, #0]
 8008ce6:	6825      	ldr	r5, [r4, #0]
 8008ce8:	f015 0506 	ands.w	r5, r5, #6
 8008cec:	d106      	bne.n	8008cfc <_printf_common+0x48>
 8008cee:	f104 0a19 	add.w	sl, r4, #25
 8008cf2:	68e3      	ldr	r3, [r4, #12]
 8008cf4:	6832      	ldr	r2, [r6, #0]
 8008cf6:	1a9b      	subs	r3, r3, r2
 8008cf8:	42ab      	cmp	r3, r5
 8008cfa:	dc26      	bgt.n	8008d4a <_printf_common+0x96>
 8008cfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d00:	6822      	ldr	r2, [r4, #0]
 8008d02:	3b00      	subs	r3, #0
 8008d04:	bf18      	it	ne
 8008d06:	2301      	movne	r3, #1
 8008d08:	0692      	lsls	r2, r2, #26
 8008d0a:	d42b      	bmi.n	8008d64 <_printf_common+0xb0>
 8008d0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d10:	4641      	mov	r1, r8
 8008d12:	4638      	mov	r0, r7
 8008d14:	47c8      	blx	r9
 8008d16:	3001      	adds	r0, #1
 8008d18:	d01e      	beq.n	8008d58 <_printf_common+0xa4>
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	6922      	ldr	r2, [r4, #16]
 8008d1e:	f003 0306 	and.w	r3, r3, #6
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	bf02      	ittt	eq
 8008d26:	68e5      	ldreq	r5, [r4, #12]
 8008d28:	6833      	ldreq	r3, [r6, #0]
 8008d2a:	1aed      	subeq	r5, r5, r3
 8008d2c:	68a3      	ldr	r3, [r4, #8]
 8008d2e:	bf0c      	ite	eq
 8008d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d34:	2500      	movne	r5, #0
 8008d36:	4293      	cmp	r3, r2
 8008d38:	bfc4      	itt	gt
 8008d3a:	1a9b      	subgt	r3, r3, r2
 8008d3c:	18ed      	addgt	r5, r5, r3
 8008d3e:	2600      	movs	r6, #0
 8008d40:	341a      	adds	r4, #26
 8008d42:	42b5      	cmp	r5, r6
 8008d44:	d11a      	bne.n	8008d7c <_printf_common+0xc8>
 8008d46:	2000      	movs	r0, #0
 8008d48:	e008      	b.n	8008d5c <_printf_common+0xa8>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4652      	mov	r2, sl
 8008d4e:	4641      	mov	r1, r8
 8008d50:	4638      	mov	r0, r7
 8008d52:	47c8      	blx	r9
 8008d54:	3001      	adds	r0, #1
 8008d56:	d103      	bne.n	8008d60 <_printf_common+0xac>
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d60:	3501      	adds	r5, #1
 8008d62:	e7c6      	b.n	8008cf2 <_printf_common+0x3e>
 8008d64:	18e1      	adds	r1, r4, r3
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	2030      	movs	r0, #48	@ 0x30
 8008d6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d6e:	4422      	add	r2, r4
 8008d70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d78:	3302      	adds	r3, #2
 8008d7a:	e7c7      	b.n	8008d0c <_printf_common+0x58>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	4622      	mov	r2, r4
 8008d80:	4641      	mov	r1, r8
 8008d82:	4638      	mov	r0, r7
 8008d84:	47c8      	blx	r9
 8008d86:	3001      	adds	r0, #1
 8008d88:	d0e6      	beq.n	8008d58 <_printf_common+0xa4>
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	e7d9      	b.n	8008d42 <_printf_common+0x8e>
	...

08008d90 <_printf_i>:
 8008d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d94:	7e0f      	ldrb	r7, [r1, #24]
 8008d96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d98:	2f78      	cmp	r7, #120	@ 0x78
 8008d9a:	4691      	mov	r9, r2
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	469a      	mov	sl, r3
 8008da2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008da6:	d807      	bhi.n	8008db8 <_printf_i+0x28>
 8008da8:	2f62      	cmp	r7, #98	@ 0x62
 8008daa:	d80a      	bhi.n	8008dc2 <_printf_i+0x32>
 8008dac:	2f00      	cmp	r7, #0
 8008dae:	f000 80d1 	beq.w	8008f54 <_printf_i+0x1c4>
 8008db2:	2f58      	cmp	r7, #88	@ 0x58
 8008db4:	f000 80b8 	beq.w	8008f28 <_printf_i+0x198>
 8008db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008dc0:	e03a      	b.n	8008e38 <_printf_i+0xa8>
 8008dc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008dc6:	2b15      	cmp	r3, #21
 8008dc8:	d8f6      	bhi.n	8008db8 <_printf_i+0x28>
 8008dca:	a101      	add	r1, pc, #4	@ (adr r1, 8008dd0 <_printf_i+0x40>)
 8008dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dd0:	08008e29 	.word	0x08008e29
 8008dd4:	08008e3d 	.word	0x08008e3d
 8008dd8:	08008db9 	.word	0x08008db9
 8008ddc:	08008db9 	.word	0x08008db9
 8008de0:	08008db9 	.word	0x08008db9
 8008de4:	08008db9 	.word	0x08008db9
 8008de8:	08008e3d 	.word	0x08008e3d
 8008dec:	08008db9 	.word	0x08008db9
 8008df0:	08008db9 	.word	0x08008db9
 8008df4:	08008db9 	.word	0x08008db9
 8008df8:	08008db9 	.word	0x08008db9
 8008dfc:	08008f3b 	.word	0x08008f3b
 8008e00:	08008e67 	.word	0x08008e67
 8008e04:	08008ef5 	.word	0x08008ef5
 8008e08:	08008db9 	.word	0x08008db9
 8008e0c:	08008db9 	.word	0x08008db9
 8008e10:	08008f5d 	.word	0x08008f5d
 8008e14:	08008db9 	.word	0x08008db9
 8008e18:	08008e67 	.word	0x08008e67
 8008e1c:	08008db9 	.word	0x08008db9
 8008e20:	08008db9 	.word	0x08008db9
 8008e24:	08008efd 	.word	0x08008efd
 8008e28:	6833      	ldr	r3, [r6, #0]
 8008e2a:	1d1a      	adds	r2, r3, #4
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6032      	str	r2, [r6, #0]
 8008e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e09c      	b.n	8008f76 <_printf_i+0x1e6>
 8008e3c:	6833      	ldr	r3, [r6, #0]
 8008e3e:	6820      	ldr	r0, [r4, #0]
 8008e40:	1d19      	adds	r1, r3, #4
 8008e42:	6031      	str	r1, [r6, #0]
 8008e44:	0606      	lsls	r6, r0, #24
 8008e46:	d501      	bpl.n	8008e4c <_printf_i+0xbc>
 8008e48:	681d      	ldr	r5, [r3, #0]
 8008e4a:	e003      	b.n	8008e54 <_printf_i+0xc4>
 8008e4c:	0645      	lsls	r5, r0, #25
 8008e4e:	d5fb      	bpl.n	8008e48 <_printf_i+0xb8>
 8008e50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e54:	2d00      	cmp	r5, #0
 8008e56:	da03      	bge.n	8008e60 <_printf_i+0xd0>
 8008e58:	232d      	movs	r3, #45	@ 0x2d
 8008e5a:	426d      	negs	r5, r5
 8008e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e60:	4858      	ldr	r0, [pc, #352]	@ (8008fc4 <_printf_i+0x234>)
 8008e62:	230a      	movs	r3, #10
 8008e64:	e011      	b.n	8008e8a <_printf_i+0xfa>
 8008e66:	6821      	ldr	r1, [r4, #0]
 8008e68:	6833      	ldr	r3, [r6, #0]
 8008e6a:	0608      	lsls	r0, r1, #24
 8008e6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e70:	d402      	bmi.n	8008e78 <_printf_i+0xe8>
 8008e72:	0649      	lsls	r1, r1, #25
 8008e74:	bf48      	it	mi
 8008e76:	b2ad      	uxthmi	r5, r5
 8008e78:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e7a:	4852      	ldr	r0, [pc, #328]	@ (8008fc4 <_printf_i+0x234>)
 8008e7c:	6033      	str	r3, [r6, #0]
 8008e7e:	bf14      	ite	ne
 8008e80:	230a      	movne	r3, #10
 8008e82:	2308      	moveq	r3, #8
 8008e84:	2100      	movs	r1, #0
 8008e86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e8a:	6866      	ldr	r6, [r4, #4]
 8008e8c:	60a6      	str	r6, [r4, #8]
 8008e8e:	2e00      	cmp	r6, #0
 8008e90:	db05      	blt.n	8008e9e <_printf_i+0x10e>
 8008e92:	6821      	ldr	r1, [r4, #0]
 8008e94:	432e      	orrs	r6, r5
 8008e96:	f021 0104 	bic.w	r1, r1, #4
 8008e9a:	6021      	str	r1, [r4, #0]
 8008e9c:	d04b      	beq.n	8008f36 <_printf_i+0x1a6>
 8008e9e:	4616      	mov	r6, r2
 8008ea0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ea4:	fb03 5711 	mls	r7, r3, r1, r5
 8008ea8:	5dc7      	ldrb	r7, [r0, r7]
 8008eaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008eae:	462f      	mov	r7, r5
 8008eb0:	42bb      	cmp	r3, r7
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	d9f4      	bls.n	8008ea0 <_printf_i+0x110>
 8008eb6:	2b08      	cmp	r3, #8
 8008eb8:	d10b      	bne.n	8008ed2 <_printf_i+0x142>
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	07df      	lsls	r7, r3, #31
 8008ebe:	d508      	bpl.n	8008ed2 <_printf_i+0x142>
 8008ec0:	6923      	ldr	r3, [r4, #16]
 8008ec2:	6861      	ldr	r1, [r4, #4]
 8008ec4:	4299      	cmp	r1, r3
 8008ec6:	bfde      	ittt	le
 8008ec8:	2330      	movle	r3, #48	@ 0x30
 8008eca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ece:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ed2:	1b92      	subs	r2, r2, r6
 8008ed4:	6122      	str	r2, [r4, #16]
 8008ed6:	f8cd a000 	str.w	sl, [sp]
 8008eda:	464b      	mov	r3, r9
 8008edc:	aa03      	add	r2, sp, #12
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	f7ff fee7 	bl	8008cb4 <_printf_common>
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	d14a      	bne.n	8008f80 <_printf_i+0x1f0>
 8008eea:	f04f 30ff 	mov.w	r0, #4294967295
 8008eee:	b004      	add	sp, #16
 8008ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	f043 0320 	orr.w	r3, r3, #32
 8008efa:	6023      	str	r3, [r4, #0]
 8008efc:	4832      	ldr	r0, [pc, #200]	@ (8008fc8 <_printf_i+0x238>)
 8008efe:	2778      	movs	r7, #120	@ 0x78
 8008f00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	6831      	ldr	r1, [r6, #0]
 8008f08:	061f      	lsls	r7, r3, #24
 8008f0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f0e:	d402      	bmi.n	8008f16 <_printf_i+0x186>
 8008f10:	065f      	lsls	r7, r3, #25
 8008f12:	bf48      	it	mi
 8008f14:	b2ad      	uxthmi	r5, r5
 8008f16:	6031      	str	r1, [r6, #0]
 8008f18:	07d9      	lsls	r1, r3, #31
 8008f1a:	bf44      	itt	mi
 8008f1c:	f043 0320 	orrmi.w	r3, r3, #32
 8008f20:	6023      	strmi	r3, [r4, #0]
 8008f22:	b11d      	cbz	r5, 8008f2c <_printf_i+0x19c>
 8008f24:	2310      	movs	r3, #16
 8008f26:	e7ad      	b.n	8008e84 <_printf_i+0xf4>
 8008f28:	4826      	ldr	r0, [pc, #152]	@ (8008fc4 <_printf_i+0x234>)
 8008f2a:	e7e9      	b.n	8008f00 <_printf_i+0x170>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	f023 0320 	bic.w	r3, r3, #32
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	e7f6      	b.n	8008f24 <_printf_i+0x194>
 8008f36:	4616      	mov	r6, r2
 8008f38:	e7bd      	b.n	8008eb6 <_printf_i+0x126>
 8008f3a:	6833      	ldr	r3, [r6, #0]
 8008f3c:	6825      	ldr	r5, [r4, #0]
 8008f3e:	6961      	ldr	r1, [r4, #20]
 8008f40:	1d18      	adds	r0, r3, #4
 8008f42:	6030      	str	r0, [r6, #0]
 8008f44:	062e      	lsls	r6, r5, #24
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	d501      	bpl.n	8008f4e <_printf_i+0x1be>
 8008f4a:	6019      	str	r1, [r3, #0]
 8008f4c:	e002      	b.n	8008f54 <_printf_i+0x1c4>
 8008f4e:	0668      	lsls	r0, r5, #25
 8008f50:	d5fb      	bpl.n	8008f4a <_printf_i+0x1ba>
 8008f52:	8019      	strh	r1, [r3, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	4616      	mov	r6, r2
 8008f5a:	e7bc      	b.n	8008ed6 <_printf_i+0x146>
 8008f5c:	6833      	ldr	r3, [r6, #0]
 8008f5e:	1d1a      	adds	r2, r3, #4
 8008f60:	6032      	str	r2, [r6, #0]
 8008f62:	681e      	ldr	r6, [r3, #0]
 8008f64:	6862      	ldr	r2, [r4, #4]
 8008f66:	2100      	movs	r1, #0
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f7f7 f939 	bl	80001e0 <memchr>
 8008f6e:	b108      	cbz	r0, 8008f74 <_printf_i+0x1e4>
 8008f70:	1b80      	subs	r0, r0, r6
 8008f72:	6060      	str	r0, [r4, #4]
 8008f74:	6863      	ldr	r3, [r4, #4]
 8008f76:	6123      	str	r3, [r4, #16]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f7e:	e7aa      	b.n	8008ed6 <_printf_i+0x146>
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	4632      	mov	r2, r6
 8008f84:	4649      	mov	r1, r9
 8008f86:	4640      	mov	r0, r8
 8008f88:	47d0      	blx	sl
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d0ad      	beq.n	8008eea <_printf_i+0x15a>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	079b      	lsls	r3, r3, #30
 8008f92:	d413      	bmi.n	8008fbc <_printf_i+0x22c>
 8008f94:	68e0      	ldr	r0, [r4, #12]
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	4298      	cmp	r0, r3
 8008f9a:	bfb8      	it	lt
 8008f9c:	4618      	movlt	r0, r3
 8008f9e:	e7a6      	b.n	8008eee <_printf_i+0x15e>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	4632      	mov	r2, r6
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	47d0      	blx	sl
 8008faa:	3001      	adds	r0, #1
 8008fac:	d09d      	beq.n	8008eea <_printf_i+0x15a>
 8008fae:	3501      	adds	r5, #1
 8008fb0:	68e3      	ldr	r3, [r4, #12]
 8008fb2:	9903      	ldr	r1, [sp, #12]
 8008fb4:	1a5b      	subs	r3, r3, r1
 8008fb6:	42ab      	cmp	r3, r5
 8008fb8:	dcf2      	bgt.n	8008fa0 <_printf_i+0x210>
 8008fba:	e7eb      	b.n	8008f94 <_printf_i+0x204>
 8008fbc:	2500      	movs	r5, #0
 8008fbe:	f104 0619 	add.w	r6, r4, #25
 8008fc2:	e7f5      	b.n	8008fb0 <_printf_i+0x220>
 8008fc4:	080094f1 	.word	0x080094f1
 8008fc8:	08009502 	.word	0x08009502

08008fcc <__sflush_r>:
 8008fcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd4:	0716      	lsls	r6, r2, #28
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	d454      	bmi.n	8009086 <__sflush_r+0xba>
 8008fdc:	684b      	ldr	r3, [r1, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	dc02      	bgt.n	8008fe8 <__sflush_r+0x1c>
 8008fe2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dd48      	ble.n	800907a <__sflush_r+0xae>
 8008fe8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fea:	2e00      	cmp	r6, #0
 8008fec:	d045      	beq.n	800907a <__sflush_r+0xae>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ff4:	682f      	ldr	r7, [r5, #0]
 8008ff6:	6a21      	ldr	r1, [r4, #32]
 8008ff8:	602b      	str	r3, [r5, #0]
 8008ffa:	d030      	beq.n	800905e <__sflush_r+0x92>
 8008ffc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	0759      	lsls	r1, r3, #29
 8009002:	d505      	bpl.n	8009010 <__sflush_r+0x44>
 8009004:	6863      	ldr	r3, [r4, #4]
 8009006:	1ad2      	subs	r2, r2, r3
 8009008:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800900a:	b10b      	cbz	r3, 8009010 <__sflush_r+0x44>
 800900c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800900e:	1ad2      	subs	r2, r2, r3
 8009010:	2300      	movs	r3, #0
 8009012:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009014:	6a21      	ldr	r1, [r4, #32]
 8009016:	4628      	mov	r0, r5
 8009018:	47b0      	blx	r6
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	89a3      	ldrh	r3, [r4, #12]
 800901e:	d106      	bne.n	800902e <__sflush_r+0x62>
 8009020:	6829      	ldr	r1, [r5, #0]
 8009022:	291d      	cmp	r1, #29
 8009024:	d82b      	bhi.n	800907e <__sflush_r+0xb2>
 8009026:	4a2a      	ldr	r2, [pc, #168]	@ (80090d0 <__sflush_r+0x104>)
 8009028:	40ca      	lsrs	r2, r1
 800902a:	07d6      	lsls	r6, r2, #31
 800902c:	d527      	bpl.n	800907e <__sflush_r+0xb2>
 800902e:	2200      	movs	r2, #0
 8009030:	6062      	str	r2, [r4, #4]
 8009032:	04d9      	lsls	r1, r3, #19
 8009034:	6922      	ldr	r2, [r4, #16]
 8009036:	6022      	str	r2, [r4, #0]
 8009038:	d504      	bpl.n	8009044 <__sflush_r+0x78>
 800903a:	1c42      	adds	r2, r0, #1
 800903c:	d101      	bne.n	8009042 <__sflush_r+0x76>
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	b903      	cbnz	r3, 8009044 <__sflush_r+0x78>
 8009042:	6560      	str	r0, [r4, #84]	@ 0x54
 8009044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009046:	602f      	str	r7, [r5, #0]
 8009048:	b1b9      	cbz	r1, 800907a <__sflush_r+0xae>
 800904a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800904e:	4299      	cmp	r1, r3
 8009050:	d002      	beq.n	8009058 <__sflush_r+0x8c>
 8009052:	4628      	mov	r0, r5
 8009054:	f7ff fa9c 	bl	8008590 <_free_r>
 8009058:	2300      	movs	r3, #0
 800905a:	6363      	str	r3, [r4, #52]	@ 0x34
 800905c:	e00d      	b.n	800907a <__sflush_r+0xae>
 800905e:	2301      	movs	r3, #1
 8009060:	4628      	mov	r0, r5
 8009062:	47b0      	blx	r6
 8009064:	4602      	mov	r2, r0
 8009066:	1c50      	adds	r0, r2, #1
 8009068:	d1c9      	bne.n	8008ffe <__sflush_r+0x32>
 800906a:	682b      	ldr	r3, [r5, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0c6      	beq.n	8008ffe <__sflush_r+0x32>
 8009070:	2b1d      	cmp	r3, #29
 8009072:	d001      	beq.n	8009078 <__sflush_r+0xac>
 8009074:	2b16      	cmp	r3, #22
 8009076:	d11e      	bne.n	80090b6 <__sflush_r+0xea>
 8009078:	602f      	str	r7, [r5, #0]
 800907a:	2000      	movs	r0, #0
 800907c:	e022      	b.n	80090c4 <__sflush_r+0xf8>
 800907e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009082:	b21b      	sxth	r3, r3
 8009084:	e01b      	b.n	80090be <__sflush_r+0xf2>
 8009086:	690f      	ldr	r7, [r1, #16]
 8009088:	2f00      	cmp	r7, #0
 800908a:	d0f6      	beq.n	800907a <__sflush_r+0xae>
 800908c:	0793      	lsls	r3, r2, #30
 800908e:	680e      	ldr	r6, [r1, #0]
 8009090:	bf08      	it	eq
 8009092:	694b      	ldreq	r3, [r1, #20]
 8009094:	600f      	str	r7, [r1, #0]
 8009096:	bf18      	it	ne
 8009098:	2300      	movne	r3, #0
 800909a:	eba6 0807 	sub.w	r8, r6, r7
 800909e:	608b      	str	r3, [r1, #8]
 80090a0:	f1b8 0f00 	cmp.w	r8, #0
 80090a4:	dde9      	ble.n	800907a <__sflush_r+0xae>
 80090a6:	6a21      	ldr	r1, [r4, #32]
 80090a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090aa:	4643      	mov	r3, r8
 80090ac:	463a      	mov	r2, r7
 80090ae:	4628      	mov	r0, r5
 80090b0:	47b0      	blx	r6
 80090b2:	2800      	cmp	r0, #0
 80090b4:	dc08      	bgt.n	80090c8 <__sflush_r+0xfc>
 80090b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	f04f 30ff 	mov.w	r0, #4294967295
 80090c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c8:	4407      	add	r7, r0
 80090ca:	eba8 0800 	sub.w	r8, r8, r0
 80090ce:	e7e7      	b.n	80090a0 <__sflush_r+0xd4>
 80090d0:	20400001 	.word	0x20400001

080090d4 <_fflush_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	690b      	ldr	r3, [r1, #16]
 80090d8:	4605      	mov	r5, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	b913      	cbnz	r3, 80090e4 <_fflush_r+0x10>
 80090de:	2500      	movs	r5, #0
 80090e0:	4628      	mov	r0, r5
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	b118      	cbz	r0, 80090ee <_fflush_r+0x1a>
 80090e6:	6a03      	ldr	r3, [r0, #32]
 80090e8:	b90b      	cbnz	r3, 80090ee <_fflush_r+0x1a>
 80090ea:	f7fe ffc9 	bl	8008080 <__sinit>
 80090ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0f3      	beq.n	80090de <_fflush_r+0xa>
 80090f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090f8:	07d0      	lsls	r0, r2, #31
 80090fa:	d404      	bmi.n	8009106 <_fflush_r+0x32>
 80090fc:	0599      	lsls	r1, r3, #22
 80090fe:	d402      	bmi.n	8009106 <_fflush_r+0x32>
 8009100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009102:	f7ff fa34 	bl	800856e <__retarget_lock_acquire_recursive>
 8009106:	4628      	mov	r0, r5
 8009108:	4621      	mov	r1, r4
 800910a:	f7ff ff5f 	bl	8008fcc <__sflush_r>
 800910e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009110:	07da      	lsls	r2, r3, #31
 8009112:	4605      	mov	r5, r0
 8009114:	d4e4      	bmi.n	80090e0 <_fflush_r+0xc>
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	059b      	lsls	r3, r3, #22
 800911a:	d4e1      	bmi.n	80090e0 <_fflush_r+0xc>
 800911c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800911e:	f7ff fa27 	bl	8008570 <__retarget_lock_release_recursive>
 8009122:	e7dd      	b.n	80090e0 <_fflush_r+0xc>

08009124 <__swhatbuf_r>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	460c      	mov	r4, r1
 8009128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912c:	2900      	cmp	r1, #0
 800912e:	b096      	sub	sp, #88	@ 0x58
 8009130:	4615      	mov	r5, r2
 8009132:	461e      	mov	r6, r3
 8009134:	da0d      	bge.n	8009152 <__swhatbuf_r+0x2e>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800913c:	f04f 0100 	mov.w	r1, #0
 8009140:	bf14      	ite	ne
 8009142:	2340      	movne	r3, #64	@ 0x40
 8009144:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009148:	2000      	movs	r0, #0
 800914a:	6031      	str	r1, [r6, #0]
 800914c:	602b      	str	r3, [r5, #0]
 800914e:	b016      	add	sp, #88	@ 0x58
 8009150:	bd70      	pop	{r4, r5, r6, pc}
 8009152:	466a      	mov	r2, sp
 8009154:	f000 f862 	bl	800921c <_fstat_r>
 8009158:	2800      	cmp	r0, #0
 800915a:	dbec      	blt.n	8009136 <__swhatbuf_r+0x12>
 800915c:	9901      	ldr	r1, [sp, #4]
 800915e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009162:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009166:	4259      	negs	r1, r3
 8009168:	4159      	adcs	r1, r3
 800916a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800916e:	e7eb      	b.n	8009148 <__swhatbuf_r+0x24>

08009170 <__smakebuf_r>:
 8009170:	898b      	ldrh	r3, [r1, #12]
 8009172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009174:	079d      	lsls	r5, r3, #30
 8009176:	4606      	mov	r6, r0
 8009178:	460c      	mov	r4, r1
 800917a:	d507      	bpl.n	800918c <__smakebuf_r+0x1c>
 800917c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	6123      	str	r3, [r4, #16]
 8009184:	2301      	movs	r3, #1
 8009186:	6163      	str	r3, [r4, #20]
 8009188:	b003      	add	sp, #12
 800918a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800918c:	ab01      	add	r3, sp, #4
 800918e:	466a      	mov	r2, sp
 8009190:	f7ff ffc8 	bl	8009124 <__swhatbuf_r>
 8009194:	9f00      	ldr	r7, [sp, #0]
 8009196:	4605      	mov	r5, r0
 8009198:	4639      	mov	r1, r7
 800919a:	4630      	mov	r0, r6
 800919c:	f7ff fa64 	bl	8008668 <_malloc_r>
 80091a0:	b948      	cbnz	r0, 80091b6 <__smakebuf_r+0x46>
 80091a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a6:	059a      	lsls	r2, r3, #22
 80091a8:	d4ee      	bmi.n	8009188 <__smakebuf_r+0x18>
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	f043 0302 	orr.w	r3, r3, #2
 80091b2:	81a3      	strh	r3, [r4, #12]
 80091b4:	e7e2      	b.n	800917c <__smakebuf_r+0xc>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	6020      	str	r0, [r4, #0]
 80091ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091be:	81a3      	strh	r3, [r4, #12]
 80091c0:	9b01      	ldr	r3, [sp, #4]
 80091c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091c6:	b15b      	cbz	r3, 80091e0 <__smakebuf_r+0x70>
 80091c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091cc:	4630      	mov	r0, r6
 80091ce:	f000 f837 	bl	8009240 <_isatty_r>
 80091d2:	b128      	cbz	r0, 80091e0 <__smakebuf_r+0x70>
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	f023 0303 	bic.w	r3, r3, #3
 80091da:	f043 0301 	orr.w	r3, r3, #1
 80091de:	81a3      	strh	r3, [r4, #12]
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	431d      	orrs	r5, r3
 80091e4:	81a5      	strh	r5, [r4, #12]
 80091e6:	e7cf      	b.n	8009188 <__smakebuf_r+0x18>

080091e8 <memmove>:
 80091e8:	4288      	cmp	r0, r1
 80091ea:	b510      	push	{r4, lr}
 80091ec:	eb01 0402 	add.w	r4, r1, r2
 80091f0:	d902      	bls.n	80091f8 <memmove+0x10>
 80091f2:	4284      	cmp	r4, r0
 80091f4:	4623      	mov	r3, r4
 80091f6:	d807      	bhi.n	8009208 <memmove+0x20>
 80091f8:	1e43      	subs	r3, r0, #1
 80091fa:	42a1      	cmp	r1, r4
 80091fc:	d008      	beq.n	8009210 <memmove+0x28>
 80091fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009206:	e7f8      	b.n	80091fa <memmove+0x12>
 8009208:	4402      	add	r2, r0
 800920a:	4601      	mov	r1, r0
 800920c:	428a      	cmp	r2, r1
 800920e:	d100      	bne.n	8009212 <memmove+0x2a>
 8009210:	bd10      	pop	{r4, pc}
 8009212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800921a:	e7f7      	b.n	800920c <memmove+0x24>

0800921c <_fstat_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4d07      	ldr	r5, [pc, #28]	@ (800923c <_fstat_r+0x20>)
 8009220:	2300      	movs	r3, #0
 8009222:	4604      	mov	r4, r0
 8009224:	4608      	mov	r0, r1
 8009226:	4611      	mov	r1, r2
 8009228:	602b      	str	r3, [r5, #0]
 800922a:	f7f8 fe82 	bl	8001f32 <_fstat>
 800922e:	1c43      	adds	r3, r0, #1
 8009230:	d102      	bne.n	8009238 <_fstat_r+0x1c>
 8009232:	682b      	ldr	r3, [r5, #0]
 8009234:	b103      	cbz	r3, 8009238 <_fstat_r+0x1c>
 8009236:	6023      	str	r3, [r4, #0]
 8009238:	bd38      	pop	{r3, r4, r5, pc}
 800923a:	bf00      	nop
 800923c:	20005f68 	.word	0x20005f68

08009240 <_isatty_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d06      	ldr	r5, [pc, #24]	@ (800925c <_isatty_r+0x1c>)
 8009244:	2300      	movs	r3, #0
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	602b      	str	r3, [r5, #0]
 800924c:	f7f8 fe81 	bl	8001f52 <_isatty>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_isatty_r+0x1a>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	b103      	cbz	r3, 800925a <_isatty_r+0x1a>
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	20005f68 	.word	0x20005f68

08009260 <_sbrk_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	4d06      	ldr	r5, [pc, #24]	@ (800927c <_sbrk_r+0x1c>)
 8009264:	2300      	movs	r3, #0
 8009266:	4604      	mov	r4, r0
 8009268:	4608      	mov	r0, r1
 800926a:	602b      	str	r3, [r5, #0]
 800926c:	f7f8 fe8a 	bl	8001f84 <_sbrk>
 8009270:	1c43      	adds	r3, r0, #1
 8009272:	d102      	bne.n	800927a <_sbrk_r+0x1a>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	b103      	cbz	r3, 800927a <_sbrk_r+0x1a>
 8009278:	6023      	str	r3, [r4, #0]
 800927a:	bd38      	pop	{r3, r4, r5, pc}
 800927c:	20005f68 	.word	0x20005f68

08009280 <_realloc_r>:
 8009280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009284:	4607      	mov	r7, r0
 8009286:	4614      	mov	r4, r2
 8009288:	460d      	mov	r5, r1
 800928a:	b921      	cbnz	r1, 8009296 <_realloc_r+0x16>
 800928c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009290:	4611      	mov	r1, r2
 8009292:	f7ff b9e9 	b.w	8008668 <_malloc_r>
 8009296:	b92a      	cbnz	r2, 80092a4 <_realloc_r+0x24>
 8009298:	f7ff f97a 	bl	8008590 <_free_r>
 800929c:	4625      	mov	r5, r4
 800929e:	4628      	mov	r0, r5
 80092a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a4:	f000 f81a 	bl	80092dc <_malloc_usable_size_r>
 80092a8:	4284      	cmp	r4, r0
 80092aa:	4606      	mov	r6, r0
 80092ac:	d802      	bhi.n	80092b4 <_realloc_r+0x34>
 80092ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092b2:	d8f4      	bhi.n	800929e <_realloc_r+0x1e>
 80092b4:	4621      	mov	r1, r4
 80092b6:	4638      	mov	r0, r7
 80092b8:	f7ff f9d6 	bl	8008668 <_malloc_r>
 80092bc:	4680      	mov	r8, r0
 80092be:	b908      	cbnz	r0, 80092c4 <_realloc_r+0x44>
 80092c0:	4645      	mov	r5, r8
 80092c2:	e7ec      	b.n	800929e <_realloc_r+0x1e>
 80092c4:	42b4      	cmp	r4, r6
 80092c6:	4622      	mov	r2, r4
 80092c8:	4629      	mov	r1, r5
 80092ca:	bf28      	it	cs
 80092cc:	4632      	movcs	r2, r6
 80092ce:	f7ff f950 	bl	8008572 <memcpy>
 80092d2:	4629      	mov	r1, r5
 80092d4:	4638      	mov	r0, r7
 80092d6:	f7ff f95b 	bl	8008590 <_free_r>
 80092da:	e7f1      	b.n	80092c0 <_realloc_r+0x40>

080092dc <_malloc_usable_size_r>:
 80092dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092e0:	1f18      	subs	r0, r3, #4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bfbc      	itt	lt
 80092e6:	580b      	ldrlt	r3, [r1, r0]
 80092e8:	18c0      	addlt	r0, r0, r3
 80092ea:	4770      	bx	lr

080092ec <_init>:
 80092ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ee:	bf00      	nop
 80092f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f2:	bc08      	pop	{r3}
 80092f4:	469e      	mov	lr, r3
 80092f6:	4770      	bx	lr

080092f8 <_fini>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr
