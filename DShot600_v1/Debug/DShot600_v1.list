
DShot600_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08008fcc  08008fcc  00009fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009120  08009120  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009120  08009120  0000a120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009128  08009128  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009128  08009128  0000a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800912c  0800912c  0000a12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009130  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b070  2**0
                  CONTENTS
 10 .bss          00006104  20000070  20000070  0000b070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006174  20006174  0000b070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e06  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000375e  00000000  00000000  00024ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  00028608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001118  00000000  00000000  00029c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004418  00000000  00000000  0002ad20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ad7  00000000  00000000  0002f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd4de  00000000  00000000  00046c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001140ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006640  00000000  00000000  00114130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0011a770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fb4 	.word	0x08008fb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008fb4 	.word	0x08008fb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b988 	b.w	8000d74 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	468e      	mov	lr, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	4688      	mov	r8, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4617      	mov	r7, r2
 8000a90:	d962      	bls.n	8000b58 <__udivmoddi4+0xdc>
 8000a92:	fab2 f682 	clz	r6, r2
 8000a96:	b14e      	cbz	r6, 8000aac <__udivmoddi4+0x30>
 8000a98:	f1c6 0320 	rsb	r3, r6, #32
 8000a9c:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa0:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa4:	40b7      	lsls	r7, r6
 8000aa6:	ea43 0808 	orr.w	r8, r3, r8
 8000aaa:	40b4      	lsls	r4, r6
 8000aac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab0:	fa1f fc87 	uxth.w	ip, r7
 8000ab4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab8:	0c23      	lsrs	r3, r4, #16
 8000aba:	fb0e 8811 	mls	r8, lr, r1, r8
 8000abe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0x62>
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ad0:	f080 80ea 	bcs.w	8000ca8 <__udivmoddi4+0x22c>
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f240 80e7 	bls.w	8000ca8 <__udivmoddi4+0x22c>
 8000ada:	3902      	subs	r1, #2
 8000adc:	443b      	add	r3, r7
 8000ade:	1a9a      	subs	r2, r3, r2
 8000ae0:	b2a3      	uxth	r3, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aee:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af2:	459c      	cmp	ip, r3
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x8e>
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afc:	f080 80d6 	bcs.w	8000cac <__udivmoddi4+0x230>
 8000b00:	459c      	cmp	ip, r3
 8000b02:	f240 80d3 	bls.w	8000cac <__udivmoddi4+0x230>
 8000b06:	443b      	add	r3, r7
 8000b08:	3802      	subs	r0, #2
 8000b0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b0e:	eba3 030c 	sub.w	r3, r3, ip
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11d      	cbz	r5, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40f3      	lsrs	r3, r6
 8000b18:	2200      	movs	r2, #0
 8000b1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d905      	bls.n	8000b32 <__udivmoddi4+0xb6>
 8000b26:	b10d      	cbz	r5, 8000b2c <__udivmoddi4+0xb0>
 8000b28:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e7f5      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b32:	fab3 f183 	clz	r1, r3
 8000b36:	2900      	cmp	r1, #0
 8000b38:	d146      	bne.n	8000bc8 <__udivmoddi4+0x14c>
 8000b3a:	4573      	cmp	r3, lr
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xc8>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 8105 	bhi.w	8000d4e <__udivmoddi4+0x2d2>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4690      	mov	r8, r2
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0e5      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b52:	e9c5 4800 	strd	r4, r8, [r5]
 8000b56:	e7e2      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	f000 8090 	beq.w	8000c7e <__udivmoddi4+0x202>
 8000b5e:	fab2 f682 	clz	r6, r2
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f040 80a4 	bne.w	8000cb0 <__udivmoddi4+0x234>
 8000b68:	1a8a      	subs	r2, r1, r2
 8000b6a:	0c03      	lsrs	r3, r0, #16
 8000b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b70:	b280      	uxth	r0, r0
 8000b72:	b2bc      	uxth	r4, r7
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b82:	fb04 f20c 	mul.w	r2, r4, ip
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d907      	bls.n	8000b9a <__udivmoddi4+0x11e>
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x11c>
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f200 80e0 	bhi.w	8000d58 <__udivmoddi4+0x2dc>
 8000b98:	46c4      	mov	ip, r8
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ba4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba8:	fb02 f404 	mul.w	r4, r2, r4
 8000bac:	429c      	cmp	r4, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x144>
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x142>
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	f200 80ca 	bhi.w	8000d52 <__udivmoddi4+0x2d6>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	1b1b      	subs	r3, r3, r4
 8000bc2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bc8:	f1c1 0620 	rsb	r6, r1, #32
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd2:	431f      	orrs	r7, r3
 8000bd4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bdc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	fa1f fc87 	uxth.w	ip, r7
 8000bee:	fbbe f0f9 	udiv	r0, lr, r9
 8000bf2:	0c1c      	lsrs	r4, r3, #16
 8000bf4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bfc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x1a0>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c0e:	f080 809c 	bcs.w	8000d4a <__udivmoddi4+0x2ce>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f240 8099 	bls.w	8000d4a <__udivmoddi4+0x2ce>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	eba4 040e 	sub.w	r4, r4, lr
 8000c20:	fa1f fe83 	uxth.w	lr, r3
 8000c24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c28:	fb09 4413 	mls	r4, r9, r3, r4
 8000c2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1ce>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c3e:	f080 8082 	bcs.w	8000d46 <__udivmoddi4+0x2ca>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d97f      	bls.n	8000d46 <__udivmoddi4+0x2ca>
 8000c46:	3b02      	subs	r3, #2
 8000c48:	443c      	add	r4, r7
 8000c4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c56:	4564      	cmp	r4, ip
 8000c58:	4673      	mov	r3, lr
 8000c5a:	46e1      	mov	r9, ip
 8000c5c:	d362      	bcc.n	8000d24 <__udivmoddi4+0x2a8>
 8000c5e:	d05f      	beq.n	8000d20 <__udivmoddi4+0x2a4>
 8000c60:	b15d      	cbz	r5, 8000c7a <__udivmoddi4+0x1fe>
 8000c62:	ebb8 0203 	subs.w	r2, r8, r3
 8000c66:	eb64 0409 	sbc.w	r4, r4, r9
 8000c6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c72:	431e      	orrs	r6, r3
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	e74f      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000c7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c82:	0c01      	lsrs	r1, r0, #16
 8000c84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4638      	mov	r0, r7
 8000c92:	463c      	mov	r4, r7
 8000c94:	46b8      	mov	r8, r7
 8000c96:	46be      	mov	lr, r7
 8000c98:	2620      	movs	r6, #32
 8000c9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c9e:	eba2 0208 	sub.w	r2, r2, r8
 8000ca2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ca6:	e766      	b.n	8000b76 <__udivmoddi4+0xfa>
 8000ca8:	4601      	mov	r1, r0
 8000caa:	e718      	b.n	8000ade <__udivmoddi4+0x62>
 8000cac:	4610      	mov	r0, r2
 8000cae:	e72c      	b.n	8000b0a <__udivmoddi4+0x8e>
 8000cb0:	f1c6 0220 	rsb	r2, r6, #32
 8000cb4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb8:	40b7      	lsls	r7, r6
 8000cba:	40b1      	lsls	r1, r6
 8000cbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cca:	b2bc      	uxth	r4, r7
 8000ccc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb08 f904 	mul.w	r9, r8, r4
 8000cda:	40b0      	lsls	r0, r6
 8000cdc:	4589      	cmp	r9, r1
 8000cde:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ce2:	b280      	uxth	r0, r0
 8000ce4:	d93e      	bls.n	8000d64 <__udivmoddi4+0x2e8>
 8000ce6:	1879      	adds	r1, r7, r1
 8000ce8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cec:	d201      	bcs.n	8000cf2 <__udivmoddi4+0x276>
 8000cee:	4589      	cmp	r9, r1
 8000cf0:	d81f      	bhi.n	8000d32 <__udivmoddi4+0x2b6>
 8000cf2:	eba1 0109 	sub.w	r1, r1, r9
 8000cf6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfa:	fb09 f804 	mul.w	r8, r9, r4
 8000cfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d02:	b292      	uxth	r2, r2
 8000d04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d08:	4542      	cmp	r2, r8
 8000d0a:	d229      	bcs.n	8000d60 <__udivmoddi4+0x2e4>
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d12:	d2c4      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d14:	4542      	cmp	r2, r8
 8000d16:	d2c2      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d18:	f1a9 0102 	sub.w	r1, r9, #2
 8000d1c:	443a      	add	r2, r7
 8000d1e:	e7be      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d20:	45f0      	cmp	r8, lr
 8000d22:	d29d      	bcs.n	8000c60 <__udivmoddi4+0x1e4>
 8000d24:	ebbe 0302 	subs.w	r3, lr, r2
 8000d28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	46e1      	mov	r9, ip
 8000d30:	e796      	b.n	8000c60 <__udivmoddi4+0x1e4>
 8000d32:	eba7 0909 	sub.w	r9, r7, r9
 8000d36:	4449      	add	r1, r9
 8000d38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d40:	fb09 f804 	mul.w	r8, r9, r4
 8000d44:	e7db      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d46:	4673      	mov	r3, lr
 8000d48:	e77f      	b.n	8000c4a <__udivmoddi4+0x1ce>
 8000d4a:	4650      	mov	r0, sl
 8000d4c:	e766      	b.n	8000c1c <__udivmoddi4+0x1a0>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e6fd      	b.n	8000b4e <__udivmoddi4+0xd2>
 8000d52:	443b      	add	r3, r7
 8000d54:	3a02      	subs	r2, #2
 8000d56:	e733      	b.n	8000bc0 <__udivmoddi4+0x144>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	443b      	add	r3, r7
 8000d5e:	e71c      	b.n	8000b9a <__udivmoddi4+0x11e>
 8000d60:	4649      	mov	r1, r9
 8000d62:	e79c      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d64:	eba1 0109 	sub.w	r1, r1, r9
 8000d68:	46c4      	mov	ip, r8
 8000d6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6e:	fb09 f804 	mul.w	r8, r9, r4
 8000d72:	e7c4      	b.n	8000cfe <__udivmoddi4+0x282>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7c:	f001 fb02 	bl	8002384 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8000d80:	f000 fc9a 	bl	80016b8 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f842 	bl	8000e0c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d88:	f000 f986 	bl	8001098 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8c:	f000 f94c 	bl	8001028 <MX_DMA_Init>
  MX_TIM5_Init();
 8000d90:	f000 f8a6 	bl	8000ee0 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8000d94:	f000 f91e 	bl	8000fd4 <MX_USART6_UART_Init>
  /* Create the thread(s) */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d98:	f004 f9e2 	bl	8005160 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  serialQueueHandle = osMessageQueueNew(SERIAL_QUEUE_LENGTH, sizeof(SerialMessage_t), NULL);  /* add queues, ... */
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2184      	movs	r1, #132	@ 0x84
 8000da0:	200a      	movs	r0, #10
 8000da2:	f004 fad4 	bl	800534e <osMessageQueueNew>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <main+0x6c>)
 8000daa:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dac:	4a0e      	ldr	r2, [pc, #56]	@ (8000de8 <main+0x70>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	480e      	ldr	r0, [pc, #56]	@ (8000dec <main+0x74>)
 8000db2:	f004 fa1f 	bl	80051f4 <osThreadNew>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <main+0x78>)
 8000dba:	6013      	str	r3, [r2, #0]

  /* creation of DShotTask_1 */
  DShotTask_1Handle = osThreadNew(DShotTask, NULL, &DShotTask_1_attributes);
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <main+0x7c>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	480d      	ldr	r0, [pc, #52]	@ (8000df8 <main+0x80>)
 8000dc2:	f004 fa17 	bl	80051f4 <osThreadNew>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <main+0x84>)
 8000dca:	6013      	str	r3, [r2, #0]

  /* creation of SerialTask */
  SerialTaskHandle = osThreadNew(StartSerialTask, NULL, &SerialTask_attributes);
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e00 <main+0x88>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <main+0x8c>)
 8000dd2:	f004 fa0f 	bl	80051f4 <osThreadNew>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e08 <main+0x90>)
 8000dda:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ddc:	f004 f9e4 	bl	80051a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <main+0x68>
 8000de4:	200003cc 	.word	0x200003cc
 8000de8:	08009060 	.word	0x08009060
 8000dec:	08001ae5 	.word	0x08001ae5
 8000df0:	2000029c 	.word	0x2000029c
 8000df4:	08009084 	.word	0x08009084
 8000df8:	08001af5 	.word	0x08001af5
 8000dfc:	200002a0 	.word	0x200002a0
 8000e00:	080090a8 	.word	0x080090a8
 8000e04:	08001cad 	.word	0x08001cad
 8000e08:	200002a4 	.word	0x200002a4

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	@ 0x50
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	2230      	movs	r2, #48	@ 0x30
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f007 fa76 	bl	800830c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	4b28      	ldr	r3, [pc, #160]	@ (8000ed8 <SystemClock_Config+0xcc>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	4a27      	ldr	r2, [pc, #156]	@ (8000ed8 <SystemClock_Config+0xcc>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e40:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <SystemClock_Config+0xcc>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <SystemClock_Config+0xd0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a21      	ldr	r2, [pc, #132]	@ (8000edc <SystemClock_Config+0xd0>)
 8000e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <SystemClock_Config+0xd0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e70:	2310      	movs	r3, #16
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e74:	2302      	movs	r3, #2
 8000e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e80:	23a8      	movs	r3, #168	@ 0xa8
 8000e82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 f8bf 	bl	8003014 <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e9c:	f000 ff20 	bl	8001ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000eb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fb20 	bl	8003504 <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eca:	f000 ff09 	bl	8001ce0 <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3750      	adds	r7, #80	@ 0x50
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40007000 	.word	0x40007000

08000ee0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	@ 0x28
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f02:	4b32      	ldr	r3, [pc, #200]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f04:	4a32      	ldr	r2, [pc, #200]	@ (8000fd0 <MX_TIM5_Init+0xf0>)
 8000f06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f08:	4b30      	ldr	r3, [pc, #192]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 139;
 8000f14:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f16:	228b      	movs	r2, #139	@ 0x8b
 8000f18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f20:	4b2a      	ldr	r3, [pc, #168]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f26:	4829      	ldr	r0, [pc, #164]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f28:	f002 fdc8 	bl	8003abc <HAL_TIM_PWM_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000f32:	f000 fed5 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	4619      	mov	r1, r3
 8000f44:	4821      	ldr	r0, [pc, #132]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f46:	f003 fd73 	bl	8004a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000f50:	f000 fec6 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f54:	2360      	movs	r3, #96	@ 0x60
 8000f56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2200      	movs	r2, #0
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4818      	ldr	r0, [pc, #96]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f6c:	f003 f91e 	bl	80041ac <HAL_TIM_PWM_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f76:	f000 feb3 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4812      	ldr	r0, [pc, #72]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f82:	f003 f913 	bl	80041ac <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000f8c:	f000 fea8 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2208      	movs	r2, #8
 8000f94:	4619      	mov	r1, r3
 8000f96:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000f98:	f003 f908 	bl	80041ac <HAL_TIM_PWM_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 8000fa2:	f000 fe9d 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	220c      	movs	r2, #12
 8000faa:	4619      	mov	r1, r3
 8000fac:	4807      	ldr	r0, [pc, #28]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000fae:	f003 f8fd 	bl	80041ac <HAL_TIM_PWM_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000fb8:	f000 fe92 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fbc:	4803      	ldr	r0, [pc, #12]	@ (8000fcc <MX_TIM5_Init+0xec>)
 8000fbe:	f000 ffc1 	bl	8001f44 <HAL_TIM_MspPostInit>

}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	@ 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000008c 	.word	0x2000008c
 8000fd0:	40000c00 	.word	0x40000c00

08000fd4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <MX_USART6_UART_Init+0x50>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8000fe0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000fe4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_USART6_UART_Init+0x4c>)
 800100c:	f003 fda0 	bl	8004b50 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001016:	f000 fe63 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000254 	.word	0x20000254
 8001024:	40011400 	.word	0x40011400

08001028 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <MX_DMA_Init+0x6c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <MX_DMA_Init+0x6c>)
 8001038:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <MX_DMA_Init+0x6c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2105      	movs	r1, #5
 800104e:	200b      	movs	r0, #11
 8001050:	f001 fa92 	bl	8002578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001054:	200b      	movs	r0, #11
 8001056:	f001 faab 	bl	80025b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2105      	movs	r1, #5
 800105e:	200c      	movs	r0, #12
 8001060:	f001 fa8a 	bl	8002578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001064:	200c      	movs	r0, #12
 8001066:	f001 faa3 	bl	80025b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2105      	movs	r1, #5
 800106e:	200d      	movs	r0, #13
 8001070:	f001 fa82 	bl	8002578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001074:	200d      	movs	r0, #13
 8001076:	f001 fa9b 	bl	80025b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2105      	movs	r1, #5
 800107e:	200f      	movs	r0, #15
 8001080:	f001 fa7a 	bl	8002578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001084:	200f      	movs	r0, #15
 8001086:	f001 fa93 	bl	80025b0 <HAL_NVIC_EnableIRQ>

}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800

08001098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a16      	ldr	r2, [pc, #88]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a08      	ldr	r2, [pc, #32]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_GPIO_Init+0x68>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <read_telemetry_pin>:
    // Send buffer via UART
    HAL_UART_Transmit(huart, (uint8_t *)buf, idx, HAL_MAX_DELAY);
}

static inline uint8_t read_telemetry_pin(GPIO_TypeDef *port, uint16_t pin)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
    return HAL_GPIO_ReadPin(port, pin) ? 1 : 0;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	4619      	mov	r1, r3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f001 ff65 	bl	8002fe4 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf14      	ite	ne
 8001120:	2301      	movne	r3, #1
 8001122:	2300      	moveq	r3, #0
 8001124:	b2db      	uxtb	r3, r3
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <receive_bdshot_telemetry>:

int receive_bdshot_telemetry(uint32_t *telemetry_out, GPIO_TypeDef *port, uint16_t pin) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	4613      	mov	r3, r2
 800113c:	80fb      	strh	r3, [r7, #6]
    uint32_t value = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]

    // Wait for line to go low (start bit)
    uint32_t timeout = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
    while (read_telemetry_pin(port, pin)) {
 8001146:	e00e      	b.n	8001166 <receive_bdshot_telemetry+0x36>
        delay_us_precise(0.01f);
 8001148:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80011c8 <receive_bdshot_telemetry+0x98>
 800114c:	f000 fa5c 	bl	8001608 <delay_us_precise>
        if (++timeout > TELEMETRY_TIMEOUT_US * 25)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	3301      	adds	r3, #1
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800115c:	4293      	cmp	r3, r2
 800115e:	d902      	bls.n	8001166 <receive_bdshot_telemetry+0x36>
            return -1; // Timeout
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	e02c      	b.n	80011c0 <receive_bdshot_telemetry+0x90>
    while (read_telemetry_pin(port, pin)) {
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	4619      	mov	r1, r3
 800116a:	68b8      	ldr	r0, [r7, #8]
 800116c:	f7ff ffca 	bl	8001104 <read_telemetry_pin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1e8      	bne.n	8001148 <receive_bdshot_telemetry+0x18>
    }

    // Wait half a bit to center
    //delay_us_precise(TELEMETRY_BIT_US/2.0f);
    delay_us_precise(0.1f);
 8001176:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80011cc <receive_bdshot_telemetry+0x9c>
 800117a:	f000 fa45 	bl	8001608 <delay_us_precise>

    // LSB-first: capture 20 bits
    for (int i = 0; i < 20; i++) {
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e016      	b.n	80011b2 <receive_bdshot_telemetry+0x82>
    	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
        value |= (read_telemetry_pin(port, pin) << (19-i)); // LSB-first
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	4619      	mov	r1, r3
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	f7ff ffbb 	bl	8001104 <read_telemetry_pin>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f1c3 0313 	rsb	r3, r3, #19
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	461a      	mov	r2, r3
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61fb      	str	r3, [r7, #28]
        delay_us_precise(TELEMETRY_BIT_US);
 80011a4:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80011d0 <receive_bdshot_telemetry+0xa0>
 80011a8:	f000 fa2e 	bl	8001608 <delay_us_precise>
    for (int i = 0; i < 20; i++) {
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2b13      	cmp	r3, #19
 80011b6:	dde5      	ble.n	8001184 <receive_bdshot_telemetry+0x54>
        //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
    }

    *telemetry_out = value;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	601a      	str	r2, [r3, #0]
    return 0;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	3c23d70a 	.word	0x3c23d70a
 80011cc:	3dcccccd 	.word	0x3dcccccd
 80011d0:	3f733333 	.word	0x3f733333

080011d4 <process_bdshot_telemetry>:

void process_bdshot_telemetry(GPIO_TypeDef *port, uint16_t pin, uint8_t *packet_out) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	460b      	mov	r3, r1
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	817b      	strh	r3, [r7, #10]
	uint32_t telemetry;
	uint16_t telemetry_16bit;
	char telemetry_type;
	float telemetry_value;
    if (receive_bdshot_telemetry(&telemetry, port, pin) == 0) {
 80011e2:	897a      	ldrh	r2, [r7, #10]
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	68f9      	ldr	r1, [r7, #12]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffa0 	bl	8001130 <receive_bdshot_telemetry>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d140      	bne.n	8001278 <process_bdshot_telemetry+0xa4>
  	  uint32_t gcr = decode_gcr_mapping(telemetry);
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fb12 	bl	8001822 <decode_gcr_mapping>
 80011fe:	6278      	str	r0, [r7, #36]	@ 0x24
  	  if (!decode_gcr_20_to_16(gcr, &telemetry_16bit)) {
 8001200:	f107 031a 	add.w	r3, r7, #26
 8001204:	4619      	mov	r1, r3
 8001206:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001208:	f000 fb19 	bl	800183e <decode_gcr_20_to_16>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d104      	bne.n	800121c <process_bdshot_telemetry+0x48>
  		  //printf("Invalid GCR encoding.\r\n");
  		  delay_us_precise(10);
 8001212:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001216:	f000 f9f7 	bl	8001608 <delay_us_precise>
 800121a:	e02d      	b.n	8001278 <process_bdshot_telemetry+0xa4>
  	  }
  	  else {
            int type = parse_edt_frame(telemetry_16bit, &telemetry_type, &telemetry_value);
 800121c:	8b7b      	ldrh	r3, [r7, #26]
 800121e:	f107 0214 	add.w	r2, r7, #20
 8001222:	f107 0119 	add.w	r1, r7, #25
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fb7e 	bl	8001928 <parse_edt_frame>
 800122c:	6238      	str	r0, [r7, #32]
            if (type == 2) {
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d121      	bne.n	8001278 <process_bdshot_telemetry+0xa4>
          	  rpm = (uint16_t)(telemetry_value / 7.0);
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f97e 	bl	8000538 <__aeabi_f2d>
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <process_bdshot_telemetry+0xac>)
 8001242:	f7ff fafb 	bl	800083c <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fbdd 	bl	8000a0c <__aeabi_d2uiz>
 8001252:	4603      	mov	r3, r0
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <process_bdshot_telemetry+0xb0>)
 8001258:	801a      	strh	r2, [r3, #0]
          	  uint8_t packet[3];
          	  packet[0] = 0xAA;                      // Start byte
 800125a:	23aa      	movs	r3, #170	@ 0xaa
 800125c:	743b      	strb	r3, [r7, #16]
          	  packet[1] = rpm & 0xFF;               // LSB
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <process_bdshot_telemetry+0xb0>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	747b      	strb	r3, [r7, #17]
          	  packet[2] = (rpm >> 8) & 0xFF;        // MSB
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <process_bdshot_telemetry+0xb0>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	b29b      	uxth	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	74bb      	strb	r3, [r7, #18]
          	  packet_out = packet;
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	607b      	str	r3, [r7, #4]
  	  }
    }
    else {
  	  //printf("Invalid Telemetry.\r\n");
    }
}
 8001278:	3728      	adds	r7, #40	@ 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	401c0000 	.word	0x401c0000
 8001284:	20000000 	.word	0x20000000

08001288 <set_pin_input>:

//Telemetry Input
void set_pin_input(GPIO_TypeDef *port, uint16_t pin)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = pin;
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4619      	mov	r1, r3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f001 fcf8 	bl	8002cac <HAL_GPIO_Init>
}
 80012bc:	bf00      	nop
 80012be:	3720      	adds	r7, #32
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <set_pin_pwm>:

//DShot Generation
void set_pin_pwm(GPIO_TypeDef *port, uint16_t pin, uint8_t alternate)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = pin;
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = alternate;
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4619      	mov	r1, r3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f001 fcd4 	bl	8002cac <HAL_GPIO_Init>
}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <prepare_bdshot_buffer>:

void prepare_bdshot_buffer(uint16_t frame, uint32_t *dshot_buffer)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	80fb      	strh	r3, [r7, #6]
    uint32_t buffer_index = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

    dshot_buffer[buffer_index++] = 0;  // Dummy preload entry
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	617a      	str	r2, [r7, #20]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

    //2Build the actual DSHOT waveform entries
    for (int i = 15; i >= 0; i--)
 800132c:	230f      	movs	r3, #15
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	e01e      	b.n	8001370 <prepare_bdshot_buffer+0x64>
    {
        uint8_t bit = (frame >> i) & 0x01;
 8001332:	88fa      	ldrh	r2, [r7, #6]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	fa42 f303 	asr.w	r3, r2, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	73fb      	strb	r3, [r7, #15]
        if (bit)
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <prepare_bdshot_buffer+0x4e>
        {
            dshot_buffer[buffer_index++] = DSHOT_T1L_TICKS;  // logic 1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	617a      	str	r2, [r7, #20]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	4413      	add	r3, r2
 8001354:	2269      	movs	r2, #105	@ 0x69
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e007      	b.n	800136a <prepare_bdshot_buffer+0x5e>
            //dshot_buffer[buffer_index++] = 0;
        }
        else
        {
            dshot_buffer[buffer_index++] = DSHOT_T0L_TICKS;  // logic 0
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	617a      	str	r2, [r7, #20]
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	4413      	add	r3, r2
 8001366:	2232      	movs	r2, #50	@ 0x32
 8001368:	601a      	str	r2, [r3, #0]
    for (int i = 15; i >= 0; i--)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	3b01      	subs	r3, #1
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	2b00      	cmp	r3, #0
 8001374:	dadd      	bge.n	8001332 <prepare_bdshot_buffer+0x26>
            //dshot_buffer[buffer_index++] = 0;
        }
    }

    dshot_buffer[buffer_index++] = 0;  // Final LOW
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	617a      	str	r2, [r7, #20]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	4413      	add	r3, r2
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	371c      	adds	r7, #28
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <bdshot_crc>:


// value_12bit should be 0...4095
uint8_t bdshot_crc(uint16_t value_12bit)
{
 8001392:	b480      	push	{r7}
 8001394:	b085      	sub	sp, #20
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	80fb      	strh	r3, [r7, #6]
    // Optional: Uncomment to assert 12-bit range in debug
    // assert(value_12bit < 4096);

    uint16_t crc = value_12bit ^ (value_12bit >> 4) ^ (value_12bit >> 8);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	4053      	eors	r3, r2
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4053      	eors	r3, r2
 80013b0:	81fb      	strh	r3, [r7, #14]
    crc = ~crc;           // Bitwise NOT
 80013b2:	89fb      	ldrh	r3, [r7, #14]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	81fb      	strh	r3, [r7, #14]
    crc = crc & 0x0F;     // Mask to 4 bits
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)crc;
 80013c0:	89fb      	ldrh	r3, [r7, #14]
 80013c2:	b2db      	uxtb	r3, r3
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <make_bdshot_frame>:

// Create 16-bit DSHOT frame with correct CRC
uint16_t make_bdshot_frame(uint16_t value, bool telemetry) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	460a      	mov	r2, r1
 80013da:	80fb      	strh	r3, [r7, #6]
 80013dc:	4613      	mov	r3, r2
 80013de:	717b      	strb	r3, [r7, #5]
    if (value == 0) {
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <make_bdshot_frame+0x1a>
        return 0x000F; // hardware expects this special frame
 80013e6:	230f      	movs	r3, #15
 80013e8:	e01b      	b.n	8001422 <make_bdshot_frame+0x52>
    }
    value &= 0x07FF; // 11 bits
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f0:	80fb      	strh	r3, [r7, #6]
    uint16_t frame_no_crc = (value << 1) | (telemetry ? 1 : 0);
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	797b      	ldrb	r3, [r7, #5]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21b      	sxth	r3, r3
 8001402:	81fb      	strh	r3, [r7, #14]
    uint8_t crc = bdshot_crc(frame_no_crc);
 8001404:	89fb      	ldrh	r3, [r7, #14]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ffc3 	bl	8001392 <bdshot_crc>
 800140c:	4603      	mov	r3, r0
 800140e:	737b      	strb	r3, [r7, #13]
    return (frame_no_crc << 4) | crc;
 8001410:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	b21a      	sxth	r2, r3
 8001418:	7b7b      	ldrb	r3, [r7, #13]
 800141a:	b21b      	sxth	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b21b      	sxth	r3, r3
 8001420:	b29b      	uxth	r3, r3
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <queue_bdshot_pulse>:

void queue_bdshot_pulse(uint16_t throttle, bool telemetry, uint32_t *dshot_buffer){
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	603a      	str	r2, [r7, #0]
 8001434:	80fb      	strh	r3, [r7, #6]
 8001436:	460b      	mov	r3, r1
 8001438:	717b      	strb	r3, [r7, #5]
	uint16_t frame = make_bdshot_frame(throttle, telemetry);
 800143a:	797a      	ldrb	r2, [r7, #5]
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ffc5 	bl	80013d0 <make_bdshot_frame>
 8001446:	4603      	mov	r3, r0
 8001448:	81fb      	strh	r3, [r7, #14]
	prepare_bdshot_buffer(frame, dshot_buffer);
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	6839      	ldr	r1, [r7, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff5c 	bl	800130c <prepare_bdshot_buffer>
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <send_bdshot>:

void send_bdshot(uint32_t channel){
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	uint32_t *buffer = NULL;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
	switch(channel) {
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	d828      	bhi.n	80014c0 <send_bdshot+0x64>
 800146e:	a201      	add	r2, pc, #4	@ (adr r2, 8001474 <send_bdshot+0x18>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	080014a9 	.word	0x080014a9
 8001478:	080014c1 	.word	0x080014c1
 800147c:	080014c1 	.word	0x080014c1
 8001480:	080014c1 	.word	0x080014c1
 8001484:	080014af 	.word	0x080014af
 8001488:	080014c1 	.word	0x080014c1
 800148c:	080014c1 	.word	0x080014c1
 8001490:	080014c1 	.word	0x080014c1
 8001494:	080014b5 	.word	0x080014b5
 8001498:	080014c1 	.word	0x080014c1
 800149c:	080014c1 	.word	0x080014c1
 80014a0:	080014c1 	.word	0x080014c1
 80014a4:	080014bb 	.word	0x080014bb
	  case TIM_CHANNEL_1: buffer = dshot_buffer_ch1; break;
 80014a8:	4b4d      	ldr	r3, [pc, #308]	@ (80015e0 <send_bdshot+0x184>)
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e008      	b.n	80014c0 <send_bdshot+0x64>
	  case TIM_CHANNEL_2: buffer = dshot_buffer_ch2; break;
 80014ae:	4b4d      	ldr	r3, [pc, #308]	@ (80015e4 <send_bdshot+0x188>)
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	e005      	b.n	80014c0 <send_bdshot+0x64>
	  case TIM_CHANNEL_3: buffer = dshot_buffer_ch3; break;
 80014b4:	4b4c      	ldr	r3, [pc, #304]	@ (80015e8 <send_bdshot+0x18c>)
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e002      	b.n	80014c0 <send_bdshot+0x64>
	  case TIM_CHANNEL_4: buffer = dshot_buffer_ch4; break;
 80014ba:	4b4c      	ldr	r3, [pc, #304]	@ (80015ec <send_bdshot+0x190>)
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	bf00      	nop
	}
    switch (channel) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	d844      	bhi.n	8001550 <send_bdshot+0xf4>
 80014c6:	a201      	add	r2, pc, #4	@ (adr r2, 80014cc <send_bdshot+0x70>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	08001509 	.word	0x08001509
 80014d0:	08001551 	.word	0x08001551
 80014d4:	08001551 	.word	0x08001551
 80014d8:	08001551 	.word	0x08001551
 80014dc:	0800151d 	.word	0x0800151d
 80014e0:	08001551 	.word	0x08001551
 80014e4:	08001551 	.word	0x08001551
 80014e8:	08001551 	.word	0x08001551
 80014ec:	08001531 	.word	0x08001531
 80014f0:	08001551 	.word	0x08001551
 80014f4:	08001551 	.word	0x08001551
 80014f8:	08001551 	.word	0x08001551
 80014fc:	08001545 	.word	0x08001545
        case TIM_CHANNEL_1: while (dshot_running_ch1) delay_us_precise(1); break;
 8001500:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001504:	f000 f880 	bl	8001608 <delay_us_precise>
 8001508:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <send_bdshot+0x194>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f6      	bne.n	8001500 <send_bdshot+0xa4>
 8001512:	e01d      	b.n	8001550 <send_bdshot+0xf4>
        case TIM_CHANNEL_2: while (dshot_running_ch2) delay_us_precise(1); break;
 8001514:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001518:	f000 f876 	bl	8001608 <delay_us_precise>
 800151c:	4b35      	ldr	r3, [pc, #212]	@ (80015f4 <send_bdshot+0x198>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f6      	bne.n	8001514 <send_bdshot+0xb8>
 8001526:	e013      	b.n	8001550 <send_bdshot+0xf4>
        case TIM_CHANNEL_3: while (dshot_running_ch3) delay_us_precise(1); break;
 8001528:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800152c:	f000 f86c 	bl	8001608 <delay_us_precise>
 8001530:	4b31      	ldr	r3, [pc, #196]	@ (80015f8 <send_bdshot+0x19c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f6      	bne.n	8001528 <send_bdshot+0xcc>
 800153a:	e009      	b.n	8001550 <send_bdshot+0xf4>
        case TIM_CHANNEL_4: while (dshot_running_ch4) delay_us_precise(1); break;
 800153c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001540:	f000 f862 	bl	8001608 <delay_us_precise>
 8001544:	4b2d      	ldr	r3, [pc, #180]	@ (80015fc <send_bdshot+0x1a0>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f6      	bne.n	800153c <send_bdshot+0xe0>
 800154e:	bf00      	nop
    }
	if (buffer == NULL) Error_Handler();
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <send_bdshot+0xfe>
 8001556:	f000 fbc3 	bl	8001ce0 <Error_Handler>
    if (HAL_TIM_PWM_Start_DMA(&htim5, channel, (uint32_t*)buffer, DSHOT_BUFFER_SIZE) != HAL_OK)
 800155a:	2312      	movs	r3, #18
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4827      	ldr	r0, [pc, #156]	@ (8001600 <send_bdshot+0x1a4>)
 8001562:	f002 fb6b 	bl	8003c3c <HAL_TIM_PWM_Start_DMA>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <send_bdshot+0x11a>
    {
        Error_Handler();
 800156c:	f000 fbb8 	bl	8001ce0 <Error_Handler>
        printf("Error in send_bdshot()\r\n");
 8001570:	4824      	ldr	r0, [pc, #144]	@ (8001604 <send_bdshot+0x1a8>)
 8001572:	f006 fdc9 	bl	8008108 <puts>
    }
    switch (channel) {
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0c      	cmp	r3, #12
 800157a:	d82d      	bhi.n	80015d8 <send_bdshot+0x17c>
 800157c:	a201      	add	r2, pc, #4	@ (adr r2, 8001584 <send_bdshot+0x128>)
 800157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001582:	bf00      	nop
 8001584:	080015b9 	.word	0x080015b9
 8001588:	080015d9 	.word	0x080015d9
 800158c:	080015d9 	.word	0x080015d9
 8001590:	080015d9 	.word	0x080015d9
 8001594:	080015c1 	.word	0x080015c1
 8001598:	080015d9 	.word	0x080015d9
 800159c:	080015d9 	.word	0x080015d9
 80015a0:	080015d9 	.word	0x080015d9
 80015a4:	080015c9 	.word	0x080015c9
 80015a8:	080015d9 	.word	0x080015d9
 80015ac:	080015d9 	.word	0x080015d9
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080015d1 	.word	0x080015d1
        case TIM_CHANNEL_1: dshot_running_ch1 = true; break;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <send_bdshot+0x194>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
 80015be:	e00b      	b.n	80015d8 <send_bdshot+0x17c>
        case TIM_CHANNEL_2: dshot_running_ch2 = true; break;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <send_bdshot+0x198>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e007      	b.n	80015d8 <send_bdshot+0x17c>
        case TIM_CHANNEL_3: dshot_running_ch3 = true; break;
 80015c8:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <send_bdshot+0x19c>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
 80015ce:	e003      	b.n	80015d8 <send_bdshot+0x17c>
        case TIM_CHANNEL_4: dshot_running_ch4 = true; break;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <send_bdshot+0x1a0>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	bf00      	nop
    }
}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200002a8 	.word	0x200002a8
 80015e4:	200002f0 	.word	0x200002f0
 80015e8:	20000338 	.word	0x20000338
 80015ec:	20000380 	.word	0x20000380
 80015f0:	200003c8 	.word	0x200003c8
 80015f4:	200003c9 	.word	0x200003c9
 80015f8:	200003ca 	.word	0x200003ca
 80015fc:	200003cb 	.word	0x200003cb
 8001600:	2000008c 	.word	0x2000008c
 8001604:	08008ff0 	.word	0x08008ff0

08001608 <delay_us_precise>:


void delay_us_precise(float us) {
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t cycles = (uint32_t)(SystemCoreClock * us / 1e6f);
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <delay_us_precise+0x54>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800161e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001622:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001626:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001660 <delay_us_precise+0x58>
 800162a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800162e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001632:	ee17 3a90 	vmov	r3, s15
 8001636:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <delay_us_precise+0x5c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 800163e:	bf00      	nop
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <delay_us_precise+0x5c>)
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	429a      	cmp	r2, r3
 800164c:	d8f8      	bhi.n	8001640 <delay_us_precise+0x38>
}
 800164e:	bf00      	nop
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	20000004 	.word	0x20000004
 8001660:	49742400 	.word	0x49742400
 8001664:	e0001000 	.word	0xe0001000

08001668 <_write>:

int _write(int file, char *ptr, int len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0a4      	sub	sp, #144	@ 0x90
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
    // For safety, truncate messages to queue item size
    if (len > SERIAL_QUEUE_ITEM_SIZE - 1) len = SERIAL_QUEUE_ITEM_SIZE - 1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b7f      	cmp	r3, #127	@ 0x7f
 8001678:	dd01      	ble.n	800167e <_write+0x16>
 800167a:	237f      	movs	r3, #127	@ 0x7f
 800167c:	607b      	str	r3, [r7, #4]

    char msg[SERIAL_QUEUE_ITEM_SIZE];
    memcpy(msg, ptr, len);
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	4618      	mov	r0, r3
 8001688:	f006 ff19 	bl	80084be <memcpy>
    msg[len] = '\0'; // Null-terminate
 800168c:	f107 0210 	add.w	r2, r7, #16
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]

    // Send to queue (in ISR context: use osMessageQueuePutFromISR, but here normal context)
    if (osMessageQueuePut(serialQueueHandle, msg, 0, 0) != osOK) {
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <_write+0x4c>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	f107 0110 	add.w	r1, r7, #16
 80016a0:	2300      	movs	r3, #0
 80016a2:	2200      	movs	r2, #0
 80016a4:	f003 fec6 	bl	8005434 <osMessageQueuePut>
        // Handle queue full if needed
    }

    return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3790      	adds	r7, #144	@ 0x90
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200003cc 	.word	0x200003cc

080016b8 <DWT_Init>:

void DWT_Init(void) {
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk)) {
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <DWT_Init+0x38>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10e      	bne.n	80016e6 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <DWT_Init+0x3c>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4a09      	ldr	r2, [pc, #36]	@ (80016f4 <DWT_Init+0x3c>)
 80016ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016d2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <DWT_Init+0x38>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80016da:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <DWT_Init+0x38>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <DWT_Init+0x38>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6013      	str	r3, [r2, #0]
    }
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e0001000 	.word	0xe0001000
 80016f4:	e000edf0 	.word	0xe000edf0

080016f8 <HAL_TIM_PWM_PulseFinishedCallback>:
    }
    printf("\r\n");
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM5) {
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a1b      	ldr	r2, [pc, #108]	@ (8001774 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d12f      	bne.n	800176a <HAL_TIM_PWM_PulseFinishedCallback+0x72>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170a:	b672      	cpsid	i
}
 800170c:	bf00      	nop
        __disable_irq();
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7f1b      	ldrb	r3, [r3, #28]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d106      	bne.n	8001724 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001716:	2100      	movs	r1, #0
 8001718:	4817      	ldr	r0, [pc, #92]	@ (8001778 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 800171a:	f002 fa1f 	bl	8003b5c <HAL_TIM_PWM_Stop>
            dshot_running_ch1 = false;
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
        }
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7f1b      	ldrb	r3, [r3, #28]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d106      	bne.n	800173a <HAL_TIM_PWM_PulseFinishedCallback+0x42>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
 800172c:	2104      	movs	r1, #4
 800172e:	4812      	ldr	r0, [pc, #72]	@ (8001778 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001730:	f002 fa14 	bl	8003b5c <HAL_TIM_PWM_Stop>
            dshot_running_ch2 = false;
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
        }
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7f1b      	ldrb	r3, [r3, #28]
 800173e:	2b04      	cmp	r3, #4
 8001740:	d106      	bne.n	8001750 <HAL_TIM_PWM_PulseFinishedCallback+0x58>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8001742:	2108      	movs	r1, #8
 8001744:	480c      	ldr	r0, [pc, #48]	@ (8001778 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001746:	f002 fa09 	bl	8003b5c <HAL_TIM_PWM_Stop>
            dshot_running_ch3 = false;
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
        }
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7f1b      	ldrb	r3, [r3, #28]
 8001754:	2b08      	cmp	r3, #8
 8001756:	d106      	bne.n	8001766 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
            HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8001758:	210c      	movs	r1, #12
 800175a:	4807      	ldr	r0, [pc, #28]	@ (8001778 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 800175c:	f002 f9fe 	bl	8003b5c <HAL_TIM_PWM_Stop>
            dshot_running_ch4 = false;
 8001760:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001766:	b662      	cpsie	i
}
 8001768:	bf00      	nop
        }
        __enable_irq();
    }
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40000c00 	.word	0x40000c00
 8001778:	2000008c 	.word	0x2000008c
 800177c:	200003c8 	.word	0x200003c8
 8001780:	200003c9 	.word	0x200003c9
 8001784:	200003ca 	.word	0x200003ca
 8001788:	200003cb 	.word	0x200003cb

0800178c <calculate_crc>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
    //printf("UART error callback!\r\n");
}

uint8_t calculate_crc(uint16_t value_12bit, const char *protocol) {
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	80fb      	strh	r3, [r7, #6]
    if (value_12bit > 0x0FFF) return 0xFF; // invalid input
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800179e:	d301      	bcc.n	80017a4 <calculate_crc+0x18>
 80017a0:	23ff      	movs	r3, #255	@ 0xff
 80017a2:	e038      	b.n	8001816 <calculate_crc+0x8a>

    if (protocol[0] == 'B') { // BDShot
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b42      	cmp	r3, #66	@ 0x42
 80017aa:	d118      	bne.n	80017de <calculate_crc+0x52>
        uint16_t value_16bit = value_12bit << 4;
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	817b      	strh	r3, [r7, #10]
        uint16_t csum = value_16bit;
 80017b2:	897b      	ldrh	r3, [r7, #10]
 80017b4:	813b      	strh	r3, [r7, #8]
        csum ^= (csum >> 8);
 80017b6:	893b      	ldrh	r3, [r7, #8]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	893b      	ldrh	r3, [r7, #8]
 80017be:	4053      	eors	r3, r2
 80017c0:	813b      	strh	r3, [r7, #8]
        csum ^= (csum >> 4);
 80017c2:	893b      	ldrh	r3, [r7, #8]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	893b      	ldrh	r3, [r7, #8]
 80017ca:	4053      	eors	r3, r2
 80017cc:	813b      	strh	r3, [r7, #8]
        return (~csum) & 0xF;
 80017ce:	893b      	ldrh	r3, [r7, #8]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	e01b      	b.n	8001816 <calculate_crc+0x8a>
    } else if (protocol[0] == 'D') { // DShot
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b44      	cmp	r3, #68	@ 0x44
 80017e4:	d116      	bne.n	8001814 <calculate_crc+0x88>
        uint16_t value = value_12bit;
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	81fb      	strh	r3, [r7, #14]
        uint8_t crc = value ^ (value >> 4) ^ (value >> 8);
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	89fb      	ldrh	r3, [r7, #14]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4053      	eors	r3, r2
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	89fb      	ldrh	r3, [r7, #14]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	b29b      	uxth	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4053      	eors	r3, r2
 8001804:	737b      	strb	r3, [r7, #13]
        return (~crc) & 0xF;
 8001806:	7b7b      	ldrb	r3, [r7, #13]
 8001808:	43db      	mvns	r3, r3
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	b2db      	uxtb	r3, r3
 8001812:	e000      	b.n	8001816 <calculate_crc+0x8a>
    }

    return 0xFF; // unsupported protocol
 8001814:	23ff      	movs	r3, #255	@ 0xff
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <decode_gcr_mapping>:
 * @param A value that represents a 20 bit GCR that has been mapped to 21 bits.
 * The first "starting" bit can be excluded for compatibility with a slightly cleaned 20 bit value.
 *
 * @return Returns the 20 bit GCR
 */
uint32_t decode_gcr_mapping(uint32_t value) {
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
    return value ^ (value >> 1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	085a      	lsrs	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4053      	eors	r3, r2
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <decode_gcr_20_to_16>:
 *
 * @return Returns the 20 bit GCR
 *
 * Initialized the whole map to 0xFF. This way, only explicitly defined entries are accepted
 */
int decode_gcr_20_to_16(uint32_t input_20bit, uint16_t *out_value) {
 800183e:	b480      	push	{r7}
 8001840:	b08f      	sub	sp, #60	@ 0x3c
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
    uint8_t decoding_map[32];
    for (int i = 0; i < 32; ++i) decoding_map[i] = 0xFF; // mark all invalid
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	@ 0x34
 800184c:	e008      	b.n	8001860 <decode_gcr_20_to_16+0x22>
 800184e:	f107 0208 	add.w	r2, r7, #8
 8001852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001854:	4413      	add	r3, r2
 8001856:	22ff      	movs	r2, #255	@ 0xff
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800185c:	3301      	adds	r3, #1
 800185e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001862:	2b1f      	cmp	r3, #31
 8001864:	ddf3      	ble.n	800184e <decode_gcr_20_to_16+0x10>
    decoding_map[0x19] = 0x0; decoding_map[0x1B] = 0x1; decoding_map[0x12] = 0x2;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800186c:	2301      	movs	r3, #1
 800186e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001872:	2302      	movs	r3, #2
 8001874:	76bb      	strb	r3, [r7, #26]
    decoding_map[0x13] = 0x3; decoding_map[0x1D] = 0x4; decoding_map[0x15] = 0x5;
 8001876:	2303      	movs	r3, #3
 8001878:	76fb      	strb	r3, [r7, #27]
 800187a:	2304      	movs	r3, #4
 800187c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001880:	2305      	movs	r3, #5
 8001882:	777b      	strb	r3, [r7, #29]
    decoding_map[0x16] = 0x6; decoding_map[0x17] = 0x7; decoding_map[0x1A] = 0x8;
 8001884:	2306      	movs	r3, #6
 8001886:	77bb      	strb	r3, [r7, #30]
 8001888:	2307      	movs	r3, #7
 800188a:	77fb      	strb	r3, [r7, #31]
 800188c:	2308      	movs	r3, #8
 800188e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    decoding_map[0x09] = 0x9; decoding_map[0x0A] = 0xA; decoding_map[0x0B] = 0xB;
 8001892:	2309      	movs	r3, #9
 8001894:	747b      	strb	r3, [r7, #17]
 8001896:	230a      	movs	r3, #10
 8001898:	74bb      	strb	r3, [r7, #18]
 800189a:	230b      	movs	r3, #11
 800189c:	74fb      	strb	r3, [r7, #19]
    decoding_map[0x1E] = 0xC; decoding_map[0x0D] = 0xD; decoding_map[0x0E] = 0xE;
 800189e:	230c      	movs	r3, #12
 80018a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018a4:	230d      	movs	r3, #13
 80018a6:	757b      	strb	r3, [r7, #21]
 80018a8:	230e      	movs	r3, #14
 80018aa:	75bb      	strb	r3, [r7, #22]
    decoding_map[0x0F] = 0xF;
 80018ac:	230f      	movs	r3, #15
 80018ae:	75fb      	strb	r3, [r7, #23]

    uint16_t result = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	867b      	strh	r3, [r7, #50]	@ 0x32

    for (int i = 0; i < 4; i++) {
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018b8:	e029      	b.n	800190e <decode_gcr_20_to_16+0xd0>
        uint8_t chunk = (input_20bit >> (15 - i * 5)) & 0x1F;
 80018ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018bc:	4613      	mov	r3, r2
 80018be:	079b      	lsls	r3, r3, #30
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	330f      	adds	r3, #15
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f003 031f 	and.w	r3, r3, #31
 80018d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        if (decoding_map[chunk] == 0xFF) return 0; // invalid chunk
 80018d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80018dc:	3338      	adds	r3, #56	@ 0x38
 80018de:	443b      	add	r3, r7
 80018e0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80018e4:	2bff      	cmp	r3, #255	@ 0xff
 80018e6:	d101      	bne.n	80018ec <decode_gcr_20_to_16+0xae>
 80018e8:	2300      	movs	r3, #0
 80018ea:	e017      	b.n	800191c <decode_gcr_20_to_16+0xde>
        result = (result << 4) | decoding_map[chunk];
 80018ec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80018f8:	3338      	adds	r3, #56	@ 0x38
 80018fa:	443b      	add	r3, r7
 80018fc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001900:	b21b      	sxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b21b      	sxth	r3, r3
 8001906:	867b      	strh	r3, [r7, #50]	@ 0x32
    for (int i = 0; i < 4; i++) {
 8001908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190a:	3301      	adds	r3, #1
 800190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800190e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001910:	2b03      	cmp	r3, #3
 8001912:	ddd2      	ble.n	80018ba <decode_gcr_20_to_16+0x7c>
    }

    *out_value = result;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001918:	801a      	strh	r2, [r3, #0]
    return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	373c      	adds	r7, #60	@ 0x3c
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <parse_edt_frame>:

int parse_edt_frame(uint16_t frame, char *type_out, float *value_out) {
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b08b      	sub	sp, #44	@ 0x2c
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	81fb      	strh	r3, [r7, #14]
    if (frame > 0xFFFF || frame < 0){
    	return -1;
    }

    uint16_t data = (frame >> 4) & 0x0FFF;
 8001936:	89fb      	ldrh	r3, [r7, #14]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t crc_received = frame & 0x0F;
 800193c:	89fb      	ldrh	r3, [r7, #14]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t crc_calculated = calculate_crc(data, "BDShot");
 8001948:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800194a:	4960      	ldr	r1, [pc, #384]	@ (8001acc <parse_edt_frame+0x1a4>)
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff1d 	bl	800178c <calculate_crc>
 8001952:	4603      	mov	r3, r0
 8001954:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    if (crc_received != crc_calculated) return -2;
 8001958:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800195c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001960:	429a      	cmp	r2, r3
 8001962:	d002      	beq.n	800196a <parse_edt_frame+0x42>
 8001964:	f06f 0301 	mvn.w	r3, #1
 8001968:	e0ab      	b.n	8001ac2 <parse_edt_frame+0x19a>

    uint8_t exponent = (data >> 9) & 0x07;
 800196a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800196c:	0a5b      	lsrs	r3, r3, #9
 800196e:	b29b      	uxth	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint16_t base_period = data & 0x1FF;
 800197a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800197c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001980:	843b      	strh	r3, [r7, #32]
    if (exponent > 12) return -3;
 8001982:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d902      	bls.n	8001990 <parse_edt_frame+0x68>
 800198a:	f06f 0302 	mvn.w	r3, #2
 800198e:	e098      	b.n	8001ac2 <parse_edt_frame+0x19a>

    uint32_t period_us = base_period << exponent;
 8001990:	8c3a      	ldrh	r2, [r7, #32]
 8001992:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	61fb      	str	r3, [r7, #28]
    if (period_us == 0) return -3;
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <parse_edt_frame+0x80>
 80019a2:	f06f 0302 	mvn.w	r3, #2
 80019a6:	e08c      	b.n	8001ac2 <parse_edt_frame+0x19a>

    bool is_edt = ((exponent & 1) == 0) && ((base_period & 0x100) == 0);
 80019a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <parse_edt_frame+0x9a>
 80019b4:	8c3b      	ldrh	r3, [r7, #32]
 80019b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <parse_edt_frame+0x9a>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <parse_edt_frame+0x9c>
 80019c2:	2300      	movs	r3, #0
 80019c4:	76fb      	strb	r3, [r7, #27]
 80019c6:	7efb      	ldrb	r3, [r7, #27]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	76fb      	strb	r3, [r7, #27]

    if (is_edt) {
 80019ce:	7efb      	ldrb	r3, [r7, #27]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d051      	beq.n	8001a78 <parse_edt_frame+0x150>
        uint8_t telemetry_type = (data >> 8) & 0xF;
 80019d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	b29b      	uxth	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	74fb      	strb	r3, [r7, #19]
        uint8_t telemetry_value = data & 0xFF;
 80019e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019e4:	74bb      	strb	r3, [r7, #18]

        switch (telemetry_type) {
 80019e6:	7cfb      	ldrb	r3, [r7, #19]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d002      	beq.n	80019f2 <parse_edt_frame+0xca>
 80019ec:	2b0e      	cmp	r3, #14
 80019ee:	d018      	beq.n	8001a22 <parse_edt_frame+0xfa>
 80019f0:	e02d      	b.n	8001a4e <parse_edt_frame+0x126>
            case 0x04:
                *value_out = (float)(telemetry_value) / 0.25f;
 80019f2:	7cbb      	ldrb	r3, [r7, #18]
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019fc:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8001a00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	edc3 7a00 	vstr	s15, [r3]
                if (type_out) strcpy(type_out, "Voltage (V)");
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d030      	beq.n	8001a72 <parse_edt_frame+0x14a>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	4a2f      	ldr	r2, [pc, #188]	@ (8001ad0 <parse_edt_frame+0x1a8>)
 8001a14:	461c      	mov	r4, r3
 8001a16:	4613      	mov	r3, r2
 8001a18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a1a:	6020      	str	r0, [r4, #0]
 8001a1c:	6061      	str	r1, [r4, #4]
 8001a1e:	60a2      	str	r2, [r4, #8]
                break;
 8001a20:	e027      	b.n	8001a72 <parse_edt_frame+0x14a>
            case 0x0E:
                if (type_out) strcpy(type_out, "Status Frame");
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d009      	beq.n	8001a3c <parse_edt_frame+0x114>
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad4 <parse_edt_frame+0x1ac>)
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	4613      	mov	r3, r2
 8001a30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a32:	6020      	str	r0, [r4, #0]
 8001a34:	6061      	str	r1, [r4, #4]
 8001a36:	60a2      	str	r2, [r4, #8]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	7323      	strb	r3, [r4, #12]
                *value_out = telemetry_value; // raw value, parse later if needed
 8001a3c:	7cbb      	ldrb	r3, [r7, #18]
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	edc3 7a00 	vstr	s15, [r3]
                break;
 8001a4c:	e012      	b.n	8001a74 <parse_edt_frame+0x14c>
            default:
                *value_out = telemetry_value;
 8001a4e:	7cbb      	ldrb	r3, [r7, #18]
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
                if (type_out) sprintf(type_out, "Unknown (0x%X)", telemetry_type);
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <parse_edt_frame+0x14c>
 8001a64:	7cfb      	ldrb	r3, [r7, #19]
 8001a66:	461a      	mov	r2, r3
 8001a68:	491b      	ldr	r1, [pc, #108]	@ (8001ad8 <parse_edt_frame+0x1b0>)
 8001a6a:	68b8      	ldr	r0, [r7, #8]
 8001a6c:	f006 fb54 	bl	8008118 <siprintf>
 8001a70:	e000      	b.n	8001a74 <parse_edt_frame+0x14c>
                break;
 8001a72:	bf00      	nop
        }

        return 1; // EDT frame
 8001a74:	2301      	movs	r3, #1
 8001a76:	e024      	b.n	8001ac2 <parse_edt_frame+0x19a>
    } else {
        if (base_period == 0 || base_period == 0x1FF) {
 8001a78:	8c3b      	ldrh	r3, [r7, #32]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <parse_edt_frame+0x160>
 8001a7e:	8c3b      	ldrh	r3, [r7, #32]
 8001a80:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d104      	bne.n	8001a92 <parse_edt_frame+0x16a>
            *value_out = 0;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e00d      	b.n	8001aae <parse_edt_frame+0x186>
        } else {
            float erpm = 60000000.0f / (float)period_us;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a9c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001adc <parse_edt_frame+0x1b4>
 8001aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa4:	edc7 7a05 	vstr	s15, [r7, #20]
            *value_out = erpm;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	601a      	str	r2, [r3, #0]
        }

        if (type_out) strcpy(type_out, "eRPM");
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <parse_edt_frame+0x198>
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae0 <parse_edt_frame+0x1b8>)
 8001ab8:	6810      	ldr	r0, [r2, #0]
 8001aba:	6018      	str	r0, [r3, #0]
 8001abc:	7912      	ldrb	r2, [r2, #4]
 8001abe:	711a      	strb	r2, [r3, #4]
        return 2; // eRPM frame
 8001ac0:	2302      	movs	r3, #2
    }

    return -3;
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	372c      	adds	r7, #44	@ 0x2c
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd90      	pop	{r4, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	0800900c 	.word	0x0800900c
 8001ad0:	08009014 	.word	0x08009014
 8001ad4:	08009020 	.word	0x08009020
 8001ad8:	08009030 	.word	0x08009030
 8001adc:	4c64e1c0 	.word	0x4c64e1c0
 8001ae0:	08009040 	.word	0x08009040

08001ae4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f003 fc13 	bl	8005318 <osDelay>
 8001af2:	e7fb      	b.n	8001aec <StartDefaultTask+0x8>

08001af4 <DShotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DShotTask */
void DShotTask(void *argument)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DShotTask */
	//printf("\nDShotTask Begin.\r\n");
	//printf("SystemCoreClock=%lu\r\n", SystemCoreClock);
	uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 8001afc:	f001 feba 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8001b00:	6238      	str	r0, [r7, #32]
	uint32_t tim5_clk = pclk1;
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	61fb      	str	r3, [r7, #28]
	if ((RCC->CFGR & RCC_CFGR_PPRE1) != RCC_CFGR_PPRE1_DIV1)
 8001b06:	4b5e      	ldr	r3, [pc, #376]	@ (8001c80 <DShotTask+0x18c>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <DShotTask+0x24>
	    tim5_clk *= 2;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
	//printf("TIM5 actual clk: %lu\r\n", tim5_clk);

	queue_bdshot_pulse(0, true, dshot_buffer_ch1);
 8001b18:	4a5a      	ldr	r2, [pc, #360]	@ (8001c84 <DShotTask+0x190>)
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff fc84 	bl	800142a <queue_bdshot_pulse>
	queue_bdshot_pulse(0, true, dshot_buffer_ch2);
 8001b22:	4a59      	ldr	r2, [pc, #356]	@ (8001c88 <DShotTask+0x194>)
 8001b24:	2101      	movs	r1, #1
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff fc7f 	bl	800142a <queue_bdshot_pulse>
	queue_bdshot_pulse(0, true, dshot_buffer_ch3);
 8001b2c:	4a57      	ldr	r2, [pc, #348]	@ (8001c8c <DShotTask+0x198>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fc7a 	bl	800142a <queue_bdshot_pulse>
	queue_bdshot_pulse(0, true, dshot_buffer_ch4);
 8001b36:	4a56      	ldr	r2, [pc, #344]	@ (8001c90 <DShotTask+0x19c>)
 8001b38:	2101      	movs	r1, #1
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fc75 	bl	800142a <queue_bdshot_pulse>
	for (int i = 0; i < 3000; i++){
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b44:	e011      	b.n	8001b6a <DShotTask+0x76>
		send_bdshot(TIM_CHANNEL_1);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff fc88 	bl	800145c <send_bdshot>
		send_bdshot(TIM_CHANNEL_2);
 8001b4c:	2004      	movs	r0, #4
 8001b4e:	f7ff fc85 	bl	800145c <send_bdshot>
	    send_bdshot(TIM_CHANNEL_3);
 8001b52:	2008      	movs	r0, #8
 8001b54:	f7ff fc82 	bl	800145c <send_bdshot>
	    send_bdshot(TIM_CHANNEL_4);
 8001b58:	200c      	movs	r0, #12
 8001b5a:	f7ff fc7f 	bl	800145c <send_bdshot>
		vTaskDelay(1);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f004 fca4 	bl	80064ac <vTaskDelay>
	for (int i = 0; i < 3000; i++){
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	3301      	adds	r3, #1
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001b70:	4293      	cmp	r3, r2
 8001b72:	dde8      	ble.n	8001b46 <DShotTask+0x52>
	}
	vTaskDelay(50);
 8001b74:	2032      	movs	r0, #50	@ 0x32
 8001b76:	f004 fc99 	bl	80064ac <vTaskDelay>

	queue_bdshot_pulse(100, true, dshot_buffer_ch1);
 8001b7a:	4a42      	ldr	r2, [pc, #264]	@ (8001c84 <DShotTask+0x190>)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	2064      	movs	r0, #100	@ 0x64
 8001b80:	f7ff fc53 	bl	800142a <queue_bdshot_pulse>
	queue_bdshot_pulse(200, true, dshot_buffer_ch2);
 8001b84:	4a40      	ldr	r2, [pc, #256]	@ (8001c88 <DShotTask+0x194>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	20c8      	movs	r0, #200	@ 0xc8
 8001b8a:	f7ff fc4e 	bl	800142a <queue_bdshot_pulse>
	queue_bdshot_pulse(300, true, dshot_buffer_ch3);
 8001b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c8c <DShotTask+0x198>)
 8001b90:	2101      	movs	r1, #1
 8001b92:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b96:	f7ff fc48 	bl	800142a <queue_bdshot_pulse>
	queue_bdshot_pulse(400, true, dshot_buffer_ch4);
 8001b9a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c90 <DShotTask+0x19c>)
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001ba2:	f7ff fc42 	bl	800142a <queue_bdshot_pulse>
    for (;;){
      while(dshot_running_ch1 || dshot_running_ch2 || dshot_running_ch3 || dshot_running_ch4){
 8001ba6:	e003      	b.n	8001bb0 <DShotTask+0xbc>
    	  delay_us_precise(1);
 8001ba8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001bac:	f7ff fd2c 	bl	8001608 <delay_us_precise>
      while(dshot_running_ch1 || dshot_running_ch2 || dshot_running_ch3 || dshot_running_ch4){
 8001bb0:	4b38      	ldr	r3, [pc, #224]	@ (8001c94 <DShotTask+0x1a0>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f6      	bne.n	8001ba8 <DShotTask+0xb4>
 8001bba:	4b37      	ldr	r3, [pc, #220]	@ (8001c98 <DShotTask+0x1a4>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f1      	bne.n	8001ba8 <DShotTask+0xb4>
 8001bc4:	4b35      	ldr	r3, [pc, #212]	@ (8001c9c <DShotTask+0x1a8>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ec      	bne.n	8001ba8 <DShotTask+0xb4>
 8001bce:	4b34      	ldr	r3, [pc, #208]	@ (8001ca0 <DShotTask+0x1ac>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1e7      	bne.n	8001ba8 <DShotTask+0xb4>
      }
      send_bdshot(TIM_CHANNEL_1);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff fc3f 	bl	800145c <send_bdshot>
      send_bdshot(TIM_CHANNEL_2);
 8001bde:	2004      	movs	r0, #4
 8001be0:	f7ff fc3c 	bl	800145c <send_bdshot>
      send_bdshot(TIM_CHANNEL_3);
 8001be4:	2008      	movs	r0, #8
 8001be6:	f7ff fc39 	bl	800145c <send_bdshot>
      send_bdshot(TIM_CHANNEL_4);
 8001bea:	200c      	movs	r0, #12
 8001bec:	f7ff fc36 	bl	800145c <send_bdshot>
      delay_us_precise(40);
 8001bf0:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001ca4 <DShotTask+0x1b0>
 8001bf4:	f7ff fd08 	bl	8001608 <delay_us_precise>

      set_pin_input(GPIOA, GPIO_PIN_0);
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	482b      	ldr	r0, [pc, #172]	@ (8001ca8 <DShotTask+0x1b4>)
 8001bfc:	f7ff fb44 	bl	8001288 <set_pin_input>
      set_pin_input(GPIOA, GPIO_PIN_1);
 8001c00:	2102      	movs	r1, #2
 8001c02:	4829      	ldr	r0, [pc, #164]	@ (8001ca8 <DShotTask+0x1b4>)
 8001c04:	f7ff fb40 	bl	8001288 <set_pin_input>
      set_pin_input(GPIOA, GPIO_PIN_2);
 8001c08:	2104      	movs	r1, #4
 8001c0a:	4827      	ldr	r0, [pc, #156]	@ (8001ca8 <DShotTask+0x1b4>)
 8001c0c:	f7ff fb3c 	bl	8001288 <set_pin_input>
      set_pin_input(GPIOA, GPIO_PIN_3);
 8001c10:	2108      	movs	r1, #8
 8001c12:	4825      	ldr	r0, [pc, #148]	@ (8001ca8 <DShotTask+0x1b4>)
 8001c14:	f7ff fb38 	bl	8001288 <set_pin_input>

      uint8_t packet_PA0[3];
      uint8_t packet_PA1[3];
      uint8_t packet_PA2[3];
      uint8_t packet_PA3[3];
      process_bdshot_telemetry(GPIOA, GPIO_PIN_0, packet_PA0);
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4821      	ldr	r0, [pc, #132]	@ (8001ca8 <DShotTask+0x1b4>)
 8001c22:	f7ff fad7 	bl	80011d4 <process_bdshot_telemetry>
      process_bdshot_telemetry(GPIOA, GPIO_PIN_1, packet_PA1);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	481e      	ldr	r0, [pc, #120]	@ (8001ca8 <DShotTask+0x1b4>)
 8001c30:	f7ff fad0 	bl	80011d4 <process_bdshot_telemetry>
      process_bdshot_telemetry(GPIOA, GPIO_PIN_2, packet_PA2);
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	481a      	ldr	r0, [pc, #104]	@ (8001ca8 <DShotTask+0x1b4>)
 8001c3e:	f7ff fac9 	bl	80011d4 <process_bdshot_telemetry>
      process_bdshot_telemetry(GPIOA, GPIO_PIN_3, packet_PA3);
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	461a      	mov	r2, r3
 8001c48:	2108      	movs	r1, #8
 8001c4a:	4817      	ldr	r0, [pc, #92]	@ (8001ca8 <DShotTask+0x1b4>)
 8001c4c:	f7ff fac2 	bl	80011d4 <process_bdshot_telemetry>
	  //send_binary_uart6(packet, sizeof(packet));

      set_pin_pwm(GPIOA, GPIO_PIN_0, GPIO_AF2_TIM5);
 8001c50:	2202      	movs	r2, #2
 8001c52:	2101      	movs	r1, #1
 8001c54:	4814      	ldr	r0, [pc, #80]	@ (8001ca8 <DShotTask+0x1b4>)
 8001c56:	f7ff fb35 	bl	80012c4 <set_pin_pwm>
      set_pin_pwm(GPIOA, GPIO_PIN_1, GPIO_AF2_TIM5);
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	4812      	ldr	r0, [pc, #72]	@ (8001ca8 <DShotTask+0x1b4>)
 8001c60:	f7ff fb30 	bl	80012c4 <set_pin_pwm>
      set_pin_pwm(GPIOA, GPIO_PIN_2, GPIO_AF2_TIM5);
 8001c64:	2202      	movs	r2, #2
 8001c66:	2104      	movs	r1, #4
 8001c68:	480f      	ldr	r0, [pc, #60]	@ (8001ca8 <DShotTask+0x1b4>)
 8001c6a:	f7ff fb2b 	bl	80012c4 <set_pin_pwm>
      set_pin_pwm(GPIOA, GPIO_PIN_3, GPIO_AF2_TIM5);
 8001c6e:	2202      	movs	r2, #2
 8001c70:	2108      	movs	r1, #8
 8001c72:	480d      	ldr	r0, [pc, #52]	@ (8001ca8 <DShotTask+0x1b4>)
 8001c74:	f7ff fb26 	bl	80012c4 <set_pin_pwm>
      vTaskDelay(1);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f004 fc17 	bl	80064ac <vTaskDelay>
    for (;;){
 8001c7e:	e792      	b.n	8001ba6 <DShotTask+0xb2>
 8001c80:	40023800 	.word	0x40023800
 8001c84:	200002a8 	.word	0x200002a8
 8001c88:	200002f0 	.word	0x200002f0
 8001c8c:	20000338 	.word	0x20000338
 8001c90:	20000380 	.word	0x20000380
 8001c94:	200003c8 	.word	0x200003c8
 8001c98:	200003c9 	.word	0x200003c9
 8001c9c:	200003ca 	.word	0x200003ca
 8001ca0:	200003cb 	.word	0x200003cb
 8001ca4:	42200000 	.word	0x42200000
 8001ca8:	40020000 	.word	0x40020000

08001cac <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void *argument)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f003 fb2f 	bl	8005318 <osDelay>
 8001cba:	e7fb      	b.n	8001cb4 <StartSerialTask+0x8>

08001cbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001cce:	f000 fb7b 	bl	80023c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  //printf("PeriodElapsedCallback\r\n");
  /* USER CODE END Callback 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40001c00 	.word	0x40001c00

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <Error_Handler+0x8>

08001cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_MspInit+0x54>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	4a11      	ldr	r2, [pc, #68]	@ (8001d40 <HAL_MspInit+0x54>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d02:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <HAL_MspInit+0x54>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <HAL_MspInit+0x54>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <HAL_MspInit+0x54>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1e:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <HAL_MspInit+0x54>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	210f      	movs	r1, #15
 8001d2e:	f06f 0001 	mvn.w	r0, #1
 8001d32:	f000 fc21 	bl	8002578 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a72      	ldr	r2, [pc, #456]	@ (8001f1c <HAL_TIM_PWM_MspInit+0x1d8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	f040 80de 	bne.w	8001f14 <HAL_TIM_PWM_MspInit+0x1d0>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	4b70      	ldr	r3, [pc, #448]	@ (8001f20 <HAL_TIM_PWM_MspInit+0x1dc>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d60:	4a6f      	ldr	r2, [pc, #444]	@ (8001f20 <HAL_TIM_PWM_MspInit+0x1dc>)
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d68:	4b6d      	ldr	r3, [pc, #436]	@ (8001f20 <HAL_TIM_PWM_MspInit+0x1dc>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8001d74:	4b6b      	ldr	r3, [pc, #428]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001d76:	4a6c      	ldr	r2, [pc, #432]	@ (8001f28 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001d78:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8001d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001d7c:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001d80:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d82:	4b68      	ldr	r3, [pc, #416]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001d84:	2240      	movs	r2, #64	@ 0x40
 8001d86:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d88:	4b66      	ldr	r3, [pc, #408]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d8e:	4b65      	ldr	r3, [pc, #404]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001d90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d94:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d96:	4b63      	ldr	r3, [pc, #396]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001d98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d9c:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d9e:	4b61      	ldr	r3, [pc, #388]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001da0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001da4:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8001da6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001dac:	4b5d      	ldr	r3, [pc, #372]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001dae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001db2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001db4:	4b5b      	ldr	r3, [pc, #364]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001dba:	485a      	ldr	r0, [pc, #360]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001dbc:	f000 fc06 	bl	80025cc <HAL_DMA_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8001dc6:	f7ff ff8b 	bl	8001ce0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a55      	ldr	r2, [pc, #340]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001dce:	625a      	str	r2, [r3, #36]	@ 0x24
 8001dd0:	4a54      	ldr	r2, [pc, #336]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5_CH2 Init */
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8001dd6:	4b55      	ldr	r3, [pc, #340]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001dd8:	4a55      	ldr	r2, [pc, #340]	@ (8001f30 <HAL_TIM_PWM_MspInit+0x1ec>)
 8001dda:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8001ddc:	4b53      	ldr	r3, [pc, #332]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001dde:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001de2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001de4:	4b51      	ldr	r3, [pc, #324]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001de6:	2240      	movs	r2, #64	@ 0x40
 8001de8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dea:	4b50      	ldr	r3, [pc, #320]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001df0:	4b4e      	ldr	r3, [pc, #312]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001df2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001df6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001df8:	4b4c      	ldr	r3, [pc, #304]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001dfa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dfe:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e00:	4b4a      	ldr	r3, [pc, #296]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001e02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e06:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001e08:	4b48      	ldr	r3, [pc, #288]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001e0e:	4b47      	ldr	r3, [pc, #284]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001e10:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e14:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e16:	4b45      	ldr	r3, [pc, #276]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8001e1c:	4843      	ldr	r0, [pc, #268]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001e1e:	f000 fbd5 	bl	80025cc <HAL_DMA_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_TIM_PWM_MspInit+0xe8>
    {
      Error_Handler();
 8001e28:	f7ff ff5a 	bl	8001ce0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001e30:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e32:	4a3e      	ldr	r2, [pc, #248]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5_CH3_UP Init */
    hdma_tim5_ch3_up.Instance = DMA1_Stream0;
 8001e38:	4b3e      	ldr	r3, [pc, #248]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e3a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f38 <HAL_TIM_PWM_MspInit+0x1f4>)
 8001e3c:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Channel = DMA_CHANNEL_6;
 8001e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e40:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001e44:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e46:	4b3b      	ldr	r3, [pc, #236]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e48:	2240      	movs	r2, #64	@ 0x40
 8001e4a:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4c:	4b39      	ldr	r3, [pc, #228]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001e52:	4b38      	ldr	r3, [pc, #224]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e58:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e5a:	4b36      	ldr	r3, [pc, #216]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e60:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e62:	4b34      	ldr	r3, [pc, #208]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e68:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 8001e6a:	4b32      	ldr	r3, [pc, #200]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001e70:	4b30      	ldr	r3, [pc, #192]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e76:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e78:	4b2e      	ldr	r3, [pc, #184]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8001e7e:	482d      	ldr	r0, [pc, #180]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e80:	f000 fba4 	bl	80025cc <HAL_DMA_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_TIM_PWM_MspInit+0x14a>
    {
      Error_Handler();
 8001e8a:	f7ff ff29 	bl	8001ce0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a28      	ldr	r2, [pc, #160]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e94:	4a27      	ldr	r2, [pc, #156]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a25      	ldr	r2, [pc, #148]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e9e:	621a      	str	r2, [r3, #32]
 8001ea0:	4a24      	ldr	r2, [pc, #144]	@ (8001f34 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM5_CH4_TRIG Init */
    hdma_tim5_ch4_trig.Instance = DMA1_Stream1;
 8001ea6:	4b25      	ldr	r3, [pc, #148]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001ea8:	4a25      	ldr	r2, [pc, #148]	@ (8001f40 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001eaa:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8001eac:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001eae:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001eb2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eb4:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001eb6:	2240      	movs	r2, #64	@ 0x40
 8001eb8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eba:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001ec2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ec6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001eca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ece:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001ed2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ed6:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8001ed8:	4b18      	ldr	r3, [pc, #96]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8001ede:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001ee0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ee4:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8001eec:	4813      	ldr	r0, [pc, #76]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001eee:	f000 fb6d 	bl	80025cc <HAL_DMA_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_TIM_PWM_MspInit+0x1b8>
    {
      Error_Handler();
 8001ef8:	f7ff fef2 	bl	8001ce0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a0f      	ldr	r2, [pc, #60]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001f00:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f02:	4a0e      	ldr	r2, [pc, #56]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001f0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f3c <HAL_TIM_PWM_MspInit+0x1f8>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40000c00 	.word	0x40000c00
 8001f20:	40023800 	.word	0x40023800
 8001f24:	200000d4 	.word	0x200000d4
 8001f28:	40026040 	.word	0x40026040
 8001f2c:	20000134 	.word	0x20000134
 8001f30:	40026070 	.word	0x40026070
 8001f34:	20000194 	.word	0x20000194
 8001f38:	40026010 	.word	0x40026010
 8001f3c:	200001f4 	.word	0x200001f4
 8001f40:	40026028 	.word	0x40026028

08001f44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1a      	ldr	r2, [pc, #104]	@ (8001fcc <HAL_TIM_MspPostInit+0x88>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d12d      	bne.n	8001fc2 <HAL_TIM_MspPostInit+0x7e>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <HAL_TIM_MspPostInit+0x8c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a18      	ldr	r2, [pc, #96]	@ (8001fd0 <HAL_TIM_MspPostInit+0x8c>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <HAL_TIM_MspPostInit+0x8c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f82:	2301      	movs	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <HAL_TIM_MspPostInit+0x90>)
 8001f9e:	f000 fe85 	bl	8002cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001fa2:	230e      	movs	r3, #14
 8001fa4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4805      	ldr	r0, [pc, #20]	@ (8001fd4 <HAL_TIM_MspPostInit+0x90>)
 8001fbe:	f000 fe75 	bl	8002cac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40000c00 	.word	0x40000c00
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	@ (800205c <HAL_UART_MspInit+0x84>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d12b      	bne.n	8002052 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b18      	ldr	r3, [pc, #96]	@ (8002060 <HAL_UART_MspInit+0x88>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	4a17      	ldr	r2, [pc, #92]	@ (8002060 <HAL_UART_MspInit+0x88>)
 8002004:	f043 0320 	orr.w	r3, r3, #32
 8002008:	6453      	str	r3, [r2, #68]	@ 0x44
 800200a:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <HAL_UART_MspInit+0x88>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <HAL_UART_MspInit+0x88>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	4a10      	ldr	r2, [pc, #64]	@ (8002060 <HAL_UART_MspInit+0x88>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	6313      	str	r3, [r2, #48]	@ 0x30
 8002026:	4b0e      	ldr	r3, [pc, #56]	@ (8002060 <HAL_UART_MspInit+0x88>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002032:	23c0      	movs	r3, #192	@ 0xc0
 8002034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002042:	2308      	movs	r3, #8
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	@ (8002064 <HAL_UART_MspInit+0x8c>)
 800204e:	f000 fe2d 	bl	8002cac <HAL_GPIO_Init>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	@ 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40011400 	.word	0x40011400
 8002060:	40023800 	.word	0x40023800
 8002064:	40020800 	.word	0x40020800

08002068 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08e      	sub	sp, #56	@ 0x38
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	4b33      	ldr	r3, [pc, #204]	@ (800214c <HAL_InitTick+0xe4>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	4a32      	ldr	r2, [pc, #200]	@ (800214c <HAL_InitTick+0xe4>)
 8002082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002086:	6413      	str	r3, [r2, #64]	@ 0x40
 8002088:	4b30      	ldr	r3, [pc, #192]	@ (800214c <HAL_InitTick+0xe4>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002094:	f107 0210 	add.w	r2, r7, #16
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 fc10 	bl	80038c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d103      	bne.n	80020b6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020ae:	f001 fbe1 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 80020b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80020b4:	e004      	b.n	80020c0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020b6:	f001 fbdd 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 80020ba:	4603      	mov	r3, r0
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020c2:	4a23      	ldr	r2, [pc, #140]	@ (8002150 <HAL_InitTick+0xe8>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	0c9b      	lsrs	r3, r3, #18
 80020ca:	3b01      	subs	r3, #1
 80020cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80020ce:	4b21      	ldr	r3, [pc, #132]	@ (8002154 <HAL_InitTick+0xec>)
 80020d0:	4a21      	ldr	r2, [pc, #132]	@ (8002158 <HAL_InitTick+0xf0>)
 80020d2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 80020d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002154 <HAL_InitTick+0xec>)
 80020d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020da:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 80020dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002154 <HAL_InitTick+0xec>)
 80020de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e0:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 80020e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <HAL_InitTick+0xec>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002154 <HAL_InitTick+0xec>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ee:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_InitTick+0xec>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 80020f4:	4817      	ldr	r0, [pc, #92]	@ (8002154 <HAL_InitTick+0xec>)
 80020f6:	f001 fc17 	bl	8003928 <HAL_TIM_Base_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002100:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002104:	2b00      	cmp	r3, #0
 8002106:	d11b      	bne.n	8002140 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 8002108:	4812      	ldr	r0, [pc, #72]	@ (8002154 <HAL_InitTick+0xec>)
 800210a:	f001 fc67 	bl	80039dc <HAL_TIM_Base_Start_IT>
 800210e:	4603      	mov	r3, r0
 8002110:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002114:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002118:	2b00      	cmp	r3, #0
 800211a:	d111      	bne.n	8002140 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800211c:	202c      	movs	r0, #44	@ 0x2c
 800211e:	f000 fa47 	bl	80025b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d808      	bhi.n	800213a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	202c      	movs	r0, #44	@ 0x2c
 800212e:	f000 fa23 	bl	8002578 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002132:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <HAL_InitTick+0xf4>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	e002      	b.n	8002140 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002140:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002144:	4618      	mov	r0, r3
 8002146:	3738      	adds	r7, #56	@ 0x38
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	431bde83 	.word	0x431bde83
 8002154:	200003d0 	.word	0x200003d0
 8002158:	40001c00 	.word	0x40001c00
 800215c:	20000008 	.word	0x20000008

08002160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <NMI_Handler+0x4>

08002168 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <HardFault_Handler+0x4>

08002170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <MemManage_Handler+0x4>

08002178 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <UsageFault_Handler+0x4>

08002188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 800219c:	4802      	ldr	r0, [pc, #8]	@ (80021a8 <DMA1_Stream0_IRQHandler+0x10>)
 800219e:	f000 fb1b 	bl	80027d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000194 	.word	0x20000194

080021ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 80021b0:	4802      	ldr	r0, [pc, #8]	@ (80021bc <DMA1_Stream1_IRQHandler+0x10>)
 80021b2:	f000 fb11 	bl	80027d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200001f4 	.word	0x200001f4

080021c0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80021c4:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <DMA1_Stream2_IRQHandler+0x10>)
 80021c6:	f000 fb07 	bl	80027d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200000d4 	.word	0x200000d4

080021d4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 80021d8:	4802      	ldr	r0, [pc, #8]	@ (80021e4 <DMA1_Stream4_IRQHandler+0x10>)
 80021da:	f000 fafd 	bl	80027d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000134 	.word	0x20000134

080021e8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80021ee:	f001 feed 	bl	8003fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200003d0 	.word	0x200003d0

080021fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	e00a      	b.n	8002224 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800220e:	f3af 8000 	nop.w
 8002212:	4601      	mov	r1, r0
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	60ba      	str	r2, [r7, #8]
 800221a:	b2ca      	uxtb	r2, r1
 800221c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	dbf0      	blt.n	800220e <_read+0x12>
  }

  return len;
 800222c:	687b      	ldr	r3, [r7, #4]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_close>:

int _close(int file)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800225e:	605a      	str	r2, [r3, #4]
  return 0;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_isatty>:

int _isatty(int file)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002276:	2301      	movs	r3, #1
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a8:	4a14      	ldr	r2, [pc, #80]	@ (80022fc <_sbrk+0x5c>)
 80022aa:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <_sbrk+0x60>)
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b4:	4b13      	ldr	r3, [pc, #76]	@ (8002304 <_sbrk+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <_sbrk+0x64>)
 80022be:	4a12      	ldr	r2, [pc, #72]	@ (8002308 <_sbrk+0x68>)
 80022c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d207      	bcs.n	80022e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d0:	f006 f8c8 	bl	8008464 <__errno>
 80022d4:	4603      	mov	r3, r0
 80022d6:	220c      	movs	r2, #12
 80022d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	e009      	b.n	80022f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e0:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022e6:	4b07      	ldr	r3, [pc, #28]	@ (8002304 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	4a05      	ldr	r2, [pc, #20]	@ (8002304 <_sbrk+0x64>)
 80022f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20020000 	.word	0x20020000
 8002300:	00000400 	.word	0x00000400
 8002304:	20000418 	.word	0x20000418
 8002308:	20006178 	.word	0x20006178

0800230c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002310:	4b06      	ldr	r3, [pc, #24]	@ (800232c <SystemInit+0x20>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	4a05      	ldr	r2, [pc, #20]	@ (800232c <SystemInit+0x20>)
 8002318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800231c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002368 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002334:	f7ff ffea 	bl	800230c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002338:	480c      	ldr	r0, [pc, #48]	@ (800236c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800233a:	490d      	ldr	r1, [pc, #52]	@ (8002370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800233c:	4a0d      	ldr	r2, [pc, #52]	@ (8002374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002350:	4c0a      	ldr	r4, [pc, #40]	@ (800237c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800235e:	f006 f887 	bl	8008470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002362:	f7fe fd09 	bl	8000d78 <main>
  bx  lr    
 8002366:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800236c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002370:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002374:	08009130 	.word	0x08009130
  ldr r2, =_sbss
 8002378:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800237c:	20006174 	.word	0x20006174

08002380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC_IRQHandler>
	...

08002384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002388:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <HAL_Init+0x40>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0d      	ldr	r2, [pc, #52]	@ (80023c4 <HAL_Init+0x40>)
 800238e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_Init+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <HAL_Init+0x40>)
 800239a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800239e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a0:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a07      	ldr	r2, [pc, #28]	@ (80023c4 <HAL_Init+0x40>)
 80023a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ac:	2003      	movs	r0, #3
 80023ae:	f000 f8d8 	bl	8002562 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b2:	200f      	movs	r0, #15
 80023b4:	f7ff fe58 	bl	8002068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b8:	f7ff fc98 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023c00 	.word	0x40023c00

080023c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_IncTick+0x20>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <HAL_IncTick+0x24>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <HAL_IncTick+0x24>)
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	2000000c 	.word	0x2000000c
 80023ec:	2000041c 	.word	0x2000041c

080023f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <HAL_GetTick+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	2000041c 	.word	0x2000041c

08002408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002424:	4013      	ands	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243a:	4a04      	ldr	r2, [pc, #16]	@ (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	60d3      	str	r3, [r2, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <__NVIC_GetPriorityGrouping+0x18>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	f003 0307 	and.w	r3, r3, #7
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	2b00      	cmp	r3, #0
 800247c:	db0b      	blt.n	8002496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	4907      	ldr	r1, [pc, #28]	@ (80024a4 <__NVIC_EnableIRQ+0x38>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	2001      	movs	r0, #1
 800248e:	fa00 f202 	lsl.w	r2, r0, r2
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e100 	.word	0xe000e100

080024a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	db0a      	blt.n	80024d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	490c      	ldr	r1, [pc, #48]	@ (80024f4 <__NVIC_SetPriority+0x4c>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	0112      	lsls	r2, r2, #4
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	440b      	add	r3, r1
 80024cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d0:	e00a      	b.n	80024e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4908      	ldr	r1, [pc, #32]	@ (80024f8 <__NVIC_SetPriority+0x50>)
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	3b04      	subs	r3, #4
 80024e0:	0112      	lsls	r2, r2, #4
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	440b      	add	r3, r1
 80024e6:	761a      	strb	r2, [r3, #24]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000e100 	.word	0xe000e100
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	@ 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f1c3 0307 	rsb	r3, r3, #7
 8002516:	2b04      	cmp	r3, #4
 8002518:	bf28      	it	cs
 800251a:	2304      	movcs	r3, #4
 800251c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3304      	adds	r3, #4
 8002522:	2b06      	cmp	r3, #6
 8002524:	d902      	bls.n	800252c <NVIC_EncodePriority+0x30>
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3b03      	subs	r3, #3
 800252a:	e000      	b.n	800252e <NVIC_EncodePriority+0x32>
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	401a      	ands	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002544:	f04f 31ff 	mov.w	r1, #4294967295
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	43d9      	mvns	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	4313      	orrs	r3, r2
         );
}
 8002556:	4618      	mov	r0, r3
 8002558:	3724      	adds	r7, #36	@ 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ff4c 	bl	8002408 <__NVIC_SetPriorityGrouping>
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800258a:	f7ff ff61 	bl	8002450 <__NVIC_GetPriorityGrouping>
 800258e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	6978      	ldr	r0, [r7, #20]
 8002596:	f7ff ffb1 	bl	80024fc <NVIC_EncodePriority>
 800259a:	4602      	mov	r2, r0
 800259c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ff80 	bl	80024a8 <__NVIC_SetPriority>
}
 80025a8:	bf00      	nop
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff54 	bl	800246c <__NVIC_EnableIRQ>
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff ff0a 	bl	80023f0 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e099      	b.n	800271c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002608:	e00f      	b.n	800262a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260a:	f7ff fef1 	bl	80023f0 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b05      	cmp	r3, #5
 8002616:	d908      	bls.n	800262a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e078      	b.n	800271c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e8      	bne.n	800260a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4b38      	ldr	r3, [pc, #224]	@ (8002724 <HAL_DMA_Init+0x158>)
 8002644:	4013      	ands	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	4313      	orrs	r3, r2
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0307 	bic.w	r3, r3, #7
 80026aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d117      	bne.n	80026ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fa6f 	bl	8002bb4 <DMA_CheckFifoParam>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2240      	movs	r2, #64	@ 0x40
 80026e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026ea:	2301      	movs	r3, #1
 80026ec:	e016      	b.n	800271c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fa26 	bl	8002b48 <DMA_CalcBaseAndBitshift>
 80026fc:	4603      	mov	r3, r0
 80026fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	223f      	movs	r2, #63	@ 0x3f
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	f010803f 	.word	0xf010803f

08002728 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_DMA_Start_IT+0x26>
 800274a:	2302      	movs	r3, #2
 800274c:	e040      	b.n	80027d0 <HAL_DMA_Start_IT+0xa8>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d12f      	bne.n	80027c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2202      	movs	r2, #2
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f9b8 	bl	8002aec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	223f      	movs	r2, #63	@ 0x3f
 8002782:	409a      	lsls	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0216 	orr.w	r2, r2, #22
 8002796:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0208 	orr.w	r2, r2, #8
 80027ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e005      	b.n	80027ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002a20 <HAL_DMA_IRQHandler+0x248>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a8e      	ldr	r2, [pc, #568]	@ (8002a24 <HAL_DMA_IRQHandler+0x24c>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0a9b      	lsrs	r3, r3, #10
 80027f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002802:	2208      	movs	r2, #8
 8002804:	409a      	lsls	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d01a      	beq.n	8002844 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0204 	bic.w	r2, r2, #4
 800282a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002830:	2208      	movs	r2, #8
 8002832:	409a      	lsls	r2, r3
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002848:	2201      	movs	r2, #1
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d012      	beq.n	800287a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002866:	2201      	movs	r2, #1
 8002868:	409a      	lsls	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002872:	f043 0202 	orr.w	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287e:	2204      	movs	r2, #4
 8002880:	409a      	lsls	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d012      	beq.n	80028b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289c:	2204      	movs	r2, #4
 800289e:	409a      	lsls	r2, r3
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a8:	f043 0204 	orr.w	r2, r3, #4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b4:	2210      	movs	r2, #16
 80028b6:	409a      	lsls	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d043      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d03c      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d2:	2210      	movs	r2, #16
 80028d4:	409a      	lsls	r2, r3
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d018      	beq.n	800291a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d024      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
 8002906:	e01f      	b.n	8002948 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01b      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e016      	b.n	8002948 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0208 	bic.w	r2, r2, #8
 8002936:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294c:	2220      	movs	r2, #32
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 808f 	beq.w	8002a78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8087 	beq.w	8002a78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	2220      	movs	r2, #32
 8002970:	409a      	lsls	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b05      	cmp	r3, #5
 8002980:	d136      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0216 	bic.w	r2, r2, #22
 8002990:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <HAL_DMA_IRQHandler+0x1da>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0208 	bic.w	r2, r2, #8
 80029c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c6:	223f      	movs	r2, #63	@ 0x3f
 80029c8:	409a      	lsls	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d07e      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
        }
        return;
 80029ee:	e079      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01d      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10d      	bne.n	8002a28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d031      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
 8002a1c:	e02c      	b.n	8002a78 <HAL_DMA_IRQHandler+0x2a0>
 8002a1e:	bf00      	nop
 8002a20:	20000004 	.word	0x20000004
 8002a24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d023      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
 8002a38:	e01e      	b.n	8002a78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10f      	bne.n	8002a68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0210 	bic.w	r2, r2, #16
 8002a56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d032      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d022      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2205      	movs	r2, #5
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d307      	bcc.n	8002ac0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f2      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x2cc>
 8002abe:	e000      	b.n	8002ac2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ac0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
 8002ae2:	e000      	b.n	8002ae6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ae4:	bf00      	nop
    }
  }
}
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b40      	cmp	r3, #64	@ 0x40
 8002b18:	d108      	bne.n	8002b2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b2a:	e007      	b.n	8002b3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	60da      	str	r2, [r3, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	3b10      	subs	r3, #16
 8002b58:	4a14      	ldr	r2, [pc, #80]	@ (8002bac <DMA_CalcBaseAndBitshift+0x64>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b62:	4a13      	ldr	r2, [pc, #76]	@ (8002bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d909      	bls.n	8002b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b7e:	f023 0303 	bic.w	r3, r3, #3
 8002b82:	1d1a      	adds	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b88:	e007      	b.n	8002b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	aaaaaaab 	.word	0xaaaaaaab
 8002bb0:	080090e4 	.word	0x080090e4

08002bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11f      	bne.n	8002c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d856      	bhi.n	8002c82 <DMA_CheckFifoParam+0xce>
 8002bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bdc <DMA_CheckFifoParam+0x28>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bff 	.word	0x08002bff
 8002be4:	08002bed 	.word	0x08002bed
 8002be8:	08002c83 	.word	0x08002c83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d046      	beq.n	8002c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e043      	b.n	8002c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c06:	d140      	bne.n	8002c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0c:	e03d      	b.n	8002c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c16:	d121      	bne.n	8002c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d837      	bhi.n	8002c8e <DMA_CheckFifoParam+0xda>
 8002c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <DMA_CheckFifoParam+0x70>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c3b 	.word	0x08002c3b
 8002c2c:	08002c35 	.word	0x08002c35
 8002c30:	08002c4d 	.word	0x08002c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e030      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d025      	beq.n	8002c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4a:	e022      	b.n	8002c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c54:	d11f      	bne.n	8002c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c5a:	e01c      	b.n	8002c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d903      	bls.n	8002c6a <DMA_CheckFifoParam+0xb6>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d003      	beq.n	8002c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c68:	e018      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6e:	e015      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c80:	e00b      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c82:	bf00      	nop
 8002c84:	e00a      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c86:	bf00      	nop
 8002c88:	e008      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e006      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e004      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c92:	bf00      	nop
 8002c94:	e002      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	@ 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	e16b      	b.n	8002fa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	f040 815a 	bne.w	8002f9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d005      	beq.n	8002cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d130      	bne.n	8002d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 0201 	and.w	r2, r3, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d017      	beq.n	8002d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	2203      	movs	r2, #3
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d123      	bne.n	8002df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	08da      	lsrs	r2, r3, #3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3208      	adds	r2, #8
 8002db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	220f      	movs	r2, #15
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	08da      	lsrs	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3208      	adds	r2, #8
 8002dea:	69b9      	ldr	r1, [r7, #24]
 8002dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0203 	and.w	r2, r3, #3
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80b4 	beq.w	8002f9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b60      	ldr	r3, [pc, #384]	@ (8002fb8 <HAL_GPIO_Init+0x30c>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8002fb8 <HAL_GPIO_Init+0x30c>)
 8002e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e42:	4b5d      	ldr	r3, [pc, #372]	@ (8002fb8 <HAL_GPIO_Init+0x30c>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fbc <HAL_GPIO_Init+0x310>)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a52      	ldr	r2, [pc, #328]	@ (8002fc0 <HAL_GPIO_Init+0x314>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d02b      	beq.n	8002ed2 <HAL_GPIO_Init+0x226>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a51      	ldr	r2, [pc, #324]	@ (8002fc4 <HAL_GPIO_Init+0x318>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d025      	beq.n	8002ece <HAL_GPIO_Init+0x222>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a50      	ldr	r2, [pc, #320]	@ (8002fc8 <HAL_GPIO_Init+0x31c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d01f      	beq.n	8002eca <HAL_GPIO_Init+0x21e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fcc <HAL_GPIO_Init+0x320>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d019      	beq.n	8002ec6 <HAL_GPIO_Init+0x21a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4e      	ldr	r2, [pc, #312]	@ (8002fd0 <HAL_GPIO_Init+0x324>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d013      	beq.n	8002ec2 <HAL_GPIO_Init+0x216>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fd4 <HAL_GPIO_Init+0x328>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00d      	beq.n	8002ebe <HAL_GPIO_Init+0x212>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8002fd8 <HAL_GPIO_Init+0x32c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d007      	beq.n	8002eba <HAL_GPIO_Init+0x20e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4b      	ldr	r2, [pc, #300]	@ (8002fdc <HAL_GPIO_Init+0x330>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_GPIO_Init+0x20a>
 8002eb2:	2307      	movs	r3, #7
 8002eb4:	e00e      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	e00c      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002eba:	2306      	movs	r3, #6
 8002ebc:	e00a      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ebe:	2305      	movs	r3, #5
 8002ec0:	e008      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e004      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e002      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	f002 0203 	and.w	r2, r2, #3
 8002eda:	0092      	lsls	r2, r2, #2
 8002edc:	4093      	lsls	r3, r2
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee4:	4935      	ldr	r1, [pc, #212]	@ (8002fbc <HAL_GPIO_Init+0x310>)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	3302      	adds	r3, #2
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f16:	4a32      	ldr	r2, [pc, #200]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f1c:	4b30      	ldr	r3, [pc, #192]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f40:	4a27      	ldr	r2, [pc, #156]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f46:	4b26      	ldr	r3, [pc, #152]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f70:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f94:	4a12      	ldr	r2, [pc, #72]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	f67f ae90 	bls.w	8002cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3724      	adds	r7, #36	@ 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	40020000 	.word	0x40020000
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	40020c00 	.word	0x40020c00
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40021400 	.word	0x40021400
 8002fd8:	40021800 	.word	0x40021800
 8002fdc:	40021c00 	.word	0x40021c00
 8002fe0:	40013c00 	.word	0x40013c00

08002fe4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	887b      	ldrh	r3, [r7, #2]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
 8003000:	e001      	b.n	8003006 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003006:	7bfb      	ldrb	r3, [r7, #15]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e267      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d075      	beq.n	800311e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003032:	4b88      	ldr	r3, [pc, #544]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b04      	cmp	r3, #4
 800303c:	d00c      	beq.n	8003058 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800303e:	4b85      	ldr	r3, [pc, #532]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003046:	2b08      	cmp	r3, #8
 8003048:	d112      	bne.n	8003070 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304a:	4b82      	ldr	r3, [pc, #520]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003052:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003056:	d10b      	bne.n	8003070 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	4b7e      	ldr	r3, [pc, #504]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d05b      	beq.n	800311c <HAL_RCC_OscConfig+0x108>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d157      	bne.n	800311c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e242      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003078:	d106      	bne.n	8003088 <HAL_RCC_OscConfig+0x74>
 800307a:	4b76      	ldr	r3, [pc, #472]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a75      	ldr	r2, [pc, #468]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e01d      	b.n	80030c4 <HAL_RCC_OscConfig+0xb0>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x98>
 8003092:	4b70      	ldr	r3, [pc, #448]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6f      	ldr	r2, [pc, #444]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 8003098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b6d      	ldr	r3, [pc, #436]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6c      	ldr	r2, [pc, #432]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e00b      	b.n	80030c4 <HAL_RCC_OscConfig+0xb0>
 80030ac:	4b69      	ldr	r3, [pc, #420]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a68      	ldr	r2, [pc, #416]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	4b66      	ldr	r3, [pc, #408]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a65      	ldr	r2, [pc, #404]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 80030be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d013      	beq.n	80030f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7ff f990 	bl	80023f0 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d4:	f7ff f98c 	bl	80023f0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	@ 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e207      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0xc0>
 80030f2:	e014      	b.n	800311e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7ff f97c 	bl	80023f0 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030fc:	f7ff f978 	bl	80023f0 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	@ 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e1f3      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	4b51      	ldr	r3, [pc, #324]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0xe8>
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d063      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800312a:	4b4a      	ldr	r3, [pc, #296]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003136:	4b47      	ldr	r3, [pc, #284]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800313e:	2b08      	cmp	r3, #8
 8003140:	d11c      	bne.n	800317c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003142:	4b44      	ldr	r3, [pc, #272]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d116      	bne.n	800317c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	4b41      	ldr	r3, [pc, #260]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_RCC_OscConfig+0x152>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d001      	beq.n	8003166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e1c7      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003166:	4b3b      	ldr	r3, [pc, #236]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4937      	ldr	r1, [pc, #220]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	e03a      	b.n	80031f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d020      	beq.n	80031c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003184:	4b34      	ldr	r3, [pc, #208]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7ff f931 	bl	80023f0 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003192:	f7ff f92d 	bl	80023f0 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e1a8      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b0:	4b28      	ldr	r3, [pc, #160]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4925      	ldr	r1, [pc, #148]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]
 80031c4:	e015      	b.n	80031f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c6:	4b24      	ldr	r3, [pc, #144]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7ff f910 	bl	80023f0 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d4:	f7ff f90c 	bl	80023f0 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e187      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d036      	beq.n	800326c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003206:	4b15      	ldr	r3, [pc, #84]	@ (800325c <HAL_RCC_OscConfig+0x248>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320c:	f7ff f8f0 	bl	80023f0 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003214:	f7ff f8ec 	bl	80023f0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e167      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	4b0b      	ldr	r3, [pc, #44]	@ (8003254 <HAL_RCC_OscConfig+0x240>)
 8003228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x200>
 8003232:	e01b      	b.n	800326c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003234:	4b09      	ldr	r3, [pc, #36]	@ (800325c <HAL_RCC_OscConfig+0x248>)
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323a:	f7ff f8d9 	bl	80023f0 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003240:	e00e      	b.n	8003260 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003242:	f7ff f8d5 	bl	80023f0 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d907      	bls.n	8003260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e150      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
 8003254:	40023800 	.word	0x40023800
 8003258:	42470000 	.word	0x42470000
 800325c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003260:	4b88      	ldr	r3, [pc, #544]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 8003262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1ea      	bne.n	8003242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8097 	beq.w	80033a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327e:	4b81      	ldr	r3, [pc, #516]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10f      	bne.n	80032aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	4b7d      	ldr	r3, [pc, #500]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	4a7c      	ldr	r2, [pc, #496]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 8003294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003298:	6413      	str	r3, [r2, #64]	@ 0x40
 800329a:	4b7a      	ldr	r3, [pc, #488]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a6:	2301      	movs	r3, #1
 80032a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	4b77      	ldr	r3, [pc, #476]	@ (8003488 <HAL_RCC_OscConfig+0x474>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d118      	bne.n	80032e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b6:	4b74      	ldr	r3, [pc, #464]	@ (8003488 <HAL_RCC_OscConfig+0x474>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a73      	ldr	r2, [pc, #460]	@ (8003488 <HAL_RCC_OscConfig+0x474>)
 80032bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c2:	f7ff f895 	bl	80023f0 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ca:	f7ff f891 	bl	80023f0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e10c      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003488 <HAL_RCC_OscConfig+0x474>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d106      	bne.n	80032fe <HAL_RCC_OscConfig+0x2ea>
 80032f0:	4b64      	ldr	r3, [pc, #400]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f4:	4a63      	ldr	r2, [pc, #396]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fc:	e01c      	b.n	8003338 <HAL_RCC_OscConfig+0x324>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b05      	cmp	r3, #5
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0x30c>
 8003306:	4b5f      	ldr	r3, [pc, #380]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330a:	4a5e      	ldr	r2, [pc, #376]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 800330c:	f043 0304 	orr.w	r3, r3, #4
 8003310:	6713      	str	r3, [r2, #112]	@ 0x70
 8003312:	4b5c      	ldr	r3, [pc, #368]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003316:	4a5b      	ldr	r2, [pc, #364]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6713      	str	r3, [r2, #112]	@ 0x70
 800331e:	e00b      	b.n	8003338 <HAL_RCC_OscConfig+0x324>
 8003320:	4b58      	ldr	r3, [pc, #352]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003324:	4a57      	ldr	r2, [pc, #348]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	6713      	str	r3, [r2, #112]	@ 0x70
 800332c:	4b55      	ldr	r3, [pc, #340]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003330:	4a54      	ldr	r2, [pc, #336]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 8003332:	f023 0304 	bic.w	r3, r3, #4
 8003336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d015      	beq.n	800336c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7ff f856 	bl	80023f0 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003346:	e00a      	b.n	800335e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003348:	f7ff f852 	bl	80023f0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e0cb      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335e:	4b49      	ldr	r3, [pc, #292]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0ee      	beq.n	8003348 <HAL_RCC_OscConfig+0x334>
 800336a:	e014      	b.n	8003396 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336c:	f7ff f840 	bl	80023f0 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003372:	e00a      	b.n	800338a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003374:	f7ff f83c 	bl	80023f0 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e0b5      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338a:	4b3e      	ldr	r3, [pc, #248]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1ee      	bne.n	8003374 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d105      	bne.n	80033a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339c:	4b39      	ldr	r3, [pc, #228]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	4a38      	ldr	r2, [pc, #224]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 80033a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80a1 	beq.w	80034f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b2:	4b34      	ldr	r3, [pc, #208]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d05c      	beq.n	8003478 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d141      	bne.n	800344a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c6:	4b31      	ldr	r3, [pc, #196]	@ (800348c <HAL_RCC_OscConfig+0x478>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7ff f810 	bl	80023f0 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d4:	f7ff f80c 	bl	80023f0 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e087      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	4b27      	ldr	r3, [pc, #156]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69da      	ldr	r2, [r3, #28]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	019b      	lsls	r3, r3, #6
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	3b01      	subs	r3, #1
 800340c:	041b      	lsls	r3, r3, #16
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003414:	061b      	lsls	r3, r3, #24
 8003416:	491b      	ldr	r1, [pc, #108]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800341c:	4b1b      	ldr	r3, [pc, #108]	@ (800348c <HAL_RCC_OscConfig+0x478>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003422:	f7fe ffe5 	bl	80023f0 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342a:	f7fe ffe1 	bl	80023f0 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e05c      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343c:	4b11      	ldr	r3, [pc, #68]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x416>
 8003448:	e054      	b.n	80034f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b10      	ldr	r3, [pc, #64]	@ (800348c <HAL_RCC_OscConfig+0x478>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe ffce 	bl	80023f0 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003458:	f7fe ffca 	bl	80023f0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e045      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <HAL_RCC_OscConfig+0x470>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x444>
 8003476:	e03d      	b.n	80034f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d107      	bne.n	8003490 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e038      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
 8003484:	40023800 	.word	0x40023800
 8003488:	40007000 	.word	0x40007000
 800348c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003490:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <HAL_RCC_OscConfig+0x4ec>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d028      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d121      	bne.n	80034f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d11a      	bne.n	80034f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034c0:	4013      	ands	r3, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d111      	bne.n	80034f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	3b01      	subs	r3, #1
 80034da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d107      	bne.n	80034f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800

08003504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0cc      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003518:	4b68      	ldr	r3, [pc, #416]	@ (80036bc <HAL_RCC_ClockConfig+0x1b8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d90c      	bls.n	8003540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b65      	ldr	r3, [pc, #404]	@ (80036bc <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b63      	ldr	r3, [pc, #396]	@ (80036bc <HAL_RCC_ClockConfig+0x1b8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0b8      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d020      	beq.n	800358e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003558:	4b59      	ldr	r3, [pc, #356]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4a58      	ldr	r2, [pc, #352]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003562:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003570:	4b53      	ldr	r3, [pc, #332]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4a52      	ldr	r2, [pc, #328]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800357a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800357c:	4b50      	ldr	r3, [pc, #320]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	494d      	ldr	r1, [pc, #308]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d044      	beq.n	8003624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	4b47      	ldr	r3, [pc, #284]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d119      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e07f      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d003      	beq.n	80035c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d107      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c2:	4b3f      	ldr	r3, [pc, #252]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e06f      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d2:	4b3b      	ldr	r3, [pc, #236]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e067      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e2:	4b37      	ldr	r3, [pc, #220]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f023 0203 	bic.w	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4934      	ldr	r1, [pc, #208]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f4:	f7fe fefc 	bl	80023f0 <HAL_GetTick>
 80035f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035fc:	f7fe fef8 	bl	80023f0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e04f      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	4b2b      	ldr	r3, [pc, #172]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 020c 	and.w	r2, r3, #12
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	429a      	cmp	r2, r3
 8003622:	d1eb      	bne.n	80035fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003624:	4b25      	ldr	r3, [pc, #148]	@ (80036bc <HAL_RCC_ClockConfig+0x1b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d20c      	bcs.n	800364c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b22      	ldr	r3, [pc, #136]	@ (80036bc <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b20      	ldr	r3, [pc, #128]	@ (80036bc <HAL_RCC_ClockConfig+0x1b8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e032      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003658:	4b19      	ldr	r3, [pc, #100]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4916      	ldr	r1, [pc, #88]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003676:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	490e      	ldr	r1, [pc, #56]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	4313      	orrs	r3, r2
 8003688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368a:	f000 f821 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 800368e:	4602      	mov	r2, r0
 8003690:	4b0b      	ldr	r3, [pc, #44]	@ (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	490a      	ldr	r1, [pc, #40]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	5ccb      	ldrb	r3, [r1, r3]
 800369e:	fa22 f303 	lsr.w	r3, r2, r3
 80036a2:	4a09      	ldr	r2, [pc, #36]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036a6:	4b09      	ldr	r3, [pc, #36]	@ (80036cc <HAL_RCC_ClockConfig+0x1c8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe fcdc 	bl	8002068 <HAL_InitTick>

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023c00 	.word	0x40023c00
 80036c0:	40023800 	.word	0x40023800
 80036c4:	080090cc 	.word	0x080090cc
 80036c8:	20000004 	.word	0x20000004
 80036cc:	20000008 	.word	0x20000008

080036d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d4:	b090      	sub	sp, #64	@ 0x40
 80036d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e8:	4b59      	ldr	r3, [pc, #356]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d00d      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x40>
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	f200 80a1 	bhi.w	800383c <HAL_RCC_GetSysClockFreq+0x16c>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x34>
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d003      	beq.n	800370a <HAL_RCC_GetSysClockFreq+0x3a>
 8003702:	e09b      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003704:	4b53      	ldr	r3, [pc, #332]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x184>)
 8003706:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003708:	e09b      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800370a:	4b53      	ldr	r3, [pc, #332]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x188>)
 800370c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800370e:	e098      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003710:	4b4f      	ldr	r3, [pc, #316]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x180>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003718:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800371a:	4b4d      	ldr	r3, [pc, #308]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x180>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d028      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003726:	4b4a      	ldr	r3, [pc, #296]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x180>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	099b      	lsrs	r3, r3, #6
 800372c:	2200      	movs	r2, #0
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	627a      	str	r2, [r7, #36]	@ 0x24
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003738:	2100      	movs	r1, #0
 800373a:	4b47      	ldr	r3, [pc, #284]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x188>)
 800373c:	fb03 f201 	mul.w	r2, r3, r1
 8003740:	2300      	movs	r3, #0
 8003742:	fb00 f303 	mul.w	r3, r0, r3
 8003746:	4413      	add	r3, r2
 8003748:	4a43      	ldr	r2, [pc, #268]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x188>)
 800374a:	fba0 1202 	umull	r1, r2, r0, r2
 800374e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003750:	460a      	mov	r2, r1
 8003752:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003756:	4413      	add	r3, r2
 8003758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800375a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375c:	2200      	movs	r2, #0
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	61fa      	str	r2, [r7, #28]
 8003762:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003766:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800376a:	f7fd f96f 	bl	8000a4c <__aeabi_uldivmod>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4613      	mov	r3, r2
 8003774:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003776:	e053      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003778:	4b35      	ldr	r3, [pc, #212]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x180>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	099b      	lsrs	r3, r3, #6
 800377e:	2200      	movs	r2, #0
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	617a      	str	r2, [r7, #20]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800378a:	f04f 0b00 	mov.w	fp, #0
 800378e:	4652      	mov	r2, sl
 8003790:	465b      	mov	r3, fp
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	0159      	lsls	r1, r3, #5
 800379c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a0:	0150      	lsls	r0, r2, #5
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	ebb2 080a 	subs.w	r8, r2, sl
 80037aa:	eb63 090b 	sbc.w	r9, r3, fp
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037c2:	ebb2 0408 	subs.w	r4, r2, r8
 80037c6:	eb63 0509 	sbc.w	r5, r3, r9
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	00eb      	lsls	r3, r5, #3
 80037d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d8:	00e2      	lsls	r2, r4, #3
 80037da:	4614      	mov	r4, r2
 80037dc:	461d      	mov	r5, r3
 80037de:	eb14 030a 	adds.w	r3, r4, sl
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	eb45 030b 	adc.w	r3, r5, fp
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037f6:	4629      	mov	r1, r5
 80037f8:	028b      	lsls	r3, r1, #10
 80037fa:	4621      	mov	r1, r4
 80037fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003800:	4621      	mov	r1, r4
 8003802:	028a      	lsls	r2, r1, #10
 8003804:	4610      	mov	r0, r2
 8003806:	4619      	mov	r1, r3
 8003808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380a:	2200      	movs	r2, #0
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	60fa      	str	r2, [r7, #12]
 8003810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003814:	f7fd f91a 	bl	8000a4c <__aeabi_uldivmod>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4613      	mov	r3, r2
 800381e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x180>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	3301      	adds	r3, #1
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003830:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003834:	fbb2 f3f3 	udiv	r3, r2, r3
 8003838:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800383a:	e002      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800383c:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x184>)
 800383e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003844:	4618      	mov	r0, r3
 8003846:	3740      	adds	r7, #64	@ 0x40
 8003848:	46bd      	mov	sp, r7
 800384a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	00f42400 	.word	0x00f42400
 8003858:	00b71b00 	.word	0x00b71b00

0800385c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b03      	ldr	r3, [pc, #12]	@ (8003870 <HAL_RCC_GetHCLKFreq+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000004 	.word	0x20000004

08003874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003878:	f7ff fff0 	bl	800385c <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0a9b      	lsrs	r3, r3, #10
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4903      	ldr	r1, [pc, #12]	@ (8003898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003890:	4618      	mov	r0, r3
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40023800 	.word	0x40023800
 8003898:	080090dc 	.word	0x080090dc

0800389c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038a0:	f7ff ffdc 	bl	800385c <HAL_RCC_GetHCLKFreq>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	0b5b      	lsrs	r3, r3, #13
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4903      	ldr	r1, [pc, #12]	@ (80038c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b2:	5ccb      	ldrb	r3, [r1, r3]
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40023800 	.word	0x40023800
 80038c0:	080090dc 	.word	0x080090dc

080038c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	220f      	movs	r2, #15
 80038d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038d4:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <HAL_RCC_GetClockConfig+0x5c>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0203 	and.w	r2, r3, #3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003920 <HAL_RCC_GetClockConfig+0x5c>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <HAL_RCC_GetClockConfig+0x5c>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038f8:	4b09      	ldr	r3, [pc, #36]	@ (8003920 <HAL_RCC_GetClockConfig+0x5c>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	08db      	lsrs	r3, r3, #3
 80038fe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003906:	4b07      	ldr	r3, [pc, #28]	@ (8003924 <HAL_RCC_GetClockConfig+0x60>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0207 	and.w	r2, r3, #7
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	601a      	str	r2, [r3, #0]
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
 8003924:	40023c00 	.word	0x40023c00

08003928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e041      	b.n	80039be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f839 	bl	80039c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f000 fde6 	bl	8004538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d001      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e04e      	b.n	8003a92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a23      	ldr	r2, [pc, #140]	@ (8003aa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d022      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x80>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a1e:	d01d      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x80>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d018      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x80>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d013      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x80>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1c      	ldr	r2, [pc, #112]	@ (8003aac <HAL_TIM_Base_Start_IT+0xd0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00e      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x80>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d009      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x80>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a19      	ldr	r2, [pc, #100]	@ (8003ab4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x80>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a18      	ldr	r2, [pc, #96]	@ (8003ab8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d111      	bne.n	8003a80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b06      	cmp	r3, #6
 8003a6c:	d010      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7e:	e007      	b.n	8003a90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40000c00 	.word	0x40000c00
 8003ab0:	40010400 	.word	0x40010400
 8003ab4:	40014000 	.word	0x40014000
 8003ab8:	40001800 	.word	0x40001800

08003abc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e041      	b.n	8003b52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fe f92e 	bl	8001d44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f000 fd1c 	bl	8004538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	6839      	ldr	r1, [r7, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 ff38 	bl	80049e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a2e      	ldr	r2, [pc, #184]	@ (8003c34 <HAL_TIM_PWM_Stop+0xd8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_TIM_PWM_Stop+0x2c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2d      	ldr	r2, [pc, #180]	@ (8003c38 <HAL_TIM_PWM_Stop+0xdc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d101      	bne.n	8003b8c <HAL_TIM_PWM_Stop+0x30>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <HAL_TIM_PWM_Stop+0x32>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d017      	beq.n	8003bc2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a1a      	ldr	r2, [r3, #32]
 8003b98:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_TIM_PWM_Stop+0x66>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	f240 4344 	movw	r3, #1092	@ 0x444
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_PWM_Stop+0x66>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10f      	bne.n	8003bf2 <HAL_TIM_PWM_Stop+0x96>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6a1a      	ldr	r2, [r3, #32]
 8003bd8:	f240 4344 	movw	r3, #1092	@ 0x444
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d107      	bne.n	8003bf2 <HAL_TIM_PWM_Stop+0x96>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d104      	bne.n	8003c02 <HAL_TIM_PWM_Stop+0xa6>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c00:	e013      	b.n	8003c2a <HAL_TIM_PWM_Stop+0xce>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d104      	bne.n	8003c12 <HAL_TIM_PWM_Stop+0xb6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c10:	e00b      	b.n	8003c2a <HAL_TIM_PWM_Stop+0xce>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d104      	bne.n	8003c22 <HAL_TIM_PWM_Stop+0xc6>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c20:	e003      	b.n	8003c2a <HAL_TIM_PWM_Stop+0xce>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40010000 	.word	0x40010000
 8003c38:	40010400 	.word	0x40010400

08003c3c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	bf0c      	ite	eq
 8003c60:	2301      	moveq	r3, #1
 8003c62:	2300      	movne	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e022      	b.n	8003cae <HAL_TIM_PWM_Start_DMA+0x72>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d109      	bne.n	8003c82 <HAL_TIM_PWM_Start_DMA+0x46>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	bf0c      	ite	eq
 8003c7a:	2301      	moveq	r3, #1
 8003c7c:	2300      	movne	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	e015      	b.n	8003cae <HAL_TIM_PWM_Start_DMA+0x72>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d109      	bne.n	8003c9c <HAL_TIM_PWM_Start_DMA+0x60>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	e008      	b.n	8003cae <HAL_TIM_PWM_Start_DMA+0x72>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e171      	b.n	8003f9a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <HAL_TIM_PWM_Start_DMA+0x94>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e022      	b.n	8003d16 <HAL_TIM_PWM_Start_DMA+0xda>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d109      	bne.n	8003cea <HAL_TIM_PWM_Start_DMA+0xae>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	e015      	b.n	8003d16 <HAL_TIM_PWM_Start_DMA+0xda>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d109      	bne.n	8003d04 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	e008      	b.n	8003d16 <HAL_TIM_PWM_Start_DMA+0xda>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d024      	beq.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <HAL_TIM_PWM_Start_DMA+0xea>
 8003d20:	887b      	ldrh	r3, [r7, #2]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e137      	b.n	8003f9a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <HAL_TIM_PWM_Start_DMA+0xfe>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d38:	e016      	b.n	8003d68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_PWM_Start_DMA+0x10e>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d48:	e00e      	b.n	8003d68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d104      	bne.n	8003d5a <HAL_TIM_PWM_Start_DMA+0x11e>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d58:	e006      	b.n	8003d68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d62:	e001      	b.n	8003d68 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e118      	b.n	8003f9a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	f200 80ae 	bhi.w	8003ecc <HAL_TIM_PWM_Start_DMA+0x290>
 8003d70:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003dad 	.word	0x08003dad
 8003d7c:	08003ecd 	.word	0x08003ecd
 8003d80:	08003ecd 	.word	0x08003ecd
 8003d84:	08003ecd 	.word	0x08003ecd
 8003d88:	08003df5 	.word	0x08003df5
 8003d8c:	08003ecd 	.word	0x08003ecd
 8003d90:	08003ecd 	.word	0x08003ecd
 8003d94:	08003ecd 	.word	0x08003ecd
 8003d98:	08003e3d 	.word	0x08003e3d
 8003d9c:	08003ecd 	.word	0x08003ecd
 8003da0:	08003ecd 	.word	0x08003ecd
 8003da4:	08003ecd 	.word	0x08003ecd
 8003da8:	08003e85 	.word	0x08003e85
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	4a7c      	ldr	r2, [pc, #496]	@ (8003fa4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003db2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	4a7b      	ldr	r2, [pc, #492]	@ (8003fa8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	4a7a      	ldr	r2, [pc, #488]	@ (8003fac <HAL_TIM_PWM_Start_DMA+0x370>)
 8003dc2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3334      	adds	r3, #52	@ 0x34
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	f7fe fca8 	bl	8002728 <HAL_DMA_Start_IT>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0db      	b.n	8003f9a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df0:	60da      	str	r2, [r3, #12]
      break;
 8003df2:	e06e      	b.n	8003ed2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df8:	4a6a      	ldr	r2, [pc, #424]	@ (8003fa4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e00:	4a69      	ldr	r2, [pc, #420]	@ (8003fa8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003e02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	4a68      	ldr	r2, [pc, #416]	@ (8003fac <HAL_TIM_PWM_Start_DMA+0x370>)
 8003e0a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3338      	adds	r3, #56	@ 0x38
 8003e18:	461a      	mov	r2, r3
 8003e1a:	887b      	ldrh	r3, [r7, #2]
 8003e1c:	f7fe fc84 	bl	8002728 <HAL_DMA_Start_IT>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0b7      	b.n	8003f9a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e38:	60da      	str	r2, [r3, #12]
      break;
 8003e3a:	e04a      	b.n	8003ed2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	4a58      	ldr	r2, [pc, #352]	@ (8003fa4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003e42:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	4a57      	ldr	r2, [pc, #348]	@ (8003fa8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003e4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	4a56      	ldr	r2, [pc, #344]	@ (8003fac <HAL_TIM_PWM_Start_DMA+0x370>)
 8003e52:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	333c      	adds	r3, #60	@ 0x3c
 8003e60:	461a      	mov	r2, r3
 8003e62:	887b      	ldrh	r3, [r7, #2]
 8003e64:	f7fe fc60 	bl	8002728 <HAL_DMA_Start_IT>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e093      	b.n	8003f9a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e80:	60da      	str	r2, [r3, #12]
      break;
 8003e82:	e026      	b.n	8003ed2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	4a46      	ldr	r2, [pc, #280]	@ (8003fa4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	4a45      	ldr	r2, [pc, #276]	@ (8003fa8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003e92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e98:	4a44      	ldr	r2, [pc, #272]	@ (8003fac <HAL_TIM_PWM_Start_DMA+0x370>)
 8003e9a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3340      	adds	r3, #64	@ 0x40
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	f7fe fc3c 	bl	8002728 <HAL_DMA_Start_IT>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e06f      	b.n	8003f9a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ec8:	60da      	str	r2, [r3, #12]
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d15f      	bne.n	8003f98 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2201      	movs	r2, #1
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fd7f 	bl	80049e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a31      	ldr	r2, [pc, #196]	@ (8003fb0 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d004      	beq.n	8003efa <HAL_TIM_PWM_Start_DMA+0x2be>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d101      	bne.n	8003efe <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003efe:	2300      	movs	r3, #0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f12:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a25      	ldr	r2, [pc, #148]	@ (8003fb0 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d022      	beq.n	8003f64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f26:	d01d      	beq.n	8003f64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a22      	ldr	r2, [pc, #136]	@ (8003fb8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d018      	beq.n	8003f64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a21      	ldr	r2, [pc, #132]	@ (8003fbc <HAL_TIM_PWM_Start_DMA+0x380>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d013      	beq.n	8003f64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00e      	beq.n	8003f64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8003fb4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d009      	beq.n	8003f64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <HAL_TIM_PWM_Start_DMA+0x328>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d111      	bne.n	8003f88 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	2b06      	cmp	r3, #6
 8003f74:	d010      	beq.n	8003f98 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f86:	e007      	b.n	8003f98 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	08004427 	.word	0x08004427
 8003fa8:	080044cf 	.word	0x080044cf
 8003fac:	08004395 	.word	0x08004395
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40010400 	.word	0x40010400
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40001800 	.word	0x40001800

08003fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d020      	beq.n	8004030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0202 	mvn.w	r2, #2
 8004000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f994 	bl	8004344 <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f986 	bl	8004330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fd fb67 	bl	80016f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d020      	beq.n	800407c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0204 	mvn.w	r2, #4
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2202      	movs	r2, #2
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f96e 	bl	8004344 <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f960 	bl	8004330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7fd fb41 	bl	80016f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d020      	beq.n	80040c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01b      	beq.n	80040c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0208 	mvn.w	r2, #8
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2204      	movs	r2, #4
 800409e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f948 	bl	8004344 <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f93a 	bl	8004330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7fd fb1b 	bl	80016f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d020      	beq.n	8004114 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01b      	beq.n	8004114 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0210 	mvn.w	r2, #16
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2208      	movs	r2, #8
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f922 	bl	8004344 <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f914 	bl	8004330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7fd faf5 	bl	80016f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00c      	beq.n	8004138 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0201 	mvn.w	r2, #1
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fd fdc2 	bl	8001cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00c      	beq.n	800415c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fcf0 	bl	8004b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00c      	beq.n	8004180 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f8f6 	bl	800436c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00c      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0220 	mvn.w	r2, #32
 800419c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fcc2 	bl	8004b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e0ae      	b.n	8004328 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b0c      	cmp	r3, #12
 80041d6:	f200 809f 	bhi.w	8004318 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041da:	a201      	add	r2, pc, #4	@ (adr r2, 80041e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	08004215 	.word	0x08004215
 80041e4:	08004319 	.word	0x08004319
 80041e8:	08004319 	.word	0x08004319
 80041ec:	08004319 	.word	0x08004319
 80041f0:	08004255 	.word	0x08004255
 80041f4:	08004319 	.word	0x08004319
 80041f8:	08004319 	.word	0x08004319
 80041fc:	08004319 	.word	0x08004319
 8004200:	08004297 	.word	0x08004297
 8004204:	08004319 	.word	0x08004319
 8004208:	08004319 	.word	0x08004319
 800420c:	08004319 	.word	0x08004319
 8004210:	080042d7 	.word	0x080042d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fa32 	bl	8004684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0208 	orr.w	r2, r2, #8
 800422e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0204 	bic.w	r2, r2, #4
 800423e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6999      	ldr	r1, [r3, #24]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	619a      	str	r2, [r3, #24]
      break;
 8004252:	e064      	b.n	800431e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fa82 	bl	8004764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800426e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800427e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6999      	ldr	r1, [r3, #24]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	021a      	lsls	r2, r3, #8
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	619a      	str	r2, [r3, #24]
      break;
 8004294:	e043      	b.n	800431e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fad7 	bl	8004850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0208 	orr.w	r2, r2, #8
 80042b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0204 	bic.w	r2, r2, #4
 80042c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69d9      	ldr	r1, [r3, #28]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	61da      	str	r2, [r3, #28]
      break;
 80042d4:	e023      	b.n	800431e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68b9      	ldr	r1, [r7, #8]
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fb2b 	bl	8004938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69d9      	ldr	r1, [r3, #28]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	021a      	lsls	r2, r3, #8
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	61da      	str	r2, [r3, #28]
      break;
 8004316:	e002      	b.n	800431e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	75fb      	strb	r3, [r7, #23]
      break;
 800431c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004326:	7dfb      	ldrb	r3, [r7, #23]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d107      	bne.n	80043bc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ba:	e02a      	b.n	8004412 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d107      	bne.n	80043d6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2202      	movs	r2, #2
 80043ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043d4:	e01d      	b.n	8004412 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d107      	bne.n	80043f0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2204      	movs	r2, #4
 80043e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ee:	e010      	b.n	8004412 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d107      	bne.n	800440a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2208      	movs	r2, #8
 80043fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004408:	e003      	b.n	8004412 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7ff ffb4 	bl	8004380 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	771a      	strb	r2, [r3, #28]
}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004432:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	429a      	cmp	r2, r3
 800443c:	d10b      	bne.n	8004456 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d136      	bne.n	80044ba <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004454:	e031      	b.n	80044ba <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	429a      	cmp	r2, r3
 800445e:	d10b      	bne.n	8004478 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2202      	movs	r2, #2
 8004464:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d125      	bne.n	80044ba <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004476:	e020      	b.n	80044ba <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	429a      	cmp	r2, r3
 8004480:	d10b      	bne.n	800449a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2204      	movs	r2, #4
 8004486:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d114      	bne.n	80044ba <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004498:	e00f      	b.n	80044ba <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d10a      	bne.n	80044ba <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2208      	movs	r2, #8
 80044a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7fd f91c 	bl	80016f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	771a      	strb	r2, [r3, #28]
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d103      	bne.n	80044ee <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	771a      	strb	r2, [r3, #28]
 80044ec:	e019      	b.n	8004522 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d103      	bne.n	8004500 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2202      	movs	r2, #2
 80044fc:	771a      	strb	r2, [r3, #28]
 80044fe:	e010      	b.n	8004522 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	429a      	cmp	r2, r3
 8004508:	d103      	bne.n	8004512 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2204      	movs	r2, #4
 800450e:	771a      	strb	r2, [r3, #28]
 8004510:	e007      	b.n	8004522 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	429a      	cmp	r2, r3
 800451a:	d102      	bne.n	8004522 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2208      	movs	r2, #8
 8004520:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff ff18 	bl	8004358 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	771a      	strb	r2, [r3, #28]
}
 800452e:	bf00      	nop
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a43      	ldr	r2, [pc, #268]	@ (8004658 <TIM_Base_SetConfig+0x120>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d013      	beq.n	8004578 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004556:	d00f      	beq.n	8004578 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a40      	ldr	r2, [pc, #256]	@ (800465c <TIM_Base_SetConfig+0x124>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00b      	beq.n	8004578 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a3f      	ldr	r2, [pc, #252]	@ (8004660 <TIM_Base_SetConfig+0x128>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a3e      	ldr	r2, [pc, #248]	@ (8004664 <TIM_Base_SetConfig+0x12c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0x40>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a3d      	ldr	r2, [pc, #244]	@ (8004668 <TIM_Base_SetConfig+0x130>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d108      	bne.n	800458a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a32      	ldr	r2, [pc, #200]	@ (8004658 <TIM_Base_SetConfig+0x120>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d02b      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004598:	d027      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2f      	ldr	r2, [pc, #188]	@ (800465c <TIM_Base_SetConfig+0x124>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d023      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004660 <TIM_Base_SetConfig+0x128>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01f      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004664 <TIM_Base_SetConfig+0x12c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01b      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004668 <TIM_Base_SetConfig+0x130>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d017      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2b      	ldr	r2, [pc, #172]	@ (800466c <TIM_Base_SetConfig+0x134>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004670 <TIM_Base_SetConfig+0x138>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00f      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a29      	ldr	r2, [pc, #164]	@ (8004674 <TIM_Base_SetConfig+0x13c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00b      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a28      	ldr	r2, [pc, #160]	@ (8004678 <TIM_Base_SetConfig+0x140>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a27      	ldr	r2, [pc, #156]	@ (800467c <TIM_Base_SetConfig+0x144>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a26      	ldr	r2, [pc, #152]	@ (8004680 <TIM_Base_SetConfig+0x148>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d108      	bne.n	80045fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a0e      	ldr	r2, [pc, #56]	@ (8004658 <TIM_Base_SetConfig+0x120>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <TIM_Base_SetConfig+0xf2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a10      	ldr	r2, [pc, #64]	@ (8004668 <TIM_Base_SetConfig+0x130>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d103      	bne.n	8004632 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f043 0204 	orr.w	r2, r3, #4
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	601a      	str	r2, [r3, #0]
}
 800464a:	bf00      	nop
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010000 	.word	0x40010000
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40010400 	.word	0x40010400
 800466c:	40014000 	.word	0x40014000
 8004670:	40014400 	.word	0x40014400
 8004674:	40014800 	.word	0x40014800
 8004678:	40001800 	.word	0x40001800
 800467c:	40001c00 	.word	0x40001c00
 8004680:	40002000 	.word	0x40002000

08004684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f023 0201 	bic.w	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0303 	bic.w	r3, r3, #3
 80046ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f023 0302 	bic.w	r3, r3, #2
 80046cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a20      	ldr	r2, [pc, #128]	@ (800475c <TIM_OC1_SetConfig+0xd8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_OC1_SetConfig+0x64>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004760 <TIM_OC1_SetConfig+0xdc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d10c      	bne.n	8004702 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f023 0308 	bic.w	r3, r3, #8
 80046ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f023 0304 	bic.w	r3, r3, #4
 8004700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a15      	ldr	r2, [pc, #84]	@ (800475c <TIM_OC1_SetConfig+0xd8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d003      	beq.n	8004712 <TIM_OC1_SetConfig+0x8e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a14      	ldr	r2, [pc, #80]	@ (8004760 <TIM_OC1_SetConfig+0xdc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d111      	bne.n	8004736 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	621a      	str	r2, [r3, #32]
}
 8004750:	bf00      	nop
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40010000 	.word	0x40010000
 8004760:	40010400 	.word	0x40010400

08004764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f023 0210 	bic.w	r2, r3, #16
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800479a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0320 	bic.w	r3, r3, #32
 80047ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a22      	ldr	r2, [pc, #136]	@ (8004848 <TIM_OC2_SetConfig+0xe4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_OC2_SetConfig+0x68>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a21      	ldr	r2, [pc, #132]	@ (800484c <TIM_OC2_SetConfig+0xe8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d10d      	bne.n	80047e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a17      	ldr	r2, [pc, #92]	@ (8004848 <TIM_OC2_SetConfig+0xe4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_OC2_SetConfig+0x94>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a16      	ldr	r2, [pc, #88]	@ (800484c <TIM_OC2_SetConfig+0xe8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d113      	bne.n	8004820 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000
 800484c:	40010400 	.word	0x40010400

08004850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a21      	ldr	r2, [pc, #132]	@ (8004930 <TIM_OC3_SetConfig+0xe0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d003      	beq.n	80048b6 <TIM_OC3_SetConfig+0x66>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a20      	ldr	r2, [pc, #128]	@ (8004934 <TIM_OC3_SetConfig+0xe4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d10d      	bne.n	80048d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a16      	ldr	r2, [pc, #88]	@ (8004930 <TIM_OC3_SetConfig+0xe0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d003      	beq.n	80048e2 <TIM_OC3_SetConfig+0x92>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a15      	ldr	r2, [pc, #84]	@ (8004934 <TIM_OC3_SetConfig+0xe4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d113      	bne.n	800490a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	621a      	str	r2, [r3, #32]
}
 8004924:	bf00      	nop
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	40010000 	.word	0x40010000
 8004934:	40010400 	.word	0x40010400

08004938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800496e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	031b      	lsls	r3, r3, #12
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a12      	ldr	r2, [pc, #72]	@ (80049dc <TIM_OC4_SetConfig+0xa4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_OC4_SetConfig+0x68>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a11      	ldr	r2, [pc, #68]	@ (80049e0 <TIM_OC4_SetConfig+0xa8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d109      	bne.n	80049b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	019b      	lsls	r3, r3, #6
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40010400 	.word	0x40010400

080049e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	2201      	movs	r2, #1
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a1a      	ldr	r2, [r3, #32]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	401a      	ands	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a1a      	ldr	r2, [r3, #32]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e05a      	b.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a21      	ldr	r2, [pc, #132]	@ (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d022      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a94:	d01d      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d018      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1a      	ldr	r2, [pc, #104]	@ (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a18      	ldr	r2, [pc, #96]	@ (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d009      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a17      	ldr	r2, [pc, #92]	@ (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a15      	ldr	r2, [pc, #84]	@ (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d10c      	bne.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40010000 	.word	0x40010000
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40000800 	.word	0x40000800
 8004b18:	40000c00 	.word	0x40000c00
 8004b1c:	40010400 	.word	0x40010400
 8004b20:	40014000 	.word	0x40014000
 8004b24:	40001800 	.word	0x40001800

08004b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e042      	b.n	8004be8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fd fa2e 	bl	8001fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	@ 0x24
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f82b 	bl	8004bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf4:	b0c0      	sub	sp, #256	@ 0x100
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	68d9      	ldr	r1, [r3, #12]
 8004c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	ea40 0301 	orr.w	r3, r0, r1
 8004c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c48:	f021 010c 	bic.w	r1, r1, #12
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c56:	430b      	orrs	r3, r1
 8004c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6a:	6999      	ldr	r1, [r3, #24]
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	ea40 0301 	orr.w	r3, r0, r1
 8004c76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b8f      	ldr	r3, [pc, #572]	@ (8004ebc <UART_SetConfig+0x2cc>)
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d005      	beq.n	8004c90 <UART_SetConfig+0xa0>
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8004ec0 <UART_SetConfig+0x2d0>)
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d104      	bne.n	8004c9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c90:	f7fe fe04 	bl	800389c <HAL_RCC_GetPCLK2Freq>
 8004c94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c98:	e003      	b.n	8004ca2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c9a:	f7fe fdeb 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8004c9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cac:	f040 810c 	bne.w	8004ec8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	1891      	adds	r1, r2, r2
 8004cc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004cca:	415b      	adcs	r3, r3
 8004ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	eb12 0801 	adds.w	r8, r2, r1
 8004cd8:	4629      	mov	r1, r5
 8004cda:	eb43 0901 	adc.w	r9, r3, r1
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cf2:	4690      	mov	r8, r2
 8004cf4:	4699      	mov	r9, r3
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	eb18 0303 	adds.w	r3, r8, r3
 8004cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d00:	462b      	mov	r3, r5
 8004d02:	eb49 0303 	adc.w	r3, r9, r3
 8004d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d1e:	460b      	mov	r3, r1
 8004d20:	18db      	adds	r3, r3, r3
 8004d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d24:	4613      	mov	r3, r2
 8004d26:	eb42 0303 	adc.w	r3, r2, r3
 8004d2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d34:	f7fb fe8a 	bl	8000a4c <__aeabi_uldivmod>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4b61      	ldr	r3, [pc, #388]	@ (8004ec4 <UART_SetConfig+0x2d4>)
 8004d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	011c      	lsls	r4, r3, #4
 8004d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d58:	4642      	mov	r2, r8
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	1891      	adds	r1, r2, r2
 8004d5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d60:	415b      	adcs	r3, r3
 8004d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d68:	4641      	mov	r1, r8
 8004d6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d6e:	4649      	mov	r1, r9
 8004d70:	eb43 0b01 	adc.w	fp, r3, r1
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d88:	4692      	mov	sl, r2
 8004d8a:	469b      	mov	fp, r3
 8004d8c:	4643      	mov	r3, r8
 8004d8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d96:	464b      	mov	r3, r9
 8004d98:	eb4b 0303 	adc.w	r3, fp, r3
 8004d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004db0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004db4:	460b      	mov	r3, r1
 8004db6:	18db      	adds	r3, r3, r3
 8004db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dba:	4613      	mov	r3, r2
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004dc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004dca:	f7fb fe3f 	bl	8000a4c <__aeabi_uldivmod>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec4 <UART_SetConfig+0x2d4>)
 8004dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2264      	movs	r2, #100	@ 0x64
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	1acb      	subs	r3, r1, r3
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004dea:	4b36      	ldr	r3, [pc, #216]	@ (8004ec4 <UART_SetConfig+0x2d4>)
 8004dec:	fba3 2302 	umull	r2, r3, r3, r2
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004df8:	441c      	add	r4, r3
 8004dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	1891      	adds	r1, r2, r2
 8004e12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e14:	415b      	adcs	r3, r3
 8004e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	1851      	adds	r1, r2, r1
 8004e20:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e22:	4649      	mov	r1, r9
 8004e24:	414b      	adcs	r3, r1
 8004e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e34:	4659      	mov	r1, fp
 8004e36:	00cb      	lsls	r3, r1, #3
 8004e38:	4651      	mov	r1, sl
 8004e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e3e:	4651      	mov	r1, sl
 8004e40:	00ca      	lsls	r2, r1, #3
 8004e42:	4610      	mov	r0, r2
 8004e44:	4619      	mov	r1, r3
 8004e46:	4603      	mov	r3, r0
 8004e48:	4642      	mov	r2, r8
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e50:	464b      	mov	r3, r9
 8004e52:	460a      	mov	r2, r1
 8004e54:	eb42 0303 	adc.w	r3, r2, r3
 8004e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e70:	460b      	mov	r3, r1
 8004e72:	18db      	adds	r3, r3, r3
 8004e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e76:	4613      	mov	r3, r2
 8004e78:	eb42 0303 	adc.w	r3, r2, r3
 8004e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e86:	f7fb fde1 	bl	8000a4c <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <UART_SetConfig+0x2d4>)
 8004e90:	fba3 1302 	umull	r1, r3, r3, r2
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	2164      	movs	r1, #100	@ 0x64
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	3332      	adds	r3, #50	@ 0x32
 8004ea2:	4a08      	ldr	r2, [pc, #32]	@ (8004ec4 <UART_SetConfig+0x2d4>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	f003 0207 	and.w	r2, r3, #7
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4422      	add	r2, r4
 8004eb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eb8:	e106      	b.n	80050c8 <UART_SetConfig+0x4d8>
 8004eba:	bf00      	nop
 8004ebc:	40011000 	.word	0x40011000
 8004ec0:	40011400 	.word	0x40011400
 8004ec4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ed2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ed6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004eda:	4642      	mov	r2, r8
 8004edc:	464b      	mov	r3, r9
 8004ede:	1891      	adds	r1, r2, r2
 8004ee0:	6239      	str	r1, [r7, #32]
 8004ee2:	415b      	adcs	r3, r3
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eea:	4641      	mov	r1, r8
 8004eec:	1854      	adds	r4, r2, r1
 8004eee:	4649      	mov	r1, r9
 8004ef0:	eb43 0501 	adc.w	r5, r3, r1
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	00eb      	lsls	r3, r5, #3
 8004efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f02:	00e2      	lsls	r2, r4, #3
 8004f04:	4614      	mov	r4, r2
 8004f06:	461d      	mov	r5, r3
 8004f08:	4643      	mov	r3, r8
 8004f0a:	18e3      	adds	r3, r4, r3
 8004f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f10:	464b      	mov	r3, r9
 8004f12:	eb45 0303 	adc.w	r3, r5, r3
 8004f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f36:	4629      	mov	r1, r5
 8004f38:	008b      	lsls	r3, r1, #2
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f40:	4621      	mov	r1, r4
 8004f42:	008a      	lsls	r2, r1, #2
 8004f44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f48:	f7fb fd80 	bl	8000a4c <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4b60      	ldr	r3, [pc, #384]	@ (80050d4 <UART_SetConfig+0x4e4>)
 8004f52:	fba3 2302 	umull	r2, r3, r3, r2
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	011c      	lsls	r4, r3, #4
 8004f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	464b      	mov	r3, r9
 8004f70:	1891      	adds	r1, r2, r2
 8004f72:	61b9      	str	r1, [r7, #24]
 8004f74:	415b      	adcs	r3, r3
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	1851      	adds	r1, r2, r1
 8004f80:	6139      	str	r1, [r7, #16]
 8004f82:	4649      	mov	r1, r9
 8004f84:	414b      	adcs	r3, r1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f94:	4659      	mov	r1, fp
 8004f96:	00cb      	lsls	r3, r1, #3
 8004f98:	4651      	mov	r1, sl
 8004f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f9e:	4651      	mov	r1, sl
 8004fa0:	00ca      	lsls	r2, r1, #3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	4642      	mov	r2, r8
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	460a      	mov	r2, r1
 8004fb4:	eb42 0303 	adc.w	r3, r2, r3
 8004fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	008b      	lsls	r3, r1, #2
 8004fd8:	4641      	mov	r1, r8
 8004fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fde:	4641      	mov	r1, r8
 8004fe0:	008a      	lsls	r2, r1, #2
 8004fe2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fe6:	f7fb fd31 	bl	8000a4c <__aeabi_uldivmod>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	4b38      	ldr	r3, [pc, #224]	@ (80050d4 <UART_SetConfig+0x4e4>)
 8004ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2264      	movs	r2, #100	@ 0x64
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	1acb      	subs	r3, r1, r3
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	3332      	adds	r3, #50	@ 0x32
 8005004:	4a33      	ldr	r2, [pc, #204]	@ (80050d4 <UART_SetConfig+0x4e4>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005010:	441c      	add	r4, r3
 8005012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005016:	2200      	movs	r2, #0
 8005018:	673b      	str	r3, [r7, #112]	@ 0x70
 800501a:	677a      	str	r2, [r7, #116]	@ 0x74
 800501c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005020:	4642      	mov	r2, r8
 8005022:	464b      	mov	r3, r9
 8005024:	1891      	adds	r1, r2, r2
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	415b      	adcs	r3, r3
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005030:	4641      	mov	r1, r8
 8005032:	1851      	adds	r1, r2, r1
 8005034:	6039      	str	r1, [r7, #0]
 8005036:	4649      	mov	r1, r9
 8005038:	414b      	adcs	r3, r1
 800503a:	607b      	str	r3, [r7, #4]
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005048:	4659      	mov	r1, fp
 800504a:	00cb      	lsls	r3, r1, #3
 800504c:	4651      	mov	r1, sl
 800504e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005052:	4651      	mov	r1, sl
 8005054:	00ca      	lsls	r2, r1, #3
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	4603      	mov	r3, r0
 800505c:	4642      	mov	r2, r8
 800505e:	189b      	adds	r3, r3, r2
 8005060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005062:	464b      	mov	r3, r9
 8005064:	460a      	mov	r2, r1
 8005066:	eb42 0303 	adc.w	r3, r2, r3
 800506a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	663b      	str	r3, [r7, #96]	@ 0x60
 8005076:	667a      	str	r2, [r7, #100]	@ 0x64
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005084:	4649      	mov	r1, r9
 8005086:	008b      	lsls	r3, r1, #2
 8005088:	4641      	mov	r1, r8
 800508a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800508e:	4641      	mov	r1, r8
 8005090:	008a      	lsls	r2, r1, #2
 8005092:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005096:	f7fb fcd9 	bl	8000a4c <__aeabi_uldivmod>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4b0d      	ldr	r3, [pc, #52]	@ (80050d4 <UART_SetConfig+0x4e4>)
 80050a0:	fba3 1302 	umull	r1, r3, r3, r2
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	2164      	movs	r1, #100	@ 0x64
 80050a8:	fb01 f303 	mul.w	r3, r1, r3
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	3332      	adds	r3, #50	@ 0x32
 80050b2:	4a08      	ldr	r2, [pc, #32]	@ (80050d4 <UART_SetConfig+0x4e4>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	f003 020f 	and.w	r2, r3, #15
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4422      	add	r2, r4
 80050c6:	609a      	str	r2, [r3, #8]
}
 80050c8:	bf00      	nop
 80050ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050ce:	46bd      	mov	sp, r7
 80050d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d4:	51eb851f 	.word	0x51eb851f

080050d8 <__NVIC_SetPriority>:
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	6039      	str	r1, [r7, #0]
 80050e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	db0a      	blt.n	8005102 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	490c      	ldr	r1, [pc, #48]	@ (8005124 <__NVIC_SetPriority+0x4c>)
 80050f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f6:	0112      	lsls	r2, r2, #4
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	440b      	add	r3, r1
 80050fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005100:	e00a      	b.n	8005118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	b2da      	uxtb	r2, r3
 8005106:	4908      	ldr	r1, [pc, #32]	@ (8005128 <__NVIC_SetPriority+0x50>)
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	3b04      	subs	r3, #4
 8005110:	0112      	lsls	r2, r2, #4
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	440b      	add	r3, r1
 8005116:	761a      	strb	r2, [r3, #24]
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	e000e100 	.word	0xe000e100
 8005128:	e000ed00 	.word	0xe000ed00

0800512c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005130:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <SysTick_Handler+0x1c>)
 8005132:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005134:	f001 fe54 	bl	8006de0 <xTaskGetSchedulerState>
 8005138:	4603      	mov	r3, r0
 800513a:	2b01      	cmp	r3, #1
 800513c:	d001      	beq.n	8005142 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800513e:	f002 fc4b 	bl	80079d8 <xPortSysTickHandler>
  }
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	e000e010 	.word	0xe000e010

0800514c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005150:	2100      	movs	r1, #0
 8005152:	f06f 0004 	mvn.w	r0, #4
 8005156:	f7ff ffbf 	bl	80050d8 <__NVIC_SetPriority>
#endif
}
 800515a:	bf00      	nop
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005166:	f3ef 8305 	mrs	r3, IPSR
 800516a:	603b      	str	r3, [r7, #0]
  return(result);
 800516c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005172:	f06f 0305 	mvn.w	r3, #5
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	e00c      	b.n	8005194 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800517a:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <osKernelInitialize+0x44>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d105      	bne.n	800518e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005182:	4b08      	ldr	r3, [pc, #32]	@ (80051a4 <osKernelInitialize+0x44>)
 8005184:	2201      	movs	r2, #1
 8005186:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005188:	2300      	movs	r3, #0
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	e002      	b.n	8005194 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800518e:	f04f 33ff 	mov.w	r3, #4294967295
 8005192:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005194:	687b      	ldr	r3, [r7, #4]
}
 8005196:	4618      	mov	r0, r3
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000420 	.word	0x20000420

080051a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ae:	f3ef 8305 	mrs	r3, IPSR
 80051b2:	603b      	str	r3, [r7, #0]
  return(result);
 80051b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80051ba:	f06f 0305 	mvn.w	r3, #5
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	e010      	b.n	80051e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80051c2:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <osKernelStart+0x48>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d109      	bne.n	80051de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80051ca:	f7ff ffbf 	bl	800514c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80051ce:	4b08      	ldr	r3, [pc, #32]	@ (80051f0 <osKernelStart+0x48>)
 80051d0:	2202      	movs	r2, #2
 80051d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80051d4:	f001 f9a0 	bl	8006518 <vTaskStartScheduler>
      stat = osOK;
 80051d8:	2300      	movs	r3, #0
 80051da:	607b      	str	r3, [r7, #4]
 80051dc:	e002      	b.n	80051e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80051de:	f04f 33ff 	mov.w	r3, #4294967295
 80051e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051e4:	687b      	ldr	r3, [r7, #4]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000420 	.word	0x20000420

080051f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08e      	sub	sp, #56	@ 0x38
 80051f8:	af04      	add	r7, sp, #16
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005200:	2300      	movs	r3, #0
 8005202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005204:	f3ef 8305 	mrs	r3, IPSR
 8005208:	617b      	str	r3, [r7, #20]
  return(result);
 800520a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800520c:	2b00      	cmp	r3, #0
 800520e:	d17e      	bne.n	800530e <osThreadNew+0x11a>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d07b      	beq.n	800530e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005216:	2380      	movs	r3, #128	@ 0x80
 8005218:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800521a:	2318      	movs	r3, #24
 800521c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005222:	f04f 33ff 	mov.w	r3, #4294967295
 8005226:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d045      	beq.n	80052ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <osThreadNew+0x48>
        name = attr->name;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <osThreadNew+0x6e>
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b38      	cmp	r3, #56	@ 0x38
 8005254:	d805      	bhi.n	8005262 <osThreadNew+0x6e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <osThreadNew+0x72>
        return (NULL);
 8005262:	2300      	movs	r3, #0
 8005264:	e054      	b.n	8005310 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00e      	beq.n	800529c <osThreadNew+0xa8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	2ba7      	cmp	r3, #167	@ 0xa7
 8005284:	d90a      	bls.n	800529c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800528a:	2b00      	cmp	r3, #0
 800528c:	d006      	beq.n	800529c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <osThreadNew+0xa8>
        mem = 1;
 8005296:	2301      	movs	r3, #1
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e010      	b.n	80052be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10c      	bne.n	80052be <osThreadNew+0xca>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d108      	bne.n	80052be <osThreadNew+0xca>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <osThreadNew+0xca>
          mem = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	e001      	b.n	80052be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d110      	bne.n	80052e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052cc:	9202      	str	r2, [sp, #8]
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	6a3a      	ldr	r2, [r7, #32]
 80052d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 ff28 	bl	8006130 <xTaskCreateStatic>
 80052e0:	4603      	mov	r3, r0
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	e013      	b.n	800530e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d110      	bne.n	800530e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	f107 0310 	add.w	r3, r7, #16
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 ff76 	bl	80061f0 <xTaskCreate>
 8005304:	4603      	mov	r3, r0
 8005306:	2b01      	cmp	r3, #1
 8005308:	d001      	beq.n	800530e <osThreadNew+0x11a>
            hTask = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800530e:	693b      	ldr	r3, [r7, #16]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3728      	adds	r7, #40	@ 0x28
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005320:	f3ef 8305 	mrs	r3, IPSR
 8005324:	60bb      	str	r3, [r7, #8]
  return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <osDelay+0x1c>
    stat = osErrorISR;
 800532c:	f06f 0305 	mvn.w	r3, #5
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e007      	b.n	8005344 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <osDelay+0x2c>
      vTaskDelay(ticks);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 f8b4 	bl	80064ac <vTaskDelay>
    }
  }

  return (stat);
 8005344:	68fb      	ldr	r3, [r7, #12]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800534e:	b580      	push	{r7, lr}
 8005350:	b08a      	sub	sp, #40	@ 0x28
 8005352:	af02      	add	r7, sp, #8
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800535e:	f3ef 8305 	mrs	r3, IPSR
 8005362:	613b      	str	r3, [r7, #16]
  return(result);
 8005364:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005366:	2b00      	cmp	r3, #0
 8005368:	d15f      	bne.n	800542a <osMessageQueueNew+0xdc>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d05c      	beq.n	800542a <osMessageQueueNew+0xdc>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d059      	beq.n	800542a <osMessageQueueNew+0xdc>
    mem = -1;
 8005376:	f04f 33ff 	mov.w	r3, #4294967295
 800537a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d029      	beq.n	80053d6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d012      	beq.n	80053b0 <osMessageQueueNew+0x62>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005390:	d90e      	bls.n	80053b0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d302      	bcc.n	80053b0 <osMessageQueueNew+0x62>
        mem = 1;
 80053aa:	2301      	movs	r3, #1
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e014      	b.n	80053da <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d110      	bne.n	80053da <osMessageQueueNew+0x8c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10c      	bne.n	80053da <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d108      	bne.n	80053da <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d104      	bne.n	80053da <osMessageQueueNew+0x8c>
          mem = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	e001      	b.n	80053da <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d10b      	bne.n	80053f8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2100      	movs	r1, #0
 80053ea:	9100      	str	r1, [sp, #0]
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f9d2 	bl	8005798 <xQueueGenericCreateStatic>
 80053f4:	61f8      	str	r0, [r7, #28]
 80053f6:	e008      	b.n	800540a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d105      	bne.n	800540a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80053fe:	2200      	movs	r2, #0
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fa45 	bl	8005892 <xQueueGenericCreate>
 8005408:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00c      	beq.n	800542a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	e001      	b.n	8005422 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005422:	6979      	ldr	r1, [r7, #20]
 8005424:	69f8      	ldr	r0, [r7, #28]
 8005426:	f000 fe25 	bl	8006074 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800542a:	69fb      	ldr	r3, [r7, #28]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3720      	adds	r7, #32
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	4613      	mov	r3, r2
 8005442:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800544c:	f3ef 8305 	mrs	r3, IPSR
 8005450:	617b      	str	r3, [r7, #20]
  return(result);
 8005452:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005454:	2b00      	cmp	r3, #0
 8005456:	d028      	beq.n	80054aa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <osMessageQueuePut+0x36>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <osMessageQueuePut+0x36>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800546a:	f06f 0303 	mvn.w	r3, #3
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	e038      	b.n	80054e4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005476:	f107 0210 	add.w	r2, r7, #16
 800547a:	2300      	movs	r3, #0
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	69b8      	ldr	r0, [r7, #24]
 8005480:	f000 fb68 	bl	8005b54 <xQueueGenericSendFromISR>
 8005484:	4603      	mov	r3, r0
 8005486:	2b01      	cmp	r3, #1
 8005488:	d003      	beq.n	8005492 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800548a:	f06f 0302 	mvn.w	r3, #2
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	e028      	b.n	80054e4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d025      	beq.n	80054e4 <osMessageQueuePut+0xb0>
 8005498:	4b15      	ldr	r3, [pc, #84]	@ (80054f0 <osMessageQueuePut+0xbc>)
 800549a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	e01c      	b.n	80054e4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <osMessageQueuePut+0x82>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80054b6:	f06f 0303 	mvn.w	r3, #3
 80054ba:	61fb      	str	r3, [r7, #28]
 80054bc:	e012      	b.n	80054e4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80054be:	2300      	movs	r3, #0
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	69b8      	ldr	r0, [r7, #24]
 80054c6:	f000 fa43 	bl	8005950 <xQueueGenericSend>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d009      	beq.n	80054e4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80054d6:	f06f 0301 	mvn.w	r3, #1
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	e002      	b.n	80054e4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80054de:	f06f 0302 	mvn.w	r3, #2
 80054e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80054e4:	69fb      	ldr	r3, [r7, #28]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3720      	adds	r7, #32
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a07      	ldr	r2, [pc, #28]	@ (8005520 <vApplicationGetIdleTaskMemory+0x2c>)
 8005504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4a06      	ldr	r2, [pc, #24]	@ (8005524 <vApplicationGetIdleTaskMemory+0x30>)
 800550a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2280      	movs	r2, #128	@ 0x80
 8005510:	601a      	str	r2, [r3, #0]
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000424 	.word	0x20000424
 8005524:	200004cc 	.word	0x200004cc

08005528 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4a07      	ldr	r2, [pc, #28]	@ (8005554 <vApplicationGetTimerTaskMemory+0x2c>)
 8005538:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4a06      	ldr	r2, [pc, #24]	@ (8005558 <vApplicationGetTimerTaskMemory+0x30>)
 800553e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005546:	601a      	str	r2, [r3, #0]
}
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	200006cc 	.word	0x200006cc
 8005558:	20000774 	.word	0x20000774

0800555c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f103 0208 	add.w	r2, r3, #8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f04f 32ff 	mov.w	r2, #4294967295
 8005574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f103 0208 	add.w	r2, r3, #8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f103 0208 	add.w	r2, r3, #8
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	601a      	str	r2, [r3, #0]
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d103      	bne.n	800561e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	e00c      	b.n	8005638 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3308      	adds	r3, #8
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e002      	b.n	800562c <vListInsert+0x2e>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	429a      	cmp	r2, r3
 8005636:	d2f6      	bcs.n	8005626 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	601a      	str	r2, [r3, #0]
}
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6892      	ldr	r2, [r2, #8]
 8005686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6852      	ldr	r2, [r2, #4]
 8005690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d103      	bne.n	80056a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	1e5a      	subs	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10b      	bne.n	80056f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056f0:	f002 f8e2 	bl	80078b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fc:	68f9      	ldr	r1, [r7, #12]
 80056fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005700:	fb01 f303 	mul.w	r3, r1, r3
 8005704:	441a      	add	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005720:	3b01      	subs	r3, #1
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	441a      	add	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	22ff      	movs	r2, #255	@ 0xff
 8005734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	22ff      	movs	r2, #255	@ 0xff
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d114      	bne.n	8005770 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01a      	beq.n	8005784 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3310      	adds	r3, #16
 8005752:	4618      	mov	r0, r3
 8005754:	f001 f97e 	bl	8006a54 <xTaskRemoveFromEventList>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d012      	beq.n	8005784 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800575e:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <xQueueGenericReset+0xd0>)
 8005760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	e009      	b.n	8005784 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3310      	adds	r3, #16
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fef1 	bl	800555c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3324      	adds	r3, #36	@ 0x24
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff feec 	bl	800555c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005784:	f002 f8ca 	bl	800791c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005788:	2301      	movs	r3, #1
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	e000ed04 	.word	0xe000ed04

08005798 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08e      	sub	sp, #56	@ 0x38
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10b      	bne.n	80057c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	e7fd      	b.n	80057c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10b      	bne.n	80057e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	e7fd      	b.n	80057de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <xQueueGenericCreateStatic+0x56>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <xQueueGenericCreateStatic+0x5a>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <xQueueGenericCreateStatic+0x5c>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10b      	bne.n	8005810 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	623b      	str	r3, [r7, #32]
}
 800580a:	bf00      	nop
 800580c:	bf00      	nop
 800580e:	e7fd      	b.n	800580c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d102      	bne.n	800581c <xQueueGenericCreateStatic+0x84>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <xQueueGenericCreateStatic+0x88>
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <xQueueGenericCreateStatic+0x8a>
 8005820:	2300      	movs	r3, #0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	61fb      	str	r3, [r7, #28]
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	e7fd      	b.n	800583a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800583e:	2350      	movs	r3, #80	@ 0x50
 8005840:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b50      	cmp	r3, #80	@ 0x50
 8005846:	d00b      	beq.n	8005860 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	61bb      	str	r3, [r7, #24]
}
 800585a:	bf00      	nop
 800585c:	bf00      	nop
 800585e:	e7fd      	b.n	800585c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005860:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00d      	beq.n	8005888 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005874:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f840 	bl	8005908 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800588a:	4618      	mov	r0, r3
 800588c:	3730      	adds	r7, #48	@ 0x30
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005892:	b580      	push	{r7, lr}
 8005894:	b08a      	sub	sp, #40	@ 0x28
 8005896:	af02      	add	r7, sp, #8
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	4613      	mov	r3, r2
 800589e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <xQueueGenericCreate+0x2c>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	613b      	str	r3, [r7, #16]
}
 80058b8:	bf00      	nop
 80058ba:	bf00      	nop
 80058bc:	e7fd      	b.n	80058ba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	3350      	adds	r3, #80	@ 0x50
 80058cc:	4618      	mov	r0, r3
 80058ce:	f002 f915 	bl	8007afc <pvPortMalloc>
 80058d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d011      	beq.n	80058fe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	3350      	adds	r3, #80	@ 0x50
 80058e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058ec:	79fa      	ldrb	r2, [r7, #7]
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	4613      	mov	r3, r2
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f805 	bl	8005908 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058fe:	69bb      	ldr	r3, [r7, #24]
	}
 8005900:	4618      	mov	r0, r3
 8005902:	3720      	adds	r7, #32
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d103      	bne.n	8005924 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e002      	b.n	800592a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005936:	2101      	movs	r1, #1
 8005938:	69b8      	ldr	r0, [r7, #24]
 800593a:	f7ff fec3 	bl	80056c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	78fa      	ldrb	r2, [r7, #3]
 8005942:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005946:	bf00      	nop
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08e      	sub	sp, #56	@ 0x38
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800595e:	2300      	movs	r3, #0
 8005960:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10b      	bne.n	8005984 <xQueueGenericSend+0x34>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	e7fd      	b.n	8005980 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d103      	bne.n	8005992 <xQueueGenericSend+0x42>
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <xQueueGenericSend+0x46>
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <xQueueGenericSend+0x48>
 8005996:	2300      	movs	r3, #0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <xQueueGenericSend+0x64>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059ae:	bf00      	nop
 80059b0:	bf00      	nop
 80059b2:	e7fd      	b.n	80059b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d103      	bne.n	80059c2 <xQueueGenericSend+0x72>
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <xQueueGenericSend+0x76>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <xQueueGenericSend+0x78>
 80059c6:	2300      	movs	r3, #0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <xQueueGenericSend+0x94>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	623b      	str	r3, [r7, #32]
}
 80059de:	bf00      	nop
 80059e0:	bf00      	nop
 80059e2:	e7fd      	b.n	80059e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059e4:	f001 f9fc 	bl	8006de0 <xTaskGetSchedulerState>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d102      	bne.n	80059f4 <xQueueGenericSend+0xa4>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <xQueueGenericSend+0xa8>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <xQueueGenericSend+0xaa>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10b      	bne.n	8005a16 <xQueueGenericSend+0xc6>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	61fb      	str	r3, [r7, #28]
}
 8005a10:	bf00      	nop
 8005a12:	bf00      	nop
 8005a14:	e7fd      	b.n	8005a12 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a16:	f001 ff4f 	bl	80078b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d302      	bcc.n	8005a2c <xQueueGenericSend+0xdc>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d129      	bne.n	8005a80 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a32:	f000 fa0f 	bl	8005e54 <prvCopyDataToQueue>
 8005a36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d010      	beq.n	8005a62 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	3324      	adds	r3, #36	@ 0x24
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 f805 	bl	8006a54 <xTaskRemoveFromEventList>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d013      	beq.n	8005a78 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a50:	4b3f      	ldr	r3, [pc, #252]	@ (8005b50 <xQueueGenericSend+0x200>)
 8005a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	e00a      	b.n	8005a78 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a68:	4b39      	ldr	r3, [pc, #228]	@ (8005b50 <xQueueGenericSend+0x200>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a78:	f001 ff50 	bl	800791c <vPortExitCritical>
				return pdPASS;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e063      	b.n	8005b48 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d103      	bne.n	8005a8e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a86:	f001 ff49 	bl	800791c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e05c      	b.n	8005b48 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 f83f 	bl	8006b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aa2:	f001 ff3b 	bl	800791c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa6:	f000 fda7 	bl	80065f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aaa:	f001 ff05 	bl	80078b8 <vPortEnterCritical>
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ab4:	b25b      	sxtb	r3, r3
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d103      	bne.n	8005ac4 <xQueueGenericSend+0x174>
 8005abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005aca:	b25b      	sxtb	r3, r3
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d103      	bne.n	8005ada <xQueueGenericSend+0x18a>
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ada:	f001 ff1f 	bl	800791c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ade:	1d3a      	adds	r2, r7, #4
 8005ae0:	f107 0314 	add.w	r3, r7, #20
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f001 f82e 	bl	8006b48 <xTaskCheckForTimeOut>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d124      	bne.n	8005b3c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005af2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005af4:	f000 faa6 	bl	8006044 <prvIsQueueFull>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d018      	beq.n	8005b30 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	3310      	adds	r3, #16
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	4611      	mov	r1, r2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 ff52 	bl	80069b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b0e:	f000 fa31 	bl	8005f74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b12:	f000 fd7f 	bl	8006614 <xTaskResumeAll>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f47f af7c 	bne.w	8005a16 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b50 <xQueueGenericSend+0x200>)
 8005b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	e772      	b.n	8005a16 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b32:	f000 fa1f 	bl	8005f74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b36:	f000 fd6d 	bl	8006614 <xTaskResumeAll>
 8005b3a:	e76c      	b.n	8005a16 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b3e:	f000 fa19 	bl	8005f74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b42:	f000 fd67 	bl	8006614 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3738      	adds	r7, #56	@ 0x38
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	e000ed04 	.word	0xe000ed04

08005b54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b090      	sub	sp, #64	@ 0x40
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b7e:	bf00      	nop
 8005b80:	bf00      	nop
 8005b82:	e7fd      	b.n	8005b80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <xQueueGenericSendFromISR+0x3e>
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <xQueueGenericSendFromISR+0x42>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <xQueueGenericSendFromISR+0x44>
 8005b96:	2300      	movs	r3, #0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10b      	bne.n	8005bb4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bae:	bf00      	nop
 8005bb0:	bf00      	nop
 8005bb2:	e7fd      	b.n	8005bb0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d103      	bne.n	8005bc2 <xQueueGenericSendFromISR+0x6e>
 8005bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d101      	bne.n	8005bc6 <xQueueGenericSendFromISR+0x72>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <xQueueGenericSendFromISR+0x74>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10b      	bne.n	8005be4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	623b      	str	r3, [r7, #32]
}
 8005bde:	bf00      	nop
 8005be0:	bf00      	nop
 8005be2:	e7fd      	b.n	8005be0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005be4:	f001 ff48 	bl	8007a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005be8:	f3ef 8211 	mrs	r2, BASEPRI
 8005bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	61fa      	str	r2, [r7, #28]
 8005bfe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c00:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c02:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d302      	bcc.n	8005c16 <xQueueGenericSendFromISR+0xc2>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d12f      	bne.n	8005c76 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c2c:	f000 f912 	bl	8005e54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c30:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c38:	d112      	bne.n	8005c60 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d016      	beq.n	8005c70 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c44:	3324      	adds	r3, #36	@ 0x24
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 ff04 	bl	8006a54 <xTaskRemoveFromEventList>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00e      	beq.n	8005c70 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	e007      	b.n	8005c70 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c64:	3301      	adds	r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	b25a      	sxtb	r2, r3
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c70:	2301      	movs	r3, #1
 8005c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005c74:	e001      	b.n	8005c7a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3740      	adds	r7, #64	@ 0x40
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08c      	sub	sp, #48	@ 0x30
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10b      	bne.n	8005cc2 <xQueueReceive+0x32>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	623b      	str	r3, [r7, #32]
}
 8005cbc:	bf00      	nop
 8005cbe:	bf00      	nop
 8005cc0:	e7fd      	b.n	8005cbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d103      	bne.n	8005cd0 <xQueueReceive+0x40>
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <xQueueReceive+0x44>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <xQueueReceive+0x46>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10b      	bne.n	8005cf2 <xQueueReceive+0x62>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	61fb      	str	r3, [r7, #28]
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	e7fd      	b.n	8005cee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cf2:	f001 f875 	bl	8006de0 <xTaskGetSchedulerState>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d102      	bne.n	8005d02 <xQueueReceive+0x72>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <xQueueReceive+0x76>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <xQueueReceive+0x78>
 8005d06:	2300      	movs	r3, #0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10b      	bne.n	8005d24 <xQueueReceive+0x94>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	61bb      	str	r3, [r7, #24]
}
 8005d1e:	bf00      	nop
 8005d20:	bf00      	nop
 8005d22:	e7fd      	b.n	8005d20 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d24:	f001 fdc8 	bl	80078b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d01f      	beq.n	8005d74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d38:	f000 f8f6 	bl	8005f28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3e:	1e5a      	subs	r2, r3, #1
 8005d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00f      	beq.n	8005d6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	3310      	adds	r3, #16
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fe7f 	bl	8006a54 <xTaskRemoveFromEventList>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d5c:	4b3c      	ldr	r3, [pc, #240]	@ (8005e50 <xQueueReceive+0x1c0>)
 8005d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d6c:	f001 fdd6 	bl	800791c <vPortExitCritical>
				return pdPASS;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e069      	b.n	8005e48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d103      	bne.n	8005d82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d7a:	f001 fdcf 	bl	800791c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e062      	b.n	8005e48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d106      	bne.n	8005d96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d88:	f107 0310 	add.w	r3, r7, #16
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fec5 	bl	8006b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d92:	2301      	movs	r3, #1
 8005d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d96:	f001 fdc1 	bl	800791c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d9a:	f000 fc2d 	bl	80065f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d9e:	f001 fd8b 	bl	80078b8 <vPortEnterCritical>
 8005da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005da8:	b25b      	sxtb	r3, r3
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d103      	bne.n	8005db8 <xQueueReceive+0x128>
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dbe:	b25b      	sxtb	r3, r3
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d103      	bne.n	8005dce <xQueueReceive+0x13e>
 8005dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dce:	f001 fda5 	bl	800791c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dd2:	1d3a      	adds	r2, r7, #4
 8005dd4:	f107 0310 	add.w	r3, r7, #16
 8005dd8:	4611      	mov	r1, r2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 feb4 	bl	8006b48 <xTaskCheckForTimeOut>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d123      	bne.n	8005e2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005de6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005de8:	f000 f916 	bl	8006018 <prvIsQueueEmpty>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d017      	beq.n	8005e22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df4:	3324      	adds	r3, #36	@ 0x24
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	4611      	mov	r1, r2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fdd8 	bl	80069b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e02:	f000 f8b7 	bl	8005f74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e06:	f000 fc05 	bl	8006614 <xTaskResumeAll>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d189      	bne.n	8005d24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005e10:	4b0f      	ldr	r3, [pc, #60]	@ (8005e50 <xQueueReceive+0x1c0>)
 8005e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	e780      	b.n	8005d24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e24:	f000 f8a6 	bl	8005f74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e28:	f000 fbf4 	bl	8006614 <xTaskResumeAll>
 8005e2c:	e77a      	b.n	8005d24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e30:	f000 f8a0 	bl	8005f74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e34:	f000 fbee 	bl	8006614 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e3a:	f000 f8ed 	bl	8006018 <prvIsQueueEmpty>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f43f af6f 	beq.w	8005d24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3730      	adds	r7, #48	@ 0x30
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10d      	bne.n	8005e8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d14d      	bne.n	8005f16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 ffcc 	bl	8006e1c <xTaskPriorityDisinherit>
 8005e84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	609a      	str	r2, [r3, #8]
 8005e8c:	e043      	b.n	8005f16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d119      	bne.n	8005ec8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6858      	ldr	r0, [r3, #4]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	f002 fb0d 	bl	80084be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eac:	441a      	add	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d32b      	bcc.n	8005f16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	e026      	b.n	8005f16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	68d8      	ldr	r0, [r3, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	f002 faf3 	bl	80084be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee0:	425b      	negs	r3, r3
 8005ee2:	441a      	add	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d207      	bcs.n	8005f04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efc:	425b      	negs	r3, r3
 8005efe:	441a      	add	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d105      	bne.n	8005f16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005f1e:	697b      	ldr	r3, [r7, #20]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d018      	beq.n	8005f6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	441a      	add	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d303      	bcc.n	8005f5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68d9      	ldr	r1, [r3, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f64:	461a      	mov	r2, r3
 8005f66:	6838      	ldr	r0, [r7, #0]
 8005f68:	f002 faa9 	bl	80084be <memcpy>
	}
}
 8005f6c:	bf00      	nop
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f7c:	f001 fc9c 	bl	80078b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f88:	e011      	b.n	8005fae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d012      	beq.n	8005fb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3324      	adds	r3, #36	@ 0x24
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fd5c 	bl	8006a54 <xTaskRemoveFromEventList>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fa2:	f000 fe35 	bl	8006c10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	dce9      	bgt.n	8005f8a <prvUnlockQueue+0x16>
 8005fb6:	e000      	b.n	8005fba <prvUnlockQueue+0x46>
					break;
 8005fb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	22ff      	movs	r2, #255	@ 0xff
 8005fbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005fc2:	f001 fcab 	bl	800791c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fc6:	f001 fc77 	bl	80078b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fd2:	e011      	b.n	8005ff8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d012      	beq.n	8006002 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3310      	adds	r3, #16
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fd37 	bl	8006a54 <xTaskRemoveFromEventList>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fec:	f000 fe10 	bl	8006c10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	dce9      	bgt.n	8005fd4 <prvUnlockQueue+0x60>
 8006000:	e000      	b.n	8006004 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006002:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	22ff      	movs	r2, #255	@ 0xff
 8006008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800600c:	f001 fc86 	bl	800791c <vPortExitCritical>
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006020:	f001 fc4a 	bl	80078b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800602c:	2301      	movs	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	e001      	b.n	8006036 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006036:	f001 fc71 	bl	800791c <vPortExitCritical>

	return xReturn;
 800603a:	68fb      	ldr	r3, [r7, #12]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800604c:	f001 fc34 	bl	80078b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006058:	429a      	cmp	r2, r3
 800605a:	d102      	bne.n	8006062 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800605c:	2301      	movs	r3, #1
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e001      	b.n	8006066 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006066:	f001 fc59 	bl	800791c <vPortExitCritical>

	return xReturn;
 800606a:	68fb      	ldr	r3, [r7, #12]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e014      	b.n	80060ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006084:	4a0f      	ldr	r2, [pc, #60]	@ (80060c4 <vQueueAddToRegistry+0x50>)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10b      	bne.n	80060a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006090:	490c      	ldr	r1, [pc, #48]	@ (80060c4 <vQueueAddToRegistry+0x50>)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800609a:	4a0a      	ldr	r2, [pc, #40]	@ (80060c4 <vQueueAddToRegistry+0x50>)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4413      	add	r3, r2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060a6:	e006      	b.n	80060b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3301      	adds	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b07      	cmp	r3, #7
 80060b2:	d9e7      	bls.n	8006084 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000b74 	.word	0x20000b74

080060c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060d8:	f001 fbee 	bl	80078b8 <vPortEnterCritical>
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060e2:	b25b      	sxtb	r3, r3
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d103      	bne.n	80060f2 <vQueueWaitForMessageRestricted+0x2a>
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060f8:	b25b      	sxtb	r3, r3
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d103      	bne.n	8006108 <vQueueWaitForMessageRestricted+0x40>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006108:	f001 fc08 	bl	800791c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	3324      	adds	r3, #36	@ 0x24
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fc6d 	bl	80069fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006122:	6978      	ldr	r0, [r7, #20]
 8006124:	f7ff ff26 	bl	8005f74 <prvUnlockQueue>
	}
 8006128:	bf00      	nop
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08e      	sub	sp, #56	@ 0x38
 8006134:	af04      	add	r7, sp, #16
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800613e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10b      	bne.n	800615c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	623b      	str	r3, [r7, #32]
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800615c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10b      	bne.n	800617a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	61fb      	str	r3, [r7, #28]
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	e7fd      	b.n	8006176 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800617a:	23a8      	movs	r3, #168	@ 0xa8
 800617c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2ba8      	cmp	r3, #168	@ 0xa8
 8006182:	d00b      	beq.n	800619c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	61bb      	str	r3, [r7, #24]
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800619c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800619e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01e      	beq.n	80061e2 <xTaskCreateStatic+0xb2>
 80061a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d01b      	beq.n	80061e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061bc:	2300      	movs	r3, #0
 80061be:	9303      	str	r3, [sp, #12]
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	9302      	str	r3, [sp, #8]
 80061c4:	f107 0314 	add.w	r3, r7, #20
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f851 	bl	800627c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061dc:	f000 f8f6 	bl	80063cc <prvAddNewTaskToReadyList>
 80061e0:	e001      	b.n	80061e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061e6:	697b      	ldr	r3, [r7, #20]
	}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3728      	adds	r7, #40	@ 0x28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08c      	sub	sp, #48	@ 0x30
 80061f4:	af04      	add	r7, sp, #16
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	4613      	mov	r3, r2
 80061fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f001 fc79 	bl	8007afc <pvPortMalloc>
 800620a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00e      	beq.n	8006230 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006212:	20a8      	movs	r0, #168	@ 0xa8
 8006214:	f001 fc72 	bl	8007afc <pvPortMalloc>
 8006218:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	631a      	str	r2, [r3, #48]	@ 0x30
 8006226:	e005      	b.n	8006234 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006228:	6978      	ldr	r0, [r7, #20]
 800622a:	f001 fd35 	bl	8007c98 <vPortFree>
 800622e:	e001      	b.n	8006234 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d017      	beq.n	800626a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	2300      	movs	r3, #0
 8006246:	9303      	str	r3, [sp, #12]
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	9302      	str	r3, [sp, #8]
 800624c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f80f 	bl	800627c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800625e:	69f8      	ldr	r0, [r7, #28]
 8006260:	f000 f8b4 	bl	80063cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006264:	2301      	movs	r3, #1
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	e002      	b.n	8006270 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800626a:	f04f 33ff 	mov.w	r3, #4294967295
 800626e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006270:	69bb      	ldr	r3, [r7, #24]
	}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	461a      	mov	r2, r3
 8006294:	21a5      	movs	r1, #165	@ 0xa5
 8006296:	f002 f839 	bl	800830c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062a4:	3b01      	subs	r3, #1
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	f023 0307 	bic.w	r3, r3, #7
 80062b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	617b      	str	r3, [r7, #20]
}
 80062d0:	bf00      	nop
 80062d2:	bf00      	nop
 80062d4:	e7fd      	b.n	80062d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01f      	beq.n	800631c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	e012      	b.n	8006308 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	7819      	ldrb	r1, [r3, #0]
 80062ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	4413      	add	r3, r2
 80062f0:	3334      	adds	r3, #52	@ 0x34
 80062f2:	460a      	mov	r2, r1
 80062f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d006      	beq.n	8006310 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	3301      	adds	r3, #1
 8006306:	61fb      	str	r3, [r7, #28]
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	2b0f      	cmp	r3, #15
 800630c:	d9e9      	bls.n	80062e2 <prvInitialiseNewTask+0x66>
 800630e:	e000      	b.n	8006312 <prvInitialiseNewTask+0x96>
			{
				break;
 8006310:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800631a:	e003      	b.n	8006324 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800631c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006326:	2b37      	cmp	r3, #55	@ 0x37
 8006328:	d901      	bls.n	800632e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800632a:	2337      	movs	r3, #55	@ 0x37
 800632c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800632e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006330:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006332:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006336:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006338:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	2200      	movs	r2, #0
 800633e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006342:	3304      	adds	r3, #4
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff f929 	bl	800559c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800634a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634c:	3318      	adds	r3, #24
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff f924 	bl	800559c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006358:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006368:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800636a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636c:	2200      	movs	r2, #0
 800636e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006374:	2200      	movs	r2, #0
 8006376:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	3354      	adds	r3, #84	@ 0x54
 800637e:	224c      	movs	r2, #76	@ 0x4c
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f001 ffc2 	bl	800830c <memset>
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	4a0d      	ldr	r2, [pc, #52]	@ (80063c0 <prvInitialiseNewTask+0x144>)
 800638c:	659a      	str	r2, [r3, #88]	@ 0x58
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	4a0c      	ldr	r2, [pc, #48]	@ (80063c4 <prvInitialiseNewTask+0x148>)
 8006392:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006396:	4a0c      	ldr	r2, [pc, #48]	@ (80063c8 <prvInitialiseNewTask+0x14c>)
 8006398:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	68f9      	ldr	r1, [r7, #12]
 800639e:	69b8      	ldr	r0, [r7, #24]
 80063a0:	f001 f95a 	bl	8007658 <pxPortInitialiseStack>
 80063a4:	4602      	mov	r2, r0
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b6:	bf00      	nop
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20006028 	.word	0x20006028
 80063c4:	20006090 	.word	0x20006090
 80063c8:	200060f8 	.word	0x200060f8

080063cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063d4:	f001 fa70 	bl	80078b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006490 <prvAddNewTaskToReadyList+0xc4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a2c      	ldr	r2, [pc, #176]	@ (8006490 <prvAddNewTaskToReadyList+0xc4>)
 80063e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006494 <prvAddNewTaskToReadyList+0xc8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006494 <prvAddNewTaskToReadyList+0xc8>)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063f0:	4b27      	ldr	r3, [pc, #156]	@ (8006490 <prvAddNewTaskToReadyList+0xc4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d110      	bne.n	800641a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063f8:	f000 fc2e 	bl	8006c58 <prvInitialiseTaskLists>
 80063fc:	e00d      	b.n	800641a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063fe:	4b26      	ldr	r3, [pc, #152]	@ (8006498 <prvAddNewTaskToReadyList+0xcc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006406:	4b23      	ldr	r3, [pc, #140]	@ (8006494 <prvAddNewTaskToReadyList+0xc8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	429a      	cmp	r2, r3
 8006412:	d802      	bhi.n	800641a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006414:	4a1f      	ldr	r2, [pc, #124]	@ (8006494 <prvAddNewTaskToReadyList+0xc8>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800641a:	4b20      	ldr	r3, [pc, #128]	@ (800649c <prvAddNewTaskToReadyList+0xd0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3301      	adds	r3, #1
 8006420:	4a1e      	ldr	r2, [pc, #120]	@ (800649c <prvAddNewTaskToReadyList+0xd0>)
 8006422:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006424:	4b1d      	ldr	r3, [pc, #116]	@ (800649c <prvAddNewTaskToReadyList+0xd0>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006430:	4b1b      	ldr	r3, [pc, #108]	@ (80064a0 <prvAddNewTaskToReadyList+0xd4>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d903      	bls.n	8006440 <prvAddNewTaskToReadyList+0x74>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643c:	4a18      	ldr	r2, [pc, #96]	@ (80064a0 <prvAddNewTaskToReadyList+0xd4>)
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4a15      	ldr	r2, [pc, #84]	@ (80064a4 <prvAddNewTaskToReadyList+0xd8>)
 800644e:	441a      	add	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f7ff f8ad 	bl	80055b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800645c:	f001 fa5e 	bl	800791c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006460:	4b0d      	ldr	r3, [pc, #52]	@ (8006498 <prvAddNewTaskToReadyList+0xcc>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00e      	beq.n	8006486 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006468:	4b0a      	ldr	r3, [pc, #40]	@ (8006494 <prvAddNewTaskToReadyList+0xc8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006472:	429a      	cmp	r2, r3
 8006474:	d207      	bcs.n	8006486 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006476:	4b0c      	ldr	r3, [pc, #48]	@ (80064a8 <prvAddNewTaskToReadyList+0xdc>)
 8006478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20001088 	.word	0x20001088
 8006494:	20000bb4 	.word	0x20000bb4
 8006498:	20001094 	.word	0x20001094
 800649c:	200010a4 	.word	0x200010a4
 80064a0:	20001090 	.word	0x20001090
 80064a4:	20000bb8 	.word	0x20000bb8
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d018      	beq.n	80064f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064be:	4b14      	ldr	r3, [pc, #80]	@ (8006510 <vTaskDelay+0x64>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00b      	beq.n	80064de <vTaskDelay+0x32>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	60bb      	str	r3, [r7, #8]
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	e7fd      	b.n	80064da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064de:	f000 f88b 	bl	80065f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064e2:	2100      	movs	r1, #0
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fd09 	bl	8006efc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064ea:	f000 f893 	bl	8006614 <xTaskResumeAll>
 80064ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d107      	bne.n	8006506 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80064f6:	4b07      	ldr	r3, [pc, #28]	@ (8006514 <vTaskDelay+0x68>)
 80064f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	200010b0 	.word	0x200010b0
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08a      	sub	sp, #40	@ 0x28
 800651c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006526:	463a      	mov	r2, r7
 8006528:	1d39      	adds	r1, r7, #4
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe ffe0 	bl	80054f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	9202      	str	r2, [sp, #8]
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	2300      	movs	r3, #0
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	2300      	movs	r3, #0
 8006544:	460a      	mov	r2, r1
 8006546:	4924      	ldr	r1, [pc, #144]	@ (80065d8 <vTaskStartScheduler+0xc0>)
 8006548:	4824      	ldr	r0, [pc, #144]	@ (80065dc <vTaskStartScheduler+0xc4>)
 800654a:	f7ff fdf1 	bl	8006130 <xTaskCreateStatic>
 800654e:	4603      	mov	r3, r0
 8006550:	4a23      	ldr	r2, [pc, #140]	@ (80065e0 <vTaskStartScheduler+0xc8>)
 8006552:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006554:	4b22      	ldr	r3, [pc, #136]	@ (80065e0 <vTaskStartScheduler+0xc8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800655c:	2301      	movs	r3, #1
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e001      	b.n	8006566 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d102      	bne.n	8006572 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800656c:	f000 fd1a 	bl	8006fa4 <xTimerCreateTimerTask>
 8006570:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d11b      	bne.n	80065b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	613b      	str	r3, [r7, #16]
}
 800658a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800658c:	4b15      	ldr	r3, [pc, #84]	@ (80065e4 <vTaskStartScheduler+0xcc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3354      	adds	r3, #84	@ 0x54
 8006592:	4a15      	ldr	r2, [pc, #84]	@ (80065e8 <vTaskStartScheduler+0xd0>)
 8006594:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006596:	4b15      	ldr	r3, [pc, #84]	@ (80065ec <vTaskStartScheduler+0xd4>)
 8006598:	f04f 32ff 	mov.w	r2, #4294967295
 800659c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800659e:	4b14      	ldr	r3, [pc, #80]	@ (80065f0 <vTaskStartScheduler+0xd8>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065a4:	4b13      	ldr	r3, [pc, #76]	@ (80065f4 <vTaskStartScheduler+0xdc>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065aa:	f001 f8e1 	bl	8007770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065ae:	e00f      	b.n	80065d0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b6:	d10b      	bne.n	80065d0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	60fb      	str	r3, [r7, #12]
}
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
 80065ce:	e7fd      	b.n	80065cc <vTaskStartScheduler+0xb4>
}
 80065d0:	bf00      	nop
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	08009048 	.word	0x08009048
 80065dc:	08006c29 	.word	0x08006c29
 80065e0:	200010ac 	.word	0x200010ac
 80065e4:	20000bb4 	.word	0x20000bb4
 80065e8:	20000020 	.word	0x20000020
 80065ec:	200010a8 	.word	0x200010a8
 80065f0:	20001094 	.word	0x20001094
 80065f4:	2000108c 	.word	0x2000108c

080065f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065fc:	4b04      	ldr	r3, [pc, #16]	@ (8006610 <vTaskSuspendAll+0x18>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	4a03      	ldr	r2, [pc, #12]	@ (8006610 <vTaskSuspendAll+0x18>)
 8006604:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006606:	bf00      	nop
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	200010b0 	.word	0x200010b0

08006614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800661e:	2300      	movs	r3, #0
 8006620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006622:	4b42      	ldr	r3, [pc, #264]	@ (800672c <xTaskResumeAll+0x118>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <xTaskResumeAll+0x2e>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	603b      	str	r3, [r7, #0]
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	e7fd      	b.n	800663e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006642:	f001 f939 	bl	80078b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006646:	4b39      	ldr	r3, [pc, #228]	@ (800672c <xTaskResumeAll+0x118>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3b01      	subs	r3, #1
 800664c:	4a37      	ldr	r2, [pc, #220]	@ (800672c <xTaskResumeAll+0x118>)
 800664e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006650:	4b36      	ldr	r3, [pc, #216]	@ (800672c <xTaskResumeAll+0x118>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d162      	bne.n	800671e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006658:	4b35      	ldr	r3, [pc, #212]	@ (8006730 <xTaskResumeAll+0x11c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d05e      	beq.n	800671e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006660:	e02f      	b.n	80066c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006662:	4b34      	ldr	r3, [pc, #208]	@ (8006734 <xTaskResumeAll+0x120>)
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3318      	adds	r3, #24
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe fffe 	bl	8005670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3304      	adds	r3, #4
 8006678:	4618      	mov	r0, r3
 800667a:	f7fe fff9 	bl	8005670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006682:	4b2d      	ldr	r3, [pc, #180]	@ (8006738 <xTaskResumeAll+0x124>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d903      	bls.n	8006692 <xTaskResumeAll+0x7e>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668e:	4a2a      	ldr	r2, [pc, #168]	@ (8006738 <xTaskResumeAll+0x124>)
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4a27      	ldr	r2, [pc, #156]	@ (800673c <xTaskResumeAll+0x128>)
 80066a0:	441a      	add	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3304      	adds	r3, #4
 80066a6:	4619      	mov	r1, r3
 80066a8:	4610      	mov	r0, r2
 80066aa:	f7fe ff84 	bl	80055b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b2:	4b23      	ldr	r3, [pc, #140]	@ (8006740 <xTaskResumeAll+0x12c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d302      	bcc.n	80066c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80066bc:	4b21      	ldr	r3, [pc, #132]	@ (8006744 <xTaskResumeAll+0x130>)
 80066be:	2201      	movs	r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006734 <xTaskResumeAll+0x120>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1cb      	bne.n	8006662 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066d0:	f000 fb66 	bl	8006da0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006748 <xTaskResumeAll+0x134>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d010      	beq.n	8006702 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066e0:	f000 f846 	bl	8006770 <xTaskIncrementTick>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80066ea:	4b16      	ldr	r3, [pc, #88]	@ (8006744 <xTaskResumeAll+0x130>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f1      	bne.n	80066e0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80066fc:	4b12      	ldr	r3, [pc, #72]	@ (8006748 <xTaskResumeAll+0x134>)
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006702:	4b10      	ldr	r3, [pc, #64]	@ (8006744 <xTaskResumeAll+0x130>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d009      	beq.n	800671e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800670a:	2301      	movs	r3, #1
 800670c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800670e:	4b0f      	ldr	r3, [pc, #60]	@ (800674c <xTaskResumeAll+0x138>)
 8006710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800671e:	f001 f8fd 	bl	800791c <vPortExitCritical>

	return xAlreadyYielded;
 8006722:	68bb      	ldr	r3, [r7, #8]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	200010b0 	.word	0x200010b0
 8006730:	20001088 	.word	0x20001088
 8006734:	20001048 	.word	0x20001048
 8006738:	20001090 	.word	0x20001090
 800673c:	20000bb8 	.word	0x20000bb8
 8006740:	20000bb4 	.word	0x20000bb4
 8006744:	2000109c 	.word	0x2000109c
 8006748:	20001098 	.word	0x20001098
 800674c:	e000ed04 	.word	0xe000ed04

08006750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006756:	4b05      	ldr	r3, [pc, #20]	@ (800676c <xTaskGetTickCount+0x1c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800675c:	687b      	ldr	r3, [r7, #4]
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	2000108c 	.word	0x2000108c

08006770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800677a:	4b4f      	ldr	r3, [pc, #316]	@ (80068b8 <xTaskIncrementTick+0x148>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 8090 	bne.w	80068a4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006784:	4b4d      	ldr	r3, [pc, #308]	@ (80068bc <xTaskIncrementTick+0x14c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3301      	adds	r3, #1
 800678a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800678c:	4a4b      	ldr	r2, [pc, #300]	@ (80068bc <xTaskIncrementTick+0x14c>)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d121      	bne.n	80067dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006798:	4b49      	ldr	r3, [pc, #292]	@ (80068c0 <xTaskIncrementTick+0x150>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <xTaskIncrementTick+0x4a>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	603b      	str	r3, [r7, #0]
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <xTaskIncrementTick+0x46>
 80067ba:	4b41      	ldr	r3, [pc, #260]	@ (80068c0 <xTaskIncrementTick+0x150>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	4b40      	ldr	r3, [pc, #256]	@ (80068c4 <xTaskIncrementTick+0x154>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a3e      	ldr	r2, [pc, #248]	@ (80068c0 <xTaskIncrementTick+0x150>)
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	4a3e      	ldr	r2, [pc, #248]	@ (80068c4 <xTaskIncrementTick+0x154>)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	4b3e      	ldr	r3, [pc, #248]	@ (80068c8 <xTaskIncrementTick+0x158>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	4a3c      	ldr	r2, [pc, #240]	@ (80068c8 <xTaskIncrementTick+0x158>)
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	f000 fae2 	bl	8006da0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067dc:	4b3b      	ldr	r3, [pc, #236]	@ (80068cc <xTaskIncrementTick+0x15c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d349      	bcc.n	800687a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067e6:	4b36      	ldr	r3, [pc, #216]	@ (80068c0 <xTaskIncrementTick+0x150>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f0:	4b36      	ldr	r3, [pc, #216]	@ (80068cc <xTaskIncrementTick+0x15c>)
 80067f2:	f04f 32ff 	mov.w	r2, #4294967295
 80067f6:	601a      	str	r2, [r3, #0]
					break;
 80067f8:	e03f      	b.n	800687a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067fa:	4b31      	ldr	r3, [pc, #196]	@ (80068c0 <xTaskIncrementTick+0x150>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	429a      	cmp	r2, r3
 8006810:	d203      	bcs.n	800681a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006812:	4a2e      	ldr	r2, [pc, #184]	@ (80068cc <xTaskIncrementTick+0x15c>)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006818:	e02f      	b.n	800687a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	3304      	adds	r3, #4
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe ff26 	bl	8005670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	3318      	adds	r3, #24
 8006830:	4618      	mov	r0, r3
 8006832:	f7fe ff1d 	bl	8005670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683a:	4b25      	ldr	r3, [pc, #148]	@ (80068d0 <xTaskIncrementTick+0x160>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d903      	bls.n	800684a <xTaskIncrementTick+0xda>
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006846:	4a22      	ldr	r2, [pc, #136]	@ (80068d0 <xTaskIncrementTick+0x160>)
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4a1f      	ldr	r2, [pc, #124]	@ (80068d4 <xTaskIncrementTick+0x164>)
 8006858:	441a      	add	r2, r3
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	3304      	adds	r3, #4
 800685e:	4619      	mov	r1, r3
 8006860:	4610      	mov	r0, r2
 8006862:	f7fe fea8 	bl	80055b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800686a:	4b1b      	ldr	r3, [pc, #108]	@ (80068d8 <xTaskIncrementTick+0x168>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006870:	429a      	cmp	r2, r3
 8006872:	d3b8      	bcc.n	80067e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006874:	2301      	movs	r3, #1
 8006876:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006878:	e7b5      	b.n	80067e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800687a:	4b17      	ldr	r3, [pc, #92]	@ (80068d8 <xTaskIncrementTick+0x168>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006880:	4914      	ldr	r1, [pc, #80]	@ (80068d4 <xTaskIncrementTick+0x164>)
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d901      	bls.n	8006896 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006892:	2301      	movs	r3, #1
 8006894:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006896:	4b11      	ldr	r3, [pc, #68]	@ (80068dc <xTaskIncrementTick+0x16c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d007      	beq.n	80068ae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800689e:	2301      	movs	r3, #1
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	e004      	b.n	80068ae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068a4:	4b0e      	ldr	r3, [pc, #56]	@ (80068e0 <xTaskIncrementTick+0x170>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3301      	adds	r3, #1
 80068aa:	4a0d      	ldr	r2, [pc, #52]	@ (80068e0 <xTaskIncrementTick+0x170>)
 80068ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068ae:	697b      	ldr	r3, [r7, #20]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	200010b0 	.word	0x200010b0
 80068bc:	2000108c 	.word	0x2000108c
 80068c0:	20001040 	.word	0x20001040
 80068c4:	20001044 	.word	0x20001044
 80068c8:	200010a0 	.word	0x200010a0
 80068cc:	200010a8 	.word	0x200010a8
 80068d0:	20001090 	.word	0x20001090
 80068d4:	20000bb8 	.word	0x20000bb8
 80068d8:	20000bb4 	.word	0x20000bb4
 80068dc:	2000109c 	.word	0x2000109c
 80068e0:	20001098 	.word	0x20001098

080068e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068ea:	4b2b      	ldr	r3, [pc, #172]	@ (8006998 <vTaskSwitchContext+0xb4>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068f2:	4b2a      	ldr	r3, [pc, #168]	@ (800699c <vTaskSwitchContext+0xb8>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068f8:	e047      	b.n	800698a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80068fa:	4b28      	ldr	r3, [pc, #160]	@ (800699c <vTaskSwitchContext+0xb8>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006900:	4b27      	ldr	r3, [pc, #156]	@ (80069a0 <vTaskSwitchContext+0xbc>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	e011      	b.n	800692c <vTaskSwitchContext+0x48>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10b      	bne.n	8006926 <vTaskSwitchContext+0x42>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	607b      	str	r3, [r7, #4]
}
 8006920:	bf00      	nop
 8006922:	bf00      	nop
 8006924:	e7fd      	b.n	8006922 <vTaskSwitchContext+0x3e>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3b01      	subs	r3, #1
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	491d      	ldr	r1, [pc, #116]	@ (80069a4 <vTaskSwitchContext+0xc0>)
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4613      	mov	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	440b      	add	r3, r1
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0e3      	beq.n	8006908 <vTaskSwitchContext+0x24>
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4a16      	ldr	r2, [pc, #88]	@ (80069a4 <vTaskSwitchContext+0xc0>)
 800694c:	4413      	add	r3, r2
 800694e:	60bb      	str	r3, [r7, #8]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	3308      	adds	r3, #8
 8006962:	429a      	cmp	r2, r3
 8006964:	d104      	bne.n	8006970 <vTaskSwitchContext+0x8c>
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	605a      	str	r2, [r3, #4]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	4a0c      	ldr	r2, [pc, #48]	@ (80069a8 <vTaskSwitchContext+0xc4>)
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	4a09      	ldr	r2, [pc, #36]	@ (80069a0 <vTaskSwitchContext+0xbc>)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006980:	4b09      	ldr	r3, [pc, #36]	@ (80069a8 <vTaskSwitchContext+0xc4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3354      	adds	r3, #84	@ 0x54
 8006986:	4a09      	ldr	r2, [pc, #36]	@ (80069ac <vTaskSwitchContext+0xc8>)
 8006988:	6013      	str	r3, [r2, #0]
}
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	200010b0 	.word	0x200010b0
 800699c:	2000109c 	.word	0x2000109c
 80069a0:	20001090 	.word	0x20001090
 80069a4:	20000bb8 	.word	0x20000bb8
 80069a8:	20000bb4 	.word	0x20000bb4
 80069ac:	20000020 	.word	0x20000020

080069b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10b      	bne.n	80069d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	60fb      	str	r3, [r7, #12]
}
 80069d2:	bf00      	nop
 80069d4:	bf00      	nop
 80069d6:	e7fd      	b.n	80069d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069d8:	4b07      	ldr	r3, [pc, #28]	@ (80069f8 <vTaskPlaceOnEventList+0x48>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3318      	adds	r3, #24
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7fe fe0c 	bl	80055fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069e6:	2101      	movs	r1, #1
 80069e8:	6838      	ldr	r0, [r7, #0]
 80069ea:	f000 fa87 	bl	8006efc <prvAddCurrentTaskToDelayedList>
}
 80069ee:	bf00      	nop
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000bb4 	.word	0x20000bb4

080069fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10b      	bne.n	8006a26 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	617b      	str	r3, [r7, #20]
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	e7fd      	b.n	8006a22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a26:	4b0a      	ldr	r3, [pc, #40]	@ (8006a50 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3318      	adds	r3, #24
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f7fe fdc1 	bl	80055b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	68b8      	ldr	r0, [r7, #8]
 8006a44:	f000 fa5a 	bl	8006efc <prvAddCurrentTaskToDelayedList>
	}
 8006a48:	bf00      	nop
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	20000bb4 	.word	0x20000bb4

08006a54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10b      	bne.n	8006a82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	60fb      	str	r3, [r7, #12]
}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	e7fd      	b.n	8006a7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	3318      	adds	r3, #24
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe fdf2 	bl	8005670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006b04 <xTaskRemoveFromEventList+0xb0>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d11d      	bne.n	8006ad0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fe fde9 	bl	8005670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa2:	4b19      	ldr	r3, [pc, #100]	@ (8006b08 <xTaskRemoveFromEventList+0xb4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d903      	bls.n	8006ab2 <xTaskRemoveFromEventList+0x5e>
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	4a16      	ldr	r2, [pc, #88]	@ (8006b08 <xTaskRemoveFromEventList+0xb4>)
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4a13      	ldr	r2, [pc, #76]	@ (8006b0c <xTaskRemoveFromEventList+0xb8>)
 8006ac0:	441a      	add	r2, r3
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f7fe fd74 	bl	80055b6 <vListInsertEnd>
 8006ace:	e005      	b.n	8006adc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	3318      	adds	r3, #24
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	480e      	ldr	r0, [pc, #56]	@ (8006b10 <xTaskRemoveFromEventList+0xbc>)
 8006ad8:	f7fe fd6d 	bl	80055b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8006b14 <xTaskRemoveFromEventList+0xc0>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d905      	bls.n	8006af6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006aea:	2301      	movs	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006aee:	4b0a      	ldr	r3, [pc, #40]	@ (8006b18 <xTaskRemoveFromEventList+0xc4>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	e001      	b.n	8006afa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006afa:	697b      	ldr	r3, [r7, #20]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	200010b0 	.word	0x200010b0
 8006b08:	20001090 	.word	0x20001090
 8006b0c:	20000bb8 	.word	0x20000bb8
 8006b10:	20001048 	.word	0x20001048
 8006b14:	20000bb4 	.word	0x20000bb4
 8006b18:	2000109c 	.word	0x2000109c

08006b1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b24:	4b06      	ldr	r3, [pc, #24]	@ (8006b40 <vTaskInternalSetTimeOutState+0x24>)
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b2c:	4b05      	ldr	r3, [pc, #20]	@ (8006b44 <vTaskInternalSetTimeOutState+0x28>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	605a      	str	r2, [r3, #4]
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	200010a0 	.word	0x200010a0
 8006b44:	2000108c 	.word	0x2000108c

08006b48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10b      	bne.n	8006b70 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	613b      	str	r3, [r7, #16]
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	e7fd      	b.n	8006b6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10b      	bne.n	8006b8e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	60fb      	str	r3, [r7, #12]
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	e7fd      	b.n	8006b8a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006b8e:	f000 fe93 	bl	80078b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b92:	4b1d      	ldr	r3, [pc, #116]	@ (8006c08 <xTaskCheckForTimeOut+0xc0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d102      	bne.n	8006bb2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	e023      	b.n	8006bfa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	4b15      	ldr	r3, [pc, #84]	@ (8006c0c <xTaskCheckForTimeOut+0xc4>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d007      	beq.n	8006bce <xTaskCheckForTimeOut+0x86>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d302      	bcc.n	8006bce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	61fb      	str	r3, [r7, #28]
 8006bcc:	e015      	b.n	8006bfa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d20b      	bcs.n	8006bf0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff ff99 	bl	8006b1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bea:	2300      	movs	r3, #0
 8006bec:	61fb      	str	r3, [r7, #28]
 8006bee:	e004      	b.n	8006bfa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bfa:	f000 fe8f 	bl	800791c <vPortExitCritical>

	return xReturn;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	2000108c 	.word	0x2000108c
 8006c0c:	200010a0 	.word	0x200010a0

08006c10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c14:	4b03      	ldr	r3, [pc, #12]	@ (8006c24 <vTaskMissedYield+0x14>)
 8006c16:	2201      	movs	r2, #1
 8006c18:	601a      	str	r2, [r3, #0]
}
 8006c1a:	bf00      	nop
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	2000109c 	.word	0x2000109c

08006c28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c30:	f000 f852 	bl	8006cd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c34:	4b06      	ldr	r3, [pc, #24]	@ (8006c50 <prvIdleTask+0x28>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d9f9      	bls.n	8006c30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c3c:	4b05      	ldr	r3, [pc, #20]	@ (8006c54 <prvIdleTask+0x2c>)
 8006c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c4c:	e7f0      	b.n	8006c30 <prvIdleTask+0x8>
 8006c4e:	bf00      	nop
 8006c50:	20000bb8 	.word	0x20000bb8
 8006c54:	e000ed04 	.word	0xe000ed04

08006c58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c5e:	2300      	movs	r3, #0
 8006c60:	607b      	str	r3, [r7, #4]
 8006c62:	e00c      	b.n	8006c7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4a12      	ldr	r2, [pc, #72]	@ (8006cb8 <prvInitialiseTaskLists+0x60>)
 8006c70:	4413      	add	r3, r2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fc72 	bl	800555c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	607b      	str	r3, [r7, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b37      	cmp	r3, #55	@ 0x37
 8006c82:	d9ef      	bls.n	8006c64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c84:	480d      	ldr	r0, [pc, #52]	@ (8006cbc <prvInitialiseTaskLists+0x64>)
 8006c86:	f7fe fc69 	bl	800555c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c8a:	480d      	ldr	r0, [pc, #52]	@ (8006cc0 <prvInitialiseTaskLists+0x68>)
 8006c8c:	f7fe fc66 	bl	800555c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c90:	480c      	ldr	r0, [pc, #48]	@ (8006cc4 <prvInitialiseTaskLists+0x6c>)
 8006c92:	f7fe fc63 	bl	800555c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c96:	480c      	ldr	r0, [pc, #48]	@ (8006cc8 <prvInitialiseTaskLists+0x70>)
 8006c98:	f7fe fc60 	bl	800555c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c9c:	480b      	ldr	r0, [pc, #44]	@ (8006ccc <prvInitialiseTaskLists+0x74>)
 8006c9e:	f7fe fc5d 	bl	800555c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <prvInitialiseTaskLists+0x78>)
 8006ca4:	4a05      	ldr	r2, [pc, #20]	@ (8006cbc <prvInitialiseTaskLists+0x64>)
 8006ca6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd4 <prvInitialiseTaskLists+0x7c>)
 8006caa:	4a05      	ldr	r2, [pc, #20]	@ (8006cc0 <prvInitialiseTaskLists+0x68>)
 8006cac:	601a      	str	r2, [r3, #0]
}
 8006cae:	bf00      	nop
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000bb8 	.word	0x20000bb8
 8006cbc:	20001018 	.word	0x20001018
 8006cc0:	2000102c 	.word	0x2000102c
 8006cc4:	20001048 	.word	0x20001048
 8006cc8:	2000105c 	.word	0x2000105c
 8006ccc:	20001074 	.word	0x20001074
 8006cd0:	20001040 	.word	0x20001040
 8006cd4:	20001044 	.word	0x20001044

08006cd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cde:	e019      	b.n	8006d14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ce0:	f000 fdea 	bl	80078b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce4:	4b10      	ldr	r3, [pc, #64]	@ (8006d28 <prvCheckTasksWaitingTermination+0x50>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fe fcbd 	bl	8005670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d2c <prvCheckTasksWaitingTermination+0x54>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8006d2c <prvCheckTasksWaitingTermination+0x54>)
 8006cfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d00:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <prvCheckTasksWaitingTermination+0x58>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	4a0a      	ldr	r2, [pc, #40]	@ (8006d30 <prvCheckTasksWaitingTermination+0x58>)
 8006d08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d0a:	f000 fe07 	bl	800791c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f810 	bl	8006d34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d14:	4b06      	ldr	r3, [pc, #24]	@ (8006d30 <prvCheckTasksWaitingTermination+0x58>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e1      	bne.n	8006ce0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d1c:	bf00      	nop
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	2000105c 	.word	0x2000105c
 8006d2c:	20001088 	.word	0x20001088
 8006d30:	20001070 	.word	0x20001070

08006d34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	3354      	adds	r3, #84	@ 0x54
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 fafb 	bl	800833c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d108      	bne.n	8006d62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 ff9f 	bl	8007c98 <vPortFree>
				vPortFree( pxTCB );
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 ff9c 	bl	8007c98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d60:	e019      	b.n	8006d96 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d103      	bne.n	8006d74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 ff93 	bl	8007c98 <vPortFree>
	}
 8006d72:	e010      	b.n	8006d96 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d00b      	beq.n	8006d96 <prvDeleteTCB+0x62>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	60fb      	str	r3, [r7, #12]
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	e7fd      	b.n	8006d92 <prvDeleteTCB+0x5e>
	}
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da6:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd8 <prvResetNextTaskUnblockTime+0x38>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006db0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ddc <prvResetNextTaskUnblockTime+0x3c>)
 8006db2:	f04f 32ff 	mov.w	r2, #4294967295
 8006db6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006db8:	e008      	b.n	8006dcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dba:	4b07      	ldr	r3, [pc, #28]	@ (8006dd8 <prvResetNextTaskUnblockTime+0x38>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4a04      	ldr	r2, [pc, #16]	@ (8006ddc <prvResetNextTaskUnblockTime+0x3c>)
 8006dca:	6013      	str	r3, [r2, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	20001040 	.word	0x20001040
 8006ddc:	200010a8 	.word	0x200010a8

08006de0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006de6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e14 <xTaskGetSchedulerState+0x34>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d102      	bne.n	8006df4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dee:	2301      	movs	r3, #1
 8006df0:	607b      	str	r3, [r7, #4]
 8006df2:	e008      	b.n	8006e06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006df4:	4b08      	ldr	r3, [pc, #32]	@ (8006e18 <xTaskGetSchedulerState+0x38>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	607b      	str	r3, [r7, #4]
 8006e00:	e001      	b.n	8006e06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e06:	687b      	ldr	r3, [r7, #4]
	}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	20001094 	.word	0x20001094
 8006e18:	200010b0 	.word	0x200010b0

08006e1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d058      	beq.n	8006ee4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e32:	4b2f      	ldr	r3, [pc, #188]	@ (8006ef0 <xTaskPriorityDisinherit+0xd4>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d00b      	beq.n	8006e54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	60fb      	str	r3, [r7, #12]
}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	e7fd      	b.n	8006e50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10b      	bne.n	8006e74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	60bb      	str	r3, [r7, #8]
}
 8006e6e:	bf00      	nop
 8006e70:	bf00      	nop
 8006e72:	e7fd      	b.n	8006e70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e78:	1e5a      	subs	r2, r3, #1
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d02c      	beq.n	8006ee4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d128      	bne.n	8006ee4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	3304      	adds	r3, #4
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fe fbea 	bl	8005670 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef4 <xTaskPriorityDisinherit+0xd8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d903      	bls.n	8006ec4 <xTaskPriorityDisinherit+0xa8>
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef4 <xTaskPriorityDisinherit+0xd8>)
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4a09      	ldr	r2, [pc, #36]	@ (8006ef8 <xTaskPriorityDisinherit+0xdc>)
 8006ed2:	441a      	add	r2, r3
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f7fe fb6b 	bl	80055b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ee4:	697b      	ldr	r3, [r7, #20]
	}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000bb4 	.word	0x20000bb4
 8006ef4:	20001090 	.word	0x20001090
 8006ef8:	20000bb8 	.word	0x20000bb8

08006efc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f06:	4b21      	ldr	r3, [pc, #132]	@ (8006f8c <prvAddCurrentTaskToDelayedList+0x90>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f0c:	4b20      	ldr	r3, [pc, #128]	@ (8006f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3304      	adds	r3, #4
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fe fbac 	bl	8005670 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d10a      	bne.n	8006f36 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d007      	beq.n	8006f36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f26:	4b1a      	ldr	r3, [pc, #104]	@ (8006f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4819      	ldr	r0, [pc, #100]	@ (8006f94 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f30:	f7fe fb41 	bl	80055b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f34:	e026      	b.n	8006f84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f3e:	4b14      	ldr	r3, [pc, #80]	@ (8006f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d209      	bcs.n	8006f62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f4e:	4b12      	ldr	r3, [pc, #72]	@ (8006f98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4b0f      	ldr	r3, [pc, #60]	@ (8006f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f7fe fb4f 	bl	80055fe <vListInsert>
}
 8006f60:	e010      	b.n	8006f84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f62:	4b0e      	ldr	r3, [pc, #56]	@ (8006f9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	4b0a      	ldr	r3, [pc, #40]	@ (8006f90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f7fe fb45 	bl	80055fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f74:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d202      	bcs.n	8006f84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f7e:	4a08      	ldr	r2, [pc, #32]	@ (8006fa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	6013      	str	r3, [r2, #0]
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	2000108c 	.word	0x2000108c
 8006f90:	20000bb4 	.word	0x20000bb4
 8006f94:	20001074 	.word	0x20001074
 8006f98:	20001044 	.word	0x20001044
 8006f9c:	20001040 	.word	0x20001040
 8006fa0:	200010a8 	.word	0x200010a8

08006fa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	@ 0x28
 8006fa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fae:	f000 fb13 	bl	80075d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8007028 <xTimerCreateTimerTask+0x84>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d021      	beq.n	8006ffe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fc2:	1d3a      	adds	r2, r7, #4
 8006fc4:	f107 0108 	add.w	r1, r7, #8
 8006fc8:	f107 030c 	add.w	r3, r7, #12
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe faab 	bl	8005528 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	9202      	str	r2, [sp, #8]
 8006fda:	9301      	str	r3, [sp, #4]
 8006fdc:	2302      	movs	r3, #2
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	460a      	mov	r2, r1
 8006fe4:	4911      	ldr	r1, [pc, #68]	@ (800702c <xTimerCreateTimerTask+0x88>)
 8006fe6:	4812      	ldr	r0, [pc, #72]	@ (8007030 <xTimerCreateTimerTask+0x8c>)
 8006fe8:	f7ff f8a2 	bl	8006130 <xTaskCreateStatic>
 8006fec:	4603      	mov	r3, r0
 8006fee:	4a11      	ldr	r2, [pc, #68]	@ (8007034 <xTimerCreateTimerTask+0x90>)
 8006ff0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ff2:	4b10      	ldr	r3, [pc, #64]	@ (8007034 <xTimerCreateTimerTask+0x90>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	613b      	str	r3, [r7, #16]
}
 8007016:	bf00      	nop
 8007018:	bf00      	nop
 800701a:	e7fd      	b.n	8007018 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800701c:	697b      	ldr	r3, [r7, #20]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	200010e4 	.word	0x200010e4
 800702c:	08009050 	.word	0x08009050
 8007030:	08007171 	.word	0x08007171
 8007034:	200010e8 	.word	0x200010e8

08007038 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08a      	sub	sp, #40	@ 0x28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007046:	2300      	movs	r3, #0
 8007048:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <xTimerGenericCommand+0x30>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	623b      	str	r3, [r7, #32]
}
 8007062:	bf00      	nop
 8007064:	bf00      	nop
 8007066:	e7fd      	b.n	8007064 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007068:	4b19      	ldr	r3, [pc, #100]	@ (80070d0 <xTimerGenericCommand+0x98>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d02a      	beq.n	80070c6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b05      	cmp	r3, #5
 8007080:	dc18      	bgt.n	80070b4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007082:	f7ff fead 	bl	8006de0 <xTaskGetSchedulerState>
 8007086:	4603      	mov	r3, r0
 8007088:	2b02      	cmp	r3, #2
 800708a:	d109      	bne.n	80070a0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800708c:	4b10      	ldr	r3, [pc, #64]	@ (80070d0 <xTimerGenericCommand+0x98>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	f107 0110 	add.w	r1, r7, #16
 8007094:	2300      	movs	r3, #0
 8007096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007098:	f7fe fc5a 	bl	8005950 <xQueueGenericSend>
 800709c:	6278      	str	r0, [r7, #36]	@ 0x24
 800709e:	e012      	b.n	80070c6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070a0:	4b0b      	ldr	r3, [pc, #44]	@ (80070d0 <xTimerGenericCommand+0x98>)
 80070a2:	6818      	ldr	r0, [r3, #0]
 80070a4:	f107 0110 	add.w	r1, r7, #16
 80070a8:	2300      	movs	r3, #0
 80070aa:	2200      	movs	r2, #0
 80070ac:	f7fe fc50 	bl	8005950 <xQueueGenericSend>
 80070b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80070b2:	e008      	b.n	80070c6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070b4:	4b06      	ldr	r3, [pc, #24]	@ (80070d0 <xTimerGenericCommand+0x98>)
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	f107 0110 	add.w	r1, r7, #16
 80070bc:	2300      	movs	r3, #0
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	f7fe fd48 	bl	8005b54 <xQueueGenericSendFromISR>
 80070c4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3728      	adds	r7, #40	@ 0x28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	200010e4 	.word	0x200010e4

080070d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af02      	add	r7, sp, #8
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070de:	4b23      	ldr	r3, [pc, #140]	@ (800716c <prvProcessExpiredTimer+0x98>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	3304      	adds	r3, #4
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fe fabf 	bl	8005670 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d023      	beq.n	8007148 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	18d1      	adds	r1, r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	6978      	ldr	r0, [r7, #20]
 800710e:	f000 f8d5 	bl	80072bc <prvInsertTimerInActiveList>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d020      	beq.n	800715a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007118:	2300      	movs	r3, #0
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	2300      	movs	r3, #0
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	2100      	movs	r1, #0
 8007122:	6978      	ldr	r0, [r7, #20]
 8007124:	f7ff ff88 	bl	8007038 <xTimerGenericCommand>
 8007128:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d114      	bne.n	800715a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	60fb      	str	r3, [r7, #12]
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	e7fd      	b.n	8007144 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	b2da      	uxtb	r2, r3
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	6978      	ldr	r0, [r7, #20]
 8007160:	4798      	blx	r3
}
 8007162:	bf00      	nop
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	200010dc 	.word	0x200010dc

08007170 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007178:	f107 0308 	add.w	r3, r7, #8
 800717c:	4618      	mov	r0, r3
 800717e:	f000 f859 	bl	8007234 <prvGetNextExpireTime>
 8007182:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4619      	mov	r1, r3
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f805 	bl	8007198 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800718e:	f000 f8d7 	bl	8007340 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007192:	bf00      	nop
 8007194:	e7f0      	b.n	8007178 <prvTimerTask+0x8>
	...

08007198 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071a2:	f7ff fa29 	bl	80065f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071a6:	f107 0308 	add.w	r3, r7, #8
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 f866 	bl	800727c <prvSampleTimeNow>
 80071b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d130      	bne.n	800721a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <prvProcessTimerOrBlockTask+0x3c>
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d806      	bhi.n	80071d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071c6:	f7ff fa25 	bl	8006614 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071ca:	68f9      	ldr	r1, [r7, #12]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff ff81 	bl	80070d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071d2:	e024      	b.n	800721e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d008      	beq.n	80071ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071da:	4b13      	ldr	r3, [pc, #76]	@ (8007228 <prvProcessTimerOrBlockTask+0x90>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <prvProcessTimerOrBlockTask+0x50>
 80071e4:	2301      	movs	r3, #1
 80071e6:	e000      	b.n	80071ea <prvProcessTimerOrBlockTask+0x52>
 80071e8:	2300      	movs	r3, #0
 80071ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071ec:	4b0f      	ldr	r3, [pc, #60]	@ (800722c <prvProcessTimerOrBlockTask+0x94>)
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	4619      	mov	r1, r3
 80071fa:	f7fe ff65 	bl	80060c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071fe:	f7ff fa09 	bl	8006614 <xTaskResumeAll>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007208:	4b09      	ldr	r3, [pc, #36]	@ (8007230 <prvProcessTimerOrBlockTask+0x98>)
 800720a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	f3bf 8f6f 	isb	sy
}
 8007218:	e001      	b.n	800721e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800721a:	f7ff f9fb 	bl	8006614 <xTaskResumeAll>
}
 800721e:	bf00      	nop
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	200010e0 	.word	0x200010e0
 800722c:	200010e4 	.word	0x200010e4
 8007230:	e000ed04 	.word	0xe000ed04

08007234 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800723c:	4b0e      	ldr	r3, [pc, #56]	@ (8007278 <prvGetNextExpireTime+0x44>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <prvGetNextExpireTime+0x16>
 8007246:	2201      	movs	r2, #1
 8007248:	e000      	b.n	800724c <prvGetNextExpireTime+0x18>
 800724a:	2200      	movs	r2, #0
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d105      	bne.n	8007264 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007258:	4b07      	ldr	r3, [pc, #28]	@ (8007278 <prvGetNextExpireTime+0x44>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	e001      	b.n	8007268 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007268:	68fb      	ldr	r3, [r7, #12]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	200010dc 	.word	0x200010dc

0800727c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007284:	f7ff fa64 	bl	8006750 <xTaskGetTickCount>
 8007288:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800728a:	4b0b      	ldr	r3, [pc, #44]	@ (80072b8 <prvSampleTimeNow+0x3c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	429a      	cmp	r2, r3
 8007292:	d205      	bcs.n	80072a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007294:	f000 f93a 	bl	800750c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	e002      	b.n	80072a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072a6:	4a04      	ldr	r2, [pc, #16]	@ (80072b8 <prvSampleTimeNow+0x3c>)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072ac:	68fb      	ldr	r3, [r7, #12]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	200010ec 	.word	0x200010ec

080072bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072ca:	2300      	movs	r3, #0
 80072cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d812      	bhi.n	8007308 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	1ad2      	subs	r2, r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d302      	bcc.n	80072f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072f0:	2301      	movs	r3, #1
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	e01b      	b.n	800732e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072f6:	4b10      	ldr	r3, [pc, #64]	@ (8007338 <prvInsertTimerInActiveList+0x7c>)
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3304      	adds	r3, #4
 80072fe:	4619      	mov	r1, r3
 8007300:	4610      	mov	r0, r2
 8007302:	f7fe f97c 	bl	80055fe <vListInsert>
 8007306:	e012      	b.n	800732e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d206      	bcs.n	800731e <prvInsertTimerInActiveList+0x62>
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	429a      	cmp	r2, r3
 8007316:	d302      	bcc.n	800731e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e007      	b.n	800732e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800731e:	4b07      	ldr	r3, [pc, #28]	@ (800733c <prvInsertTimerInActiveList+0x80>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3304      	adds	r3, #4
 8007326:	4619      	mov	r1, r3
 8007328:	4610      	mov	r0, r2
 800732a:	f7fe f968 	bl	80055fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800732e:	697b      	ldr	r3, [r7, #20]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	200010e0 	.word	0x200010e0
 800733c:	200010dc 	.word	0x200010dc

08007340 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08e      	sub	sp, #56	@ 0x38
 8007344:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007346:	e0ce      	b.n	80074e6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	da19      	bge.n	8007382 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800734e:	1d3b      	adds	r3, r7, #4
 8007350:	3304      	adds	r3, #4
 8007352:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	61fb      	str	r3, [r7, #28]
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	e7fd      	b.n	800736e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007378:	6850      	ldr	r0, [r2, #4]
 800737a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800737c:	6892      	ldr	r2, [r2, #8]
 800737e:	4611      	mov	r1, r2
 8007380:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	f2c0 80ae 	blt.w	80074e6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800738e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d004      	beq.n	80073a0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007398:	3304      	adds	r3, #4
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe f968 	bl	8005670 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073a0:	463b      	mov	r3, r7
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff ff6a 	bl	800727c <prvSampleTimeNow>
 80073a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b09      	cmp	r3, #9
 80073ae:	f200 8097 	bhi.w	80074e0 <prvProcessReceivedCommands+0x1a0>
 80073b2:	a201      	add	r2, pc, #4	@ (adr r2, 80073b8 <prvProcessReceivedCommands+0x78>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073e1 	.word	0x080073e1
 80073bc:	080073e1 	.word	0x080073e1
 80073c0:	080073e1 	.word	0x080073e1
 80073c4:	08007457 	.word	0x08007457
 80073c8:	0800746b 	.word	0x0800746b
 80073cc:	080074b7 	.word	0x080074b7
 80073d0:	080073e1 	.word	0x080073e1
 80073d4:	080073e1 	.word	0x080073e1
 80073d8:	08007457 	.word	0x08007457
 80073dc:	0800746b 	.word	0x0800746b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073e6:	f043 0301 	orr.w	r3, r3, #1
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	18d1      	adds	r1, r2, r3
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007400:	f7ff ff5c 	bl	80072bc <prvInsertTimerInActiveList>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d06c      	beq.n	80074e4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800740a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007410:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007414:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d061      	beq.n	80074e4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	441a      	add	r2, r3
 8007428:	2300      	movs	r3, #0
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	2300      	movs	r3, #0
 800742e:	2100      	movs	r1, #0
 8007430:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007432:	f7ff fe01 	bl	8007038 <xTimerGenericCommand>
 8007436:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d152      	bne.n	80074e4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	61bb      	str	r3, [r7, #24]
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	e7fd      	b.n	8007452 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007458:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800745c:	f023 0301 	bic.w	r3, r3, #1
 8007460:	b2da      	uxtb	r2, r3
 8007462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007464:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007468:	e03d      	b.n	80074e6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800746a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007470:	f043 0301 	orr.w	r3, r3, #1
 8007474:	b2da      	uxtb	r2, r3
 8007476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007478:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007480:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	617b      	str	r3, [r7, #20]
}
 800749c:	bf00      	nop
 800749e:	bf00      	nop
 80074a0:	e7fd      	b.n	800749e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a4:	699a      	ldr	r2, [r3, #24]
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	18d1      	adds	r1, r2, r3
 80074aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074b0:	f7ff ff04 	bl	80072bc <prvInsertTimerInActiveList>
					break;
 80074b4:	e017      	b.n	80074e6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d103      	bne.n	80074cc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80074c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074c6:	f000 fbe7 	bl	8007c98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074ca:	e00c      	b.n	80074e6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074d2:	f023 0301 	bic.w	r3, r3, #1
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074de:	e002      	b.n	80074e6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80074e0:	bf00      	nop
 80074e2:	e000      	b.n	80074e6 <prvProcessReceivedCommands+0x1a6>
					break;
 80074e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074e6:	4b08      	ldr	r3, [pc, #32]	@ (8007508 <prvProcessReceivedCommands+0x1c8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	1d39      	adds	r1, r7, #4
 80074ec:	2200      	movs	r2, #0
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fbce 	bl	8005c90 <xQueueReceive>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f47f af26 	bne.w	8007348 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80074fc:	bf00      	nop
 80074fe:	bf00      	nop
 8007500:	3730      	adds	r7, #48	@ 0x30
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	200010e4 	.word	0x200010e4

0800750c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007512:	e049      	b.n	80075a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007514:	4b2e      	ldr	r3, [pc, #184]	@ (80075d0 <prvSwitchTimerLists+0xc4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800751e:	4b2c      	ldr	r3, [pc, #176]	@ (80075d0 <prvSwitchTimerLists+0xc4>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3304      	adds	r3, #4
 800752c:	4618      	mov	r0, r3
 800752e:	f7fe f89f 	bl	8005670 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d02f      	beq.n	80075a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4413      	add	r3, r2
 8007550:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	429a      	cmp	r2, r3
 8007558:	d90e      	bls.n	8007578 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007566:	4b1a      	ldr	r3, [pc, #104]	@ (80075d0 <prvSwitchTimerLists+0xc4>)
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3304      	adds	r3, #4
 800756e:	4619      	mov	r1, r3
 8007570:	4610      	mov	r0, r2
 8007572:	f7fe f844 	bl	80055fe <vListInsert>
 8007576:	e017      	b.n	80075a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007578:	2300      	movs	r3, #0
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	2300      	movs	r3, #0
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	2100      	movs	r1, #0
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7ff fd58 	bl	8007038 <xTimerGenericCommand>
 8007588:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10b      	bne.n	80075a8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	603b      	str	r3, [r7, #0]
}
 80075a2:	bf00      	nop
 80075a4:	bf00      	nop
 80075a6:	e7fd      	b.n	80075a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075a8:	4b09      	ldr	r3, [pc, #36]	@ (80075d0 <prvSwitchTimerLists+0xc4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1b0      	bne.n	8007514 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075b2:	4b07      	ldr	r3, [pc, #28]	@ (80075d0 <prvSwitchTimerLists+0xc4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075b8:	4b06      	ldr	r3, [pc, #24]	@ (80075d4 <prvSwitchTimerLists+0xc8>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a04      	ldr	r2, [pc, #16]	@ (80075d0 <prvSwitchTimerLists+0xc4>)
 80075be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075c0:	4a04      	ldr	r2, [pc, #16]	@ (80075d4 <prvSwitchTimerLists+0xc8>)
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	6013      	str	r3, [r2, #0]
}
 80075c6:	bf00      	nop
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	200010dc 	.word	0x200010dc
 80075d4:	200010e0 	.word	0x200010e0

080075d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075de:	f000 f96b 	bl	80078b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075e2:	4b15      	ldr	r3, [pc, #84]	@ (8007638 <prvCheckForValidListAndQueue+0x60>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d120      	bne.n	800762c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075ea:	4814      	ldr	r0, [pc, #80]	@ (800763c <prvCheckForValidListAndQueue+0x64>)
 80075ec:	f7fd ffb6 	bl	800555c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075f0:	4813      	ldr	r0, [pc, #76]	@ (8007640 <prvCheckForValidListAndQueue+0x68>)
 80075f2:	f7fd ffb3 	bl	800555c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075f6:	4b13      	ldr	r3, [pc, #76]	@ (8007644 <prvCheckForValidListAndQueue+0x6c>)
 80075f8:	4a10      	ldr	r2, [pc, #64]	@ (800763c <prvCheckForValidListAndQueue+0x64>)
 80075fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80075fc:	4b12      	ldr	r3, [pc, #72]	@ (8007648 <prvCheckForValidListAndQueue+0x70>)
 80075fe:	4a10      	ldr	r2, [pc, #64]	@ (8007640 <prvCheckForValidListAndQueue+0x68>)
 8007600:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007602:	2300      	movs	r3, #0
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	4b11      	ldr	r3, [pc, #68]	@ (800764c <prvCheckForValidListAndQueue+0x74>)
 8007608:	4a11      	ldr	r2, [pc, #68]	@ (8007650 <prvCheckForValidListAndQueue+0x78>)
 800760a:	2110      	movs	r1, #16
 800760c:	200a      	movs	r0, #10
 800760e:	f7fe f8c3 	bl	8005798 <xQueueGenericCreateStatic>
 8007612:	4603      	mov	r3, r0
 8007614:	4a08      	ldr	r2, [pc, #32]	@ (8007638 <prvCheckForValidListAndQueue+0x60>)
 8007616:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007618:	4b07      	ldr	r3, [pc, #28]	@ (8007638 <prvCheckForValidListAndQueue+0x60>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007620:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <prvCheckForValidListAndQueue+0x60>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	490b      	ldr	r1, [pc, #44]	@ (8007654 <prvCheckForValidListAndQueue+0x7c>)
 8007626:	4618      	mov	r0, r3
 8007628:	f7fe fd24 	bl	8006074 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800762c:	f000 f976 	bl	800791c <vPortExitCritical>
}
 8007630:	bf00      	nop
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	200010e4 	.word	0x200010e4
 800763c:	200010b4 	.word	0x200010b4
 8007640:	200010c8 	.word	0x200010c8
 8007644:	200010dc 	.word	0x200010dc
 8007648:	200010e0 	.word	0x200010e0
 800764c:	20001190 	.word	0x20001190
 8007650:	200010f0 	.word	0x200010f0
 8007654:	08009058 	.word	0x08009058

08007658 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3b04      	subs	r3, #4
 8007668:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3b04      	subs	r3, #4
 8007676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f023 0201 	bic.w	r2, r3, #1
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3b04      	subs	r3, #4
 8007686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007688:	4a0c      	ldr	r2, [pc, #48]	@ (80076bc <pxPortInitialiseStack+0x64>)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3b14      	subs	r3, #20
 8007692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3b04      	subs	r3, #4
 800769e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f06f 0202 	mvn.w	r2, #2
 80076a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3b20      	subs	r3, #32
 80076ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076ae:	68fb      	ldr	r3, [r7, #12]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	080076c1 	.word	0x080076c1

080076c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076ca:	4b13      	ldr	r3, [pc, #76]	@ (8007718 <prvTaskExitError+0x58>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d2:	d00b      	beq.n	80076ec <prvTaskExitError+0x2c>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	60fb      	str	r3, [r7, #12]
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <prvTaskExitError+0x28>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	60bb      	str	r3, [r7, #8]
}
 80076fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007700:	bf00      	nop
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0fc      	beq.n	8007702 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007708:	bf00      	nop
 800770a:	bf00      	nop
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	20000010 	.word	0x20000010
 800771c:	00000000 	.word	0x00000000

08007720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007720:	4b07      	ldr	r3, [pc, #28]	@ (8007740 <pxCurrentTCBConst2>)
 8007722:	6819      	ldr	r1, [r3, #0]
 8007724:	6808      	ldr	r0, [r1, #0]
 8007726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	f380 8809 	msr	PSP, r0
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f04f 0000 	mov.w	r0, #0
 8007736:	f380 8811 	msr	BASEPRI, r0
 800773a:	4770      	bx	lr
 800773c:	f3af 8000 	nop.w

08007740 <pxCurrentTCBConst2>:
 8007740:	20000bb4 	.word	0x20000bb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop

08007748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007748:	4808      	ldr	r0, [pc, #32]	@ (800776c <prvPortStartFirstTask+0x24>)
 800774a:	6800      	ldr	r0, [r0, #0]
 800774c:	6800      	ldr	r0, [r0, #0]
 800774e:	f380 8808 	msr	MSP, r0
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f380 8814 	msr	CONTROL, r0
 800775a:	b662      	cpsie	i
 800775c:	b661      	cpsie	f
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	df00      	svc	0
 8007768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800776a:	bf00      	nop
 800776c:	e000ed08 	.word	0xe000ed08

08007770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007776:	4b47      	ldr	r3, [pc, #284]	@ (8007894 <xPortStartScheduler+0x124>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a47      	ldr	r2, [pc, #284]	@ (8007898 <xPortStartScheduler+0x128>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d10b      	bne.n	8007798 <xPortStartScheduler+0x28>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	60fb      	str	r3, [r7, #12]
}
 8007792:	bf00      	nop
 8007794:	bf00      	nop
 8007796:	e7fd      	b.n	8007794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007798:	4b3e      	ldr	r3, [pc, #248]	@ (8007894 <xPortStartScheduler+0x124>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a3f      	ldr	r2, [pc, #252]	@ (800789c <xPortStartScheduler+0x12c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d10b      	bne.n	80077ba <xPortStartScheduler+0x4a>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	613b      	str	r3, [r7, #16]
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop
 80077b8:	e7fd      	b.n	80077b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077ba:	4b39      	ldr	r3, [pc, #228]	@ (80078a0 <xPortStartScheduler+0x130>)
 80077bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	22ff      	movs	r2, #255	@ 0xff
 80077ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	4b31      	ldr	r3, [pc, #196]	@ (80078a4 <xPortStartScheduler+0x134>)
 80077e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077e2:	4b31      	ldr	r3, [pc, #196]	@ (80078a8 <xPortStartScheduler+0x138>)
 80077e4:	2207      	movs	r2, #7
 80077e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077e8:	e009      	b.n	80077fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80077ea:	4b2f      	ldr	r3, [pc, #188]	@ (80078a8 <xPortStartScheduler+0x138>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	4a2d      	ldr	r2, [pc, #180]	@ (80078a8 <xPortStartScheduler+0x138>)
 80077f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007806:	2b80      	cmp	r3, #128	@ 0x80
 8007808:	d0ef      	beq.n	80077ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800780a:	4b27      	ldr	r3, [pc, #156]	@ (80078a8 <xPortStartScheduler+0x138>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f1c3 0307 	rsb	r3, r3, #7
 8007812:	2b04      	cmp	r3, #4
 8007814:	d00b      	beq.n	800782e <xPortStartScheduler+0xbe>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60bb      	str	r3, [r7, #8]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800782e:	4b1e      	ldr	r3, [pc, #120]	@ (80078a8 <xPortStartScheduler+0x138>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	4a1c      	ldr	r2, [pc, #112]	@ (80078a8 <xPortStartScheduler+0x138>)
 8007836:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007838:	4b1b      	ldr	r3, [pc, #108]	@ (80078a8 <xPortStartScheduler+0x138>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007840:	4a19      	ldr	r2, [pc, #100]	@ (80078a8 <xPortStartScheduler+0x138>)
 8007842:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	b2da      	uxtb	r2, r3
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800784c:	4b17      	ldr	r3, [pc, #92]	@ (80078ac <xPortStartScheduler+0x13c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a16      	ldr	r2, [pc, #88]	@ (80078ac <xPortStartScheduler+0x13c>)
 8007852:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007858:	4b14      	ldr	r3, [pc, #80]	@ (80078ac <xPortStartScheduler+0x13c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a13      	ldr	r2, [pc, #76]	@ (80078ac <xPortStartScheduler+0x13c>)
 800785e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007862:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007864:	f000 f8da 	bl	8007a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007868:	4b11      	ldr	r3, [pc, #68]	@ (80078b0 <xPortStartScheduler+0x140>)
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800786e:	f000 f8f9 	bl	8007a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007872:	4b10      	ldr	r3, [pc, #64]	@ (80078b4 <xPortStartScheduler+0x144>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a0f      	ldr	r2, [pc, #60]	@ (80078b4 <xPortStartScheduler+0x144>)
 8007878:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800787c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800787e:	f7ff ff63 	bl	8007748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007882:	f7ff f82f 	bl	80068e4 <vTaskSwitchContext>
	prvTaskExitError();
 8007886:	f7ff ff1b 	bl	80076c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	e000ed00 	.word	0xe000ed00
 8007898:	410fc271 	.word	0x410fc271
 800789c:	410fc270 	.word	0x410fc270
 80078a0:	e000e400 	.word	0xe000e400
 80078a4:	200011e0 	.word	0x200011e0
 80078a8:	200011e4 	.word	0x200011e4
 80078ac:	e000ed20 	.word	0xe000ed20
 80078b0:	20000010 	.word	0x20000010
 80078b4:	e000ef34 	.word	0xe000ef34

080078b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	607b      	str	r3, [r7, #4]
}
 80078d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078d2:	4b10      	ldr	r3, [pc, #64]	@ (8007914 <vPortEnterCritical+0x5c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3301      	adds	r3, #1
 80078d8:	4a0e      	ldr	r2, [pc, #56]	@ (8007914 <vPortEnterCritical+0x5c>)
 80078da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007914 <vPortEnterCritical+0x5c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d110      	bne.n	8007906 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007918 <vPortEnterCritical+0x60>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00b      	beq.n	8007906 <vPortEnterCritical+0x4e>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	603b      	str	r3, [r7, #0]
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	e7fd      	b.n	8007902 <vPortEnterCritical+0x4a>
	}
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20000010 	.word	0x20000010
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007922:	4b12      	ldr	r3, [pc, #72]	@ (800796c <vPortExitCritical+0x50>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10b      	bne.n	8007942 <vPortExitCritical+0x26>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	607b      	str	r3, [r7, #4]
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	e7fd      	b.n	800793e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007942:	4b0a      	ldr	r3, [pc, #40]	@ (800796c <vPortExitCritical+0x50>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3b01      	subs	r3, #1
 8007948:	4a08      	ldr	r2, [pc, #32]	@ (800796c <vPortExitCritical+0x50>)
 800794a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800794c:	4b07      	ldr	r3, [pc, #28]	@ (800796c <vPortExitCritical+0x50>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d105      	bne.n	8007960 <vPortExitCritical+0x44>
 8007954:	2300      	movs	r3, #0
 8007956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f383 8811 	msr	BASEPRI, r3
}
 800795e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	20000010 	.word	0x20000010

08007970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007970:	f3ef 8009 	mrs	r0, PSP
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	4b15      	ldr	r3, [pc, #84]	@ (80079d0 <pxCurrentTCBConst>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	f01e 0f10 	tst.w	lr, #16
 8007980:	bf08      	it	eq
 8007982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798a:	6010      	str	r0, [r2, #0]
 800798c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007990:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007994:	f380 8811 	msr	BASEPRI, r0
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f7fe ffa0 	bl	80068e4 <vTaskSwitchContext>
 80079a4:	f04f 0000 	mov.w	r0, #0
 80079a8:	f380 8811 	msr	BASEPRI, r0
 80079ac:	bc09      	pop	{r0, r3}
 80079ae:	6819      	ldr	r1, [r3, #0]
 80079b0:	6808      	ldr	r0, [r1, #0]
 80079b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b6:	f01e 0f10 	tst.w	lr, #16
 80079ba:	bf08      	it	eq
 80079bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079c0:	f380 8809 	msr	PSP, r0
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	f3af 8000 	nop.w

080079d0 <pxCurrentTCBConst>:
 80079d0:	20000bb4 	.word	0x20000bb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop

080079d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	607b      	str	r3, [r7, #4]
}
 80079f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079f2:	f7fe febd 	bl	8006770 <xTaskIncrementTick>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079fc:	4b06      	ldr	r3, [pc, #24]	@ (8007a18 <xPortSysTickHandler+0x40>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	2300      	movs	r3, #0
 8007a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	f383 8811 	msr	BASEPRI, r3
}
 8007a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	e000ed04 	.word	0xe000ed04

08007a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a20:	4b0b      	ldr	r3, [pc, #44]	@ (8007a50 <vPortSetupTimerInterrupt+0x34>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a26:	4b0b      	ldr	r3, [pc, #44]	@ (8007a54 <vPortSetupTimerInterrupt+0x38>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a58 <vPortSetupTimerInterrupt+0x3c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0a      	ldr	r2, [pc, #40]	@ (8007a5c <vPortSetupTimerInterrupt+0x40>)
 8007a32:	fba2 2303 	umull	r2, r3, r2, r3
 8007a36:	099b      	lsrs	r3, r3, #6
 8007a38:	4a09      	ldr	r2, [pc, #36]	@ (8007a60 <vPortSetupTimerInterrupt+0x44>)
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a3e:	4b04      	ldr	r3, [pc, #16]	@ (8007a50 <vPortSetupTimerInterrupt+0x34>)
 8007a40:	2207      	movs	r2, #7
 8007a42:	601a      	str	r2, [r3, #0]
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	e000e010 	.word	0xe000e010
 8007a54:	e000e018 	.word	0xe000e018
 8007a58:	20000004 	.word	0x20000004
 8007a5c:	10624dd3 	.word	0x10624dd3
 8007a60:	e000e014 	.word	0xe000e014

08007a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007a74 <vPortEnableVFP+0x10>
 8007a68:	6801      	ldr	r1, [r0, #0]
 8007a6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a6e:	6001      	str	r1, [r0, #0]
 8007a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a72:	bf00      	nop
 8007a74:	e000ed88 	.word	0xe000ed88

08007a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a7e:	f3ef 8305 	mrs	r3, IPSR
 8007a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b0f      	cmp	r3, #15
 8007a88:	d915      	bls.n	8007ab6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a8a:	4a18      	ldr	r2, [pc, #96]	@ (8007aec <vPortValidateInterruptPriority+0x74>)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4413      	add	r3, r2
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a94:	4b16      	ldr	r3, [pc, #88]	@ (8007af0 <vPortValidateInterruptPriority+0x78>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	7afa      	ldrb	r2, [r7, #11]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d20b      	bcs.n	8007ab6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	607b      	str	r3, [r7, #4]
}
 8007ab0:	bf00      	nop
 8007ab2:	bf00      	nop
 8007ab4:	e7fd      	b.n	8007ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8007af4 <vPortValidateInterruptPriority+0x7c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007abe:	4b0e      	ldr	r3, [pc, #56]	@ (8007af8 <vPortValidateInterruptPriority+0x80>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d90b      	bls.n	8007ade <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	603b      	str	r3, [r7, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	bf00      	nop
 8007adc:	e7fd      	b.n	8007ada <vPortValidateInterruptPriority+0x62>
	}
 8007ade:	bf00      	nop
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	e000e3f0 	.word	0xe000e3f0
 8007af0:	200011e0 	.word	0x200011e0
 8007af4:	e000ed0c 	.word	0xe000ed0c
 8007af8:	200011e4 	.word	0x200011e4

08007afc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08a      	sub	sp, #40	@ 0x28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b08:	f7fe fd76 	bl	80065f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8007c80 <pvPortMalloc+0x184>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b14:	f000 f924 	bl	8007d60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b18:	4b5a      	ldr	r3, [pc, #360]	@ (8007c84 <pvPortMalloc+0x188>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f040 8095 	bne.w	8007c50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01e      	beq.n	8007b6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b2c:	2208      	movs	r2, #8
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4413      	add	r3, r2
 8007b32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f003 0307 	and.w	r3, r3, #7
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d015      	beq.n	8007b6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f023 0307 	bic.w	r3, r3, #7
 8007b44:	3308      	adds	r3, #8
 8007b46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00b      	beq.n	8007b6a <pvPortMalloc+0x6e>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	617b      	str	r3, [r7, #20]
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop
 8007b68:	e7fd      	b.n	8007b66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d06f      	beq.n	8007c50 <pvPortMalloc+0x154>
 8007b70:	4b45      	ldr	r3, [pc, #276]	@ (8007c88 <pvPortMalloc+0x18c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d86a      	bhi.n	8007c50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b7a:	4b44      	ldr	r3, [pc, #272]	@ (8007c8c <pvPortMalloc+0x190>)
 8007b7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b7e:	4b43      	ldr	r3, [pc, #268]	@ (8007c8c <pvPortMalloc+0x190>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b84:	e004      	b.n	8007b90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d903      	bls.n	8007ba2 <pvPortMalloc+0xa6>
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f1      	bne.n	8007b86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ba2:	4b37      	ldr	r3, [pc, #220]	@ (8007c80 <pvPortMalloc+0x184>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d051      	beq.n	8007c50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	4413      	add	r3, r2
 8007bb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	1ad2      	subs	r2, r2, r3
 8007bc6:	2308      	movs	r3, #8
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d920      	bls.n	8007c10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	f003 0307 	and.w	r3, r3, #7
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <pvPortMalloc+0xfc>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	613b      	str	r3, [r7, #16]
}
 8007bf2:	bf00      	nop
 8007bf4:	bf00      	nop
 8007bf6:	e7fd      	b.n	8007bf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	1ad2      	subs	r2, r2, r3
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c0a:	69b8      	ldr	r0, [r7, #24]
 8007c0c:	f000 f90a 	bl	8007e24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c10:	4b1d      	ldr	r3, [pc, #116]	@ (8007c88 <pvPortMalloc+0x18c>)
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8007c88 <pvPortMalloc+0x18c>)
 8007c1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007c88 <pvPortMalloc+0x18c>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b1b      	ldr	r3, [pc, #108]	@ (8007c90 <pvPortMalloc+0x194>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d203      	bcs.n	8007c32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c2a:	4b17      	ldr	r3, [pc, #92]	@ (8007c88 <pvPortMalloc+0x18c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a18      	ldr	r2, [pc, #96]	@ (8007c90 <pvPortMalloc+0x194>)
 8007c30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	4b13      	ldr	r3, [pc, #76]	@ (8007c84 <pvPortMalloc+0x188>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c46:	4b13      	ldr	r3, [pc, #76]	@ (8007c94 <pvPortMalloc+0x198>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	4a11      	ldr	r2, [pc, #68]	@ (8007c94 <pvPortMalloc+0x198>)
 8007c4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c50:	f7fe fce0 	bl	8006614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00b      	beq.n	8007c76 <pvPortMalloc+0x17a>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	60fb      	str	r3, [r7, #12]
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	e7fd      	b.n	8007c72 <pvPortMalloc+0x176>
	return pvReturn;
 8007c76:	69fb      	ldr	r3, [r7, #28]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3728      	adds	r7, #40	@ 0x28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20006010 	.word	0x20006010
 8007c84:	20006024 	.word	0x20006024
 8007c88:	20006014 	.word	0x20006014
 8007c8c:	20006008 	.word	0x20006008
 8007c90:	20006018 	.word	0x20006018
 8007c94:	2000601c 	.word	0x2000601c

08007c98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d04f      	beq.n	8007d4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007caa:	2308      	movs	r3, #8
 8007cac:	425b      	negs	r3, r3
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	4b25      	ldr	r3, [pc, #148]	@ (8007d54 <vPortFree+0xbc>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10b      	bne.n	8007cde <vPortFree+0x46>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60fb      	str	r3, [r7, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	e7fd      	b.n	8007cda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00b      	beq.n	8007cfe <vPortFree+0x66>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	60bb      	str	r3, [r7, #8]
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	4b14      	ldr	r3, [pc, #80]	@ (8007d54 <vPortFree+0xbc>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4013      	ands	r3, r2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01e      	beq.n	8007d4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d11a      	bne.n	8007d4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	4b0e      	ldr	r3, [pc, #56]	@ (8007d54 <vPortFree+0xbc>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	401a      	ands	r2, r3
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d24:	f7fe fc68 	bl	80065f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d58 <vPortFree+0xc0>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4413      	add	r3, r2
 8007d32:	4a09      	ldr	r2, [pc, #36]	@ (8007d58 <vPortFree+0xc0>)
 8007d34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d36:	6938      	ldr	r0, [r7, #16]
 8007d38:	f000 f874 	bl	8007e24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d3c:	4b07      	ldr	r3, [pc, #28]	@ (8007d5c <vPortFree+0xc4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3301      	adds	r3, #1
 8007d42:	4a06      	ldr	r2, [pc, #24]	@ (8007d5c <vPortFree+0xc4>)
 8007d44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d46:	f7fe fc65 	bl	8006614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d4a:	bf00      	nop
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	20006024 	.word	0x20006024
 8007d58:	20006014 	.word	0x20006014
 8007d5c:	20006020 	.word	0x20006020

08007d60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d66:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8007d6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d6c:	4b27      	ldr	r3, [pc, #156]	@ (8007e0c <prvHeapInit+0xac>)
 8007d6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00c      	beq.n	8007d94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3307      	adds	r3, #7
 8007d7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0307 	bic.w	r3, r3, #7
 8007d86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8007e0c <prvHeapInit+0xac>)
 8007d90:	4413      	add	r3, r2
 8007d92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d98:	4a1d      	ldr	r2, [pc, #116]	@ (8007e10 <prvHeapInit+0xb0>)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8007e10 <prvHeapInit+0xb0>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	4413      	add	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dac:	2208      	movs	r2, #8
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4a15      	ldr	r2, [pc, #84]	@ (8007e14 <prvHeapInit+0xb4>)
 8007dc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007dc2:	4b14      	ldr	r3, [pc, #80]	@ (8007e14 <prvHeapInit+0xb4>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dca:	4b12      	ldr	r3, [pc, #72]	@ (8007e14 <prvHeapInit+0xb4>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	1ad2      	subs	r2, r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007de0:	4b0c      	ldr	r3, [pc, #48]	@ (8007e14 <prvHeapInit+0xb4>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	4a0a      	ldr	r2, [pc, #40]	@ (8007e18 <prvHeapInit+0xb8>)
 8007dee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	4a09      	ldr	r2, [pc, #36]	@ (8007e1c <prvHeapInit+0xbc>)
 8007df6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007df8:	4b09      	ldr	r3, [pc, #36]	@ (8007e20 <prvHeapInit+0xc0>)
 8007dfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007dfe:	601a      	str	r2, [r3, #0]
}
 8007e00:	bf00      	nop
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	200011e8 	.word	0x200011e8
 8007e10:	20006008 	.word	0x20006008
 8007e14:	20006010 	.word	0x20006010
 8007e18:	20006018 	.word	0x20006018
 8007e1c:	20006014 	.word	0x20006014
 8007e20:	20006024 	.word	0x20006024

08007e24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e2c:	4b28      	ldr	r3, [pc, #160]	@ (8007ed0 <prvInsertBlockIntoFreeList+0xac>)
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	e002      	b.n	8007e38 <prvInsertBlockIntoFreeList+0x14>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d8f7      	bhi.n	8007e32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d108      	bne.n	8007e66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	441a      	add	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	441a      	add	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d118      	bne.n	8007eac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4b15      	ldr	r3, [pc, #84]	@ (8007ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d00d      	beq.n	8007ea2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	441a      	add	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	e008      	b.n	8007eb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	e003      	b.n	8007eb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d002      	beq.n	8007ec2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ec2:	bf00      	nop
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20006008 	.word	0x20006008
 8007ed4:	20006010 	.word	0x20006010

08007ed8 <std>:
 8007ed8:	2300      	movs	r3, #0
 8007eda:	b510      	push	{r4, lr}
 8007edc:	4604      	mov	r4, r0
 8007ede:	e9c0 3300 	strd	r3, r3, [r0]
 8007ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ee6:	6083      	str	r3, [r0, #8]
 8007ee8:	8181      	strh	r1, [r0, #12]
 8007eea:	6643      	str	r3, [r0, #100]	@ 0x64
 8007eec:	81c2      	strh	r2, [r0, #14]
 8007eee:	6183      	str	r3, [r0, #24]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	2208      	movs	r2, #8
 8007ef4:	305c      	adds	r0, #92	@ 0x5c
 8007ef6:	f000 fa09 	bl	800830c <memset>
 8007efa:	4b0d      	ldr	r3, [pc, #52]	@ (8007f30 <std+0x58>)
 8007efc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007efe:	4b0d      	ldr	r3, [pc, #52]	@ (8007f34 <std+0x5c>)
 8007f00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f02:	4b0d      	ldr	r3, [pc, #52]	@ (8007f38 <std+0x60>)
 8007f04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f06:	4b0d      	ldr	r3, [pc, #52]	@ (8007f3c <std+0x64>)
 8007f08:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f40 <std+0x68>)
 8007f0c:	6224      	str	r4, [r4, #32]
 8007f0e:	429c      	cmp	r4, r3
 8007f10:	d006      	beq.n	8007f20 <std+0x48>
 8007f12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f16:	4294      	cmp	r4, r2
 8007f18:	d002      	beq.n	8007f20 <std+0x48>
 8007f1a:	33d0      	adds	r3, #208	@ 0xd0
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	d105      	bne.n	8007f2c <std+0x54>
 8007f20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f28:	f000 bac6 	b.w	80084b8 <__retarget_lock_init_recursive>
 8007f2c:	bd10      	pop	{r4, pc}
 8007f2e:	bf00      	nop
 8007f30:	0800815d 	.word	0x0800815d
 8007f34:	0800817f 	.word	0x0800817f
 8007f38:	080081b7 	.word	0x080081b7
 8007f3c:	080081db 	.word	0x080081db
 8007f40:	20006028 	.word	0x20006028

08007f44 <stdio_exit_handler>:
 8007f44:	4a02      	ldr	r2, [pc, #8]	@ (8007f50 <stdio_exit_handler+0xc>)
 8007f46:	4903      	ldr	r1, [pc, #12]	@ (8007f54 <stdio_exit_handler+0x10>)
 8007f48:	4803      	ldr	r0, [pc, #12]	@ (8007f58 <stdio_exit_handler+0x14>)
 8007f4a:	f000 b869 	b.w	8008020 <_fwalk_sglue>
 8007f4e:	bf00      	nop
 8007f50:	20000014 	.word	0x20000014
 8007f54:	08008d9d 	.word	0x08008d9d
 8007f58:	20000024 	.word	0x20000024

08007f5c <cleanup_stdio>:
 8007f5c:	6841      	ldr	r1, [r0, #4]
 8007f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8007f90 <cleanup_stdio+0x34>)
 8007f60:	4299      	cmp	r1, r3
 8007f62:	b510      	push	{r4, lr}
 8007f64:	4604      	mov	r4, r0
 8007f66:	d001      	beq.n	8007f6c <cleanup_stdio+0x10>
 8007f68:	f000 ff18 	bl	8008d9c <_fflush_r>
 8007f6c:	68a1      	ldr	r1, [r4, #8]
 8007f6e:	4b09      	ldr	r3, [pc, #36]	@ (8007f94 <cleanup_stdio+0x38>)
 8007f70:	4299      	cmp	r1, r3
 8007f72:	d002      	beq.n	8007f7a <cleanup_stdio+0x1e>
 8007f74:	4620      	mov	r0, r4
 8007f76:	f000 ff11 	bl	8008d9c <_fflush_r>
 8007f7a:	68e1      	ldr	r1, [r4, #12]
 8007f7c:	4b06      	ldr	r3, [pc, #24]	@ (8007f98 <cleanup_stdio+0x3c>)
 8007f7e:	4299      	cmp	r1, r3
 8007f80:	d004      	beq.n	8007f8c <cleanup_stdio+0x30>
 8007f82:	4620      	mov	r0, r4
 8007f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f88:	f000 bf08 	b.w	8008d9c <_fflush_r>
 8007f8c:	bd10      	pop	{r4, pc}
 8007f8e:	bf00      	nop
 8007f90:	20006028 	.word	0x20006028
 8007f94:	20006090 	.word	0x20006090
 8007f98:	200060f8 	.word	0x200060f8

08007f9c <global_stdio_init.part.0>:
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8007fcc <global_stdio_init.part.0+0x30>)
 8007fa0:	4c0b      	ldr	r4, [pc, #44]	@ (8007fd0 <global_stdio_init.part.0+0x34>)
 8007fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8007fd4 <global_stdio_init.part.0+0x38>)
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2104      	movs	r1, #4
 8007fac:	f7ff ff94 	bl	8007ed8 <std>
 8007fb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	2109      	movs	r1, #9
 8007fb8:	f7ff ff8e 	bl	8007ed8 <std>
 8007fbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fc6:	2112      	movs	r1, #18
 8007fc8:	f7ff bf86 	b.w	8007ed8 <std>
 8007fcc:	20006160 	.word	0x20006160
 8007fd0:	20006028 	.word	0x20006028
 8007fd4:	08007f45 	.word	0x08007f45

08007fd8 <__sfp_lock_acquire>:
 8007fd8:	4801      	ldr	r0, [pc, #4]	@ (8007fe0 <__sfp_lock_acquire+0x8>)
 8007fda:	f000 ba6e 	b.w	80084ba <__retarget_lock_acquire_recursive>
 8007fde:	bf00      	nop
 8007fe0:	20006169 	.word	0x20006169

08007fe4 <__sfp_lock_release>:
 8007fe4:	4801      	ldr	r0, [pc, #4]	@ (8007fec <__sfp_lock_release+0x8>)
 8007fe6:	f000 ba69 	b.w	80084bc <__retarget_lock_release_recursive>
 8007fea:	bf00      	nop
 8007fec:	20006169 	.word	0x20006169

08007ff0 <__sinit>:
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	f7ff fff0 	bl	8007fd8 <__sfp_lock_acquire>
 8007ff8:	6a23      	ldr	r3, [r4, #32]
 8007ffa:	b11b      	cbz	r3, 8008004 <__sinit+0x14>
 8007ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008000:	f7ff bff0 	b.w	8007fe4 <__sfp_lock_release>
 8008004:	4b04      	ldr	r3, [pc, #16]	@ (8008018 <__sinit+0x28>)
 8008006:	6223      	str	r3, [r4, #32]
 8008008:	4b04      	ldr	r3, [pc, #16]	@ (800801c <__sinit+0x2c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1f5      	bne.n	8007ffc <__sinit+0xc>
 8008010:	f7ff ffc4 	bl	8007f9c <global_stdio_init.part.0>
 8008014:	e7f2      	b.n	8007ffc <__sinit+0xc>
 8008016:	bf00      	nop
 8008018:	08007f5d 	.word	0x08007f5d
 800801c:	20006160 	.word	0x20006160

08008020 <_fwalk_sglue>:
 8008020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008024:	4607      	mov	r7, r0
 8008026:	4688      	mov	r8, r1
 8008028:	4614      	mov	r4, r2
 800802a:	2600      	movs	r6, #0
 800802c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008030:	f1b9 0901 	subs.w	r9, r9, #1
 8008034:	d505      	bpl.n	8008042 <_fwalk_sglue+0x22>
 8008036:	6824      	ldr	r4, [r4, #0]
 8008038:	2c00      	cmp	r4, #0
 800803a:	d1f7      	bne.n	800802c <_fwalk_sglue+0xc>
 800803c:	4630      	mov	r0, r6
 800803e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d907      	bls.n	8008058 <_fwalk_sglue+0x38>
 8008048:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800804c:	3301      	adds	r3, #1
 800804e:	d003      	beq.n	8008058 <_fwalk_sglue+0x38>
 8008050:	4629      	mov	r1, r5
 8008052:	4638      	mov	r0, r7
 8008054:	47c0      	blx	r8
 8008056:	4306      	orrs	r6, r0
 8008058:	3568      	adds	r5, #104	@ 0x68
 800805a:	e7e9      	b.n	8008030 <_fwalk_sglue+0x10>

0800805c <_puts_r>:
 800805c:	6a03      	ldr	r3, [r0, #32]
 800805e:	b570      	push	{r4, r5, r6, lr}
 8008060:	6884      	ldr	r4, [r0, #8]
 8008062:	4605      	mov	r5, r0
 8008064:	460e      	mov	r6, r1
 8008066:	b90b      	cbnz	r3, 800806c <_puts_r+0x10>
 8008068:	f7ff ffc2 	bl	8007ff0 <__sinit>
 800806c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800806e:	07db      	lsls	r3, r3, #31
 8008070:	d405      	bmi.n	800807e <_puts_r+0x22>
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	0598      	lsls	r0, r3, #22
 8008076:	d402      	bmi.n	800807e <_puts_r+0x22>
 8008078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800807a:	f000 fa1e 	bl	80084ba <__retarget_lock_acquire_recursive>
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	0719      	lsls	r1, r3, #28
 8008082:	d502      	bpl.n	800808a <_puts_r+0x2e>
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d135      	bne.n	80080f6 <_puts_r+0x9a>
 800808a:	4621      	mov	r1, r4
 800808c:	4628      	mov	r0, r5
 800808e:	f000 f8e7 	bl	8008260 <__swsetup_r>
 8008092:	b380      	cbz	r0, 80080f6 <_puts_r+0x9a>
 8008094:	f04f 35ff 	mov.w	r5, #4294967295
 8008098:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800809a:	07da      	lsls	r2, r3, #31
 800809c:	d405      	bmi.n	80080aa <_puts_r+0x4e>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	059b      	lsls	r3, r3, #22
 80080a2:	d402      	bmi.n	80080aa <_puts_r+0x4e>
 80080a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080a6:	f000 fa09 	bl	80084bc <__retarget_lock_release_recursive>
 80080aa:	4628      	mov	r0, r5
 80080ac:	bd70      	pop	{r4, r5, r6, pc}
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	da04      	bge.n	80080bc <_puts_r+0x60>
 80080b2:	69a2      	ldr	r2, [r4, #24]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	dc17      	bgt.n	80080e8 <_puts_r+0x8c>
 80080b8:	290a      	cmp	r1, #10
 80080ba:	d015      	beq.n	80080e8 <_puts_r+0x8c>
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	6022      	str	r2, [r4, #0]
 80080c2:	7019      	strb	r1, [r3, #0]
 80080c4:	68a3      	ldr	r3, [r4, #8]
 80080c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080ca:	3b01      	subs	r3, #1
 80080cc:	60a3      	str	r3, [r4, #8]
 80080ce:	2900      	cmp	r1, #0
 80080d0:	d1ed      	bne.n	80080ae <_puts_r+0x52>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	da11      	bge.n	80080fa <_puts_r+0x9e>
 80080d6:	4622      	mov	r2, r4
 80080d8:	210a      	movs	r1, #10
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 f881 	bl	80081e2 <__swbuf_r>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d0d7      	beq.n	8008094 <_puts_r+0x38>
 80080e4:	250a      	movs	r5, #10
 80080e6:	e7d7      	b.n	8008098 <_puts_r+0x3c>
 80080e8:	4622      	mov	r2, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	f000 f879 	bl	80081e2 <__swbuf_r>
 80080f0:	3001      	adds	r0, #1
 80080f2:	d1e7      	bne.n	80080c4 <_puts_r+0x68>
 80080f4:	e7ce      	b.n	8008094 <_puts_r+0x38>
 80080f6:	3e01      	subs	r6, #1
 80080f8:	e7e4      	b.n	80080c4 <_puts_r+0x68>
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	6022      	str	r2, [r4, #0]
 8008100:	220a      	movs	r2, #10
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	e7ee      	b.n	80080e4 <_puts_r+0x88>
	...

08008108 <puts>:
 8008108:	4b02      	ldr	r3, [pc, #8]	@ (8008114 <puts+0xc>)
 800810a:	4601      	mov	r1, r0
 800810c:	6818      	ldr	r0, [r3, #0]
 800810e:	f7ff bfa5 	b.w	800805c <_puts_r>
 8008112:	bf00      	nop
 8008114:	20000020 	.word	0x20000020

08008118 <siprintf>:
 8008118:	b40e      	push	{r1, r2, r3}
 800811a:	b510      	push	{r4, lr}
 800811c:	b09d      	sub	sp, #116	@ 0x74
 800811e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008120:	9002      	str	r0, [sp, #8]
 8008122:	9006      	str	r0, [sp, #24]
 8008124:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008128:	480a      	ldr	r0, [pc, #40]	@ (8008154 <siprintf+0x3c>)
 800812a:	9107      	str	r1, [sp, #28]
 800812c:	9104      	str	r1, [sp, #16]
 800812e:	490a      	ldr	r1, [pc, #40]	@ (8008158 <siprintf+0x40>)
 8008130:	f853 2b04 	ldr.w	r2, [r3], #4
 8008134:	9105      	str	r1, [sp, #20]
 8008136:	2400      	movs	r4, #0
 8008138:	a902      	add	r1, sp, #8
 800813a:	6800      	ldr	r0, [r0, #0]
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008140:	f000 fb20 	bl	8008784 <_svfiprintf_r>
 8008144:	9b02      	ldr	r3, [sp, #8]
 8008146:	701c      	strb	r4, [r3, #0]
 8008148:	b01d      	add	sp, #116	@ 0x74
 800814a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800814e:	b003      	add	sp, #12
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20000020 	.word	0x20000020
 8008158:	ffff0208 	.word	0xffff0208

0800815c <__sread>:
 800815c:	b510      	push	{r4, lr}
 800815e:	460c      	mov	r4, r1
 8008160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008164:	f000 f95a 	bl	800841c <_read_r>
 8008168:	2800      	cmp	r0, #0
 800816a:	bfab      	itete	ge
 800816c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800816e:	89a3      	ldrhlt	r3, [r4, #12]
 8008170:	181b      	addge	r3, r3, r0
 8008172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008176:	bfac      	ite	ge
 8008178:	6563      	strge	r3, [r4, #84]	@ 0x54
 800817a:	81a3      	strhlt	r3, [r4, #12]
 800817c:	bd10      	pop	{r4, pc}

0800817e <__swrite>:
 800817e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008182:	461f      	mov	r7, r3
 8008184:	898b      	ldrh	r3, [r1, #12]
 8008186:	05db      	lsls	r3, r3, #23
 8008188:	4605      	mov	r5, r0
 800818a:	460c      	mov	r4, r1
 800818c:	4616      	mov	r6, r2
 800818e:	d505      	bpl.n	800819c <__swrite+0x1e>
 8008190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008194:	2302      	movs	r3, #2
 8008196:	2200      	movs	r2, #0
 8008198:	f000 f92e 	bl	80083f8 <_lseek_r>
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081a6:	81a3      	strh	r3, [r4, #12]
 80081a8:	4632      	mov	r2, r6
 80081aa:	463b      	mov	r3, r7
 80081ac:	4628      	mov	r0, r5
 80081ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081b2:	f000 b945 	b.w	8008440 <_write_r>

080081b6 <__sseek>:
 80081b6:	b510      	push	{r4, lr}
 80081b8:	460c      	mov	r4, r1
 80081ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081be:	f000 f91b 	bl	80083f8 <_lseek_r>
 80081c2:	1c43      	adds	r3, r0, #1
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	bf15      	itete	ne
 80081c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081d2:	81a3      	strheq	r3, [r4, #12]
 80081d4:	bf18      	it	ne
 80081d6:	81a3      	strhne	r3, [r4, #12]
 80081d8:	bd10      	pop	{r4, pc}

080081da <__sclose>:
 80081da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081de:	f000 b89d 	b.w	800831c <_close_r>

080081e2 <__swbuf_r>:
 80081e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e4:	460e      	mov	r6, r1
 80081e6:	4614      	mov	r4, r2
 80081e8:	4605      	mov	r5, r0
 80081ea:	b118      	cbz	r0, 80081f4 <__swbuf_r+0x12>
 80081ec:	6a03      	ldr	r3, [r0, #32]
 80081ee:	b90b      	cbnz	r3, 80081f4 <__swbuf_r+0x12>
 80081f0:	f7ff fefe 	bl	8007ff0 <__sinit>
 80081f4:	69a3      	ldr	r3, [r4, #24]
 80081f6:	60a3      	str	r3, [r4, #8]
 80081f8:	89a3      	ldrh	r3, [r4, #12]
 80081fa:	071a      	lsls	r2, r3, #28
 80081fc:	d501      	bpl.n	8008202 <__swbuf_r+0x20>
 80081fe:	6923      	ldr	r3, [r4, #16]
 8008200:	b943      	cbnz	r3, 8008214 <__swbuf_r+0x32>
 8008202:	4621      	mov	r1, r4
 8008204:	4628      	mov	r0, r5
 8008206:	f000 f82b 	bl	8008260 <__swsetup_r>
 800820a:	b118      	cbz	r0, 8008214 <__swbuf_r+0x32>
 800820c:	f04f 37ff 	mov.w	r7, #4294967295
 8008210:	4638      	mov	r0, r7
 8008212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	6922      	ldr	r2, [r4, #16]
 8008218:	1a98      	subs	r0, r3, r2
 800821a:	6963      	ldr	r3, [r4, #20]
 800821c:	b2f6      	uxtb	r6, r6
 800821e:	4283      	cmp	r3, r0
 8008220:	4637      	mov	r7, r6
 8008222:	dc05      	bgt.n	8008230 <__swbuf_r+0x4e>
 8008224:	4621      	mov	r1, r4
 8008226:	4628      	mov	r0, r5
 8008228:	f000 fdb8 	bl	8008d9c <_fflush_r>
 800822c:	2800      	cmp	r0, #0
 800822e:	d1ed      	bne.n	800820c <__swbuf_r+0x2a>
 8008230:	68a3      	ldr	r3, [r4, #8]
 8008232:	3b01      	subs	r3, #1
 8008234:	60a3      	str	r3, [r4, #8]
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	6022      	str	r2, [r4, #0]
 800823c:	701e      	strb	r6, [r3, #0]
 800823e:	6962      	ldr	r2, [r4, #20]
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	429a      	cmp	r2, r3
 8008244:	d004      	beq.n	8008250 <__swbuf_r+0x6e>
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	07db      	lsls	r3, r3, #31
 800824a:	d5e1      	bpl.n	8008210 <__swbuf_r+0x2e>
 800824c:	2e0a      	cmp	r6, #10
 800824e:	d1df      	bne.n	8008210 <__swbuf_r+0x2e>
 8008250:	4621      	mov	r1, r4
 8008252:	4628      	mov	r0, r5
 8008254:	f000 fda2 	bl	8008d9c <_fflush_r>
 8008258:	2800      	cmp	r0, #0
 800825a:	d0d9      	beq.n	8008210 <__swbuf_r+0x2e>
 800825c:	e7d6      	b.n	800820c <__swbuf_r+0x2a>
	...

08008260 <__swsetup_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4b29      	ldr	r3, [pc, #164]	@ (8008308 <__swsetup_r+0xa8>)
 8008264:	4605      	mov	r5, r0
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	460c      	mov	r4, r1
 800826a:	b118      	cbz	r0, 8008274 <__swsetup_r+0x14>
 800826c:	6a03      	ldr	r3, [r0, #32]
 800826e:	b90b      	cbnz	r3, 8008274 <__swsetup_r+0x14>
 8008270:	f7ff febe 	bl	8007ff0 <__sinit>
 8008274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008278:	0719      	lsls	r1, r3, #28
 800827a:	d422      	bmi.n	80082c2 <__swsetup_r+0x62>
 800827c:	06da      	lsls	r2, r3, #27
 800827e:	d407      	bmi.n	8008290 <__swsetup_r+0x30>
 8008280:	2209      	movs	r2, #9
 8008282:	602a      	str	r2, [r5, #0]
 8008284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	f04f 30ff 	mov.w	r0, #4294967295
 800828e:	e033      	b.n	80082f8 <__swsetup_r+0x98>
 8008290:	0758      	lsls	r0, r3, #29
 8008292:	d512      	bpl.n	80082ba <__swsetup_r+0x5a>
 8008294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008296:	b141      	cbz	r1, 80082aa <__swsetup_r+0x4a>
 8008298:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800829c:	4299      	cmp	r1, r3
 800829e:	d002      	beq.n	80082a6 <__swsetup_r+0x46>
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 f91b 	bl	80084dc <_free_r>
 80082a6:	2300      	movs	r3, #0
 80082a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082b0:	81a3      	strh	r3, [r4, #12]
 80082b2:	2300      	movs	r3, #0
 80082b4:	6063      	str	r3, [r4, #4]
 80082b6:	6923      	ldr	r3, [r4, #16]
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	f043 0308 	orr.w	r3, r3, #8
 80082c0:	81a3      	strh	r3, [r4, #12]
 80082c2:	6923      	ldr	r3, [r4, #16]
 80082c4:	b94b      	cbnz	r3, 80082da <__swsetup_r+0x7a>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082d0:	d003      	beq.n	80082da <__swsetup_r+0x7a>
 80082d2:	4621      	mov	r1, r4
 80082d4:	4628      	mov	r0, r5
 80082d6:	f000 fdaf 	bl	8008e38 <__smakebuf_r>
 80082da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082de:	f013 0201 	ands.w	r2, r3, #1
 80082e2:	d00a      	beq.n	80082fa <__swsetup_r+0x9a>
 80082e4:	2200      	movs	r2, #0
 80082e6:	60a2      	str	r2, [r4, #8]
 80082e8:	6962      	ldr	r2, [r4, #20]
 80082ea:	4252      	negs	r2, r2
 80082ec:	61a2      	str	r2, [r4, #24]
 80082ee:	6922      	ldr	r2, [r4, #16]
 80082f0:	b942      	cbnz	r2, 8008304 <__swsetup_r+0xa4>
 80082f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082f6:	d1c5      	bne.n	8008284 <__swsetup_r+0x24>
 80082f8:	bd38      	pop	{r3, r4, r5, pc}
 80082fa:	0799      	lsls	r1, r3, #30
 80082fc:	bf58      	it	pl
 80082fe:	6962      	ldrpl	r2, [r4, #20]
 8008300:	60a2      	str	r2, [r4, #8]
 8008302:	e7f4      	b.n	80082ee <__swsetup_r+0x8e>
 8008304:	2000      	movs	r0, #0
 8008306:	e7f7      	b.n	80082f8 <__swsetup_r+0x98>
 8008308:	20000020 	.word	0x20000020

0800830c <memset>:
 800830c:	4402      	add	r2, r0
 800830e:	4603      	mov	r3, r0
 8008310:	4293      	cmp	r3, r2
 8008312:	d100      	bne.n	8008316 <memset+0xa>
 8008314:	4770      	bx	lr
 8008316:	f803 1b01 	strb.w	r1, [r3], #1
 800831a:	e7f9      	b.n	8008310 <memset+0x4>

0800831c <_close_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d06      	ldr	r5, [pc, #24]	@ (8008338 <_close_r+0x1c>)
 8008320:	2300      	movs	r3, #0
 8008322:	4604      	mov	r4, r0
 8008324:	4608      	mov	r0, r1
 8008326:	602b      	str	r3, [r5, #0]
 8008328:	f7f9 ff85 	bl	8002236 <_close>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d102      	bne.n	8008336 <_close_r+0x1a>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	b103      	cbz	r3, 8008336 <_close_r+0x1a>
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	20006164 	.word	0x20006164

0800833c <_reclaim_reent>:
 800833c:	4b2d      	ldr	r3, [pc, #180]	@ (80083f4 <_reclaim_reent+0xb8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4283      	cmp	r3, r0
 8008342:	b570      	push	{r4, r5, r6, lr}
 8008344:	4604      	mov	r4, r0
 8008346:	d053      	beq.n	80083f0 <_reclaim_reent+0xb4>
 8008348:	69c3      	ldr	r3, [r0, #28]
 800834a:	b31b      	cbz	r3, 8008394 <_reclaim_reent+0x58>
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	b163      	cbz	r3, 800836a <_reclaim_reent+0x2e>
 8008350:	2500      	movs	r5, #0
 8008352:	69e3      	ldr	r3, [r4, #28]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	5959      	ldr	r1, [r3, r5]
 8008358:	b9b1      	cbnz	r1, 8008388 <_reclaim_reent+0x4c>
 800835a:	3504      	adds	r5, #4
 800835c:	2d80      	cmp	r5, #128	@ 0x80
 800835e:	d1f8      	bne.n	8008352 <_reclaim_reent+0x16>
 8008360:	69e3      	ldr	r3, [r4, #28]
 8008362:	4620      	mov	r0, r4
 8008364:	68d9      	ldr	r1, [r3, #12]
 8008366:	f000 f8b9 	bl	80084dc <_free_r>
 800836a:	69e3      	ldr	r3, [r4, #28]
 800836c:	6819      	ldr	r1, [r3, #0]
 800836e:	b111      	cbz	r1, 8008376 <_reclaim_reent+0x3a>
 8008370:	4620      	mov	r0, r4
 8008372:	f000 f8b3 	bl	80084dc <_free_r>
 8008376:	69e3      	ldr	r3, [r4, #28]
 8008378:	689d      	ldr	r5, [r3, #8]
 800837a:	b15d      	cbz	r5, 8008394 <_reclaim_reent+0x58>
 800837c:	4629      	mov	r1, r5
 800837e:	4620      	mov	r0, r4
 8008380:	682d      	ldr	r5, [r5, #0]
 8008382:	f000 f8ab 	bl	80084dc <_free_r>
 8008386:	e7f8      	b.n	800837a <_reclaim_reent+0x3e>
 8008388:	680e      	ldr	r6, [r1, #0]
 800838a:	4620      	mov	r0, r4
 800838c:	f000 f8a6 	bl	80084dc <_free_r>
 8008390:	4631      	mov	r1, r6
 8008392:	e7e1      	b.n	8008358 <_reclaim_reent+0x1c>
 8008394:	6961      	ldr	r1, [r4, #20]
 8008396:	b111      	cbz	r1, 800839e <_reclaim_reent+0x62>
 8008398:	4620      	mov	r0, r4
 800839a:	f000 f89f 	bl	80084dc <_free_r>
 800839e:	69e1      	ldr	r1, [r4, #28]
 80083a0:	b111      	cbz	r1, 80083a8 <_reclaim_reent+0x6c>
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f89a 	bl	80084dc <_free_r>
 80083a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80083aa:	b111      	cbz	r1, 80083b2 <_reclaim_reent+0x76>
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 f895 	bl	80084dc <_free_r>
 80083b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083b4:	b111      	cbz	r1, 80083bc <_reclaim_reent+0x80>
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 f890 	bl	80084dc <_free_r>
 80083bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80083be:	b111      	cbz	r1, 80083c6 <_reclaim_reent+0x8a>
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 f88b 	bl	80084dc <_free_r>
 80083c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80083c8:	b111      	cbz	r1, 80083d0 <_reclaim_reent+0x94>
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 f886 	bl	80084dc <_free_r>
 80083d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80083d2:	b111      	cbz	r1, 80083da <_reclaim_reent+0x9e>
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 f881 	bl	80084dc <_free_r>
 80083da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80083dc:	b111      	cbz	r1, 80083e4 <_reclaim_reent+0xa8>
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 f87c 	bl	80084dc <_free_r>
 80083e4:	6a23      	ldr	r3, [r4, #32]
 80083e6:	b11b      	cbz	r3, 80083f0 <_reclaim_reent+0xb4>
 80083e8:	4620      	mov	r0, r4
 80083ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083ee:	4718      	bx	r3
 80083f0:	bd70      	pop	{r4, r5, r6, pc}
 80083f2:	bf00      	nop
 80083f4:	20000020 	.word	0x20000020

080083f8 <_lseek_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d07      	ldr	r5, [pc, #28]	@ (8008418 <_lseek_r+0x20>)
 80083fc:	4604      	mov	r4, r0
 80083fe:	4608      	mov	r0, r1
 8008400:	4611      	mov	r1, r2
 8008402:	2200      	movs	r2, #0
 8008404:	602a      	str	r2, [r5, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	f7f9 ff3c 	bl	8002284 <_lseek>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_lseek_r+0x1e>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_lseek_r+0x1e>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	20006164 	.word	0x20006164

0800841c <_read_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d07      	ldr	r5, [pc, #28]	@ (800843c <_read_r+0x20>)
 8008420:	4604      	mov	r4, r0
 8008422:	4608      	mov	r0, r1
 8008424:	4611      	mov	r1, r2
 8008426:	2200      	movs	r2, #0
 8008428:	602a      	str	r2, [r5, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	f7f9 fee6 	bl	80021fc <_read>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_read_r+0x1e>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_read_r+0x1e>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	20006164 	.word	0x20006164

08008440 <_write_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d07      	ldr	r5, [pc, #28]	@ (8008460 <_write_r+0x20>)
 8008444:	4604      	mov	r4, r0
 8008446:	4608      	mov	r0, r1
 8008448:	4611      	mov	r1, r2
 800844a:	2200      	movs	r2, #0
 800844c:	602a      	str	r2, [r5, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	f7f9 f90a 	bl	8001668 <_write>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_write_r+0x1e>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	b103      	cbz	r3, 800845e <_write_r+0x1e>
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	20006164 	.word	0x20006164

08008464 <__errno>:
 8008464:	4b01      	ldr	r3, [pc, #4]	@ (800846c <__errno+0x8>)
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	20000020 	.word	0x20000020

08008470 <__libc_init_array>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	4d0d      	ldr	r5, [pc, #52]	@ (80084a8 <__libc_init_array+0x38>)
 8008474:	4c0d      	ldr	r4, [pc, #52]	@ (80084ac <__libc_init_array+0x3c>)
 8008476:	1b64      	subs	r4, r4, r5
 8008478:	10a4      	asrs	r4, r4, #2
 800847a:	2600      	movs	r6, #0
 800847c:	42a6      	cmp	r6, r4
 800847e:	d109      	bne.n	8008494 <__libc_init_array+0x24>
 8008480:	4d0b      	ldr	r5, [pc, #44]	@ (80084b0 <__libc_init_array+0x40>)
 8008482:	4c0c      	ldr	r4, [pc, #48]	@ (80084b4 <__libc_init_array+0x44>)
 8008484:	f000 fd96 	bl	8008fb4 <_init>
 8008488:	1b64      	subs	r4, r4, r5
 800848a:	10a4      	asrs	r4, r4, #2
 800848c:	2600      	movs	r6, #0
 800848e:	42a6      	cmp	r6, r4
 8008490:	d105      	bne.n	800849e <__libc_init_array+0x2e>
 8008492:	bd70      	pop	{r4, r5, r6, pc}
 8008494:	f855 3b04 	ldr.w	r3, [r5], #4
 8008498:	4798      	blx	r3
 800849a:	3601      	adds	r6, #1
 800849c:	e7ee      	b.n	800847c <__libc_init_array+0xc>
 800849e:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a2:	4798      	blx	r3
 80084a4:	3601      	adds	r6, #1
 80084a6:	e7f2      	b.n	800848e <__libc_init_array+0x1e>
 80084a8:	08009128 	.word	0x08009128
 80084ac:	08009128 	.word	0x08009128
 80084b0:	08009128 	.word	0x08009128
 80084b4:	0800912c 	.word	0x0800912c

080084b8 <__retarget_lock_init_recursive>:
 80084b8:	4770      	bx	lr

080084ba <__retarget_lock_acquire_recursive>:
 80084ba:	4770      	bx	lr

080084bc <__retarget_lock_release_recursive>:
 80084bc:	4770      	bx	lr

080084be <memcpy>:
 80084be:	440a      	add	r2, r1
 80084c0:	4291      	cmp	r1, r2
 80084c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80084c6:	d100      	bne.n	80084ca <memcpy+0xc>
 80084c8:	4770      	bx	lr
 80084ca:	b510      	push	{r4, lr}
 80084cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084d4:	4291      	cmp	r1, r2
 80084d6:	d1f9      	bne.n	80084cc <memcpy+0xe>
 80084d8:	bd10      	pop	{r4, pc}
	...

080084dc <_free_r>:
 80084dc:	b538      	push	{r3, r4, r5, lr}
 80084de:	4605      	mov	r5, r0
 80084e0:	2900      	cmp	r1, #0
 80084e2:	d041      	beq.n	8008568 <_free_r+0x8c>
 80084e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084e8:	1f0c      	subs	r4, r1, #4
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	bfb8      	it	lt
 80084ee:	18e4      	addlt	r4, r4, r3
 80084f0:	f000 f8e0 	bl	80086b4 <__malloc_lock>
 80084f4:	4a1d      	ldr	r2, [pc, #116]	@ (800856c <_free_r+0x90>)
 80084f6:	6813      	ldr	r3, [r2, #0]
 80084f8:	b933      	cbnz	r3, 8008508 <_free_r+0x2c>
 80084fa:	6063      	str	r3, [r4, #4]
 80084fc:	6014      	str	r4, [r2, #0]
 80084fe:	4628      	mov	r0, r5
 8008500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008504:	f000 b8dc 	b.w	80086c0 <__malloc_unlock>
 8008508:	42a3      	cmp	r3, r4
 800850a:	d908      	bls.n	800851e <_free_r+0x42>
 800850c:	6820      	ldr	r0, [r4, #0]
 800850e:	1821      	adds	r1, r4, r0
 8008510:	428b      	cmp	r3, r1
 8008512:	bf01      	itttt	eq
 8008514:	6819      	ldreq	r1, [r3, #0]
 8008516:	685b      	ldreq	r3, [r3, #4]
 8008518:	1809      	addeq	r1, r1, r0
 800851a:	6021      	streq	r1, [r4, #0]
 800851c:	e7ed      	b.n	80084fa <_free_r+0x1e>
 800851e:	461a      	mov	r2, r3
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	b10b      	cbz	r3, 8008528 <_free_r+0x4c>
 8008524:	42a3      	cmp	r3, r4
 8008526:	d9fa      	bls.n	800851e <_free_r+0x42>
 8008528:	6811      	ldr	r1, [r2, #0]
 800852a:	1850      	adds	r0, r2, r1
 800852c:	42a0      	cmp	r0, r4
 800852e:	d10b      	bne.n	8008548 <_free_r+0x6c>
 8008530:	6820      	ldr	r0, [r4, #0]
 8008532:	4401      	add	r1, r0
 8008534:	1850      	adds	r0, r2, r1
 8008536:	4283      	cmp	r3, r0
 8008538:	6011      	str	r1, [r2, #0]
 800853a:	d1e0      	bne.n	80084fe <_free_r+0x22>
 800853c:	6818      	ldr	r0, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	6053      	str	r3, [r2, #4]
 8008542:	4408      	add	r0, r1
 8008544:	6010      	str	r0, [r2, #0]
 8008546:	e7da      	b.n	80084fe <_free_r+0x22>
 8008548:	d902      	bls.n	8008550 <_free_r+0x74>
 800854a:	230c      	movs	r3, #12
 800854c:	602b      	str	r3, [r5, #0]
 800854e:	e7d6      	b.n	80084fe <_free_r+0x22>
 8008550:	6820      	ldr	r0, [r4, #0]
 8008552:	1821      	adds	r1, r4, r0
 8008554:	428b      	cmp	r3, r1
 8008556:	bf04      	itt	eq
 8008558:	6819      	ldreq	r1, [r3, #0]
 800855a:	685b      	ldreq	r3, [r3, #4]
 800855c:	6063      	str	r3, [r4, #4]
 800855e:	bf04      	itt	eq
 8008560:	1809      	addeq	r1, r1, r0
 8008562:	6021      	streq	r1, [r4, #0]
 8008564:	6054      	str	r4, [r2, #4]
 8008566:	e7ca      	b.n	80084fe <_free_r+0x22>
 8008568:	bd38      	pop	{r3, r4, r5, pc}
 800856a:	bf00      	nop
 800856c:	20006170 	.word	0x20006170

08008570 <sbrk_aligned>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	4e0f      	ldr	r6, [pc, #60]	@ (80085b0 <sbrk_aligned+0x40>)
 8008574:	460c      	mov	r4, r1
 8008576:	6831      	ldr	r1, [r6, #0]
 8008578:	4605      	mov	r5, r0
 800857a:	b911      	cbnz	r1, 8008582 <sbrk_aligned+0x12>
 800857c:	f000 fcd4 	bl	8008f28 <_sbrk_r>
 8008580:	6030      	str	r0, [r6, #0]
 8008582:	4621      	mov	r1, r4
 8008584:	4628      	mov	r0, r5
 8008586:	f000 fccf 	bl	8008f28 <_sbrk_r>
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	d103      	bne.n	8008596 <sbrk_aligned+0x26>
 800858e:	f04f 34ff 	mov.w	r4, #4294967295
 8008592:	4620      	mov	r0, r4
 8008594:	bd70      	pop	{r4, r5, r6, pc}
 8008596:	1cc4      	adds	r4, r0, #3
 8008598:	f024 0403 	bic.w	r4, r4, #3
 800859c:	42a0      	cmp	r0, r4
 800859e:	d0f8      	beq.n	8008592 <sbrk_aligned+0x22>
 80085a0:	1a21      	subs	r1, r4, r0
 80085a2:	4628      	mov	r0, r5
 80085a4:	f000 fcc0 	bl	8008f28 <_sbrk_r>
 80085a8:	3001      	adds	r0, #1
 80085aa:	d1f2      	bne.n	8008592 <sbrk_aligned+0x22>
 80085ac:	e7ef      	b.n	800858e <sbrk_aligned+0x1e>
 80085ae:	bf00      	nop
 80085b0:	2000616c 	.word	0x2000616c

080085b4 <_malloc_r>:
 80085b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b8:	1ccd      	adds	r5, r1, #3
 80085ba:	f025 0503 	bic.w	r5, r5, #3
 80085be:	3508      	adds	r5, #8
 80085c0:	2d0c      	cmp	r5, #12
 80085c2:	bf38      	it	cc
 80085c4:	250c      	movcc	r5, #12
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	4606      	mov	r6, r0
 80085ca:	db01      	blt.n	80085d0 <_malloc_r+0x1c>
 80085cc:	42a9      	cmp	r1, r5
 80085ce:	d904      	bls.n	80085da <_malloc_r+0x26>
 80085d0:	230c      	movs	r3, #12
 80085d2:	6033      	str	r3, [r6, #0]
 80085d4:	2000      	movs	r0, #0
 80085d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086b0 <_malloc_r+0xfc>
 80085de:	f000 f869 	bl	80086b4 <__malloc_lock>
 80085e2:	f8d8 3000 	ldr.w	r3, [r8]
 80085e6:	461c      	mov	r4, r3
 80085e8:	bb44      	cbnz	r4, 800863c <_malloc_r+0x88>
 80085ea:	4629      	mov	r1, r5
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7ff ffbf 	bl	8008570 <sbrk_aligned>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	4604      	mov	r4, r0
 80085f6:	d158      	bne.n	80086aa <_malloc_r+0xf6>
 80085f8:	f8d8 4000 	ldr.w	r4, [r8]
 80085fc:	4627      	mov	r7, r4
 80085fe:	2f00      	cmp	r7, #0
 8008600:	d143      	bne.n	800868a <_malloc_r+0xd6>
 8008602:	2c00      	cmp	r4, #0
 8008604:	d04b      	beq.n	800869e <_malloc_r+0xea>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	4639      	mov	r1, r7
 800860a:	4630      	mov	r0, r6
 800860c:	eb04 0903 	add.w	r9, r4, r3
 8008610:	f000 fc8a 	bl	8008f28 <_sbrk_r>
 8008614:	4581      	cmp	r9, r0
 8008616:	d142      	bne.n	800869e <_malloc_r+0xea>
 8008618:	6821      	ldr	r1, [r4, #0]
 800861a:	1a6d      	subs	r5, r5, r1
 800861c:	4629      	mov	r1, r5
 800861e:	4630      	mov	r0, r6
 8008620:	f7ff ffa6 	bl	8008570 <sbrk_aligned>
 8008624:	3001      	adds	r0, #1
 8008626:	d03a      	beq.n	800869e <_malloc_r+0xea>
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	442b      	add	r3, r5
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	f8d8 3000 	ldr.w	r3, [r8]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	bb62      	cbnz	r2, 8008690 <_malloc_r+0xdc>
 8008636:	f8c8 7000 	str.w	r7, [r8]
 800863a:	e00f      	b.n	800865c <_malloc_r+0xa8>
 800863c:	6822      	ldr	r2, [r4, #0]
 800863e:	1b52      	subs	r2, r2, r5
 8008640:	d420      	bmi.n	8008684 <_malloc_r+0xd0>
 8008642:	2a0b      	cmp	r2, #11
 8008644:	d917      	bls.n	8008676 <_malloc_r+0xc2>
 8008646:	1961      	adds	r1, r4, r5
 8008648:	42a3      	cmp	r3, r4
 800864a:	6025      	str	r5, [r4, #0]
 800864c:	bf18      	it	ne
 800864e:	6059      	strne	r1, [r3, #4]
 8008650:	6863      	ldr	r3, [r4, #4]
 8008652:	bf08      	it	eq
 8008654:	f8c8 1000 	streq.w	r1, [r8]
 8008658:	5162      	str	r2, [r4, r5]
 800865a:	604b      	str	r3, [r1, #4]
 800865c:	4630      	mov	r0, r6
 800865e:	f000 f82f 	bl	80086c0 <__malloc_unlock>
 8008662:	f104 000b 	add.w	r0, r4, #11
 8008666:	1d23      	adds	r3, r4, #4
 8008668:	f020 0007 	bic.w	r0, r0, #7
 800866c:	1ac2      	subs	r2, r0, r3
 800866e:	bf1c      	itt	ne
 8008670:	1a1b      	subne	r3, r3, r0
 8008672:	50a3      	strne	r3, [r4, r2]
 8008674:	e7af      	b.n	80085d6 <_malloc_r+0x22>
 8008676:	6862      	ldr	r2, [r4, #4]
 8008678:	42a3      	cmp	r3, r4
 800867a:	bf0c      	ite	eq
 800867c:	f8c8 2000 	streq.w	r2, [r8]
 8008680:	605a      	strne	r2, [r3, #4]
 8008682:	e7eb      	b.n	800865c <_malloc_r+0xa8>
 8008684:	4623      	mov	r3, r4
 8008686:	6864      	ldr	r4, [r4, #4]
 8008688:	e7ae      	b.n	80085e8 <_malloc_r+0x34>
 800868a:	463c      	mov	r4, r7
 800868c:	687f      	ldr	r7, [r7, #4]
 800868e:	e7b6      	b.n	80085fe <_malloc_r+0x4a>
 8008690:	461a      	mov	r2, r3
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	42a3      	cmp	r3, r4
 8008696:	d1fb      	bne.n	8008690 <_malloc_r+0xdc>
 8008698:	2300      	movs	r3, #0
 800869a:	6053      	str	r3, [r2, #4]
 800869c:	e7de      	b.n	800865c <_malloc_r+0xa8>
 800869e:	230c      	movs	r3, #12
 80086a0:	6033      	str	r3, [r6, #0]
 80086a2:	4630      	mov	r0, r6
 80086a4:	f000 f80c 	bl	80086c0 <__malloc_unlock>
 80086a8:	e794      	b.n	80085d4 <_malloc_r+0x20>
 80086aa:	6005      	str	r5, [r0, #0]
 80086ac:	e7d6      	b.n	800865c <_malloc_r+0xa8>
 80086ae:	bf00      	nop
 80086b0:	20006170 	.word	0x20006170

080086b4 <__malloc_lock>:
 80086b4:	4801      	ldr	r0, [pc, #4]	@ (80086bc <__malloc_lock+0x8>)
 80086b6:	f7ff bf00 	b.w	80084ba <__retarget_lock_acquire_recursive>
 80086ba:	bf00      	nop
 80086bc:	20006168 	.word	0x20006168

080086c0 <__malloc_unlock>:
 80086c0:	4801      	ldr	r0, [pc, #4]	@ (80086c8 <__malloc_unlock+0x8>)
 80086c2:	f7ff befb 	b.w	80084bc <__retarget_lock_release_recursive>
 80086c6:	bf00      	nop
 80086c8:	20006168 	.word	0x20006168

080086cc <__ssputs_r>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	688e      	ldr	r6, [r1, #8]
 80086d2:	461f      	mov	r7, r3
 80086d4:	42be      	cmp	r6, r7
 80086d6:	680b      	ldr	r3, [r1, #0]
 80086d8:	4682      	mov	sl, r0
 80086da:	460c      	mov	r4, r1
 80086dc:	4690      	mov	r8, r2
 80086de:	d82d      	bhi.n	800873c <__ssputs_r+0x70>
 80086e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086e8:	d026      	beq.n	8008738 <__ssputs_r+0x6c>
 80086ea:	6965      	ldr	r5, [r4, #20]
 80086ec:	6909      	ldr	r1, [r1, #16]
 80086ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086f2:	eba3 0901 	sub.w	r9, r3, r1
 80086f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086fa:	1c7b      	adds	r3, r7, #1
 80086fc:	444b      	add	r3, r9
 80086fe:	106d      	asrs	r5, r5, #1
 8008700:	429d      	cmp	r5, r3
 8008702:	bf38      	it	cc
 8008704:	461d      	movcc	r5, r3
 8008706:	0553      	lsls	r3, r2, #21
 8008708:	d527      	bpl.n	800875a <__ssputs_r+0x8e>
 800870a:	4629      	mov	r1, r5
 800870c:	f7ff ff52 	bl	80085b4 <_malloc_r>
 8008710:	4606      	mov	r6, r0
 8008712:	b360      	cbz	r0, 800876e <__ssputs_r+0xa2>
 8008714:	6921      	ldr	r1, [r4, #16]
 8008716:	464a      	mov	r2, r9
 8008718:	f7ff fed1 	bl	80084be <memcpy>
 800871c:	89a3      	ldrh	r3, [r4, #12]
 800871e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008726:	81a3      	strh	r3, [r4, #12]
 8008728:	6126      	str	r6, [r4, #16]
 800872a:	6165      	str	r5, [r4, #20]
 800872c:	444e      	add	r6, r9
 800872e:	eba5 0509 	sub.w	r5, r5, r9
 8008732:	6026      	str	r6, [r4, #0]
 8008734:	60a5      	str	r5, [r4, #8]
 8008736:	463e      	mov	r6, r7
 8008738:	42be      	cmp	r6, r7
 800873a:	d900      	bls.n	800873e <__ssputs_r+0x72>
 800873c:	463e      	mov	r6, r7
 800873e:	6820      	ldr	r0, [r4, #0]
 8008740:	4632      	mov	r2, r6
 8008742:	4641      	mov	r1, r8
 8008744:	f000 fbb4 	bl	8008eb0 <memmove>
 8008748:	68a3      	ldr	r3, [r4, #8]
 800874a:	1b9b      	subs	r3, r3, r6
 800874c:	60a3      	str	r3, [r4, #8]
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	4433      	add	r3, r6
 8008752:	6023      	str	r3, [r4, #0]
 8008754:	2000      	movs	r0, #0
 8008756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875a:	462a      	mov	r2, r5
 800875c:	f000 fbf4 	bl	8008f48 <_realloc_r>
 8008760:	4606      	mov	r6, r0
 8008762:	2800      	cmp	r0, #0
 8008764:	d1e0      	bne.n	8008728 <__ssputs_r+0x5c>
 8008766:	6921      	ldr	r1, [r4, #16]
 8008768:	4650      	mov	r0, sl
 800876a:	f7ff feb7 	bl	80084dc <_free_r>
 800876e:	230c      	movs	r3, #12
 8008770:	f8ca 3000 	str.w	r3, [sl]
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	e7e9      	b.n	8008756 <__ssputs_r+0x8a>
	...

08008784 <_svfiprintf_r>:
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	4698      	mov	r8, r3
 800878a:	898b      	ldrh	r3, [r1, #12]
 800878c:	061b      	lsls	r3, r3, #24
 800878e:	b09d      	sub	sp, #116	@ 0x74
 8008790:	4607      	mov	r7, r0
 8008792:	460d      	mov	r5, r1
 8008794:	4614      	mov	r4, r2
 8008796:	d510      	bpl.n	80087ba <_svfiprintf_r+0x36>
 8008798:	690b      	ldr	r3, [r1, #16]
 800879a:	b973      	cbnz	r3, 80087ba <_svfiprintf_r+0x36>
 800879c:	2140      	movs	r1, #64	@ 0x40
 800879e:	f7ff ff09 	bl	80085b4 <_malloc_r>
 80087a2:	6028      	str	r0, [r5, #0]
 80087a4:	6128      	str	r0, [r5, #16]
 80087a6:	b930      	cbnz	r0, 80087b6 <_svfiprintf_r+0x32>
 80087a8:	230c      	movs	r3, #12
 80087aa:	603b      	str	r3, [r7, #0]
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	b01d      	add	sp, #116	@ 0x74
 80087b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b6:	2340      	movs	r3, #64	@ 0x40
 80087b8:	616b      	str	r3, [r5, #20]
 80087ba:	2300      	movs	r3, #0
 80087bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087be:	2320      	movs	r3, #32
 80087c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c8:	2330      	movs	r3, #48	@ 0x30
 80087ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008968 <_svfiprintf_r+0x1e4>
 80087ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087d2:	f04f 0901 	mov.w	r9, #1
 80087d6:	4623      	mov	r3, r4
 80087d8:	469a      	mov	sl, r3
 80087da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087de:	b10a      	cbz	r2, 80087e4 <_svfiprintf_r+0x60>
 80087e0:	2a25      	cmp	r2, #37	@ 0x25
 80087e2:	d1f9      	bne.n	80087d8 <_svfiprintf_r+0x54>
 80087e4:	ebba 0b04 	subs.w	fp, sl, r4
 80087e8:	d00b      	beq.n	8008802 <_svfiprintf_r+0x7e>
 80087ea:	465b      	mov	r3, fp
 80087ec:	4622      	mov	r2, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	4638      	mov	r0, r7
 80087f2:	f7ff ff6b 	bl	80086cc <__ssputs_r>
 80087f6:	3001      	adds	r0, #1
 80087f8:	f000 80a7 	beq.w	800894a <_svfiprintf_r+0x1c6>
 80087fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087fe:	445a      	add	r2, fp
 8008800:	9209      	str	r2, [sp, #36]	@ 0x24
 8008802:	f89a 3000 	ldrb.w	r3, [sl]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 809f 	beq.w	800894a <_svfiprintf_r+0x1c6>
 800880c:	2300      	movs	r3, #0
 800880e:	f04f 32ff 	mov.w	r2, #4294967295
 8008812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008816:	f10a 0a01 	add.w	sl, sl, #1
 800881a:	9304      	str	r3, [sp, #16]
 800881c:	9307      	str	r3, [sp, #28]
 800881e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008822:	931a      	str	r3, [sp, #104]	@ 0x68
 8008824:	4654      	mov	r4, sl
 8008826:	2205      	movs	r2, #5
 8008828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882c:	484e      	ldr	r0, [pc, #312]	@ (8008968 <_svfiprintf_r+0x1e4>)
 800882e:	f7f7 fccf 	bl	80001d0 <memchr>
 8008832:	9a04      	ldr	r2, [sp, #16]
 8008834:	b9d8      	cbnz	r0, 800886e <_svfiprintf_r+0xea>
 8008836:	06d0      	lsls	r0, r2, #27
 8008838:	bf44      	itt	mi
 800883a:	2320      	movmi	r3, #32
 800883c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008840:	0711      	lsls	r1, r2, #28
 8008842:	bf44      	itt	mi
 8008844:	232b      	movmi	r3, #43	@ 0x2b
 8008846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800884a:	f89a 3000 	ldrb.w	r3, [sl]
 800884e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008850:	d015      	beq.n	800887e <_svfiprintf_r+0xfa>
 8008852:	9a07      	ldr	r2, [sp, #28]
 8008854:	4654      	mov	r4, sl
 8008856:	2000      	movs	r0, #0
 8008858:	f04f 0c0a 	mov.w	ip, #10
 800885c:	4621      	mov	r1, r4
 800885e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008862:	3b30      	subs	r3, #48	@ 0x30
 8008864:	2b09      	cmp	r3, #9
 8008866:	d94b      	bls.n	8008900 <_svfiprintf_r+0x17c>
 8008868:	b1b0      	cbz	r0, 8008898 <_svfiprintf_r+0x114>
 800886a:	9207      	str	r2, [sp, #28]
 800886c:	e014      	b.n	8008898 <_svfiprintf_r+0x114>
 800886e:	eba0 0308 	sub.w	r3, r0, r8
 8008872:	fa09 f303 	lsl.w	r3, r9, r3
 8008876:	4313      	orrs	r3, r2
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	46a2      	mov	sl, r4
 800887c:	e7d2      	b.n	8008824 <_svfiprintf_r+0xa0>
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	1d19      	adds	r1, r3, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	9103      	str	r1, [sp, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	bfbb      	ittet	lt
 800888a:	425b      	neglt	r3, r3
 800888c:	f042 0202 	orrlt.w	r2, r2, #2
 8008890:	9307      	strge	r3, [sp, #28]
 8008892:	9307      	strlt	r3, [sp, #28]
 8008894:	bfb8      	it	lt
 8008896:	9204      	strlt	r2, [sp, #16]
 8008898:	7823      	ldrb	r3, [r4, #0]
 800889a:	2b2e      	cmp	r3, #46	@ 0x2e
 800889c:	d10a      	bne.n	80088b4 <_svfiprintf_r+0x130>
 800889e:	7863      	ldrb	r3, [r4, #1]
 80088a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80088a2:	d132      	bne.n	800890a <_svfiprintf_r+0x186>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	1d1a      	adds	r2, r3, #4
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	9203      	str	r2, [sp, #12]
 80088ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088b0:	3402      	adds	r4, #2
 80088b2:	9305      	str	r3, [sp, #20]
 80088b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008978 <_svfiprintf_r+0x1f4>
 80088b8:	7821      	ldrb	r1, [r4, #0]
 80088ba:	2203      	movs	r2, #3
 80088bc:	4650      	mov	r0, sl
 80088be:	f7f7 fc87 	bl	80001d0 <memchr>
 80088c2:	b138      	cbz	r0, 80088d4 <_svfiprintf_r+0x150>
 80088c4:	9b04      	ldr	r3, [sp, #16]
 80088c6:	eba0 000a 	sub.w	r0, r0, sl
 80088ca:	2240      	movs	r2, #64	@ 0x40
 80088cc:	4082      	lsls	r2, r0
 80088ce:	4313      	orrs	r3, r2
 80088d0:	3401      	adds	r4, #1
 80088d2:	9304      	str	r3, [sp, #16]
 80088d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d8:	4824      	ldr	r0, [pc, #144]	@ (800896c <_svfiprintf_r+0x1e8>)
 80088da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088de:	2206      	movs	r2, #6
 80088e0:	f7f7 fc76 	bl	80001d0 <memchr>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d036      	beq.n	8008956 <_svfiprintf_r+0x1d2>
 80088e8:	4b21      	ldr	r3, [pc, #132]	@ (8008970 <_svfiprintf_r+0x1ec>)
 80088ea:	bb1b      	cbnz	r3, 8008934 <_svfiprintf_r+0x1b0>
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	3307      	adds	r3, #7
 80088f0:	f023 0307 	bic.w	r3, r3, #7
 80088f4:	3308      	adds	r3, #8
 80088f6:	9303      	str	r3, [sp, #12]
 80088f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088fa:	4433      	add	r3, r6
 80088fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80088fe:	e76a      	b.n	80087d6 <_svfiprintf_r+0x52>
 8008900:	fb0c 3202 	mla	r2, ip, r2, r3
 8008904:	460c      	mov	r4, r1
 8008906:	2001      	movs	r0, #1
 8008908:	e7a8      	b.n	800885c <_svfiprintf_r+0xd8>
 800890a:	2300      	movs	r3, #0
 800890c:	3401      	adds	r4, #1
 800890e:	9305      	str	r3, [sp, #20]
 8008910:	4619      	mov	r1, r3
 8008912:	f04f 0c0a 	mov.w	ip, #10
 8008916:	4620      	mov	r0, r4
 8008918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800891c:	3a30      	subs	r2, #48	@ 0x30
 800891e:	2a09      	cmp	r2, #9
 8008920:	d903      	bls.n	800892a <_svfiprintf_r+0x1a6>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0c6      	beq.n	80088b4 <_svfiprintf_r+0x130>
 8008926:	9105      	str	r1, [sp, #20]
 8008928:	e7c4      	b.n	80088b4 <_svfiprintf_r+0x130>
 800892a:	fb0c 2101 	mla	r1, ip, r1, r2
 800892e:	4604      	mov	r4, r0
 8008930:	2301      	movs	r3, #1
 8008932:	e7f0      	b.n	8008916 <_svfiprintf_r+0x192>
 8008934:	ab03      	add	r3, sp, #12
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	462a      	mov	r2, r5
 800893a:	4b0e      	ldr	r3, [pc, #56]	@ (8008974 <_svfiprintf_r+0x1f0>)
 800893c:	a904      	add	r1, sp, #16
 800893e:	4638      	mov	r0, r7
 8008940:	f3af 8000 	nop.w
 8008944:	1c42      	adds	r2, r0, #1
 8008946:	4606      	mov	r6, r0
 8008948:	d1d6      	bne.n	80088f8 <_svfiprintf_r+0x174>
 800894a:	89ab      	ldrh	r3, [r5, #12]
 800894c:	065b      	lsls	r3, r3, #25
 800894e:	f53f af2d 	bmi.w	80087ac <_svfiprintf_r+0x28>
 8008952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008954:	e72c      	b.n	80087b0 <_svfiprintf_r+0x2c>
 8008956:	ab03      	add	r3, sp, #12
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	462a      	mov	r2, r5
 800895c:	4b05      	ldr	r3, [pc, #20]	@ (8008974 <_svfiprintf_r+0x1f0>)
 800895e:	a904      	add	r1, sp, #16
 8008960:	4638      	mov	r0, r7
 8008962:	f000 f879 	bl	8008a58 <_printf_i>
 8008966:	e7ed      	b.n	8008944 <_svfiprintf_r+0x1c0>
 8008968:	080090ec 	.word	0x080090ec
 800896c:	080090f6 	.word	0x080090f6
 8008970:	00000000 	.word	0x00000000
 8008974:	080086cd 	.word	0x080086cd
 8008978:	080090f2 	.word	0x080090f2

0800897c <_printf_common>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	4616      	mov	r6, r2
 8008982:	4698      	mov	r8, r3
 8008984:	688a      	ldr	r2, [r1, #8]
 8008986:	690b      	ldr	r3, [r1, #16]
 8008988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800898c:	4293      	cmp	r3, r2
 800898e:	bfb8      	it	lt
 8008990:	4613      	movlt	r3, r2
 8008992:	6033      	str	r3, [r6, #0]
 8008994:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008998:	4607      	mov	r7, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b10a      	cbz	r2, 80089a2 <_printf_common+0x26>
 800899e:	3301      	adds	r3, #1
 80089a0:	6033      	str	r3, [r6, #0]
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	0699      	lsls	r1, r3, #26
 80089a6:	bf42      	ittt	mi
 80089a8:	6833      	ldrmi	r3, [r6, #0]
 80089aa:	3302      	addmi	r3, #2
 80089ac:	6033      	strmi	r3, [r6, #0]
 80089ae:	6825      	ldr	r5, [r4, #0]
 80089b0:	f015 0506 	ands.w	r5, r5, #6
 80089b4:	d106      	bne.n	80089c4 <_printf_common+0x48>
 80089b6:	f104 0a19 	add.w	sl, r4, #25
 80089ba:	68e3      	ldr	r3, [r4, #12]
 80089bc:	6832      	ldr	r2, [r6, #0]
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	42ab      	cmp	r3, r5
 80089c2:	dc26      	bgt.n	8008a12 <_printf_common+0x96>
 80089c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	3b00      	subs	r3, #0
 80089cc:	bf18      	it	ne
 80089ce:	2301      	movne	r3, #1
 80089d0:	0692      	lsls	r2, r2, #26
 80089d2:	d42b      	bmi.n	8008a2c <_printf_common+0xb0>
 80089d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089d8:	4641      	mov	r1, r8
 80089da:	4638      	mov	r0, r7
 80089dc:	47c8      	blx	r9
 80089de:	3001      	adds	r0, #1
 80089e0:	d01e      	beq.n	8008a20 <_printf_common+0xa4>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	f003 0306 	and.w	r3, r3, #6
 80089ea:	2b04      	cmp	r3, #4
 80089ec:	bf02      	ittt	eq
 80089ee:	68e5      	ldreq	r5, [r4, #12]
 80089f0:	6833      	ldreq	r3, [r6, #0]
 80089f2:	1aed      	subeq	r5, r5, r3
 80089f4:	68a3      	ldr	r3, [r4, #8]
 80089f6:	bf0c      	ite	eq
 80089f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089fc:	2500      	movne	r5, #0
 80089fe:	4293      	cmp	r3, r2
 8008a00:	bfc4      	itt	gt
 8008a02:	1a9b      	subgt	r3, r3, r2
 8008a04:	18ed      	addgt	r5, r5, r3
 8008a06:	2600      	movs	r6, #0
 8008a08:	341a      	adds	r4, #26
 8008a0a:	42b5      	cmp	r5, r6
 8008a0c:	d11a      	bne.n	8008a44 <_printf_common+0xc8>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e008      	b.n	8008a24 <_printf_common+0xa8>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4652      	mov	r2, sl
 8008a16:	4641      	mov	r1, r8
 8008a18:	4638      	mov	r0, r7
 8008a1a:	47c8      	blx	r9
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d103      	bne.n	8008a28 <_printf_common+0xac>
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a28:	3501      	adds	r5, #1
 8008a2a:	e7c6      	b.n	80089ba <_printf_common+0x3e>
 8008a2c:	18e1      	adds	r1, r4, r3
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	2030      	movs	r0, #48	@ 0x30
 8008a32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a36:	4422      	add	r2, r4
 8008a38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a40:	3302      	adds	r3, #2
 8008a42:	e7c7      	b.n	80089d4 <_printf_common+0x58>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4622      	mov	r2, r4
 8008a48:	4641      	mov	r1, r8
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	47c8      	blx	r9
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d0e6      	beq.n	8008a20 <_printf_common+0xa4>
 8008a52:	3601      	adds	r6, #1
 8008a54:	e7d9      	b.n	8008a0a <_printf_common+0x8e>
	...

08008a58 <_printf_i>:
 8008a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a5c:	7e0f      	ldrb	r7, [r1, #24]
 8008a5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a60:	2f78      	cmp	r7, #120	@ 0x78
 8008a62:	4691      	mov	r9, r2
 8008a64:	4680      	mov	r8, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	469a      	mov	sl, r3
 8008a6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a6e:	d807      	bhi.n	8008a80 <_printf_i+0x28>
 8008a70:	2f62      	cmp	r7, #98	@ 0x62
 8008a72:	d80a      	bhi.n	8008a8a <_printf_i+0x32>
 8008a74:	2f00      	cmp	r7, #0
 8008a76:	f000 80d1 	beq.w	8008c1c <_printf_i+0x1c4>
 8008a7a:	2f58      	cmp	r7, #88	@ 0x58
 8008a7c:	f000 80b8 	beq.w	8008bf0 <_printf_i+0x198>
 8008a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a88:	e03a      	b.n	8008b00 <_printf_i+0xa8>
 8008a8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a8e:	2b15      	cmp	r3, #21
 8008a90:	d8f6      	bhi.n	8008a80 <_printf_i+0x28>
 8008a92:	a101      	add	r1, pc, #4	@ (adr r1, 8008a98 <_printf_i+0x40>)
 8008a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a98:	08008af1 	.word	0x08008af1
 8008a9c:	08008b05 	.word	0x08008b05
 8008aa0:	08008a81 	.word	0x08008a81
 8008aa4:	08008a81 	.word	0x08008a81
 8008aa8:	08008a81 	.word	0x08008a81
 8008aac:	08008a81 	.word	0x08008a81
 8008ab0:	08008b05 	.word	0x08008b05
 8008ab4:	08008a81 	.word	0x08008a81
 8008ab8:	08008a81 	.word	0x08008a81
 8008abc:	08008a81 	.word	0x08008a81
 8008ac0:	08008a81 	.word	0x08008a81
 8008ac4:	08008c03 	.word	0x08008c03
 8008ac8:	08008b2f 	.word	0x08008b2f
 8008acc:	08008bbd 	.word	0x08008bbd
 8008ad0:	08008a81 	.word	0x08008a81
 8008ad4:	08008a81 	.word	0x08008a81
 8008ad8:	08008c25 	.word	0x08008c25
 8008adc:	08008a81 	.word	0x08008a81
 8008ae0:	08008b2f 	.word	0x08008b2f
 8008ae4:	08008a81 	.word	0x08008a81
 8008ae8:	08008a81 	.word	0x08008a81
 8008aec:	08008bc5 	.word	0x08008bc5
 8008af0:	6833      	ldr	r3, [r6, #0]
 8008af2:	1d1a      	adds	r2, r3, #4
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6032      	str	r2, [r6, #0]
 8008af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008afc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b00:	2301      	movs	r3, #1
 8008b02:	e09c      	b.n	8008c3e <_printf_i+0x1e6>
 8008b04:	6833      	ldr	r3, [r6, #0]
 8008b06:	6820      	ldr	r0, [r4, #0]
 8008b08:	1d19      	adds	r1, r3, #4
 8008b0a:	6031      	str	r1, [r6, #0]
 8008b0c:	0606      	lsls	r6, r0, #24
 8008b0e:	d501      	bpl.n	8008b14 <_printf_i+0xbc>
 8008b10:	681d      	ldr	r5, [r3, #0]
 8008b12:	e003      	b.n	8008b1c <_printf_i+0xc4>
 8008b14:	0645      	lsls	r5, r0, #25
 8008b16:	d5fb      	bpl.n	8008b10 <_printf_i+0xb8>
 8008b18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b1c:	2d00      	cmp	r5, #0
 8008b1e:	da03      	bge.n	8008b28 <_printf_i+0xd0>
 8008b20:	232d      	movs	r3, #45	@ 0x2d
 8008b22:	426d      	negs	r5, r5
 8008b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b28:	4858      	ldr	r0, [pc, #352]	@ (8008c8c <_printf_i+0x234>)
 8008b2a:	230a      	movs	r3, #10
 8008b2c:	e011      	b.n	8008b52 <_printf_i+0xfa>
 8008b2e:	6821      	ldr	r1, [r4, #0]
 8008b30:	6833      	ldr	r3, [r6, #0]
 8008b32:	0608      	lsls	r0, r1, #24
 8008b34:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b38:	d402      	bmi.n	8008b40 <_printf_i+0xe8>
 8008b3a:	0649      	lsls	r1, r1, #25
 8008b3c:	bf48      	it	mi
 8008b3e:	b2ad      	uxthmi	r5, r5
 8008b40:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b42:	4852      	ldr	r0, [pc, #328]	@ (8008c8c <_printf_i+0x234>)
 8008b44:	6033      	str	r3, [r6, #0]
 8008b46:	bf14      	ite	ne
 8008b48:	230a      	movne	r3, #10
 8008b4a:	2308      	moveq	r3, #8
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b52:	6866      	ldr	r6, [r4, #4]
 8008b54:	60a6      	str	r6, [r4, #8]
 8008b56:	2e00      	cmp	r6, #0
 8008b58:	db05      	blt.n	8008b66 <_printf_i+0x10e>
 8008b5a:	6821      	ldr	r1, [r4, #0]
 8008b5c:	432e      	orrs	r6, r5
 8008b5e:	f021 0104 	bic.w	r1, r1, #4
 8008b62:	6021      	str	r1, [r4, #0]
 8008b64:	d04b      	beq.n	8008bfe <_printf_i+0x1a6>
 8008b66:	4616      	mov	r6, r2
 8008b68:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b6c:	fb03 5711 	mls	r7, r3, r1, r5
 8008b70:	5dc7      	ldrb	r7, [r0, r7]
 8008b72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b76:	462f      	mov	r7, r5
 8008b78:	42bb      	cmp	r3, r7
 8008b7a:	460d      	mov	r5, r1
 8008b7c:	d9f4      	bls.n	8008b68 <_printf_i+0x110>
 8008b7e:	2b08      	cmp	r3, #8
 8008b80:	d10b      	bne.n	8008b9a <_printf_i+0x142>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	07df      	lsls	r7, r3, #31
 8008b86:	d508      	bpl.n	8008b9a <_printf_i+0x142>
 8008b88:	6923      	ldr	r3, [r4, #16]
 8008b8a:	6861      	ldr	r1, [r4, #4]
 8008b8c:	4299      	cmp	r1, r3
 8008b8e:	bfde      	ittt	le
 8008b90:	2330      	movle	r3, #48	@ 0x30
 8008b92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b9a:	1b92      	subs	r2, r2, r6
 8008b9c:	6122      	str	r2, [r4, #16]
 8008b9e:	f8cd a000 	str.w	sl, [sp]
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	aa03      	add	r2, sp, #12
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	4640      	mov	r0, r8
 8008baa:	f7ff fee7 	bl	800897c <_printf_common>
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d14a      	bne.n	8008c48 <_printf_i+0x1f0>
 8008bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb6:	b004      	add	sp, #16
 8008bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	f043 0320 	orr.w	r3, r3, #32
 8008bc2:	6023      	str	r3, [r4, #0]
 8008bc4:	4832      	ldr	r0, [pc, #200]	@ (8008c90 <_printf_i+0x238>)
 8008bc6:	2778      	movs	r7, #120	@ 0x78
 8008bc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	6831      	ldr	r1, [r6, #0]
 8008bd0:	061f      	lsls	r7, r3, #24
 8008bd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bd6:	d402      	bmi.n	8008bde <_printf_i+0x186>
 8008bd8:	065f      	lsls	r7, r3, #25
 8008bda:	bf48      	it	mi
 8008bdc:	b2ad      	uxthmi	r5, r5
 8008bde:	6031      	str	r1, [r6, #0]
 8008be0:	07d9      	lsls	r1, r3, #31
 8008be2:	bf44      	itt	mi
 8008be4:	f043 0320 	orrmi.w	r3, r3, #32
 8008be8:	6023      	strmi	r3, [r4, #0]
 8008bea:	b11d      	cbz	r5, 8008bf4 <_printf_i+0x19c>
 8008bec:	2310      	movs	r3, #16
 8008bee:	e7ad      	b.n	8008b4c <_printf_i+0xf4>
 8008bf0:	4826      	ldr	r0, [pc, #152]	@ (8008c8c <_printf_i+0x234>)
 8008bf2:	e7e9      	b.n	8008bc8 <_printf_i+0x170>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	f023 0320 	bic.w	r3, r3, #32
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	e7f6      	b.n	8008bec <_printf_i+0x194>
 8008bfe:	4616      	mov	r6, r2
 8008c00:	e7bd      	b.n	8008b7e <_printf_i+0x126>
 8008c02:	6833      	ldr	r3, [r6, #0]
 8008c04:	6825      	ldr	r5, [r4, #0]
 8008c06:	6961      	ldr	r1, [r4, #20]
 8008c08:	1d18      	adds	r0, r3, #4
 8008c0a:	6030      	str	r0, [r6, #0]
 8008c0c:	062e      	lsls	r6, r5, #24
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	d501      	bpl.n	8008c16 <_printf_i+0x1be>
 8008c12:	6019      	str	r1, [r3, #0]
 8008c14:	e002      	b.n	8008c1c <_printf_i+0x1c4>
 8008c16:	0668      	lsls	r0, r5, #25
 8008c18:	d5fb      	bpl.n	8008c12 <_printf_i+0x1ba>
 8008c1a:	8019      	strh	r1, [r3, #0]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	6123      	str	r3, [r4, #16]
 8008c20:	4616      	mov	r6, r2
 8008c22:	e7bc      	b.n	8008b9e <_printf_i+0x146>
 8008c24:	6833      	ldr	r3, [r6, #0]
 8008c26:	1d1a      	adds	r2, r3, #4
 8008c28:	6032      	str	r2, [r6, #0]
 8008c2a:	681e      	ldr	r6, [r3, #0]
 8008c2c:	6862      	ldr	r2, [r4, #4]
 8008c2e:	2100      	movs	r1, #0
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7f7 facd 	bl	80001d0 <memchr>
 8008c36:	b108      	cbz	r0, 8008c3c <_printf_i+0x1e4>
 8008c38:	1b80      	subs	r0, r0, r6
 8008c3a:	6060      	str	r0, [r4, #4]
 8008c3c:	6863      	ldr	r3, [r4, #4]
 8008c3e:	6123      	str	r3, [r4, #16]
 8008c40:	2300      	movs	r3, #0
 8008c42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c46:	e7aa      	b.n	8008b9e <_printf_i+0x146>
 8008c48:	6923      	ldr	r3, [r4, #16]
 8008c4a:	4632      	mov	r2, r6
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	4640      	mov	r0, r8
 8008c50:	47d0      	blx	sl
 8008c52:	3001      	adds	r0, #1
 8008c54:	d0ad      	beq.n	8008bb2 <_printf_i+0x15a>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	079b      	lsls	r3, r3, #30
 8008c5a:	d413      	bmi.n	8008c84 <_printf_i+0x22c>
 8008c5c:	68e0      	ldr	r0, [r4, #12]
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	4298      	cmp	r0, r3
 8008c62:	bfb8      	it	lt
 8008c64:	4618      	movlt	r0, r3
 8008c66:	e7a6      	b.n	8008bb6 <_printf_i+0x15e>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	4632      	mov	r2, r6
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	4640      	mov	r0, r8
 8008c70:	47d0      	blx	sl
 8008c72:	3001      	adds	r0, #1
 8008c74:	d09d      	beq.n	8008bb2 <_printf_i+0x15a>
 8008c76:	3501      	adds	r5, #1
 8008c78:	68e3      	ldr	r3, [r4, #12]
 8008c7a:	9903      	ldr	r1, [sp, #12]
 8008c7c:	1a5b      	subs	r3, r3, r1
 8008c7e:	42ab      	cmp	r3, r5
 8008c80:	dcf2      	bgt.n	8008c68 <_printf_i+0x210>
 8008c82:	e7eb      	b.n	8008c5c <_printf_i+0x204>
 8008c84:	2500      	movs	r5, #0
 8008c86:	f104 0619 	add.w	r6, r4, #25
 8008c8a:	e7f5      	b.n	8008c78 <_printf_i+0x220>
 8008c8c:	080090fd 	.word	0x080090fd
 8008c90:	0800910e 	.word	0x0800910e

08008c94 <__sflush_r>:
 8008c94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9c:	0716      	lsls	r6, r2, #28
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	d454      	bmi.n	8008d4e <__sflush_r+0xba>
 8008ca4:	684b      	ldr	r3, [r1, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	dc02      	bgt.n	8008cb0 <__sflush_r+0x1c>
 8008caa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dd48      	ble.n	8008d42 <__sflush_r+0xae>
 8008cb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cb2:	2e00      	cmp	r6, #0
 8008cb4:	d045      	beq.n	8008d42 <__sflush_r+0xae>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008cbc:	682f      	ldr	r7, [r5, #0]
 8008cbe:	6a21      	ldr	r1, [r4, #32]
 8008cc0:	602b      	str	r3, [r5, #0]
 8008cc2:	d030      	beq.n	8008d26 <__sflush_r+0x92>
 8008cc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	0759      	lsls	r1, r3, #29
 8008cca:	d505      	bpl.n	8008cd8 <__sflush_r+0x44>
 8008ccc:	6863      	ldr	r3, [r4, #4]
 8008cce:	1ad2      	subs	r2, r2, r3
 8008cd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cd2:	b10b      	cbz	r3, 8008cd8 <__sflush_r+0x44>
 8008cd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cd6:	1ad2      	subs	r2, r2, r3
 8008cd8:	2300      	movs	r3, #0
 8008cda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cdc:	6a21      	ldr	r1, [r4, #32]
 8008cde:	4628      	mov	r0, r5
 8008ce0:	47b0      	blx	r6
 8008ce2:	1c43      	adds	r3, r0, #1
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	d106      	bne.n	8008cf6 <__sflush_r+0x62>
 8008ce8:	6829      	ldr	r1, [r5, #0]
 8008cea:	291d      	cmp	r1, #29
 8008cec:	d82b      	bhi.n	8008d46 <__sflush_r+0xb2>
 8008cee:	4a2a      	ldr	r2, [pc, #168]	@ (8008d98 <__sflush_r+0x104>)
 8008cf0:	40ca      	lsrs	r2, r1
 8008cf2:	07d6      	lsls	r6, r2, #31
 8008cf4:	d527      	bpl.n	8008d46 <__sflush_r+0xb2>
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	6062      	str	r2, [r4, #4]
 8008cfa:	04d9      	lsls	r1, r3, #19
 8008cfc:	6922      	ldr	r2, [r4, #16]
 8008cfe:	6022      	str	r2, [r4, #0]
 8008d00:	d504      	bpl.n	8008d0c <__sflush_r+0x78>
 8008d02:	1c42      	adds	r2, r0, #1
 8008d04:	d101      	bne.n	8008d0a <__sflush_r+0x76>
 8008d06:	682b      	ldr	r3, [r5, #0]
 8008d08:	b903      	cbnz	r3, 8008d0c <__sflush_r+0x78>
 8008d0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d0e:	602f      	str	r7, [r5, #0]
 8008d10:	b1b9      	cbz	r1, 8008d42 <__sflush_r+0xae>
 8008d12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d16:	4299      	cmp	r1, r3
 8008d18:	d002      	beq.n	8008d20 <__sflush_r+0x8c>
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f7ff fbde 	bl	80084dc <_free_r>
 8008d20:	2300      	movs	r3, #0
 8008d22:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d24:	e00d      	b.n	8008d42 <__sflush_r+0xae>
 8008d26:	2301      	movs	r3, #1
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b0      	blx	r6
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	1c50      	adds	r0, r2, #1
 8008d30:	d1c9      	bne.n	8008cc6 <__sflush_r+0x32>
 8008d32:	682b      	ldr	r3, [r5, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d0c6      	beq.n	8008cc6 <__sflush_r+0x32>
 8008d38:	2b1d      	cmp	r3, #29
 8008d3a:	d001      	beq.n	8008d40 <__sflush_r+0xac>
 8008d3c:	2b16      	cmp	r3, #22
 8008d3e:	d11e      	bne.n	8008d7e <__sflush_r+0xea>
 8008d40:	602f      	str	r7, [r5, #0]
 8008d42:	2000      	movs	r0, #0
 8008d44:	e022      	b.n	8008d8c <__sflush_r+0xf8>
 8008d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d4a:	b21b      	sxth	r3, r3
 8008d4c:	e01b      	b.n	8008d86 <__sflush_r+0xf2>
 8008d4e:	690f      	ldr	r7, [r1, #16]
 8008d50:	2f00      	cmp	r7, #0
 8008d52:	d0f6      	beq.n	8008d42 <__sflush_r+0xae>
 8008d54:	0793      	lsls	r3, r2, #30
 8008d56:	680e      	ldr	r6, [r1, #0]
 8008d58:	bf08      	it	eq
 8008d5a:	694b      	ldreq	r3, [r1, #20]
 8008d5c:	600f      	str	r7, [r1, #0]
 8008d5e:	bf18      	it	ne
 8008d60:	2300      	movne	r3, #0
 8008d62:	eba6 0807 	sub.w	r8, r6, r7
 8008d66:	608b      	str	r3, [r1, #8]
 8008d68:	f1b8 0f00 	cmp.w	r8, #0
 8008d6c:	dde9      	ble.n	8008d42 <__sflush_r+0xae>
 8008d6e:	6a21      	ldr	r1, [r4, #32]
 8008d70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d72:	4643      	mov	r3, r8
 8008d74:	463a      	mov	r2, r7
 8008d76:	4628      	mov	r0, r5
 8008d78:	47b0      	blx	r6
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	dc08      	bgt.n	8008d90 <__sflush_r+0xfc>
 8008d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d86:	81a3      	strh	r3, [r4, #12]
 8008d88:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d90:	4407      	add	r7, r0
 8008d92:	eba8 0800 	sub.w	r8, r8, r0
 8008d96:	e7e7      	b.n	8008d68 <__sflush_r+0xd4>
 8008d98:	20400001 	.word	0x20400001

08008d9c <_fflush_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	690b      	ldr	r3, [r1, #16]
 8008da0:	4605      	mov	r5, r0
 8008da2:	460c      	mov	r4, r1
 8008da4:	b913      	cbnz	r3, 8008dac <_fflush_r+0x10>
 8008da6:	2500      	movs	r5, #0
 8008da8:	4628      	mov	r0, r5
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
 8008dac:	b118      	cbz	r0, 8008db6 <_fflush_r+0x1a>
 8008dae:	6a03      	ldr	r3, [r0, #32]
 8008db0:	b90b      	cbnz	r3, 8008db6 <_fflush_r+0x1a>
 8008db2:	f7ff f91d 	bl	8007ff0 <__sinit>
 8008db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0f3      	beq.n	8008da6 <_fflush_r+0xa>
 8008dbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008dc0:	07d0      	lsls	r0, r2, #31
 8008dc2:	d404      	bmi.n	8008dce <_fflush_r+0x32>
 8008dc4:	0599      	lsls	r1, r3, #22
 8008dc6:	d402      	bmi.n	8008dce <_fflush_r+0x32>
 8008dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dca:	f7ff fb76 	bl	80084ba <__retarget_lock_acquire_recursive>
 8008dce:	4628      	mov	r0, r5
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	f7ff ff5f 	bl	8008c94 <__sflush_r>
 8008dd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dd8:	07da      	lsls	r2, r3, #31
 8008dda:	4605      	mov	r5, r0
 8008ddc:	d4e4      	bmi.n	8008da8 <_fflush_r+0xc>
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	059b      	lsls	r3, r3, #22
 8008de2:	d4e1      	bmi.n	8008da8 <_fflush_r+0xc>
 8008de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008de6:	f7ff fb69 	bl	80084bc <__retarget_lock_release_recursive>
 8008dea:	e7dd      	b.n	8008da8 <_fflush_r+0xc>

08008dec <__swhatbuf_r>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	460c      	mov	r4, r1
 8008df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df4:	2900      	cmp	r1, #0
 8008df6:	b096      	sub	sp, #88	@ 0x58
 8008df8:	4615      	mov	r5, r2
 8008dfa:	461e      	mov	r6, r3
 8008dfc:	da0d      	bge.n	8008e1a <__swhatbuf_r+0x2e>
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e04:	f04f 0100 	mov.w	r1, #0
 8008e08:	bf14      	ite	ne
 8008e0a:	2340      	movne	r3, #64	@ 0x40
 8008e0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e10:	2000      	movs	r0, #0
 8008e12:	6031      	str	r1, [r6, #0]
 8008e14:	602b      	str	r3, [r5, #0]
 8008e16:	b016      	add	sp, #88	@ 0x58
 8008e18:	bd70      	pop	{r4, r5, r6, pc}
 8008e1a:	466a      	mov	r2, sp
 8008e1c:	f000 f862 	bl	8008ee4 <_fstat_r>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	dbec      	blt.n	8008dfe <__swhatbuf_r+0x12>
 8008e24:	9901      	ldr	r1, [sp, #4]
 8008e26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e2e:	4259      	negs	r1, r3
 8008e30:	4159      	adcs	r1, r3
 8008e32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e36:	e7eb      	b.n	8008e10 <__swhatbuf_r+0x24>

08008e38 <__smakebuf_r>:
 8008e38:	898b      	ldrh	r3, [r1, #12]
 8008e3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e3c:	079d      	lsls	r5, r3, #30
 8008e3e:	4606      	mov	r6, r0
 8008e40:	460c      	mov	r4, r1
 8008e42:	d507      	bpl.n	8008e54 <__smakebuf_r+0x1c>
 8008e44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	6123      	str	r3, [r4, #16]
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	6163      	str	r3, [r4, #20]
 8008e50:	b003      	add	sp, #12
 8008e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e54:	ab01      	add	r3, sp, #4
 8008e56:	466a      	mov	r2, sp
 8008e58:	f7ff ffc8 	bl	8008dec <__swhatbuf_r>
 8008e5c:	9f00      	ldr	r7, [sp, #0]
 8008e5e:	4605      	mov	r5, r0
 8008e60:	4639      	mov	r1, r7
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7ff fba6 	bl	80085b4 <_malloc_r>
 8008e68:	b948      	cbnz	r0, 8008e7e <__smakebuf_r+0x46>
 8008e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e6e:	059a      	lsls	r2, r3, #22
 8008e70:	d4ee      	bmi.n	8008e50 <__smakebuf_r+0x18>
 8008e72:	f023 0303 	bic.w	r3, r3, #3
 8008e76:	f043 0302 	orr.w	r3, r3, #2
 8008e7a:	81a3      	strh	r3, [r4, #12]
 8008e7c:	e7e2      	b.n	8008e44 <__smakebuf_r+0xc>
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	6020      	str	r0, [r4, #0]
 8008e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e86:	81a3      	strh	r3, [r4, #12]
 8008e88:	9b01      	ldr	r3, [sp, #4]
 8008e8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e8e:	b15b      	cbz	r3, 8008ea8 <__smakebuf_r+0x70>
 8008e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e94:	4630      	mov	r0, r6
 8008e96:	f000 f837 	bl	8008f08 <_isatty_r>
 8008e9a:	b128      	cbz	r0, 8008ea8 <__smakebuf_r+0x70>
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	f023 0303 	bic.w	r3, r3, #3
 8008ea2:	f043 0301 	orr.w	r3, r3, #1
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	431d      	orrs	r5, r3
 8008eac:	81a5      	strh	r5, [r4, #12]
 8008eae:	e7cf      	b.n	8008e50 <__smakebuf_r+0x18>

08008eb0 <memmove>:
 8008eb0:	4288      	cmp	r0, r1
 8008eb2:	b510      	push	{r4, lr}
 8008eb4:	eb01 0402 	add.w	r4, r1, r2
 8008eb8:	d902      	bls.n	8008ec0 <memmove+0x10>
 8008eba:	4284      	cmp	r4, r0
 8008ebc:	4623      	mov	r3, r4
 8008ebe:	d807      	bhi.n	8008ed0 <memmove+0x20>
 8008ec0:	1e43      	subs	r3, r0, #1
 8008ec2:	42a1      	cmp	r1, r4
 8008ec4:	d008      	beq.n	8008ed8 <memmove+0x28>
 8008ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ece:	e7f8      	b.n	8008ec2 <memmove+0x12>
 8008ed0:	4402      	add	r2, r0
 8008ed2:	4601      	mov	r1, r0
 8008ed4:	428a      	cmp	r2, r1
 8008ed6:	d100      	bne.n	8008eda <memmove+0x2a>
 8008ed8:	bd10      	pop	{r4, pc}
 8008eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ee2:	e7f7      	b.n	8008ed4 <memmove+0x24>

08008ee4 <_fstat_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4d07      	ldr	r5, [pc, #28]	@ (8008f04 <_fstat_r+0x20>)
 8008ee8:	2300      	movs	r3, #0
 8008eea:	4604      	mov	r4, r0
 8008eec:	4608      	mov	r0, r1
 8008eee:	4611      	mov	r1, r2
 8008ef0:	602b      	str	r3, [r5, #0]
 8008ef2:	f7f9 f9ac 	bl	800224e <_fstat>
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	d102      	bne.n	8008f00 <_fstat_r+0x1c>
 8008efa:	682b      	ldr	r3, [r5, #0]
 8008efc:	b103      	cbz	r3, 8008f00 <_fstat_r+0x1c>
 8008efe:	6023      	str	r3, [r4, #0]
 8008f00:	bd38      	pop	{r3, r4, r5, pc}
 8008f02:	bf00      	nop
 8008f04:	20006164 	.word	0x20006164

08008f08 <_isatty_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d06      	ldr	r5, [pc, #24]	@ (8008f24 <_isatty_r+0x1c>)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	602b      	str	r3, [r5, #0]
 8008f14:	f7f9 f9ab 	bl	800226e <_isatty>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_isatty_r+0x1a>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_isatty_r+0x1a>
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	20006164 	.word	0x20006164

08008f28 <_sbrk_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4d06      	ldr	r5, [pc, #24]	@ (8008f44 <_sbrk_r+0x1c>)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	f7f9 f9b4 	bl	80022a0 <_sbrk>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d102      	bne.n	8008f42 <_sbrk_r+0x1a>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	b103      	cbz	r3, 8008f42 <_sbrk_r+0x1a>
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
 8008f44:	20006164 	.word	0x20006164

08008f48 <_realloc_r>:
 8008f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4c:	4607      	mov	r7, r0
 8008f4e:	4614      	mov	r4, r2
 8008f50:	460d      	mov	r5, r1
 8008f52:	b921      	cbnz	r1, 8008f5e <_realloc_r+0x16>
 8008f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f58:	4611      	mov	r1, r2
 8008f5a:	f7ff bb2b 	b.w	80085b4 <_malloc_r>
 8008f5e:	b92a      	cbnz	r2, 8008f6c <_realloc_r+0x24>
 8008f60:	f7ff fabc 	bl	80084dc <_free_r>
 8008f64:	4625      	mov	r5, r4
 8008f66:	4628      	mov	r0, r5
 8008f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f6c:	f000 f81a 	bl	8008fa4 <_malloc_usable_size_r>
 8008f70:	4284      	cmp	r4, r0
 8008f72:	4606      	mov	r6, r0
 8008f74:	d802      	bhi.n	8008f7c <_realloc_r+0x34>
 8008f76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f7a:	d8f4      	bhi.n	8008f66 <_realloc_r+0x1e>
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	4638      	mov	r0, r7
 8008f80:	f7ff fb18 	bl	80085b4 <_malloc_r>
 8008f84:	4680      	mov	r8, r0
 8008f86:	b908      	cbnz	r0, 8008f8c <_realloc_r+0x44>
 8008f88:	4645      	mov	r5, r8
 8008f8a:	e7ec      	b.n	8008f66 <_realloc_r+0x1e>
 8008f8c:	42b4      	cmp	r4, r6
 8008f8e:	4622      	mov	r2, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	bf28      	it	cs
 8008f94:	4632      	movcs	r2, r6
 8008f96:	f7ff fa92 	bl	80084be <memcpy>
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	f7ff fa9d 	bl	80084dc <_free_r>
 8008fa2:	e7f1      	b.n	8008f88 <_realloc_r+0x40>

08008fa4 <_malloc_usable_size_r>:
 8008fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa8:	1f18      	subs	r0, r3, #4
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bfbc      	itt	lt
 8008fae:	580b      	ldrlt	r3, [r1, r0]
 8008fb0:	18c0      	addlt	r0, r0, r3
 8008fb2:	4770      	bx	lr

08008fb4 <_init>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	bf00      	nop
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr

08008fc0 <_fini>:
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	bf00      	nop
 8008fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc6:	bc08      	pop	{r3}
 8008fc8:	469e      	mov	lr, r3
 8008fca:	4770      	bx	lr
