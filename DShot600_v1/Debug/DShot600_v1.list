
DShot600_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008844  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080089d4  080089d4  000099d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf4  08008bf4  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008bf4  08008bf4  00009bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bfc  08008bfc  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bfc  08008bfc  00009bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c00  08008c00  00009c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008c04  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          00005f08  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005f74  20005f74  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b1a  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036d1  00000000  00000000  00023bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  00027288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fb  00000000  00000000  00028868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004400  00000000  00000000  00029963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000178a0  00000000  00000000  0002dd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd2c0  00000000  00000000  00045603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001128c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065b8  00000000  00000000  00112908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00118ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089bc 	.word	0x080089bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080089bc 	.word	0x080089bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f001 f8c4 	bl	800173c <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 80005b4:	f000 fb8c 	bl	8000cd0 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f842 	bl	8000640 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f94c 	bl	8000858 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 f92a 	bl	8000818 <MX_DMA_Init>
  MX_TIM5_Init();
 80005c4:	f000 f8a6 	bl	8000714 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 80005c8:	f000 f8fc 	bl	80007c4 <MX_USART6_UART_Init>
  /* Create the thread(s) */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005cc:	f004 f896 	bl	80046fc <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  serialQueueHandle = osMessageQueueNew(SERIAL_QUEUE_LENGTH, SERIAL_QUEUE_ITEM_SIZE, NULL);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2180      	movs	r1, #128	@ 0x80
 80005d4:	200a      	movs	r0, #10
 80005d6:	f004 f988 	bl	80048ea <osMessageQueueNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <main+0x6c>)
 80005de:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e0:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <main+0x70>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	480e      	ldr	r0, [pc, #56]	@ (8000620 <main+0x74>)
 80005e6:	f004 f8d3 	bl	8004790 <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000624 <main+0x78>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* creation of DShotTask_1 */
  DShotTask_1Handle = osThreadNew(DShotTask, NULL, &DShotTask_1_attributes);
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <main+0x7c>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <main+0x80>)
 80005f6:	f004 f8cb 	bl	8004790 <osThreadNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <main+0x84>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* creation of SerialTask */
  SerialTaskHandle = osThreadNew(StartSerialTask, NULL, &SerialTask_attributes);
 8000600:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <main+0x88>)
 8000602:	2100      	movs	r1, #0
 8000604:	480c      	ldr	r0, [pc, #48]	@ (8000638 <main+0x8c>)
 8000606:	f004 f8c3 	bl	8004790 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <main+0x90>)
 800060e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f004 f898 	bl	8004744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x68>
 8000618:	200001cc 	.word	0x200001cc
 800061c:	08008b34 	.word	0x08008b34
 8000620:	08001049 	.word	0x08001049
 8000624:	20000178 	.word	0x20000178
 8000628:	08008b58 	.word	0x08008b58
 800062c:	08001059 	.word	0x08001059
 8000630:	2000017c 	.word	0x2000017c
 8000634:	08008b7c 	.word	0x08008b7c
 8000638:	080011dd 	.word	0x080011dd
 800063c:	20000180 	.word	0x20000180

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	@ 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f007 fa1e 	bl	8007a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	@ (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	@ (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	@ (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b4:	23a8      	movs	r3, #168	@ 0xa8
 80006b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fe9b 	bl	8002400 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 fdbc 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 f8fc 	bl	80028f0 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 fda5 	bl	800124c <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	@ 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <MX_TIM5_Init+0xac>)
 800073a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 139;
 8000748:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800074a:	228b      	movs	r2, #139	@ 0x8b
 800074c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000754:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MX_TIM5_Init+0xa8>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800075a:	4818      	ldr	r0, [pc, #96]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800075c:	f002 fba4 	bl	8002ea8 <HAL_TIM_PWM_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000766:	f000 fd71 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4619      	mov	r1, r3
 8000778:	4810      	ldr	r0, [pc, #64]	@ (80007bc <MX_TIM5_Init+0xa8>)
 800077a:	f003 fadf 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000784:	f000 fd62 	bl	800124c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000788:	2360      	movs	r3, #96	@ 0x60
 800078a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000790:	2302      	movs	r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <MX_TIM5_Init+0xa8>)
 80007a0:	f002 fe8a 	bl	80034b8 <HAL_TIM_PWM_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80007aa:	f000 fd4f 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80007ae:	4803      	ldr	r0, [pc, #12]	@ (80007bc <MX_TIM5_Init+0xa8>)
 80007b0:	f000 fdd2 	bl	8001358 <HAL_TIM_MspPostInit>

}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	@ 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000088 	.word	0x20000088
 80007c0:	40000c00 	.word	0x40000c00

080007c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007c8:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_USART6_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 80007ce:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007d0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80007d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007fc:	f003 fb2e 	bl	8003e5c <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f000 fd21 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000130 	.word	0x20000130
 8000814:	40011400 	.word	0x40011400

08000818 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_DMA_Init+0x3c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a0b      	ldr	r2, [pc, #44]	@ (8000854 <MX_DMA_Init+0x3c>)
 8000828:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_DMA_Init+0x3c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2105      	movs	r1, #5
 800083e:	200d      	movs	r0, #13
 8000840:	f001 f876 	bl	8001930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000844:	200d      	movs	r0, #13
 8000846:	f001 f88f 	bl	8001968 <HAL_NVIC_EnableIRQ>

}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <MX_GPIO_Init+0xb8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a26      	ldr	r2, [pc, #152]	@ (8000910 <MX_GPIO_Init+0xb8>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <MX_GPIO_Init+0xb8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <MX_GPIO_Init+0xb8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a1f      	ldr	r2, [pc, #124]	@ (8000910 <MX_GPIO_Init+0xb8>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_GPIO_Init+0xb8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <MX_GPIO_Init+0xb8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a18      	ldr	r2, [pc, #96]	@ (8000910 <MX_GPIO_Init+0xb8>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <MX_GPIO_Init+0xb8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2102      	movs	r1, #2
 80008c6:	4813      	ldr	r0, [pc, #76]	@ (8000914 <MX_GPIO_Init+0xbc>)
 80008c8:	f001 fd80 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008cc:	2302      	movs	r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	480c      	ldr	r0, [pc, #48]	@ (8000914 <MX_GPIO_Init+0xbc>)
 80008e4:	f001 fbbe 	bl	8002064 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e8:	2301      	movs	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // USART1_RX
 80008f8:	2307      	movs	r3, #7
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_GPIO_Init+0xbc>)
 8000904:	f001 fbae 	bl	8002064 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000

08000918 <read_telemetry_pin>:

/* USER CODE BEGIN 4 */
static inline uint8_t read_telemetry_pin(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(TELEMETRY_GPIO_PORT, TELEMETRY_PIN) ? 1 : 0;
 800091c:	2101      	movs	r1, #1
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <read_telemetry_pin+0x1c>)
 8000920:	f001 fd3c 	bl	800239c <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	bf14      	ite	ne
 800092a:	2301      	movne	r3, #1
 800092c:	2300      	moveq	r3, #0
 800092e:	b2db      	uxtb	r3, r3
}
 8000930:	4618      	mov	r0, r3
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40020000 	.word	0x40020000

08000938 <receive_bdshot_telemetry>:

int receive_bdshot_telemetry(uint32_t *telemetry_out) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
    uint32_t value = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

    // Wait for line to go low (start bit)
    uint32_t timeout = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
    while (read_telemetry_pin()) {
 8000948:	e00e      	b.n	8000968 <receive_bdshot_telemetry+0x30>
        delay_us_precise(0.01f);
 800094a:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80009d0 <receive_bdshot_telemetry+0x98>
 800094e:	f000 f967 	bl	8000c20 <delay_us_precise>
        if (++timeout > TELEMETRY_TIMEOUT_US * 25)
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	3301      	adds	r3, #1
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800095e:	4293      	cmp	r3, r2
 8000960:	d902      	bls.n	8000968 <receive_bdshot_telemetry+0x30>
            return -1; // Timeout
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e02f      	b.n	80009c8 <receive_bdshot_telemetry+0x90>
    while (read_telemetry_pin()) {
 8000968:	f7ff ffd6 	bl	8000918 <read_telemetry_pin>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1eb      	bne.n	800094a <receive_bdshot_telemetry+0x12>
    }

    // Wait half a bit to center
    //delay_us_precise(TELEMETRY_BIT_US/2.0f);
    delay_us_precise(0.1f);
 8000972:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80009d4 <receive_bdshot_telemetry+0x9c>
 8000976:	f000 f953 	bl	8000c20 <delay_us_precise>

    // LSB-first: capture 20 bits
    for (int i = 0; i < 20; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	e01c      	b.n	80009ba <receive_bdshot_telemetry+0x82>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2102      	movs	r1, #2
 8000984:	4814      	ldr	r0, [pc, #80]	@ (80009d8 <receive_bdshot_telemetry+0xa0>)
 8000986:	f001 fd21 	bl	80023cc <HAL_GPIO_WritePin>
        value |= (read_telemetry_pin() << (19-i)); // LSB-first
 800098a:	f7ff ffc5 	bl	8000918 <read_telemetry_pin>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1c3 0313 	rsb	r3, r3, #19
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	461a      	mov	r2, r3
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	617b      	str	r3, [r7, #20]
        delay_us_busy(TELEMETRY_BIT_US);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 f915 	bl	8000bd4 <delay_us_busy>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2102      	movs	r1, #2
 80009ae:	480a      	ldr	r0, [pc, #40]	@ (80009d8 <receive_bdshot_telemetry+0xa0>)
 80009b0:	f001 fd0c 	bl	80023cc <HAL_GPIO_WritePin>
    for (int i = 0; i < 20; i++) {
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3301      	adds	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2b13      	cmp	r3, #19
 80009be:	dddf      	ble.n	8000980 <receive_bdshot_telemetry+0x48>
    }

    *telemetry_out = value;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	601a      	str	r2, [r3, #0]
    return 0;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	3c23d70a 	.word	0x3c23d70a
 80009d4:	3dcccccd 	.word	0x3dcccccd
 80009d8:	40020000 	.word	0x40020000

080009dc <set_pin_input_PA0>:


void set_pin_input_PA0(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f0:	2301      	movs	r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4803      	ldr	r0, [pc, #12]	@ (8000a10 <set_pin_input_PA0+0x34>)
 8000a02:	f001 fb2f 	bl	8002064 <HAL_GPIO_Init>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40020000 	.word	0x40020000

08000a14 <set_pin_pwm_PA0>:

void set_pin_pwm_PA0(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5; // Alternate function for TIM5 CH1 on PA0
 8000a38:	2302      	movs	r3, #2
 8000a3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4803      	ldr	r0, [pc, #12]	@ (8000a50 <set_pin_pwm_PA0+0x3c>)
 8000a42:	f001 fb0f 	bl	8002064 <HAL_GPIO_Init>
}
 8000a46:	bf00      	nop
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40020000 	.word	0x40020000

08000a54 <prepare_bdshot_buffer>:


void prepare_bdshot_buffer(uint16_t frame)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
    uint32_t buffer_index = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]

    // 1️⃣ Insert a dummy 0 at the start to absorb the DMA skip
    //dshot_buffer[buffer_index++] = 0;  // Dummy preload entry

    // 2️⃣ Build the actual DSHOT waveform entries
    for (int i = 15; i >= 0; i--)
 8000a62:	230f      	movs	r3, #15
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	e01c      	b.n	8000aa2 <prepare_bdshot_buffer+0x4e>
    {
        uint8_t bit = (frame >> i) & 0x01;
 8000a68:	88fa      	ldrh	r2, [r7, #6]
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	fa42 f303 	asr.w	r3, r2, r3
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
        if (bit)
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <prepare_bdshot_buffer+0x3a>
        {
            dshot_buffer[buffer_index++] = DSHOT_T1L_TICKS;  // logic 1
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	1c5a      	adds	r2, r3, #1
 8000a82:	617a      	str	r2, [r7, #20]
 8000a84:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac4 <prepare_bdshot_buffer+0x70>)
 8000a86:	2169      	movs	r1, #105	@ 0x69
 8000a88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a8c:	e006      	b.n	8000a9c <prepare_bdshot_buffer+0x48>
            //dshot_buffer[buffer_index++] = 0;
        }
        else
        {
            dshot_buffer[buffer_index++] = DSHOT_T0L_TICKS;  // logic 0
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	617a      	str	r2, [r7, #20]
 8000a94:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac4 <prepare_bdshot_buffer+0x70>)
 8000a96:	2132      	movs	r1, #50	@ 0x32
 8000a98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 15; i >= 0; i--)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	dadf      	bge.n	8000a68 <prepare_bdshot_buffer+0x14>
            //dshot_buffer[buffer_index++] = 0;
        }
    }

    // 3️⃣ Final low pulses (as before)
    dshot_buffer[buffer_index++] = 0;  // Final LOW
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	617a      	str	r2, [r7, #20]
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <prepare_bdshot_buffer+0x70>)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    //dshot_buffer[buffer_index++] = 0;  // Extra delay
}
 8000ab6:	bf00      	nop
 8000ab8:	371c      	adds	r7, #28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000184 	.word	0x20000184

08000ac8 <bdshot_crc>:


// value_12bit should be 0...4095
uint8_t bdshot_crc(uint16_t value_12bit)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80fb      	strh	r3, [r7, #6]
    // Optional: Uncomment to assert 12-bit range in debug
    // assert(value_12bit < 4096);

    uint16_t crc = value_12bit ^ (value_12bit >> 4) ^ (value_12bit >> 8);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	091b      	lsrs	r3, r3, #4
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	4053      	eors	r3, r2
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	4053      	eors	r3, r2
 8000ae6:	81fb      	strh	r3, [r7, #14]
    crc = ~crc;           // Bitwise NOT
 8000ae8:	89fb      	ldrh	r3, [r7, #14]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	81fb      	strh	r3, [r7, #14]
    crc = crc & 0x0F;     // Mask to 4 bits
 8000aee:	89fb      	ldrh	r3, [r7, #14]
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)crc;
 8000af6:	89fb      	ldrh	r3, [r7, #14]
 8000af8:	b2db      	uxtb	r3, r3
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <make_bdshot_frame>:

// Create 16-bit DSHOT frame with correct CRC
uint16_t make_bdshot_frame(uint16_t value, bool telemetry) {
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b084      	sub	sp, #16
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	460a      	mov	r2, r1
 8000b10:	80fb      	strh	r3, [r7, #6]
 8000b12:	4613      	mov	r3, r2
 8000b14:	717b      	strb	r3, [r7, #5]
    if (value == 0) {
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <make_bdshot_frame+0x1a>
        return 0x000F; // hardware expects this special frame
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	e01b      	b.n	8000b58 <make_bdshot_frame+0x52>
    }
    value &= 0x07FF; // 11 bits
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b26:	80fb      	strh	r3, [r7, #6]
    uint16_t frame_no_crc = (value << 1) | (telemetry ? 1 : 0);
 8000b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	797b      	ldrb	r3, [r7, #5]
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	81fb      	strh	r3, [r7, #14]
    uint8_t crc = bdshot_crc(frame_no_crc);
 8000b3a:	89fb      	ldrh	r3, [r7, #14]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ffc3 	bl	8000ac8 <bdshot_crc>
 8000b42:	4603      	mov	r3, r0
 8000b44:	737b      	strb	r3, [r7, #13]
    return (frame_no_crc << 4) | crc;
 8000b46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b4a:	011b      	lsls	r3, r3, #4
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	7b7b      	ldrb	r3, [r7, #13]
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	4313      	orrs	r3, r2
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	b29b      	uxth	r3, r3
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <queue_bdshot_pulse>:

void queue_bdshot_pulse(uint16_t throttle, bool telemetry){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	460a      	mov	r2, r1
 8000b6a:	80fb      	strh	r3, [r7, #6]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	717b      	strb	r3, [r7, #5]
	uint16_t frame = make_bdshot_frame(throttle, telemetry);
 8000b70:	797a      	ldrb	r2, [r7, #5]
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ffc5 	bl	8000b06 <make_bdshot_frame>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	81fb      	strh	r3, [r7, #14]
	prepare_bdshot_buffer(frame);
 8000b80:	89fb      	ldrh	r3, [r7, #14]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff66 	bl	8000a54 <prepare_bdshot_buffer>
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <send_bdshot>:

void send_bdshot(uint32_t channel){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    if (HAL_TIM_PWM_Start_DMA(&htim5, channel, (uint32_t*)dshot_buffer, DSHOT_BUFFER_SIZE) != HAL_OK)
 8000b98:	2311      	movs	r3, #17
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <send_bdshot+0x34>)
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	480a      	ldr	r0, [pc, #40]	@ (8000bc8 <send_bdshot+0x38>)
 8000ba0:	f002 f9d2 	bl	8002f48 <HAL_TIM_PWM_Start_DMA>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d004      	beq.n	8000bb4 <send_bdshot+0x24>
    {
        Error_Handler();
 8000baa:	f000 fb4f 	bl	800124c <Error_Handler>
        printf("Error in send_bdshot()\r\n");
 8000bae:	4807      	ldr	r0, [pc, #28]	@ (8000bcc <send_bdshot+0x3c>)
 8000bb0:	f006 fe6c 	bl	800788c <puts>
    }
    //printf("%d\r\n",dshot_buffer);
    dshot_running = 1;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <send_bdshot+0x40>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000184 	.word	0x20000184
 8000bc8:	20000088 	.word	0x20000088
 8000bcc:	080089f8 	.word	0x080089f8
 8000bd0:	200001c8 	.word	0x200001c8

08000bd4 <delay_us_busy>:

void delay_us_busy(uint32_t us) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <delay_us_busy+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <delay_us_busy+0x44>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	0c9a      	lsrs	r2, r3, #18
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	fb02 f303 	mul.w	r3, r2, r3
 8000bee:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <delay_us_busy+0x48>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8000bf6:	bf00      	nop
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <delay_us_busy+0x48>)
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d8f8      	bhi.n	8000bf8 <delay_us_busy+0x24>
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	20000000 	.word	0x20000000
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	e0001000 	.word	0xe0001000

08000c20 <delay_us_precise>:

void delay_us_precise(float us) {
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t cycles = (uint32_t)(SystemCoreClock * us / 1e6f);
 8000c2a:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <delay_us_precise+0x54>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c3e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000c78 <delay_us_precise+0x58>
 8000c42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c4a:	ee17 3a90 	vmov	r3, s15
 8000c4e:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <delay_us_precise+0x5c>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8000c56:	bf00      	nop
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <delay_us_precise+0x5c>)
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d8f8      	bhi.n	8000c58 <delay_us_precise+0x38>
}
 8000c66:	bf00      	nop
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	20000000 	.word	0x20000000
 8000c78:	49742400 	.word	0x49742400
 8000c7c:	e0001000 	.word	0xe0001000

08000c80 <_write>:
    }
}


int _write(int file, char *ptr, int len)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0a4      	sub	sp, #144	@ 0x90
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
    // For safety, truncate messages to queue item size
    if (len > SERIAL_QUEUE_ITEM_SIZE - 1) len = SERIAL_QUEUE_ITEM_SIZE - 1;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c90:	dd01      	ble.n	8000c96 <_write+0x16>
 8000c92:	237f      	movs	r3, #127	@ 0x7f
 8000c94:	607b      	str	r3, [r7, #4]

    char msg[SERIAL_QUEUE_ITEM_SIZE];
    memcpy(msg, ptr, len);
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f006 ffcf 	bl	8007c42 <memcpy>
    msg[len] = '\0'; // Null-terminate
 8000ca4:	f107 0210 	add.w	r2, r7, #16
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]

    // Send to queue (in ISR context: use osMessageQueuePutFromISR, but here normal context)
    if (osMessageQueuePut(serialQueueHandle, msg, 0, 0) != osOK) {
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <_write+0x4c>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	f107 0110 	add.w	r1, r7, #16
 8000cb8:	2300      	movs	r3, #0
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f003 fe88 	bl	80049d0 <osMessageQueuePut>
        // Handle queue full if needed
    }

    return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3790      	adds	r7, #144	@ 0x90
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200001cc 	.word	0x200001cc

08000cd0 <DWT_Init>:

void DWT_Init(void) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk)) {
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <DWT_Init+0x38>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10e      	bne.n	8000cfe <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <DWT_Init+0x3c>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <DWT_Init+0x3c>)
 8000ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cea:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <DWT_Init+0x38>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <DWT_Init+0x38>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <DWT_Init+0x38>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6013      	str	r3, [r2, #0]
    }
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e0001000 	.word	0xe0001000
 8000d0c:	e000edf0 	.word	0xe000edf0

08000d10 <HAL_TIM_PWM_PulseFinishedCallback>:
    }
    printf("\r\n");
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    //HAL_UART_Receive_DMA(&huart6, telemetry_buffer, 2);

    // Optionally set a flag
    dshot_running = 0;
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200001c8 	.word	0x200001c8

08000d30 <calculate_crc>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
    //printf("UART error callback!\r\n");
}

uint8_t calculate_crc(uint16_t value_12bit, const char *protocol) {
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	80fb      	strh	r3, [r7, #6]
    if (value_12bit > 0x0FFF) return 0xFF; // invalid input
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d42:	d301      	bcc.n	8000d48 <calculate_crc+0x18>
 8000d44:	23ff      	movs	r3, #255	@ 0xff
 8000d46:	e038      	b.n	8000dba <calculate_crc+0x8a>

    if (protocol[0] == 'B') { // BDShot
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b42      	cmp	r3, #66	@ 0x42
 8000d4e:	d118      	bne.n	8000d82 <calculate_crc+0x52>
        uint16_t value_16bit = value_12bit << 4;
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	011b      	lsls	r3, r3, #4
 8000d54:	817b      	strh	r3, [r7, #10]
        uint16_t csum = value_16bit;
 8000d56:	897b      	ldrh	r3, [r7, #10]
 8000d58:	813b      	strh	r3, [r7, #8]
        csum ^= (csum >> 8);
 8000d5a:	893b      	ldrh	r3, [r7, #8]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	893b      	ldrh	r3, [r7, #8]
 8000d62:	4053      	eors	r3, r2
 8000d64:	813b      	strh	r3, [r7, #8]
        csum ^= (csum >> 4);
 8000d66:	893b      	ldrh	r3, [r7, #8]
 8000d68:	091b      	lsrs	r3, r3, #4
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	893b      	ldrh	r3, [r7, #8]
 8000d6e:	4053      	eors	r3, r2
 8000d70:	813b      	strh	r3, [r7, #8]
        return (~csum) & 0xF;
 8000d72:	893b      	ldrh	r3, [r7, #8]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	e01b      	b.n	8000dba <calculate_crc+0x8a>
    } else if (protocol[0] == 'D') { // DShot
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b44      	cmp	r3, #68	@ 0x44
 8000d88:	d116      	bne.n	8000db8 <calculate_crc+0x88>
        uint16_t value = value_12bit;
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	81fb      	strh	r3, [r7, #14]
        uint8_t crc = value ^ (value >> 4) ^ (value >> 8);
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	091b      	lsrs	r3, r3, #4
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	89fb      	ldrh	r3, [r7, #14]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4053      	eors	r3, r2
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4053      	eors	r3, r2
 8000da8:	737b      	strb	r3, [r7, #13]
        return (~crc) & 0xF;
 8000daa:	7b7b      	ldrb	r3, [r7, #13]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f003 030f 	and.w	r3, r3, #15
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	e000      	b.n	8000dba <calculate_crc+0x8a>
    }

    return 0xFF; // unsupported protocol
 8000db8:	23ff      	movs	r3, #255	@ 0xff
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <decode_gcr_mapping>:
 * @param A value that represents a 20 bit GCR that has been mapped to 21 bits.
 * The first "starting" bit can be excluded for compatibility with a slightly cleaned 20 bit value.
 *
 * @return Returns the 20 bit GCR
 */
uint32_t decode_gcr_mapping(uint32_t value) {
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
    return value ^ (value >> 1);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	085a      	lsrs	r2, r3, #1
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4053      	eors	r3, r2
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <decode_gcr_20_to_16>:
 *
 * @return Returns the 20 bit GCR
 *
 * Initialized the whole map to 0xFF. This way, only explicitly defined entries are accepted
 */
int decode_gcr_20_to_16(uint32_t input_20bit, uint16_t *out_value) {
 8000de2:	b480      	push	{r7}
 8000de4:	b08f      	sub	sp, #60	@ 0x3c
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
    uint8_t decoding_map[32];
    for (int i = 0; i < 32; ++i) decoding_map[i] = 0xFF; // mark all invalid
 8000dec:	2300      	movs	r3, #0
 8000dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8000df0:	e008      	b.n	8000e04 <decode_gcr_20_to_16+0x22>
 8000df2:	f107 0208 	add.w	r2, r7, #8
 8000df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000df8:	4413      	add	r3, r2
 8000dfa:	22ff      	movs	r2, #255	@ 0xff
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e00:	3301      	adds	r3, #1
 8000e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e06:	2b1f      	cmp	r3, #31
 8000e08:	ddf3      	ble.n	8000df2 <decode_gcr_20_to_16+0x10>
    decoding_map[0x19] = 0x0; decoding_map[0x1B] = 0x1; decoding_map[0x12] = 0x2;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8000e10:	2301      	movs	r3, #1
 8000e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000e16:	2302      	movs	r3, #2
 8000e18:	76bb      	strb	r3, [r7, #26]
    decoding_map[0x13] = 0x3; decoding_map[0x1D] = 0x4; decoding_map[0x15] = 0x5;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	76fb      	strb	r3, [r7, #27]
 8000e1e:	2304      	movs	r3, #4
 8000e20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000e24:	2305      	movs	r3, #5
 8000e26:	777b      	strb	r3, [r7, #29]
    decoding_map[0x16] = 0x6; decoding_map[0x17] = 0x7; decoding_map[0x1A] = 0x8;
 8000e28:	2306      	movs	r3, #6
 8000e2a:	77bb      	strb	r3, [r7, #30]
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	77fb      	strb	r3, [r7, #31]
 8000e30:	2308      	movs	r3, #8
 8000e32:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    decoding_map[0x09] = 0x9; decoding_map[0x0A] = 0xA; decoding_map[0x0B] = 0xB;
 8000e36:	2309      	movs	r3, #9
 8000e38:	747b      	strb	r3, [r7, #17]
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	74bb      	strb	r3, [r7, #18]
 8000e3e:	230b      	movs	r3, #11
 8000e40:	74fb      	strb	r3, [r7, #19]
    decoding_map[0x1E] = 0xC; decoding_map[0x0D] = 0xD; decoding_map[0x0E] = 0xE;
 8000e42:	230c      	movs	r3, #12
 8000e44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e48:	230d      	movs	r3, #13
 8000e4a:	757b      	strb	r3, [r7, #21]
 8000e4c:	230e      	movs	r3, #14
 8000e4e:	75bb      	strb	r3, [r7, #22]
    decoding_map[0x0F] = 0xF;
 8000e50:	230f      	movs	r3, #15
 8000e52:	75fb      	strb	r3, [r7, #23]

    uint16_t result = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	867b      	strh	r3, [r7, #50]	@ 0x32

    for (int i = 0; i < 4; i++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e5c:	e029      	b.n	8000eb2 <decode_gcr_20_to_16+0xd0>
        uint8_t chunk = (input_20bit >> (15 - i * 5)) & 0x1F;
 8000e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e60:	4613      	mov	r3, r2
 8000e62:	079b      	lsls	r3, r3, #30
 8000e64:	1a9b      	subs	r3, r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	330f      	adds	r3, #15
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	f003 031f 	and.w	r3, r3, #31
 8000e78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        if (decoding_map[chunk] == 0xFF) return 0; // invalid chunk
 8000e7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000e80:	3338      	adds	r3, #56	@ 0x38
 8000e82:	443b      	add	r3, r7
 8000e84:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000e88:	2bff      	cmp	r3, #255	@ 0xff
 8000e8a:	d101      	bne.n	8000e90 <decode_gcr_20_to_16+0xae>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e017      	b.n	8000ec0 <decode_gcr_20_to_16+0xde>
        result = (result << 4) | decoding_map[chunk];
 8000e90:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000e9c:	3338      	adds	r3, #56	@ 0x38
 8000e9e:	443b      	add	r3, r7
 8000ea0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	867b      	strh	r3, [r7, #50]	@ 0x32
    for (int i = 0; i < 4; i++) {
 8000eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eae:	3301      	adds	r3, #1
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	ddd2      	ble.n	8000e5e <decode_gcr_20_to_16+0x7c>
    }

    *out_value = result;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000ebc:	801a      	strh	r2, [r3, #0]
    return 1;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	373c      	adds	r7, #60	@ 0x3c
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <parse_edt_frame>:

int parse_edt_frame(uint16_t frame, char *type_out, uint8_t *value_out) {
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b089      	sub	sp, #36	@ 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	81fb      	strh	r3, [r7, #14]
    if (frame > 0xFFFF || frame < 0){
    	return -1;
    }

    uint16_t data = (frame >> 4) & 0x0FFF;
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	091b      	lsrs	r3, r3, #4
 8000ede:	83fb      	strh	r3, [r7, #30]
    uint8_t crc_received = frame & 0x0F;
 8000ee0:	89fb      	ldrh	r3, [r7, #14]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	777b      	strb	r3, [r7, #29]
    uint8_t crc_calculated = calculate_crc(data, "BDShot");
 8000eea:	8bfb      	ldrh	r3, [r7, #30]
 8000eec:	4950      	ldr	r1, [pc, #320]	@ (8001030 <parse_edt_frame+0x164>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff1e 	bl	8000d30 <calculate_crc>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	773b      	strb	r3, [r7, #28]
    if (crc_received != crc_calculated) return -2;
 8000ef8:	7f7a      	ldrb	r2, [r7, #29]
 8000efa:	7f3b      	ldrb	r3, [r7, #28]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d002      	beq.n	8000f06 <parse_edt_frame+0x3a>
 8000f00:	f06f 0301 	mvn.w	r3, #1
 8000f04:	e08f      	b.n	8001026 <parse_edt_frame+0x15a>

    uint8_t exponent = (data >> 9) & 0x07;
 8000f06:	8bfb      	ldrh	r3, [r7, #30]
 8000f08:	0a5b      	lsrs	r3, r3, #9
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	76fb      	strb	r3, [r7, #27]
    uint16_t base_period = data & 0x1FF;
 8000f14:	8bfb      	ldrh	r3, [r7, #30]
 8000f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f1a:	833b      	strh	r3, [r7, #24]
    if (exponent > 12) return -3;
 8000f1c:	7efb      	ldrb	r3, [r7, #27]
 8000f1e:	2b0c      	cmp	r3, #12
 8000f20:	d902      	bls.n	8000f28 <parse_edt_frame+0x5c>
 8000f22:	f06f 0302 	mvn.w	r3, #2
 8000f26:	e07e      	b.n	8001026 <parse_edt_frame+0x15a>

    uint32_t period_us = base_period << exponent;
 8000f28:	8b3a      	ldrh	r2, [r7, #24]
 8000f2a:	7efb      	ldrb	r3, [r7, #27]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
    if (period_us == 0) return -3;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <parse_edt_frame+0x72>
 8000f38:	f06f 0302 	mvn.w	r3, #2
 8000f3c:	e073      	b.n	8001026 <parse_edt_frame+0x15a>

    bool is_edt = ((exponent & 1) == 0) && ((base_period & 0x100) == 0);
 8000f3e:	7efb      	ldrb	r3, [r7, #27]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d106      	bne.n	8000f56 <parse_edt_frame+0x8a>
 8000f48:	8b3b      	ldrh	r3, [r7, #24]
 8000f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <parse_edt_frame+0x8a>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <parse_edt_frame+0x8c>
 8000f56:	2300      	movs	r3, #0
 8000f58:	74fb      	strb	r3, [r7, #19]
 8000f5a:	7cfb      	ldrb	r3, [r7, #19]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	74fb      	strb	r3, [r7, #19]

    if (is_edt) {
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d040      	beq.n	8000fea <parse_edt_frame+0x11e>
        uint8_t telemetry_type = (data >> 8) & 0xF;
 8000f68:	8bfb      	ldrh	r3, [r7, #30]
 8000f6a:	0a1b      	lsrs	r3, r3, #8
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	747b      	strb	r3, [r7, #17]
        uint8_t telemetry_value = data & 0xFF;
 8000f76:	8bfb      	ldrh	r3, [r7, #30]
 8000f78:	743b      	strb	r3, [r7, #16]

        switch (telemetry_type) {
 8000f7a:	7c7b      	ldrb	r3, [r7, #17]
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d002      	beq.n	8000f86 <parse_edt_frame+0xba>
 8000f80:	2b0e      	cmp	r3, #14
 8000f82:	d011      	beq.n	8000fa8 <parse_edt_frame+0xdc>
 8000f84:	e021      	b.n	8000fca <parse_edt_frame+0xfe>
            case 0x04:
                *value_out = (telemetry_value) / 4;
 8000f86:	7c3b      	ldrb	r3, [r7, #16]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	701a      	strb	r2, [r3, #0]
                if (type_out) strcpy(type_out, "Voltage (V)");
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d026      	beq.n	8000fe4 <parse_edt_frame+0x118>
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	4a26      	ldr	r2, [pc, #152]	@ (8001034 <parse_edt_frame+0x168>)
 8000f9a:	461c      	mov	r4, r3
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000fa0:	6020      	str	r0, [r4, #0]
 8000fa2:	6061      	str	r1, [r4, #4]
 8000fa4:	60a2      	str	r2, [r4, #8]
                break;
 8000fa6:	e01d      	b.n	8000fe4 <parse_edt_frame+0x118>
            case 0x0E:
                if (type_out) strcpy(type_out, "Status Frame");
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d009      	beq.n	8000fc2 <parse_edt_frame+0xf6>
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <parse_edt_frame+0x16c>)
 8000fb2:	461c      	mov	r4, r3
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000fb8:	6020      	str	r0, [r4, #0]
 8000fba:	6061      	str	r1, [r4, #4]
 8000fbc:	60a2      	str	r2, [r4, #8]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	7323      	strb	r3, [r4, #12]
                *value_out = telemetry_value; // raw value, parse later if needed
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7c3a      	ldrb	r2, [r7, #16]
 8000fc6:	701a      	strb	r2, [r3, #0]
                break;
 8000fc8:	e00d      	b.n	8000fe6 <parse_edt_frame+0x11a>
            default:
                *value_out = telemetry_value;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7c3a      	ldrb	r2, [r7, #16]
 8000fce:	701a      	strb	r2, [r3, #0]
                if (type_out) sprintf(type_out, "Unknown (0x%X)", telemetry_type);
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <parse_edt_frame+0x11a>
 8000fd6:	7c7b      	ldrb	r3, [r7, #17]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4918      	ldr	r1, [pc, #96]	@ (800103c <parse_edt_frame+0x170>)
 8000fdc:	68b8      	ldr	r0, [r7, #8]
 8000fde:	f006 fc5d 	bl	800789c <siprintf>
 8000fe2:	e000      	b.n	8000fe6 <parse_edt_frame+0x11a>
                break;
 8000fe4:	bf00      	nop
        }

        return 1; // EDT frame
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e01d      	b.n	8001026 <parse_edt_frame+0x15a>
    } else {
        if (base_period == 0 || base_period == 0x1FF) {
 8000fea:	8b3b      	ldrh	r3, [r7, #24]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <parse_edt_frame+0x12e>
 8000ff0:	8b3b      	ldrh	r3, [r7, #24]
 8000ff2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d103      	bne.n	8001002 <parse_edt_frame+0x136>
            *value_out = 0;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e007      	b.n	8001012 <parse_edt_frame+0x146>
        } else {
            uint8_t erpm = 60000000/ period_us;
 8001002:	4a0f      	ldr	r2, [pc, #60]	@ (8001040 <parse_edt_frame+0x174>)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	74bb      	strb	r3, [r7, #18]
            *value_out = erpm;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7cba      	ldrb	r2, [r7, #18]
 8001010:	701a      	strb	r2, [r3, #0]
        }

        if (type_out) strcpy(type_out, "eRPM");
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <parse_edt_frame+0x158>
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <parse_edt_frame+0x178>)
 800101c:	6810      	ldr	r0, [r2, #0]
 800101e:	6018      	str	r0, [r3, #0]
 8001020:	7912      	ldrb	r2, [r2, #4]
 8001022:	711a      	strb	r2, [r3, #4]
        return 2; // eRPM frame
 8001024:	2302      	movs	r3, #2
    }

    return -3;
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	@ 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	08008a14 	.word	0x08008a14
 8001034:	08008a1c 	.word	0x08008a1c
 8001038:	08008a28 	.word	0x08008a28
 800103c:	08008a38 	.word	0x08008a38
 8001040:	03938700 	.word	0x03938700
 8001044:	08008a48 	.word	0x08008a48

08001048 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001050:	2001      	movs	r0, #1
 8001052:	f003 fc2f 	bl	80048b4 <osDelay>
 8001056:	e7fb      	b.n	8001050 <StartDefaultTask+0x8>

08001058 <DShotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DShotTask */
void DShotTask(void *argument)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DShotTask */
	printf("\nDShotTask Begin.\r\n");
 8001060:	4850      	ldr	r0, [pc, #320]	@ (80011a4 <DShotTask+0x14c>)
 8001062:	f006 fc13 	bl	800788c <puts>
	printf("SystemCoreClock=%lu\r\n", SystemCoreClock);
 8001066:	4b50      	ldr	r3, [pc, #320]	@ (80011a8 <DShotTask+0x150>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	484f      	ldr	r0, [pc, #316]	@ (80011ac <DShotTask+0x154>)
 800106e:	f006 fba5 	bl	80077bc <iprintf>
	uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 8001072:	f001 fdf5 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8001076:	61f8      	str	r0, [r7, #28]
	uint32_t tim5_clk = pclk1;
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
	if ((RCC->CFGR & RCC_CFGR_PPRE1) != RCC_CFGR_PPRE1_DIV1)
 800107c:	4b4c      	ldr	r3, [pc, #304]	@ (80011b0 <DShotTask+0x158>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <DShotTask+0x36>
	    tim5_clk *= 2;
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
	printf("TIM5 actual clk: %lu\r\n", tim5_clk);
 800108e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001090:	4848      	ldr	r0, [pc, #288]	@ (80011b4 <DShotTask+0x15c>)
 8001092:	f006 fb93 	bl	80077bc <iprintf>




    // Step 1: Send ARM command (value 0)
	printf("Arming.\r\n");
 8001096:	4848      	ldr	r0, [pc, #288]	@ (80011b8 <DShotTask+0x160>)
 8001098:	f006 fbf8 	bl	800788c <puts>
	queue_bdshot_pulse(0, true);
 800109c:	2101      	movs	r1, #1
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fd5e 	bl	8000b60 <queue_bdshot_pulse>
	for (int i = 0; i < 3000; i++){
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
 80010a8:	e008      	b.n	80010bc <DShotTask+0x64>
		send_bdshot(TIM_CHANNEL_1);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fd70 	bl	8000b90 <send_bdshot>
		vTaskDelay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f004 fda9 	bl	8005c08 <vTaskDelay>
	for (int i = 0; i < 3000; i++){
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	3301      	adds	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80010c2:	4293      	cmp	r3, r2
 80010c4:	ddf1      	ble.n	80010aa <DShotTask+0x52>
	}
	printf("Done arming!\r\n");
 80010c6:	483d      	ldr	r0, [pc, #244]	@ (80011bc <DShotTask+0x164>)
 80010c8:	f006 fbe0 	bl	800788c <puts>
    vTaskDelay(50);  // Wait 300ms (Bluejay requires for arming)
 80010cc:	2032      	movs	r0, #50	@ 0x32
 80010ce:	f004 fd9b 	bl	8005c08 <vTaskDelay>



    //Approximately 84 ticks in 1 microsecond (Timer Clock = 84 MHz)
    printf("Throttling.\r\n");
 80010d2:	483b      	ldr	r0, [pc, #236]	@ (80011c0 <DShotTask+0x168>)
 80010d4:	f006 fbda 	bl	800788c <puts>
    queue_bdshot_pulse(200, true);
 80010d8:	2101      	movs	r1, #1
 80010da:	20c8      	movs	r0, #200	@ 0xc8
 80010dc:	f7ff fd40 	bl	8000b60 <queue_bdshot_pulse>
    uint32_t telemetry;
    uint16_t telemetry_16bit;
    char telemetry_type;
    uint8_t telemetry_value;
    for (;;){
      while(dshot_running){
 80010e0:	e003      	b.n	80010ea <DShotTask+0x92>
    	  delay_us_precise(5);
 80010e2:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80010e6:	f7ff fd9b 	bl	8000c20 <delay_us_precise>
      while(dshot_running){
 80010ea:	4b36      	ldr	r3, [pc, #216]	@ (80011c4 <DShotTask+0x16c>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f6      	bne.n	80010e2 <DShotTask+0x8a>
      }
      send_bdshot(TIM_CHANNEL_1);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff fd4b 	bl	8000b90 <send_bdshot>
      delay_us_busy(40);
 80010fa:	2028      	movs	r0, #40	@ 0x28
 80010fc:	f7ff fd6a 	bl	8000bd4 <delay_us_busy>
      set_pin_input_PA0();
 8001100:	f7ff fc6c 	bl	80009dc <set_pin_input_PA0>
      if (receive_bdshot_telemetry(&telemetry) == 0) {
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fc15 	bl	8000938 <receive_bdshot_telemetry>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d140      	bne.n	8001196 <DShotTask+0x13e>
    	  //print_binary(telemetry,20);
    	  uint32_t gcr = decode_gcr_mapping(telemetry);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fe55 	bl	8000dc6 <decode_gcr_mapping>
 800111c:	61b8      	str	r0, [r7, #24]
    	  if (!decode_gcr_20_to_16(gcr, &telemetry_16bit)) {
 800111e:	f107 030e 	add.w	r3, r7, #14
 8001122:	4619      	mov	r1, r3
 8001124:	69b8      	ldr	r0, [r7, #24]
 8001126:	f7ff fe5c 	bl	8000de2 <decode_gcr_20_to_16>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d104      	bne.n	800113a <DShotTask+0xe2>
    		  //printf("Invalid GCR encoding.\r\n");
    		  delay_us_precise(10);
 8001130:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001134:	f7ff fd74 	bl	8000c20 <delay_us_precise>
 8001138:	e02d      	b.n	8001196 <DShotTask+0x13e>
    	  }
    	  else {
              int type = parse_edt_frame(telemetry_16bit, &telemetry_type, &telemetry_value);
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	f107 020c 	add.w	r2, r7, #12
 8001140:	f107 010d 	add.w	r1, r7, #13
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fec1 	bl	8000ecc <parse_edt_frame>
 800114a:	6178      	str	r0, [r7, #20]
              if (type == 2) {
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d021      	beq.n	8001196 <DShotTask+0x13e>
            	  //printf("ERPM %d\r\n", telemetry_value);
              }

              else if (type == 1) {
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d103      	bne.n	8001160 <DShotTask+0x108>
            	  printf("EDT\r\n");
 8001158:	481b      	ldr	r0, [pc, #108]	@ (80011c8 <DShotTask+0x170>)
 800115a:	f006 fb97 	bl	800788c <puts>
 800115e:	e01a      	b.n	8001196 <DShotTask+0x13e>
                  //printf("EDT: %s = %d\r\n", telemetry_type, (int)telemetry_value);
              }
              else if (type == -1){
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001166:	d103      	bne.n	8001170 <DShotTask+0x118>
                  printf("Invalid Telemetry frame.\r\n");
 8001168:	4818      	ldr	r0, [pc, #96]	@ (80011cc <DShotTask+0x174>)
 800116a:	f006 fb8f 	bl	800788c <puts>
 800116e:	e012      	b.n	8001196 <DShotTask+0x13e>
              }
              else if (type == -2){
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f113 0f02 	cmn.w	r3, #2
 8001176:	d103      	bne.n	8001180 <DShotTask+0x128>
            	  printf("Invalid CRC.\r\n");
 8001178:	4815      	ldr	r0, [pc, #84]	@ (80011d0 <DShotTask+0x178>)
 800117a:	f006 fb87 	bl	800788c <puts>
 800117e:	e00a      	b.n	8001196 <DShotTask+0x13e>
              }
              else if (type == -3){
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f113 0f03 	cmn.w	r3, #3
 8001186:	d103      	bne.n	8001190 <DShotTask+0x138>
            	  printf("Something went wrong.\r\n");
 8001188:	4812      	ldr	r0, [pc, #72]	@ (80011d4 <DShotTask+0x17c>)
 800118a:	f006 fb7f 	bl	800788c <puts>
 800118e:	e002      	b.n	8001196 <DShotTask+0x13e>
              }
              else {
            	  printf("Unknown Error.\r\n");
 8001190:	4811      	ldr	r0, [pc, #68]	@ (80011d8 <DShotTask+0x180>)
 8001192:	f006 fb7b 	bl	800788c <puts>
    	  }
      }
      else {
    	  //printf("Invalid Telemetry.\r\n");
      }
      set_pin_pwm_PA0();
 8001196:	f7ff fc3d 	bl	8000a14 <set_pin_pwm_PA0>

      vTaskDelay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f004 fd34 	bl	8005c08 <vTaskDelay>
      while(dshot_running){
 80011a0:	e7a3      	b.n	80010ea <DShotTask+0x92>
 80011a2:	bf00      	nop
 80011a4:	08008a50 	.word	0x08008a50
 80011a8:	20000000 	.word	0x20000000
 80011ac:	08008a64 	.word	0x08008a64
 80011b0:	40023800 	.word	0x40023800
 80011b4:	08008a7c 	.word	0x08008a7c
 80011b8:	08008a94 	.word	0x08008a94
 80011bc:	08008aa0 	.word	0x08008aa0
 80011c0:	08008ab0 	.word	0x08008ab0
 80011c4:	200001c8 	.word	0x200001c8
 80011c8:	08008ac0 	.word	0x08008ac0
 80011cc:	08008ac8 	.word	0x08008ac8
 80011d0:	08008ae4 	.word	0x08008ae4
 80011d4:	08008af4 	.word	0x08008af4
 80011d8:	08008b0c 	.word	0x08008b0c

080011dc <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void *argument)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0a2      	sub	sp, #136	@ 0x88
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  char msg[SERIAL_QUEUE_ITEM_SIZE];

  for (;;)
  {
      // 1️⃣ Process serial debug messages
      if (osMessageQueueGet(serialQueueHandle, msg, NULL, 10) == osOK)
 80011e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <StartSerialTask+0x44>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	f107 0108 	add.w	r1, r7, #8
 80011ec:	230a      	movs	r3, #10
 80011ee:	2200      	movs	r2, #0
 80011f0:	f003 fc4e 	bl	8004a90 <osMessageQueueGet>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10d      	bne.n	8001216 <StartSerialTask+0x3a>
      {
          HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4618      	mov	r0, r3
 8001200:	f7fe ffe6 	bl	80001d0 <strlen>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	f107 0108 	add.w	r1, r7, #8
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <StartSerialTask+0x48>)
 8001212:	f002 fe73 	bl	8003efc <HAL_UART_Transmit>
      }

      osDelay(1); // Let other tasks run
 8001216:	2001      	movs	r0, #1
 8001218:	f003 fb4c 	bl	80048b4 <osDelay>
      if (osMessageQueueGet(serialQueueHandle, msg, NULL, 10) == osOK)
 800121c:	e7e2      	b.n	80011e4 <StartSerialTask+0x8>
 800121e:	bf00      	nop
 8001220:	200001cc 	.word	0x200001cc
 8001224:	20000130 	.word	0x20000130

08001228 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800123a:	f000 faa1 	bl	8001780 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  //printf("PeriodElapsedCallback\r\n");
  /* USER CODE END Callback 1 */
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40001c00 	.word	0x40001c00

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <Error_Handler+0x8>

08001258 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_MspInit+0x54>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	4a11      	ldr	r2, [pc, #68]	@ (80012ac <HAL_MspInit+0x54>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126c:	6453      	str	r3, [r2, #68]	@ 0x44
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_MspInit+0x54>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_MspInit+0x54>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <HAL_MspInit+0x54>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <HAL_MspInit+0x54>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	210f      	movs	r1, #15
 800129a:	f06f 0001 	mvn.w	r0, #1
 800129e:	f000 fb47 	bl	8001930 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a22      	ldr	r2, [pc, #136]	@ (8001348 <HAL_TIM_PWM_MspInit+0x98>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d13e      	bne.n	8001340 <HAL_TIM_PWM_MspInit+0x90>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b21      	ldr	r3, [pc, #132]	@ (800134c <HAL_TIM_PWM_MspInit+0x9c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	4a20      	ldr	r2, [pc, #128]	@ (800134c <HAL_TIM_PWM_MspInit+0x9c>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d2:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <HAL_TIM_PWM_MspInit+0x9c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 80012e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001354 <HAL_TIM_PWM_MspInit+0xa4>)
 80012e2:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 80012e6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80012ea:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 80012ee:	2240      	movs	r2, #64	@ 0x40
 80012f0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 80012fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012fe:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 8001302:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001306:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 800130a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800130e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8001310:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 8001318:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800131c:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001324:	480a      	ldr	r0, [pc, #40]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 8001326:	f000 fb2d 	bl	8001984 <HAL_DMA_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8001330:	f7ff ff8c 	bl	800124c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 8001338:	625a      	str	r2, [r3, #36]	@ 0x24
 800133a:	4a05      	ldr	r2, [pc, #20]	@ (8001350 <HAL_TIM_PWM_MspInit+0xa0>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40000c00 	.word	0x40000c00
 800134c:	40023800 	.word	0x40023800
 8001350:	200000d0 	.word	0x200000d0
 8001354:	40026040 	.word	0x40026040

08001358 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <HAL_TIM_MspPostInit+0x68>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d11d      	bne.n	80013b6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_TIM_MspPostInit+0x6c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a10      	ldr	r2, [pc, #64]	@ (80013c4 <HAL_TIM_MspPostInit+0x6c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <HAL_TIM_MspPostInit+0x6c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001396:	2301      	movs	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <HAL_TIM_MspPostInit+0x70>)
 80013b2:	f000 fe57 	bl	8002064 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40000c00 	.word	0x40000c00
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	@ 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <HAL_UART_MspInit+0x84>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12b      	bne.n	8001446 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_UART_MspInit+0x88>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	4a17      	ldr	r2, [pc, #92]	@ (8001454 <HAL_UART_MspInit+0x88>)
 80013f8:	f043 0320 	orr.w	r3, r3, #32
 80013fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_UART_MspInit+0x88>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <HAL_UART_MspInit+0x88>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a10      	ldr	r2, [pc, #64]	@ (8001454 <HAL_UART_MspInit+0x88>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <HAL_UART_MspInit+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001426:	23c0      	movs	r3, #192	@ 0xc0
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001436:	2308      	movs	r3, #8
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <HAL_UART_MspInit+0x8c>)
 8001442:	f000 fe0f 	bl	8002064 <HAL_GPIO_Init>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	@ 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40011400 	.word	0x40011400
 8001454:	40023800 	.word	0x40023800
 8001458:	40020800 	.word	0x40020800

0800145c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08e      	sub	sp, #56	@ 0x38
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	4b33      	ldr	r3, [pc, #204]	@ (8001540 <HAL_InitTick+0xe4>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	4a32      	ldr	r2, [pc, #200]	@ (8001540 <HAL_InitTick+0xe4>)
 8001476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800147a:	6413      	str	r3, [r2, #64]	@ 0x40
 800147c:	4b30      	ldr	r3, [pc, #192]	@ (8001540 <HAL_InitTick+0xe4>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001488:	f107 0210 	add.w	r2, r7, #16
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f001 fc0c 	bl	8002cb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800149c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d103      	bne.n	80014aa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014a2:	f001 fbdd 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 80014a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80014a8:	e004      	b.n	80014b4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014aa:	f001 fbd9 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 80014ae:	4603      	mov	r3, r0
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b6:	4a23      	ldr	r2, [pc, #140]	@ (8001544 <HAL_InitTick+0xe8>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	0c9b      	lsrs	r3, r3, #18
 80014be:	3b01      	subs	r3, #1
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <HAL_InitTick+0xec>)
 80014c4:	4a21      	ldr	r2, [pc, #132]	@ (800154c <HAL_InitTick+0xf0>)
 80014c6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <HAL_InitTick+0xec>)
 80014ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014ce:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 80014d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001548 <HAL_InitTick+0xec>)
 80014d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d4:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <HAL_InitTick+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_InitTick+0xec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <HAL_InitTick+0xec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 80014e8:	4817      	ldr	r0, [pc, #92]	@ (8001548 <HAL_InitTick+0xec>)
 80014ea:	f001 fc13 	bl	8002d14 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d11b      	bne.n	8001534 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 80014fc:	4812      	ldr	r0, [pc, #72]	@ (8001548 <HAL_InitTick+0xec>)
 80014fe:	f001 fc63 	bl	8002dc8 <HAL_TIM_Base_Start_IT>
 8001502:	4603      	mov	r3, r0
 8001504:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001508:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800150c:	2b00      	cmp	r3, #0
 800150e:	d111      	bne.n	8001534 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001510:	202c      	movs	r0, #44	@ 0x2c
 8001512:	f000 fa29 	bl	8001968 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d808      	bhi.n	800152e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	202c      	movs	r0, #44	@ 0x2c
 8001522:	f000 fa05 	bl	8001930 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <HAL_InitTick+0xf4>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	e002      	b.n	8001534 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001534:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001538:	4618      	mov	r0, r3
 800153a:	3738      	adds	r7, #56	@ 0x38
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	431bde83 	.word	0x431bde83
 8001548:	200001d0 	.word	0x200001d0
 800154c:	40001c00 	.word	0x40001c00
 8001550:	20000004 	.word	0x20000004

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <NMI_Handler+0x4>

0800155c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <MemManage_Handler+0x4>

0800156c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <UsageFault_Handler+0x4>

0800157c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <DMA1_Stream2_IRQHandler+0x10>)
 8001592:	f000 fafd 	bl	8001b90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200000d0 	.word	0x200000d0

080015a0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80015a6:	f001 fe97 	bl	80032d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200001d0 	.word	0x200001d0

080015b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e00a      	b.n	80015dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015c6:	f3af 8000 	nop.w
 80015ca:	4601      	mov	r1, r0
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	b2ca      	uxtb	r2, r1
 80015d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dbf0      	blt.n	80015c6 <_read+0x12>
  }

  return len;
 80015e4:	687b      	ldr	r3, [r7, #4]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_close>:

int _close(int file)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001616:	605a      	str	r2, [r3, #4]
  return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_isatty>:

int _isatty(int file)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f006 faae 	bl	8007be8 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20020000 	.word	0x20020000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	20000218 	.word	0x20000218
 80016c0:	20005f78 	.word	0x20005f78

080016c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <SystemInit+0x20>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ce:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <SystemInit+0x20>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001720 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016ec:	f7ff ffea 	bl	80016c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f0:	480c      	ldr	r0, [pc, #48]	@ (8001724 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f2:	490d      	ldr	r1, [pc, #52]	@ (8001728 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001708:	4c0a      	ldr	r4, [pc, #40]	@ (8001734 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001716:	f006 fa6d 	bl	8007bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171a:	f7fe ff47 	bl	80005ac <main>
  bx  lr    
 800171e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001720:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800172c:	08008c04 	.word	0x08008c04
  ldr r2, =_sbss
 8001730:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001734:	20005f74 	.word	0x20005f74

08001738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC_IRQHandler>
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001740:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <HAL_Init+0x40>)
 8001746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800174a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <HAL_Init+0x40>)
 8001752:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	@ (800177c <HAL_Init+0x40>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f8d8 	bl	800191a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176a:	200f      	movs	r0, #15
 800176c:	f7ff fe76 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001770:	f7ff fd72 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_IncTick+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x24>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <HAL_IncTick+0x24>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000008 	.word	0x20000008
 80017a4:	2000021c 	.word	0x2000021c

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000021c 	.word	0x2000021c

080017c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4907      	ldr	r1, [pc, #28]	@ (800185c <__NVIC_EnableIRQ+0x38>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	@ (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	@ (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	@ 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	@ 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff4c 	bl	80017c0 <__NVIC_SetPriorityGrouping>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001942:	f7ff ff61 	bl	8001808 <__NVIC_GetPriorityGrouping>
 8001946:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	68b9      	ldr	r1, [r7, #8]
 800194c:	6978      	ldr	r0, [r7, #20]
 800194e:	f7ff ffb1 	bl	80018b4 <NVIC_EncodePriority>
 8001952:	4602      	mov	r2, r0
 8001954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff80 	bl	8001860 <__NVIC_SetPriority>
}
 8001960:	bf00      	nop
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff54 	bl	8001824 <__NVIC_EnableIRQ>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ff0a 	bl	80017a8 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e099      	b.n	8001ad4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c0:	e00f      	b.n	80019e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019c2:	f7ff fef1 	bl	80017a8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d908      	bls.n	80019e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2220      	movs	r2, #32
 80019d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2203      	movs	r2, #3
 80019da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e078      	b.n	8001ad4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1e8      	bne.n	80019c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <HAL_DMA_Init+0x158>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d107      	bne.n	8001a4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	4313      	orrs	r3, r2
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f023 0307 	bic.w	r3, r3, #7
 8001a62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d117      	bne.n	8001aa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00e      	beq.n	8001aa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fa6f 	bl	8001f6c <DMA_CheckFifoParam>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2240      	movs	r2, #64	@ 0x40
 8001a98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e016      	b.n	8001ad4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fa26 	bl	8001f00 <DMA_CalcBaseAndBitshift>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abc:	223f      	movs	r2, #63	@ 0x3f
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	f010803f 	.word	0xf010803f

08001ae0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_DMA_Start_IT+0x26>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e040      	b.n	8001b88 <HAL_DMA_Start_IT+0xa8>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d12f      	bne.n	8001b7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 f9b8 	bl	8001ea4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b38:	223f      	movs	r2, #63	@ 0x3f
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0216 	orr.w	r2, r2, #22
 8001b4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e005      	b.n	8001b86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b82:	2302      	movs	r3, #2
 8001b84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b9c:	4b8e      	ldr	r3, [pc, #568]	@ (8001dd8 <HAL_DMA_IRQHandler+0x248>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a8e      	ldr	r2, [pc, #568]	@ (8001ddc <HAL_DMA_IRQHandler+0x24c>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0a9b      	lsrs	r3, r3, #10
 8001ba8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bba:	2208      	movs	r2, #8
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d01a      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0204 	bic.w	r2, r2, #4
 8001be2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be8:	2208      	movs	r2, #8
 8001bea:	409a      	lsls	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c00:	2201      	movs	r2, #1
 8001c02:	409a      	lsls	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d012      	beq.n	8001c32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1e:	2201      	movs	r2, #1
 8001c20:	409a      	lsls	r2, r3
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2a:	f043 0202 	orr.w	r2, r3, #2
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c36:	2204      	movs	r2, #4
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d012      	beq.n	8001c68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c54:	2204      	movs	r2, #4
 8001c56:	409a      	lsls	r2, r3
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c60:	f043 0204 	orr.w	r2, r3, #4
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d043      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d03c      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d018      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d108      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d024      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
 8001cbe:	e01f      	b.n	8001d00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d01b      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
 8001cd0:	e016      	b.n	8001d00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0208 	bic.w	r2, r2, #8
 8001cee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d04:	2220      	movs	r2, #32
 8001d06:	409a      	lsls	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 808f 	beq.w	8001e30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 8087 	beq.w	8001e30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d26:	2220      	movs	r2, #32
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	d136      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0216 	bic.w	r2, r2, #22
 8001d48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d103      	bne.n	8001d6a <HAL_DMA_IRQHandler+0x1da>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0208 	bic.w	r2, r2, #8
 8001d78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7e:	223f      	movs	r2, #63	@ 0x3f
 8001d80:	409a      	lsls	r2, r3
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d07e      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	4798      	blx	r3
        }
        return;
 8001da6:	e079      	b.n	8001e9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d01d      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10d      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d031      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	4798      	blx	r3
 8001dd4:	e02c      	b.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d023      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
 8001df0:	e01e      	b.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10f      	bne.n	8001e20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0210 	bic.w	r2, r2, #16
 8001e0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d032      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d022      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2205      	movs	r2, #5
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d307      	bcc.n	8001e78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f2      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x2cc>
 8001e76:	e000      	b.n	8001e7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
 8001e9a:	e000      	b.n	8001e9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e9c:	bf00      	nop
    }
  }
}
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b40      	cmp	r3, #64	@ 0x40
 8001ed0:	d108      	bne.n	8001ee4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ee2:	e007      	b.n	8001ef4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3b10      	subs	r3, #16
 8001f10:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <DMA_CalcBaseAndBitshift+0x64>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f1a:	4a13      	ldr	r2, [pc, #76]	@ (8001f68 <DMA_CalcBaseAndBitshift+0x68>)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d909      	bls.n	8001f42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f36:	f023 0303 	bic.w	r3, r3, #3
 8001f3a:	1d1a      	adds	r2, r3, #4
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f40:	e007      	b.n	8001f52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	aaaaaaab 	.word	0xaaaaaaab
 8001f68:	08008bb8 	.word	0x08008bb8

08001f6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d11f      	bne.n	8001fc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d856      	bhi.n	800203a <DMA_CheckFifoParam+0xce>
 8001f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f94 <DMA_CheckFifoParam+0x28>)
 8001f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f92:	bf00      	nop
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fb7 	.word	0x08001fb7
 8001f9c:	08001fa5 	.word	0x08001fa5
 8001fa0:	0800203b 	.word	0x0800203b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d046      	beq.n	800203e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb4:	e043      	b.n	800203e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fbe:	d140      	bne.n	8002042 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc4:	e03d      	b.n	8002042 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fce:	d121      	bne.n	8002014 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d837      	bhi.n	8002046 <DMA_CheckFifoParam+0xda>
 8001fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fdc <DMA_CheckFifoParam+0x70>)
 8001fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fdc:	08001fed 	.word	0x08001fed
 8001fe0:	08001ff3 	.word	0x08001ff3
 8001fe4:	08001fed 	.word	0x08001fed
 8001fe8:	08002005 	.word	0x08002005
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff0:	e030      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d025      	beq.n	800204a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002002:	e022      	b.n	800204a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800200c:	d11f      	bne.n	800204e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002012:	e01c      	b.n	800204e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d903      	bls.n	8002022 <DMA_CheckFifoParam+0xb6>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d003      	beq.n	8002028 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002020:	e018      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
      break;
 8002026:	e015      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00e      	beq.n	8002052 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
      break;
 8002038:	e00b      	b.n	8002052 <DMA_CheckFifoParam+0xe6>
      break;
 800203a:	bf00      	nop
 800203c:	e00a      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 800203e:	bf00      	nop
 8002040:	e008      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 8002042:	bf00      	nop
 8002044:	e006      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 8002046:	bf00      	nop
 8002048:	e004      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 800204a:	bf00      	nop
 800204c:	e002      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;   
 800204e:	bf00      	nop
 8002050:	e000      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 8002052:	bf00      	nop
    }
  } 
  
  return status; 
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	@ 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	e16b      	b.n	8002358 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	429a      	cmp	r2, r3
 800209a:	f040 815a 	bne.w	8002352 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d005      	beq.n	80020b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d130      	bne.n	8002118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	2203      	movs	r2, #3
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ec:	2201      	movs	r2, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 0201 	and.w	r2, r3, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b03      	cmp	r3, #3
 8002122:	d017      	beq.n	8002154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d123      	bne.n	80021a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3208      	adds	r2, #8
 8002168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	69b9      	ldr	r1, [r7, #24]
 80021a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0203 	and.w	r2, r3, #3
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80b4 	beq.w	8002352 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b60      	ldr	r3, [pc, #384]	@ (8002370 <HAL_GPIO_Init+0x30c>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002370 <HAL_GPIO_Init+0x30c>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002370 <HAL_GPIO_Init+0x30c>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002206:	4a5b      	ldr	r2, [pc, #364]	@ (8002374 <HAL_GPIO_Init+0x310>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a52      	ldr	r2, [pc, #328]	@ (8002378 <HAL_GPIO_Init+0x314>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d02b      	beq.n	800228a <HAL_GPIO_Init+0x226>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a51      	ldr	r2, [pc, #324]	@ (800237c <HAL_GPIO_Init+0x318>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d025      	beq.n	8002286 <HAL_GPIO_Init+0x222>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a50      	ldr	r2, [pc, #320]	@ (8002380 <HAL_GPIO_Init+0x31c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x21e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4f      	ldr	r2, [pc, #316]	@ (8002384 <HAL_GPIO_Init+0x320>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d019      	beq.n	800227e <HAL_GPIO_Init+0x21a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4e      	ldr	r2, [pc, #312]	@ (8002388 <HAL_GPIO_Init+0x324>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0x216>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4d      	ldr	r2, [pc, #308]	@ (800238c <HAL_GPIO_Init+0x328>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00d      	beq.n	8002276 <HAL_GPIO_Init+0x212>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4c      	ldr	r2, [pc, #304]	@ (8002390 <HAL_GPIO_Init+0x32c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x20e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4b      	ldr	r2, [pc, #300]	@ (8002394 <HAL_GPIO_Init+0x330>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_GPIO_Init+0x20a>
 800226a:	2307      	movs	r3, #7
 800226c:	e00e      	b.n	800228c <HAL_GPIO_Init+0x228>
 800226e:	2308      	movs	r3, #8
 8002270:	e00c      	b.n	800228c <HAL_GPIO_Init+0x228>
 8002272:	2306      	movs	r3, #6
 8002274:	e00a      	b.n	800228c <HAL_GPIO_Init+0x228>
 8002276:	2305      	movs	r3, #5
 8002278:	e008      	b.n	800228c <HAL_GPIO_Init+0x228>
 800227a:	2304      	movs	r3, #4
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x228>
 800227e:	2303      	movs	r3, #3
 8002280:	e004      	b.n	800228c <HAL_GPIO_Init+0x228>
 8002282:	2302      	movs	r3, #2
 8002284:	e002      	b.n	800228c <HAL_GPIO_Init+0x228>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_GPIO_Init+0x228>
 800228a:	2300      	movs	r3, #0
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	f002 0203 	and.w	r2, r2, #3
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	4093      	lsls	r3, r2
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800229c:	4935      	ldr	r1, [pc, #212]	@ (8002374 <HAL_GPIO_Init+0x310>)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002398 <HAL_GPIO_Init+0x334>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ce:	4a32      	ldr	r2, [pc, #200]	@ (8002398 <HAL_GPIO_Init+0x334>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d4:	4b30      	ldr	r3, [pc, #192]	@ (8002398 <HAL_GPIO_Init+0x334>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f8:	4a27      	ldr	r2, [pc, #156]	@ (8002398 <HAL_GPIO_Init+0x334>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fe:	4b26      	ldr	r3, [pc, #152]	@ (8002398 <HAL_GPIO_Init+0x334>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002322:	4a1d      	ldr	r2, [pc, #116]	@ (8002398 <HAL_GPIO_Init+0x334>)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002328:	4b1b      	ldr	r3, [pc, #108]	@ (8002398 <HAL_GPIO_Init+0x334>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800234c:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <HAL_GPIO_Init+0x334>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3301      	adds	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	2b0f      	cmp	r3, #15
 800235c:	f67f ae90 	bls.w	8002080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3724      	adds	r7, #36	@ 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40013800 	.word	0x40013800
 8002378:	40020000 	.word	0x40020000
 800237c:	40020400 	.word	0x40020400
 8002380:	40020800 	.word	0x40020800
 8002384:	40020c00 	.word	0x40020c00
 8002388:	40021000 	.word	0x40021000
 800238c:	40021400 	.word	0x40021400
 8002390:	40021800 	.word	0x40021800
 8002394:	40021c00 	.word	0x40021c00
 8002398:	40013c00 	.word	0x40013c00

0800239c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	887b      	ldrh	r3, [r7, #2]
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e001      	b.n	80023be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023be:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
 80023d8:	4613      	mov	r3, r2
 80023da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e8:	e003      	b.n	80023f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	041a      	lsls	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	619a      	str	r2, [r3, #24]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e267      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d075      	beq.n	800250a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800241e:	4b88      	ldr	r3, [pc, #544]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b04      	cmp	r3, #4
 8002428:	d00c      	beq.n	8002444 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242a:	4b85      	ldr	r3, [pc, #532]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002432:	2b08      	cmp	r3, #8
 8002434:	d112      	bne.n	800245c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002436:	4b82      	ldr	r3, [pc, #520]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800243e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002442:	d10b      	bne.n	800245c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	4b7e      	ldr	r3, [pc, #504]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d05b      	beq.n	8002508 <HAL_RCC_OscConfig+0x108>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d157      	bne.n	8002508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e242      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002464:	d106      	bne.n	8002474 <HAL_RCC_OscConfig+0x74>
 8002466:	4b76      	ldr	r3, [pc, #472]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a75      	ldr	r2, [pc, #468]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e01d      	b.n	80024b0 <HAL_RCC_OscConfig+0xb0>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x98>
 800247e:	4b70      	ldr	r3, [pc, #448]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6f      	ldr	r2, [pc, #444]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b6d      	ldr	r3, [pc, #436]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6c      	ldr	r2, [pc, #432]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0xb0>
 8002498:	4b69      	ldr	r3, [pc, #420]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a68      	ldr	r2, [pc, #416]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800249e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b66      	ldr	r3, [pc, #408]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a65      	ldr	r2, [pc, #404]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 80024aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff f976 	bl	80017a8 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff f972 	bl	80017a8 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	@ 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e207      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0xc0>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff f962 	bl	80017a8 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff f95e 	bl	80017a8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	@ 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e1f3      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	4b51      	ldr	r3, [pc, #324]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0xe8>
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d063      	beq.n	80025de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002516:	4b4a      	ldr	r3, [pc, #296]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b47      	ldr	r3, [pc, #284]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800252a:	2b08      	cmp	r3, #8
 800252c:	d11c      	bne.n	8002568 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252e:	4b44      	ldr	r3, [pc, #272]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d116      	bne.n	8002568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	4b41      	ldr	r3, [pc, #260]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_RCC_OscConfig+0x152>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e1c7      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b3b      	ldr	r3, [pc, #236]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4937      	ldr	r1, [pc, #220]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	e03a      	b.n	80025de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002570:	4b34      	ldr	r3, [pc, #208]	@ (8002644 <HAL_RCC_OscConfig+0x244>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7ff f917 	bl	80017a8 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257e:	f7ff f913 	bl	80017a8 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1a8      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	4b2b      	ldr	r3, [pc, #172]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b28      	ldr	r3, [pc, #160]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4925      	ldr	r1, [pc, #148]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b2:	4b24      	ldr	r3, [pc, #144]	@ (8002644 <HAL_RCC_OscConfig+0x244>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7ff f8f6 	bl	80017a8 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c0:	f7ff f8f2 	bl	80017a8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e187      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d036      	beq.n	8002658 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <HAL_RCC_OscConfig+0x248>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7ff f8d6 	bl	80017a8 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7ff f8d2 	bl	80017a8 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e167      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <HAL_RCC_OscConfig+0x240>)
 8002614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x200>
 800261e:	e01b      	b.n	8002658 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002620:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <HAL_RCC_OscConfig+0x248>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002626:	f7ff f8bf 	bl	80017a8 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	e00e      	b.n	800264c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262e:	f7ff f8bb 	bl	80017a8 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d907      	bls.n	800264c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e150      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
 8002640:	40023800 	.word	0x40023800
 8002644:	42470000 	.word	0x42470000
 8002648:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b88      	ldr	r3, [pc, #544]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ea      	bne.n	800262e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8097 	beq.w	8002794 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b81      	ldr	r3, [pc, #516]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b7d      	ldr	r3, [pc, #500]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	4a7c      	ldr	r2, [pc, #496]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	@ 0x40
 8002686:	4b7a      	ldr	r3, [pc, #488]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b77      	ldr	r3, [pc, #476]	@ (8002874 <HAL_RCC_OscConfig+0x474>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a2:	4b74      	ldr	r3, [pc, #464]	@ (8002874 <HAL_RCC_OscConfig+0x474>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a73      	ldr	r2, [pc, #460]	@ (8002874 <HAL_RCC_OscConfig+0x474>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ae:	f7ff f87b 	bl	80017a8 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7ff f877 	bl	80017a8 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e10c      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002874 <HAL_RCC_OscConfig+0x474>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x2ea>
 80026dc:	4b64      	ldr	r3, [pc, #400]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e0:	4a63      	ldr	r2, [pc, #396]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e8:	e01c      	b.n	8002724 <HAL_RCC_OscConfig+0x324>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x30c>
 80026f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002702:	4a5b      	ldr	r2, [pc, #364]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6713      	str	r3, [r2, #112]	@ 0x70
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0x324>
 800270c:	4b58      	ldr	r3, [pc, #352]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002710:	4a57      	ldr	r2, [pc, #348]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	@ 0x70
 8002718:	4b55      	ldr	r3, [pc, #340]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271c:	4a54      	ldr	r2, [pc, #336]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800271e:	f023 0304 	bic.w	r3, r3, #4
 8002722:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7ff f83c 	bl	80017a8 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7ff f838 	bl	80017a8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0cb      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274a:	4b49      	ldr	r3, [pc, #292]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ee      	beq.n	8002734 <HAL_RCC_OscConfig+0x334>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002758:	f7ff f826 	bl	80017a8 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275e:	e00a      	b.n	8002776 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7ff f822 	bl	80017a8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0b5      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002776:	4b3e      	ldr	r3, [pc, #248]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ee      	bne.n	8002760 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002788:	4b39      	ldr	r3, [pc, #228]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	4a38      	ldr	r2, [pc, #224]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002792:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a1 	beq.w	80028e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800279e:	4b34      	ldr	r3, [pc, #208]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d05c      	beq.n	8002864 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d141      	bne.n	8002836 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b31      	ldr	r3, [pc, #196]	@ (8002878 <HAL_RCC_OscConfig+0x478>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fff6 	bl	80017a8 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe fff2 	bl	80017a8 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e087      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	019b      	lsls	r3, r3, #6
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	041b      	lsls	r3, r3, #16
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	491b      	ldr	r1, [pc, #108]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_RCC_OscConfig+0x478>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe ffcb 	bl	80017a8 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002816:	f7fe ffc7 	bl	80017a8 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e05c      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002828:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x416>
 8002834:	e054      	b.n	80028e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <HAL_RCC_OscConfig+0x478>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe ffb4 	bl	80017a8 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe ffb0 	bl	80017a8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e045      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_RCC_OscConfig+0x470>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x444>
 8002862:	e03d      	b.n	80028e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d107      	bne.n	800287c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e038      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
 8002870:	40023800 	.word	0x40023800
 8002874:	40007000 	.word	0x40007000
 8002878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800287c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ec <HAL_RCC_OscConfig+0x4ec>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d028      	beq.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d121      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d11a      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d111      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	3b01      	subs	r3, #1
 80028c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800

080028f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0cc      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002904:	4b68      	ldr	r3, [pc, #416]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d90c      	bls.n	800292c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b65      	ldr	r3, [pc, #404]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b63      	ldr	r3, [pc, #396]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0b8      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002944:	4b59      	ldr	r3, [pc, #356]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a58      	ldr	r2, [pc, #352]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800294e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800295c:	4b53      	ldr	r3, [pc, #332]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a52      	ldr	r2, [pc, #328]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b50      	ldr	r3, [pc, #320]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	494d      	ldr	r1, [pc, #308]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d044      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b47      	ldr	r3, [pc, #284]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d119      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	4b3f      	ldr	r3, [pc, #252]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	4b3b      	ldr	r3, [pc, #236]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e067      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ce:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f023 0203 	bic.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4934      	ldr	r1, [pc, #208]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e0:	f7fe fee2 	bl	80017a8 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e8:	f7fe fede 	bl	80017a8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e04f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	4b2b      	ldr	r3, [pc, #172]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 020c 	and.w	r2, r3, #12
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1eb      	bne.n	80029e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a10:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d20c      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b22      	ldr	r3, [pc, #136]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e032      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4916      	ldr	r1, [pc, #88]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a62:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	490e      	ldr	r1, [pc, #56]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a76:	f000 f821 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	490a      	ldr	r1, [pc, #40]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	5ccb      	ldrb	r3, [r1, r3]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a09      	ldr	r2, [pc, #36]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fce0 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	08008ba0 	.word	0x08008ba0
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004

08002abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac0:	b090      	sub	sp, #64	@ 0x40
 8002ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad4:	4b59      	ldr	r3, [pc, #356]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d00d      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x40>
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	f200 80a1 	bhi.w	8002c28 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aee:	e09b      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b53      	ldr	r3, [pc, #332]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002af2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002af4:	e09b      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af6:	4b53      	ldr	r3, [pc, #332]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002af8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002afa:	e098      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002afc:	4b4f      	ldr	r3, [pc, #316]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b06:	4b4d      	ldr	r3, [pc, #308]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d028      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b12:	4b4a      	ldr	r3, [pc, #296]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	2200      	movs	r2, #0
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b24:	2100      	movs	r1, #0
 8002b26:	4b47      	ldr	r3, [pc, #284]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b28:	fb03 f201 	mul.w	r2, r3, r1
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	fb00 f303 	mul.w	r3, r0, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	4a43      	ldr	r2, [pc, #268]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b36:	fba0 1202 	umull	r1, r2, r0, r2
 8002b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b3c:	460a      	mov	r2, r1
 8002b3e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b42:	4413      	add	r3, r2
 8002b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b48:	2200      	movs	r2, #0
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	61fa      	str	r2, [r7, #28]
 8002b4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b56:	f7fd fb93 	bl	8000280 <__aeabi_uldivmod>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4613      	mov	r3, r2
 8002b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b62:	e053      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b64:	4b35      	ldr	r3, [pc, #212]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	099b      	lsrs	r3, r3, #6
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	617a      	str	r2, [r7, #20]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b76:	f04f 0b00 	mov.w	fp, #0
 8002b7a:	4652      	mov	r2, sl
 8002b7c:	465b      	mov	r3, fp
 8002b7e:	f04f 0000 	mov.w	r0, #0
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	0159      	lsls	r1, r3, #5
 8002b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b8c:	0150      	lsls	r0, r2, #5
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	ebb2 080a 	subs.w	r8, r2, sl
 8002b96:	eb63 090b 	sbc.w	r9, r3, fp
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ba6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002baa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bae:	ebb2 0408 	subs.w	r4, r2, r8
 8002bb2:	eb63 0509 	sbc.w	r5, r3, r9
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	00eb      	lsls	r3, r5, #3
 8002bc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bc4:	00e2      	lsls	r2, r4, #3
 8002bc6:	4614      	mov	r4, r2
 8002bc8:	461d      	mov	r5, r3
 8002bca:	eb14 030a 	adds.w	r3, r4, sl
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	eb45 030b 	adc.w	r3, r5, fp
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002be2:	4629      	mov	r1, r5
 8002be4:	028b      	lsls	r3, r1, #10
 8002be6:	4621      	mov	r1, r4
 8002be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bec:	4621      	mov	r1, r4
 8002bee:	028a      	lsls	r2, r1, #10
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	60fa      	str	r2, [r7, #12]
 8002bfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c00:	f7fd fb3e 	bl	8000280 <__aeabi_uldivmod>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	3301      	adds	r3, #1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c26:	e002      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c28:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3740      	adds	r7, #64	@ 0x40
 8002c34:	46bd      	mov	sp, r7
 8002c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	00f42400 	.word	0x00f42400
 8002c44:	00b71b00 	.word	0x00b71b00

08002c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000000 	.word	0x20000000

08002c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c64:	f7ff fff0 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0a9b      	lsrs	r3, r3, #10
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4903      	ldr	r1, [pc, #12]	@ (8002c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	08008bb0 	.word	0x08008bb0

08002c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c8c:	f7ff ffdc 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	0b5b      	lsrs	r3, r3, #13
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	4903      	ldr	r1, [pc, #12]	@ (8002cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	08008bb0 	.word	0x08008bb0

08002cb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	220f      	movs	r2, #15
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cc0:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <HAL_RCC_GetClockConfig+0x5c>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0203 	and.w	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d0c <HAL_RCC_GetClockConfig+0x5c>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <HAL_RCC_GetClockConfig+0x5c>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ce4:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	08db      	lsrs	r3, r3, #3
 8002cea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <HAL_RCC_GetClockConfig+0x60>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0207 	and.w	r2, r3, #7
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	601a      	str	r2, [r3, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40023c00 	.word	0x40023c00

08002d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e041      	b.n	8002daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f839 	bl	8002db2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	4619      	mov	r1, r3
 8002d52:	4610      	mov	r0, r2
 8002d54:	f000 fd76 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d001      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e04e      	b.n	8002e7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a23      	ldr	r2, [pc, #140]	@ (8002e8c <HAL_TIM_Base_Start_IT+0xc4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d022      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x80>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e0a:	d01d      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x80>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1f      	ldr	r2, [pc, #124]	@ (8002e90 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d018      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x80>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002e94 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d013      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x80>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1c      	ldr	r2, [pc, #112]	@ (8002e98 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00e      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x80>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002e9c <HAL_TIM_Base_Start_IT+0xd4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d009      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x80>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a19      	ldr	r2, [pc, #100]	@ (8002ea0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x80>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a18      	ldr	r2, [pc, #96]	@ (8002ea4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d111      	bne.n	8002e6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d010      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0201 	orr.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6a:	e007      	b.n	8002e7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800
 8002e98:	40000c00 	.word	0x40000c00
 8002e9c:	40010400 	.word	0x40010400
 8002ea0:	40014000 	.word	0x40014000
 8002ea4:	40001800 	.word	0x40001800

08002ea8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e041      	b.n	8002f3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe f9ee 	bl	80012b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f000 fcac 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e022      	b.n	8002fba <HAL_TIM_PWM_Start_DMA+0x72>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d109      	bne.n	8002f8e <HAL_TIM_PWM_Start_DMA+0x46>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e015      	b.n	8002fba <HAL_TIM_PWM_Start_DMA+0x72>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d109      	bne.n	8002fa8 <HAL_TIM_PWM_Start_DMA+0x60>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e008      	b.n	8002fba <HAL_TIM_PWM_Start_DMA+0x72>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e171      	b.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_TIM_PWM_Start_DMA+0x94>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e022      	b.n	8003022 <HAL_TIM_PWM_Start_DMA+0xda>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d109      	bne.n	8002ff6 <HAL_TIM_PWM_Start_DMA+0xae>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	e015      	b.n	8003022 <HAL_TIM_PWM_Start_DMA+0xda>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d109      	bne.n	8003010 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e008      	b.n	8003022 <HAL_TIM_PWM_Start_DMA+0xda>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d024      	beq.n	8003070 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_TIM_PWM_Start_DMA+0xea>
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e137      	b.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d104      	bne.n	8003046 <HAL_TIM_PWM_Start_DMA+0xfe>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003044:	e016      	b.n	8003074 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d104      	bne.n	8003056 <HAL_TIM_PWM_Start_DMA+0x10e>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003054:	e00e      	b.n	8003074 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d104      	bne.n	8003066 <HAL_TIM_PWM_Start_DMA+0x11e>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003064:	e006      	b.n	8003074 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2202      	movs	r2, #2
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800306e:	e001      	b.n	8003074 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e118      	b.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b0c      	cmp	r3, #12
 8003078:	f200 80ae 	bhi.w	80031d8 <HAL_TIM_PWM_Start_DMA+0x290>
 800307c:	a201      	add	r2, pc, #4	@ (adr r2, 8003084 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	080030b9 	.word	0x080030b9
 8003088:	080031d9 	.word	0x080031d9
 800308c:	080031d9 	.word	0x080031d9
 8003090:	080031d9 	.word	0x080031d9
 8003094:	08003101 	.word	0x08003101
 8003098:	080031d9 	.word	0x080031d9
 800309c:	080031d9 	.word	0x080031d9
 80030a0:	080031d9 	.word	0x080031d9
 80030a4:	08003149 	.word	0x08003149
 80030a8:	080031d9 	.word	0x080031d9
 80030ac:	080031d9 	.word	0x080031d9
 80030b0:	080031d9 	.word	0x080031d9
 80030b4:	08003191 	.word	0x08003191
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	4a7c      	ldr	r2, [pc, #496]	@ (80032b0 <HAL_TIM_PWM_Start_DMA+0x368>)
 80030be:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	4a7b      	ldr	r2, [pc, #492]	@ (80032b4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80030c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	4a7a      	ldr	r2, [pc, #488]	@ (80032b8 <HAL_TIM_PWM_Start_DMA+0x370>)
 80030ce:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3334      	adds	r3, #52	@ 0x34
 80030dc:	461a      	mov	r2, r3
 80030de:	887b      	ldrh	r3, [r7, #2]
 80030e0:	f7fe fcfe 	bl	8001ae0 <HAL_DMA_Start_IT>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0db      	b.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030fc:	60da      	str	r2, [r3, #12]
      break;
 80030fe:	e06e      	b.n	80031de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	4a6a      	ldr	r2, [pc, #424]	@ (80032b0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003106:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310c:	4a69      	ldr	r2, [pc, #420]	@ (80032b4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003114:	4a68      	ldr	r2, [pc, #416]	@ (80032b8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003116:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3338      	adds	r3, #56	@ 0x38
 8003124:	461a      	mov	r2, r3
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	f7fe fcda 	bl	8001ae0 <HAL_DMA_Start_IT>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e0b7      	b.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003144:	60da      	str	r2, [r3, #12]
      break;
 8003146:	e04a      	b.n	80031de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314c:	4a58      	ldr	r2, [pc, #352]	@ (80032b0 <HAL_TIM_PWM_Start_DMA+0x368>)
 800314e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	4a57      	ldr	r2, [pc, #348]	@ (80032b4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003156:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	4a56      	ldr	r2, [pc, #344]	@ (80032b8 <HAL_TIM_PWM_Start_DMA+0x370>)
 800315e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	333c      	adds	r3, #60	@ 0x3c
 800316c:	461a      	mov	r2, r3
 800316e:	887b      	ldrh	r3, [r7, #2]
 8003170:	f7fe fcb6 	bl	8001ae0 <HAL_DMA_Start_IT>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e093      	b.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800318c:	60da      	str	r2, [r3, #12]
      break;
 800318e:	e026      	b.n	80031de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	4a46      	ldr	r2, [pc, #280]	@ (80032b0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003196:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	4a45      	ldr	r2, [pc, #276]	@ (80032b4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	4a44      	ldr	r2, [pc, #272]	@ (80032b8 <HAL_TIM_PWM_Start_DMA+0x370>)
 80031a6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3340      	adds	r3, #64	@ 0x40
 80031b4:	461a      	mov	r2, r3
 80031b6:	887b      	ldrh	r3, [r7, #2]
 80031b8:	f7fe fc92 	bl	8001ae0 <HAL_DMA_Start_IT>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06f      	b.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031d4:	60da      	str	r2, [r3, #12]
      break;
 80031d6:	e002      	b.n	80031de <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	75fb      	strb	r3, [r7, #23]
      break;
 80031dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d15f      	bne.n	80032a4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2201      	movs	r2, #1
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fd7f 	bl	8003cf0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a31      	ldr	r2, [pc, #196]	@ (80032bc <HAL_TIM_PWM_Start_DMA+0x374>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <HAL_TIM_PWM_Start_DMA+0x2be>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2f      	ldr	r2, [pc, #188]	@ (80032c0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d101      	bne.n	800320a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_TIM_PWM_Start_DMA+0x2c4>
 800320a:	2300      	movs	r3, #0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800321e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a25      	ldr	r2, [pc, #148]	@ (80032bc <HAL_TIM_PWM_Start_DMA+0x374>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d022      	beq.n	8003270 <HAL_TIM_PWM_Start_DMA+0x328>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003232:	d01d      	beq.n	8003270 <HAL_TIM_PWM_Start_DMA+0x328>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a22      	ldr	r2, [pc, #136]	@ (80032c4 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d018      	beq.n	8003270 <HAL_TIM_PWM_Start_DMA+0x328>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a21      	ldr	r2, [pc, #132]	@ (80032c8 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d013      	beq.n	8003270 <HAL_TIM_PWM_Start_DMA+0x328>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1f      	ldr	r2, [pc, #124]	@ (80032cc <HAL_TIM_PWM_Start_DMA+0x384>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00e      	beq.n	8003270 <HAL_TIM_PWM_Start_DMA+0x328>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1a      	ldr	r2, [pc, #104]	@ (80032c0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d009      	beq.n	8003270 <HAL_TIM_PWM_Start_DMA+0x328>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1b      	ldr	r2, [pc, #108]	@ (80032d0 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_TIM_PWM_Start_DMA+0x328>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1a      	ldr	r2, [pc, #104]	@ (80032d4 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d111      	bne.n	8003294 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b06      	cmp	r3, #6
 8003280:	d010      	beq.n	80032a4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003292:	e007      	b.n	80032a4 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	08003733 	.word	0x08003733
 80032b4:	080037db 	.word	0x080037db
 80032b8:	080036a1 	.word	0x080036a1
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40010400 	.word	0x40010400
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800
 80032cc:	40000c00 	.word	0x40000c00
 80032d0:	40014000 	.word	0x40014000
 80032d4:	40001800 	.word	0x40001800

080032d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d020      	beq.n	800333c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01b      	beq.n	800333c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0202 	mvn.w	r2, #2
 800330c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f994 	bl	8003650 <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f986 	bl	800363c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7fd fced 	bl	8000d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d020      	beq.n	8003388 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01b      	beq.n	8003388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0204 	mvn.w	r2, #4
 8003358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f96e 	bl	8003650 <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f960 	bl	800363c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fd fcc7 	bl	8000d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d020      	beq.n	80033d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0208 	mvn.w	r2, #8
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2204      	movs	r2, #4
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f948 	bl	8003650 <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f93a 	bl	800363c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fd fca1 	bl	8000d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d020      	beq.n	8003420 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01b      	beq.n	8003420 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0210 	mvn.w	r2, #16
 80033f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2208      	movs	r2, #8
 80033f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f922 	bl	8003650 <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f914 	bl	800363c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fd fc7b 	bl	8000d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0201 	mvn.w	r2, #1
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd fef2 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fcf0 	bl	8003e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8f6 	bl	8003678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00c      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0220 	mvn.w	r2, #32
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fcc2 	bl	8003e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e0ae      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	f200 809f 	bhi.w	8003624 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034e6:	a201      	add	r2, pc, #4	@ (adr r2, 80034ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ec:	08003521 	.word	0x08003521
 80034f0:	08003625 	.word	0x08003625
 80034f4:	08003625 	.word	0x08003625
 80034f8:	08003625 	.word	0x08003625
 80034fc:	08003561 	.word	0x08003561
 8003500:	08003625 	.word	0x08003625
 8003504:	08003625 	.word	0x08003625
 8003508:	08003625 	.word	0x08003625
 800350c:	080035a3 	.word	0x080035a3
 8003510:	08003625 	.word	0x08003625
 8003514:	08003625 	.word	0x08003625
 8003518:	08003625 	.word	0x08003625
 800351c:	080035e3 	.word	0x080035e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fa32 	bl	8003990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0208 	orr.w	r2, r2, #8
 800353a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0204 	bic.w	r2, r2, #4
 800354a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6999      	ldr	r1, [r3, #24]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	619a      	str	r2, [r3, #24]
      break;
 800355e:	e064      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fa82 	bl	8003a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800357a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800358a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6999      	ldr	r1, [r3, #24]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	021a      	lsls	r2, r3, #8
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	619a      	str	r2, [r3, #24]
      break;
 80035a0:	e043      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fad7 	bl	8003b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0208 	orr.w	r2, r2, #8
 80035bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69da      	ldr	r2, [r3, #28]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0204 	bic.w	r2, r2, #4
 80035cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69d9      	ldr	r1, [r3, #28]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	61da      	str	r2, [r3, #28]
      break;
 80035e0:	e023      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fb2b 	bl	8003c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800360c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69d9      	ldr	r1, [r3, #28]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	021a      	lsls	r2, r3, #8
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	61da      	str	r2, [r3, #28]
      break;
 8003622:	e002      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	75fb      	strb	r3, [r7, #23]
      break;
 8003628:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d107      	bne.n	80036c8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036c6:	e02a      	b.n	800371e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d107      	bne.n	80036e2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2202      	movs	r2, #2
 80036d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036e0:	e01d      	b.n	800371e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d107      	bne.n	80036fc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2204      	movs	r2, #4
 80036f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036fa:	e010      	b.n	800371e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	d107      	bne.n	8003716 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2208      	movs	r2, #8
 800370a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003714:	e003      	b.n	800371e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7ff ffb4 	bl	800368c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	771a      	strb	r2, [r3, #28]
}
 800372a:	bf00      	nop
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d10b      	bne.n	8003762 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d136      	bne.n	80037c6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003760:	e031      	b.n	80037c6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d10b      	bne.n	8003784 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2202      	movs	r2, #2
 8003770:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d125      	bne.n	80037c6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003782:	e020      	b.n	80037c6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d10b      	bne.n	80037a6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2204      	movs	r2, #4
 8003792:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d114      	bne.n	80037c6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037a4:	e00f      	b.n	80037c6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d10a      	bne.n	80037c6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2208      	movs	r2, #8
 80037b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d103      	bne.n	80037c6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7fd faa2 	bl	8000d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	771a      	strb	r2, [r3, #28]
}
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d103      	bne.n	80037fa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	771a      	strb	r2, [r3, #28]
 80037f8:	e019      	b.n	800382e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	d103      	bne.n	800380c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2202      	movs	r2, #2
 8003808:	771a      	strb	r2, [r3, #28]
 800380a:	e010      	b.n	800382e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	429a      	cmp	r2, r3
 8003814:	d103      	bne.n	800381e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2204      	movs	r2, #4
 800381a:	771a      	strb	r2, [r3, #28]
 800381c:	e007      	b.n	800382e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d102      	bne.n	800382e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2208      	movs	r2, #8
 800382c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7ff ff18 	bl	8003664 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	771a      	strb	r2, [r3, #28]
}
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a43      	ldr	r2, [pc, #268]	@ (8003964 <TIM_Base_SetConfig+0x120>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003862:	d00f      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a40      	ldr	r2, [pc, #256]	@ (8003968 <TIM_Base_SetConfig+0x124>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3f      	ldr	r2, [pc, #252]	@ (800396c <TIM_Base_SetConfig+0x128>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3e      	ldr	r2, [pc, #248]	@ (8003970 <TIM_Base_SetConfig+0x12c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3d      	ldr	r2, [pc, #244]	@ (8003974 <TIM_Base_SetConfig+0x130>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a32      	ldr	r2, [pc, #200]	@ (8003964 <TIM_Base_SetConfig+0x120>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a4:	d027      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003968 <TIM_Base_SetConfig+0x124>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d023      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2e      	ldr	r2, [pc, #184]	@ (800396c <TIM_Base_SetConfig+0x128>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003970 <TIM_Base_SetConfig+0x12c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003974 <TIM_Base_SetConfig+0x130>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d017      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003978 <TIM_Base_SetConfig+0x134>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a2a      	ldr	r2, [pc, #168]	@ (800397c <TIM_Base_SetConfig+0x138>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a29      	ldr	r2, [pc, #164]	@ (8003980 <TIM_Base_SetConfig+0x13c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a28      	ldr	r2, [pc, #160]	@ (8003984 <TIM_Base_SetConfig+0x140>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a27      	ldr	r2, [pc, #156]	@ (8003988 <TIM_Base_SetConfig+0x144>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a26      	ldr	r2, [pc, #152]	@ (800398c <TIM_Base_SetConfig+0x148>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a0e      	ldr	r2, [pc, #56]	@ (8003964 <TIM_Base_SetConfig+0x120>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_Base_SetConfig+0xf2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a10      	ldr	r2, [pc, #64]	@ (8003974 <TIM_Base_SetConfig+0x130>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d103      	bne.n	800393e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40010000 	.word	0x40010000
 8003968:	40000400 	.word	0x40000400
 800396c:	40000800 	.word	0x40000800
 8003970:	40000c00 	.word	0x40000c00
 8003974:	40010400 	.word	0x40010400
 8003978:	40014000 	.word	0x40014000
 800397c:	40014400 	.word	0x40014400
 8003980:	40014800 	.word	0x40014800
 8003984:	40001800 	.word	0x40001800
 8003988:	40001c00 	.word	0x40001c00
 800398c:	40002000 	.word	0x40002000

08003990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f023 0201 	bic.w	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0303 	bic.w	r3, r3, #3
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f023 0302 	bic.w	r3, r3, #2
 80039d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a20      	ldr	r2, [pc, #128]	@ (8003a68 <TIM_OC1_SetConfig+0xd8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_OC1_SetConfig+0x64>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a1f      	ldr	r2, [pc, #124]	@ (8003a6c <TIM_OC1_SetConfig+0xdc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d10c      	bne.n	8003a0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f023 0308 	bic.w	r3, r3, #8
 80039fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f023 0304 	bic.w	r3, r3, #4
 8003a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a15      	ldr	r2, [pc, #84]	@ (8003a68 <TIM_OC1_SetConfig+0xd8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d003      	beq.n	8003a1e <TIM_OC1_SetConfig+0x8e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a14      	ldr	r2, [pc, #80]	@ (8003a6c <TIM_OC1_SetConfig+0xdc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d111      	bne.n	8003a42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	621a      	str	r2, [r3, #32]
}
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	40010400 	.word	0x40010400

08003a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f023 0210 	bic.w	r2, r3, #16
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f023 0320 	bic.w	r3, r3, #32
 8003aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a22      	ldr	r2, [pc, #136]	@ (8003b54 <TIM_OC2_SetConfig+0xe4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <TIM_OC2_SetConfig+0x68>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a21      	ldr	r2, [pc, #132]	@ (8003b58 <TIM_OC2_SetConfig+0xe8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d10d      	bne.n	8003af4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003af2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a17      	ldr	r2, [pc, #92]	@ (8003b54 <TIM_OC2_SetConfig+0xe4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_OC2_SetConfig+0x94>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a16      	ldr	r2, [pc, #88]	@ (8003b58 <TIM_OC2_SetConfig+0xe8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d113      	bne.n	8003b2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	621a      	str	r2, [r3, #32]
}
 8003b46:	bf00      	nop
 8003b48:	371c      	adds	r7, #28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40010000 	.word	0x40010000
 8003b58:	40010400 	.word	0x40010400

08003b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0303 	bic.w	r3, r3, #3
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a21      	ldr	r2, [pc, #132]	@ (8003c3c <TIM_OC3_SetConfig+0xe0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_OC3_SetConfig+0x66>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a20      	ldr	r2, [pc, #128]	@ (8003c40 <TIM_OC3_SetConfig+0xe4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d10d      	bne.n	8003bde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a16      	ldr	r2, [pc, #88]	@ (8003c3c <TIM_OC3_SetConfig+0xe0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d003      	beq.n	8003bee <TIM_OC3_SetConfig+0x92>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a15      	ldr	r2, [pc, #84]	@ (8003c40 <TIM_OC3_SetConfig+0xe4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d113      	bne.n	8003c16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	621a      	str	r2, [r3, #32]
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40010000 	.word	0x40010000
 8003c40:	40010400 	.word	0x40010400

08003c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	031b      	lsls	r3, r3, #12
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a12      	ldr	r2, [pc, #72]	@ (8003ce8 <TIM_OC4_SetConfig+0xa4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_OC4_SetConfig+0x68>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a11      	ldr	r2, [pc, #68]	@ (8003cec <TIM_OC4_SetConfig+0xa8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d109      	bne.n	8003cc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	019b      	lsls	r3, r3, #6
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	621a      	str	r2, [r3, #32]
}
 8003cda:	bf00      	nop
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40010000 	.word	0x40010000
 8003cec:	40010400 	.word	0x40010400

08003cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2201      	movs	r2, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1a      	ldr	r2, [r3, #32]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	401a      	ands	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e05a      	b.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a21      	ldr	r2, [pc, #132]	@ (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d022      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da0:	d01d      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d018      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1a      	ldr	r2, [pc, #104]	@ (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a18      	ldr	r2, [pc, #96]	@ (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a17      	ldr	r2, [pc, #92]	@ (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a15      	ldr	r2, [pc, #84]	@ (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d10c      	bne.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800
 8003e24:	40000c00 	.word	0x40000c00
 8003e28:	40010400 	.word	0x40010400
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40001800 	.word	0x40001800

08003e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e042      	b.n	8003ef4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fd faa2 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2224      	movs	r2, #36	@ 0x24
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f973 	bl	800418c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	@ 0x28
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d175      	bne.n	8004008 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_UART_Transmit+0x2c>
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e06e      	b.n	800400a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2221      	movs	r2, #33	@ 0x21
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f3a:	f7fd fc35 	bl	80017a8 <HAL_GetTick>
 8003f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	88fa      	ldrh	r2, [r7, #6]
 8003f44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	88fa      	ldrh	r2, [r7, #6]
 8003f4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f54:	d108      	bne.n	8003f68 <HAL_UART_Transmit+0x6c>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	e003      	b.n	8003f70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f70:	e02e      	b.n	8003fd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2180      	movs	r1, #128	@ 0x80
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f848 	bl	8004012 <UART_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e03a      	b.n	800400a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	3302      	adds	r3, #2
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	e007      	b.n	8003fc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	781a      	ldrb	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1cb      	bne.n	8003f72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2140      	movs	r1, #64	@ 0x40
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f814 	bl	8004012 <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e006      	b.n	800400a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004022:	e03b      	b.n	800409c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d037      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402c:	f7fd fbbc 	bl	80017a8 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	6a3a      	ldr	r2, [r7, #32]
 8004038:	429a      	cmp	r2, r3
 800403a:	d302      	bcc.n	8004042 <UART_WaitOnFlagUntilTimeout+0x30>
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e03a      	b.n	80040bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d023      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b80      	cmp	r3, #128	@ 0x80
 8004058:	d020      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0x8a>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b40      	cmp	r3, #64	@ 0x40
 800405e:	d01d      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b08      	cmp	r3, #8
 800406c:	d116      	bne.n	800409c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f81d 	bl	80040c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2208      	movs	r2, #8
 800408e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e00f      	b.n	80040bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d0b4      	beq.n	8004024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b095      	sub	sp, #84	@ 0x54
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	330c      	adds	r3, #12
 80040d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80040ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e5      	bne.n	80040cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3314      	adds	r3, #20
 8004106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3314      	adds	r3, #20
 800411e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004120:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004122:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e5      	bne.n	8004100 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	2b01      	cmp	r3, #1
 800413a:	d119      	bne.n	8004170 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	60bb      	str	r3, [r7, #8]
   return(result);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f023 0310 	bic.w	r3, r3, #16
 8004152:	647b      	str	r3, [r7, #68]	@ 0x44
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800415c:	61ba      	str	r2, [r7, #24]
 800415e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6979      	ldr	r1, [r7, #20]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	613b      	str	r3, [r7, #16]
   return(result);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e5      	bne.n	800413c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800417e:	bf00      	nop
 8004180:	3754      	adds	r7, #84	@ 0x54
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800418c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004190:	b0c0      	sub	sp, #256	@ 0x100
 8004192:	af00      	add	r7, sp, #0
 8004194:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a8:	68d9      	ldr	r1, [r3, #12]
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	ea40 0301 	orr.w	r3, r0, r1
 80041b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041e4:	f021 010c 	bic.w	r1, r1, #12
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041f2:	430b      	orrs	r3, r1
 80041f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004206:	6999      	ldr	r1, [r3, #24]
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	ea40 0301 	orr.w	r3, r0, r1
 8004212:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b8f      	ldr	r3, [pc, #572]	@ (8004458 <UART_SetConfig+0x2cc>)
 800421c:	429a      	cmp	r2, r3
 800421e:	d005      	beq.n	800422c <UART_SetConfig+0xa0>
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b8d      	ldr	r3, [pc, #564]	@ (800445c <UART_SetConfig+0x2d0>)
 8004228:	429a      	cmp	r2, r3
 800422a:	d104      	bne.n	8004236 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800422c:	f7fe fd2c 	bl	8002c88 <HAL_RCC_GetPCLK2Freq>
 8004230:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004234:	e003      	b.n	800423e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004236:	f7fe fd13 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 800423a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004248:	f040 810c 	bne.w	8004464 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800424c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004250:	2200      	movs	r2, #0
 8004252:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004256:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800425a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800425e:	4622      	mov	r2, r4
 8004260:	462b      	mov	r3, r5
 8004262:	1891      	adds	r1, r2, r2
 8004264:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004266:	415b      	adcs	r3, r3
 8004268:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800426a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800426e:	4621      	mov	r1, r4
 8004270:	eb12 0801 	adds.w	r8, r2, r1
 8004274:	4629      	mov	r1, r5
 8004276:	eb43 0901 	adc.w	r9, r3, r1
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800428a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428e:	4690      	mov	r8, r2
 8004290:	4699      	mov	r9, r3
 8004292:	4623      	mov	r3, r4
 8004294:	eb18 0303 	adds.w	r3, r8, r3
 8004298:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800429c:	462b      	mov	r3, r5
 800429e:	eb49 0303 	adc.w	r3, r9, r3
 80042a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042ba:	460b      	mov	r3, r1
 80042bc:	18db      	adds	r3, r3, r3
 80042be:	653b      	str	r3, [r7, #80]	@ 0x50
 80042c0:	4613      	mov	r3, r2
 80042c2:	eb42 0303 	adc.w	r3, r2, r3
 80042c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80042c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042d0:	f7fb ffd6 	bl	8000280 <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4b61      	ldr	r3, [pc, #388]	@ (8004460 <UART_SetConfig+0x2d4>)
 80042da:	fba3 2302 	umull	r2, r3, r3, r2
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	011c      	lsls	r4, r3, #4
 80042e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	1891      	adds	r1, r2, r2
 80042fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042fc:	415b      	adcs	r3, r3
 80042fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004300:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004304:	4641      	mov	r1, r8
 8004306:	eb12 0a01 	adds.w	sl, r2, r1
 800430a:	4649      	mov	r1, r9
 800430c:	eb43 0b01 	adc.w	fp, r3, r1
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800431c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004320:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004324:	4692      	mov	sl, r2
 8004326:	469b      	mov	fp, r3
 8004328:	4643      	mov	r3, r8
 800432a:	eb1a 0303 	adds.w	r3, sl, r3
 800432e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004332:	464b      	mov	r3, r9
 8004334:	eb4b 0303 	adc.w	r3, fp, r3
 8004338:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004348:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800434c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004350:	460b      	mov	r3, r1
 8004352:	18db      	adds	r3, r3, r3
 8004354:	643b      	str	r3, [r7, #64]	@ 0x40
 8004356:	4613      	mov	r3, r2
 8004358:	eb42 0303 	adc.w	r3, r2, r3
 800435c:	647b      	str	r3, [r7, #68]	@ 0x44
 800435e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004362:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004366:	f7fb ff8b 	bl	8000280 <__aeabi_uldivmod>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4611      	mov	r1, r2
 8004370:	4b3b      	ldr	r3, [pc, #236]	@ (8004460 <UART_SetConfig+0x2d4>)
 8004372:	fba3 2301 	umull	r2, r3, r3, r1
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2264      	movs	r2, #100	@ 0x64
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	1acb      	subs	r3, r1, r3
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004386:	4b36      	ldr	r3, [pc, #216]	@ (8004460 <UART_SetConfig+0x2d4>)
 8004388:	fba3 2302 	umull	r2, r3, r3, r2
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004394:	441c      	add	r4, r3
 8004396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	1891      	adds	r1, r2, r2
 80043ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043b0:	415b      	adcs	r3, r3
 80043b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043b8:	4641      	mov	r1, r8
 80043ba:	1851      	adds	r1, r2, r1
 80043bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80043be:	4649      	mov	r1, r9
 80043c0:	414b      	adcs	r3, r1
 80043c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043d0:	4659      	mov	r1, fp
 80043d2:	00cb      	lsls	r3, r1, #3
 80043d4:	4651      	mov	r1, sl
 80043d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043da:	4651      	mov	r1, sl
 80043dc:	00ca      	lsls	r2, r1, #3
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	4642      	mov	r2, r8
 80043e6:	189b      	adds	r3, r3, r2
 80043e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043ec:	464b      	mov	r3, r9
 80043ee:	460a      	mov	r2, r1
 80043f0:	eb42 0303 	adc.w	r3, r2, r3
 80043f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004404:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004408:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800440c:	460b      	mov	r3, r1
 800440e:	18db      	adds	r3, r3, r3
 8004410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004412:	4613      	mov	r3, r2
 8004414:	eb42 0303 	adc.w	r3, r2, r3
 8004418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800441a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800441e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004422:	f7fb ff2d 	bl	8000280 <__aeabi_uldivmod>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <UART_SetConfig+0x2d4>)
 800442c:	fba3 1302 	umull	r1, r3, r3, r2
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	2164      	movs	r1, #100	@ 0x64
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	3332      	adds	r3, #50	@ 0x32
 800443e:	4a08      	ldr	r2, [pc, #32]	@ (8004460 <UART_SetConfig+0x2d4>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	f003 0207 	and.w	r2, r3, #7
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4422      	add	r2, r4
 8004452:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004454:	e106      	b.n	8004664 <UART_SetConfig+0x4d8>
 8004456:	bf00      	nop
 8004458:	40011000 	.word	0x40011000
 800445c:	40011400 	.word	0x40011400
 8004460:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004468:	2200      	movs	r2, #0
 800446a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800446e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004472:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004476:	4642      	mov	r2, r8
 8004478:	464b      	mov	r3, r9
 800447a:	1891      	adds	r1, r2, r2
 800447c:	6239      	str	r1, [r7, #32]
 800447e:	415b      	adcs	r3, r3
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24
 8004482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004486:	4641      	mov	r1, r8
 8004488:	1854      	adds	r4, r2, r1
 800448a:	4649      	mov	r1, r9
 800448c:	eb43 0501 	adc.w	r5, r3, r1
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	00eb      	lsls	r3, r5, #3
 800449a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800449e:	00e2      	lsls	r2, r4, #3
 80044a0:	4614      	mov	r4, r2
 80044a2:	461d      	mov	r5, r3
 80044a4:	4643      	mov	r3, r8
 80044a6:	18e3      	adds	r3, r4, r3
 80044a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044ac:	464b      	mov	r3, r9
 80044ae:	eb45 0303 	adc.w	r3, r5, r3
 80044b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044d2:	4629      	mov	r1, r5
 80044d4:	008b      	lsls	r3, r1, #2
 80044d6:	4621      	mov	r1, r4
 80044d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044dc:	4621      	mov	r1, r4
 80044de:	008a      	lsls	r2, r1, #2
 80044e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044e4:	f7fb fecc 	bl	8000280 <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4b60      	ldr	r3, [pc, #384]	@ (8004670 <UART_SetConfig+0x4e4>)
 80044ee:	fba3 2302 	umull	r2, r3, r3, r2
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	011c      	lsls	r4, r3, #4
 80044f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004500:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004504:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004508:	4642      	mov	r2, r8
 800450a:	464b      	mov	r3, r9
 800450c:	1891      	adds	r1, r2, r2
 800450e:	61b9      	str	r1, [r7, #24]
 8004510:	415b      	adcs	r3, r3
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004518:	4641      	mov	r1, r8
 800451a:	1851      	adds	r1, r2, r1
 800451c:	6139      	str	r1, [r7, #16]
 800451e:	4649      	mov	r1, r9
 8004520:	414b      	adcs	r3, r1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004530:	4659      	mov	r1, fp
 8004532:	00cb      	lsls	r3, r1, #3
 8004534:	4651      	mov	r1, sl
 8004536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453a:	4651      	mov	r1, sl
 800453c:	00ca      	lsls	r2, r1, #3
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	4603      	mov	r3, r0
 8004544:	4642      	mov	r2, r8
 8004546:	189b      	adds	r3, r3, r2
 8004548:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800454c:	464b      	mov	r3, r9
 800454e:	460a      	mov	r2, r1
 8004550:	eb42 0303 	adc.w	r3, r2, r3
 8004554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004562:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004570:	4649      	mov	r1, r9
 8004572:	008b      	lsls	r3, r1, #2
 8004574:	4641      	mov	r1, r8
 8004576:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800457a:	4641      	mov	r1, r8
 800457c:	008a      	lsls	r2, r1, #2
 800457e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004582:	f7fb fe7d 	bl	8000280 <__aeabi_uldivmod>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4611      	mov	r1, r2
 800458c:	4b38      	ldr	r3, [pc, #224]	@ (8004670 <UART_SetConfig+0x4e4>)
 800458e:	fba3 2301 	umull	r2, r3, r3, r1
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	2264      	movs	r2, #100	@ 0x64
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	1acb      	subs	r3, r1, r3
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	3332      	adds	r3, #50	@ 0x32
 80045a0:	4a33      	ldr	r2, [pc, #204]	@ (8004670 <UART_SetConfig+0x4e4>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045ac:	441c      	add	r4, r3
 80045ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045b2:	2200      	movs	r2, #0
 80045b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80045b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80045b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045bc:	4642      	mov	r2, r8
 80045be:	464b      	mov	r3, r9
 80045c0:	1891      	adds	r1, r2, r2
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	415b      	adcs	r3, r3
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045cc:	4641      	mov	r1, r8
 80045ce:	1851      	adds	r1, r2, r1
 80045d0:	6039      	str	r1, [r7, #0]
 80045d2:	4649      	mov	r1, r9
 80045d4:	414b      	adcs	r3, r1
 80045d6:	607b      	str	r3, [r7, #4]
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045e4:	4659      	mov	r1, fp
 80045e6:	00cb      	lsls	r3, r1, #3
 80045e8:	4651      	mov	r1, sl
 80045ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ee:	4651      	mov	r1, sl
 80045f0:	00ca      	lsls	r2, r1, #3
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	4642      	mov	r2, r8
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045fe:	464b      	mov	r3, r9
 8004600:	460a      	mov	r2, r1
 8004602:	eb42 0303 	adc.w	r3, r2, r3
 8004606:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	663b      	str	r3, [r7, #96]	@ 0x60
 8004612:	667a      	str	r2, [r7, #100]	@ 0x64
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004620:	4649      	mov	r1, r9
 8004622:	008b      	lsls	r3, r1, #2
 8004624:	4641      	mov	r1, r8
 8004626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800462a:	4641      	mov	r1, r8
 800462c:	008a      	lsls	r2, r1, #2
 800462e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004632:	f7fb fe25 	bl	8000280 <__aeabi_uldivmod>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <UART_SetConfig+0x4e4>)
 800463c:	fba3 1302 	umull	r1, r3, r3, r2
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	2164      	movs	r1, #100	@ 0x64
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	3332      	adds	r3, #50	@ 0x32
 800464e:	4a08      	ldr	r2, [pc, #32]	@ (8004670 <UART_SetConfig+0x4e4>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	f003 020f 	and.w	r2, r3, #15
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4422      	add	r2, r4
 8004662:	609a      	str	r2, [r3, #8]
}
 8004664:	bf00      	nop
 8004666:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800466a:	46bd      	mov	sp, r7
 800466c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004670:	51eb851f 	.word	0x51eb851f

08004674 <__NVIC_SetPriority>:
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	6039      	str	r1, [r7, #0]
 800467e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004684:	2b00      	cmp	r3, #0
 8004686:	db0a      	blt.n	800469e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	b2da      	uxtb	r2, r3
 800468c:	490c      	ldr	r1, [pc, #48]	@ (80046c0 <__NVIC_SetPriority+0x4c>)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	0112      	lsls	r2, r2, #4
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	440b      	add	r3, r1
 8004698:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800469c:	e00a      	b.n	80046b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	4908      	ldr	r1, [pc, #32]	@ (80046c4 <__NVIC_SetPriority+0x50>)
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	3b04      	subs	r3, #4
 80046ac:	0112      	lsls	r2, r2, #4
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	440b      	add	r3, r1
 80046b2:	761a      	strb	r2, [r3, #24]
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	e000e100 	.word	0xe000e100
 80046c4:	e000ed00 	.word	0xe000ed00

080046c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80046cc:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <SysTick_Handler+0x1c>)
 80046ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80046d0:	f001 ff34 	bl	800653c <xTaskGetSchedulerState>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d001      	beq.n	80046de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80046da:	f002 fd2d 	bl	8007138 <xPortSysTickHandler>
  }
}
 80046de:	bf00      	nop
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	e000e010 	.word	0xe000e010

080046e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80046ec:	2100      	movs	r1, #0
 80046ee:	f06f 0004 	mvn.w	r0, #4
 80046f2:	f7ff ffbf 	bl	8004674 <__NVIC_SetPriority>
#endif
}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004702:	f3ef 8305 	mrs	r3, IPSR
 8004706:	603b      	str	r3, [r7, #0]
  return(result);
 8004708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800470e:	f06f 0305 	mvn.w	r3, #5
 8004712:	607b      	str	r3, [r7, #4]
 8004714:	e00c      	b.n	8004730 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <osKernelInitialize+0x44>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d105      	bne.n	800472a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800471e:	4b08      	ldr	r3, [pc, #32]	@ (8004740 <osKernelInitialize+0x44>)
 8004720:	2201      	movs	r2, #1
 8004722:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004724:	2300      	movs	r3, #0
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	e002      	b.n	8004730 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004730:	687b      	ldr	r3, [r7, #4]
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	20000220 	.word	0x20000220

08004744 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800474a:	f3ef 8305 	mrs	r3, IPSR
 800474e:	603b      	str	r3, [r7, #0]
  return(result);
 8004750:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004756:	f06f 0305 	mvn.w	r3, #5
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	e010      	b.n	8004780 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800475e:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <osKernelStart+0x48>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d109      	bne.n	800477a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004766:	f7ff ffbf 	bl	80046e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800476a:	4b08      	ldr	r3, [pc, #32]	@ (800478c <osKernelStart+0x48>)
 800476c:	2202      	movs	r2, #2
 800476e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004770:	f001 fa80 	bl	8005c74 <vTaskStartScheduler>
      stat = osOK;
 8004774:	2300      	movs	r3, #0
 8004776:	607b      	str	r3, [r7, #4]
 8004778:	e002      	b.n	8004780 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800477a:	f04f 33ff 	mov.w	r3, #4294967295
 800477e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004780:	687b      	ldr	r3, [r7, #4]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000220 	.word	0x20000220

08004790 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b08e      	sub	sp, #56	@ 0x38
 8004794:	af04      	add	r7, sp, #16
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047a0:	f3ef 8305 	mrs	r3, IPSR
 80047a4:	617b      	str	r3, [r7, #20]
  return(result);
 80047a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d17e      	bne.n	80048aa <osThreadNew+0x11a>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d07b      	beq.n	80048aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80047b6:	2318      	movs	r3, #24
 80047b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80047be:	f04f 33ff 	mov.w	r3, #4294967295
 80047c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d045      	beq.n	8004856 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <osThreadNew+0x48>
        name = attr->name;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <osThreadNew+0x6e>
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	2b38      	cmp	r3, #56	@ 0x38
 80047f0:	d805      	bhi.n	80047fe <osThreadNew+0x6e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <osThreadNew+0x72>
        return (NULL);
 80047fe:	2300      	movs	r3, #0
 8004800:	e054      	b.n	80048ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	089b      	lsrs	r3, r3, #2
 8004810:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00e      	beq.n	8004838 <osThreadNew+0xa8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004820:	d90a      	bls.n	8004838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004826:	2b00      	cmp	r3, #0
 8004828:	d006      	beq.n	8004838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <osThreadNew+0xa8>
        mem = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e010      	b.n	800485a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10c      	bne.n	800485a <osThreadNew+0xca>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d108      	bne.n	800485a <osThreadNew+0xca>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d104      	bne.n	800485a <osThreadNew+0xca>
          mem = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	e001      	b.n	800485a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004856:	2300      	movs	r3, #0
 8004858:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d110      	bne.n	8004882 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004868:	9202      	str	r2, [sp, #8]
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	6a3a      	ldr	r2, [r7, #32]
 8004874:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f001 f808 	bl	800588c <xTaskCreateStatic>
 800487c:	4603      	mov	r3, r0
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	e013      	b.n	80048aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d110      	bne.n	80048aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	b29a      	uxth	r2, r3
 800488c:	f107 0310 	add.w	r3, r7, #16
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f001 f856 	bl	800594c <xTaskCreate>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d001      	beq.n	80048aa <osThreadNew+0x11a>
            hTask = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80048aa:	693b      	ldr	r3, [r7, #16]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3728      	adds	r7, #40	@ 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048bc:	f3ef 8305 	mrs	r3, IPSR
 80048c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80048c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <osDelay+0x1c>
    stat = osErrorISR;
 80048c8:	f06f 0305 	mvn.w	r3, #5
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e007      	b.n	80048e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f001 f994 	bl	8005c08 <vTaskDelay>
    }
  }

  return (stat);
 80048e0:	68fb      	ldr	r3, [r7, #12]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b08a      	sub	sp, #40	@ 0x28
 80048ee:	af02      	add	r7, sp, #8
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048fa:	f3ef 8305 	mrs	r3, IPSR
 80048fe:	613b      	str	r3, [r7, #16]
  return(result);
 8004900:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004902:	2b00      	cmp	r3, #0
 8004904:	d15f      	bne.n	80049c6 <osMessageQueueNew+0xdc>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d05c      	beq.n	80049c6 <osMessageQueueNew+0xdc>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d059      	beq.n	80049c6 <osMessageQueueNew+0xdc>
    mem = -1;
 8004912:	f04f 33ff 	mov.w	r3, #4294967295
 8004916:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d029      	beq.n	8004972 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d012      	beq.n	800494c <osMessageQueueNew+0x62>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	2b4f      	cmp	r3, #79	@ 0x4f
 800492c:	d90e      	bls.n	800494c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <osMessageQueueNew+0x62>
        mem = 1;
 8004946:	2301      	movs	r3, #1
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	e014      	b.n	8004976 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d110      	bne.n	8004976 <osMessageQueueNew+0x8c>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10c      	bne.n	8004976 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004960:	2b00      	cmp	r3, #0
 8004962:	d108      	bne.n	8004976 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d104      	bne.n	8004976 <osMessageQueueNew+0x8c>
          mem = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	61bb      	str	r3, [r7, #24]
 8004970:	e001      	b.n	8004976 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d10b      	bne.n	8004994 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2100      	movs	r1, #0
 8004986:	9100      	str	r1, [sp, #0]
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fa30 	bl	8004df0 <xQueueGenericCreateStatic>
 8004990:	61f8      	str	r0, [r7, #28]
 8004992:	e008      	b.n	80049a6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800499a:	2200      	movs	r2, #0
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 faa3 	bl	8004eea <xQueueGenericCreate>
 80049a4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00c      	beq.n	80049c6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <osMessageQueueNew+0xd0>
        name = attr->name;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	e001      	b.n	80049be <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80049be:	6979      	ldr	r1, [r7, #20]
 80049c0:	69f8      	ldr	r0, [r7, #28]
 80049c2:	f000 ff05 	bl	80057d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80049c6:	69fb      	ldr	r3, [r7, #28]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3720      	adds	r7, #32
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	4613      	mov	r3, r2
 80049de:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049e8:	f3ef 8305 	mrs	r3, IPSR
 80049ec:	617b      	str	r3, [r7, #20]
  return(result);
 80049ee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d028      	beq.n	8004a46 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <osMessageQueuePut+0x36>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <osMessageQueuePut+0x36>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004a06:	f06f 0303 	mvn.w	r3, #3
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	e038      	b.n	8004a80 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004a12:	f107 0210 	add.w	r2, r7, #16
 8004a16:	2300      	movs	r3, #0
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	69b8      	ldr	r0, [r7, #24]
 8004a1c:	f000 fbc6 	bl	80051ac <xQueueGenericSendFromISR>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d003      	beq.n	8004a2e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004a26:	f06f 0302 	mvn.w	r3, #2
 8004a2a:	61fb      	str	r3, [r7, #28]
 8004a2c:	e028      	b.n	8004a80 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d025      	beq.n	8004a80 <osMessageQueuePut+0xb0>
 8004a34:	4b15      	ldr	r3, [pc, #84]	@ (8004a8c <osMessageQueuePut+0xbc>)
 8004a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	e01c      	b.n	8004a80 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <osMessageQueuePut+0x82>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d103      	bne.n	8004a5a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004a52:	f06f 0303 	mvn.w	r3, #3
 8004a56:	61fb      	str	r3, [r7, #28]
 8004a58:	e012      	b.n	8004a80 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	68b9      	ldr	r1, [r7, #8]
 8004a60:	69b8      	ldr	r0, [r7, #24]
 8004a62:	f000 faa1 	bl	8004fa8 <xQueueGenericSend>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d009      	beq.n	8004a80 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004a72:	f06f 0301 	mvn.w	r3, #1
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	e002      	b.n	8004a80 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004a7a:	f06f 0302 	mvn.w	r3, #2
 8004a7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004a80:	69fb      	ldr	r3, [r7, #28]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	e000ed04 	.word	0xe000ed04

08004a90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aa6:	f3ef 8305 	mrs	r3, IPSR
 8004aaa:	617b      	str	r3, [r7, #20]
  return(result);
 8004aac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d028      	beq.n	8004b04 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <osMessageQueueGet+0x34>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <osMessageQueueGet+0x34>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004ac4:	f06f 0303 	mvn.w	r3, #3
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	e037      	b.n	8004b3c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004ad0:	f107 0310 	add.w	r3, r7, #16
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	69b8      	ldr	r0, [r7, #24]
 8004ada:	f000 fce7 	bl	80054ac <xQueueReceiveFromISR>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d003      	beq.n	8004aec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004ae4:	f06f 0302 	mvn.w	r3, #2
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	e027      	b.n	8004b3c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d024      	beq.n	8004b3c <osMessageQueueGet+0xac>
 8004af2:	4b15      	ldr	r3, [pc, #84]	@ (8004b48 <osMessageQueueGet+0xb8>)
 8004af4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	e01b      	b.n	8004b3c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <osMessageQueueGet+0x80>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004b10:	f06f 0303 	mvn.w	r3, #3
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	e011      	b.n	8004b3c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	69b8      	ldr	r0, [r7, #24]
 8004b1e:	f000 fbe3 	bl	80052e8 <xQueueReceive>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d009      	beq.n	8004b3c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004b2e:	f06f 0301 	mvn.w	r3, #1
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	e002      	b.n	8004b3c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004b36:	f06f 0302 	mvn.w	r3, #2
 8004b3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004b3c:	69fb      	ldr	r3, [r7, #28]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4a07      	ldr	r2, [pc, #28]	@ (8004b78 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4a06      	ldr	r2, [pc, #24]	@ (8004b7c <vApplicationGetIdleTaskMemory+0x30>)
 8004b62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2280      	movs	r2, #128	@ 0x80
 8004b68:	601a      	str	r2, [r3, #0]
}
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000224 	.word	0x20000224
 8004b7c:	200002cc 	.word	0x200002cc

08004b80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4a07      	ldr	r2, [pc, #28]	@ (8004bac <vApplicationGetTimerTaskMemory+0x2c>)
 8004b90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4a06      	ldr	r2, [pc, #24]	@ (8004bb0 <vApplicationGetTimerTaskMemory+0x30>)
 8004b96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b9e:	601a      	str	r2, [r3, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	200004cc 	.word	0x200004cc
 8004bb0:	20000574 	.word	0x20000574

08004bb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f103 0208 	add.w	r2, r3, #8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f103 0208 	add.w	r2, r3, #8
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f103 0208 	add.w	r2, r3, #8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d103      	bne.n	8004c76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	e00c      	b.n	8004c90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3308      	adds	r3, #8
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	e002      	b.n	8004c84 <vListInsert+0x2e>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d2f6      	bcs.n	8004c7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	601a      	str	r2, [r3, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6892      	ldr	r2, [r2, #8]
 8004cde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6852      	ldr	r2, [r2, #4]
 8004ce8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d103      	bne.n	8004cfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	1e5a      	subs	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
 8004d46:	e7fd      	b.n	8004d44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d48:	f002 f966 	bl	8007018 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d54:	68f9      	ldr	r1, [r7, #12]
 8004d56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	441a      	add	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	68f9      	ldr	r1, [r7, #12]
 8004d7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
 8004d82:	441a      	add	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	22ff      	movs	r2, #255	@ 0xff
 8004d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	22ff      	movs	r2, #255	@ 0xff
 8004d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d114      	bne.n	8004dc8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01a      	beq.n	8004ddc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3310      	adds	r3, #16
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 fa00 	bl	80061b0 <xTaskRemoveFromEventList>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d012      	beq.n	8004ddc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004db6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <xQueueGenericReset+0xd0>)
 8004db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	e009      	b.n	8004ddc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3310      	adds	r3, #16
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fef1 	bl	8004bb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3324      	adds	r3, #36	@ 0x24
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff feec 	bl	8004bb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ddc:	f002 f94e 	bl	800707c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004de0:	2301      	movs	r3, #1
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08e      	sub	sp, #56	@ 0x38
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e16:	bf00      	nop
 8004e18:	bf00      	nop
 8004e1a:	e7fd      	b.n	8004e18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <xQueueGenericCreateStatic+0x56>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <xQueueGenericCreateStatic+0x5a>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <xQueueGenericCreateStatic+0x5c>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	623b      	str	r3, [r7, #32]
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	e7fd      	b.n	8004e64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d102      	bne.n	8004e74 <xQueueGenericCreateStatic+0x84>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <xQueueGenericCreateStatic+0x88>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <xQueueGenericCreateStatic+0x8a>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10b      	bne.n	8004e96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	61fb      	str	r3, [r7, #28]
}
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	e7fd      	b.n	8004e92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e96:	2350      	movs	r3, #80	@ 0x50
 8004e98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b50      	cmp	r3, #80	@ 0x50
 8004e9e:	d00b      	beq.n	8004eb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	61bb      	str	r3, [r7, #24]
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004eb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00d      	beq.n	8004ee0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ecc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 f840 	bl	8004f60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3730      	adds	r7, #48	@ 0x30
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b08a      	sub	sp, #40	@ 0x28
 8004eee:	af02      	add	r7, sp, #8
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	613b      	str	r3, [r7, #16]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	3350      	adds	r3, #80	@ 0x50
 8004f24:	4618      	mov	r0, r3
 8004f26:	f002 f999 	bl	800725c <pvPortMalloc>
 8004f2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d011      	beq.n	8004f56 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	3350      	adds	r3, #80	@ 0x50
 8004f3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f44:	79fa      	ldrb	r2, [r7, #7]
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f805 	bl	8004f60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f56:	69bb      	ldr	r3, [r7, #24]
	}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e002      	b.n	8004f82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f8e:	2101      	movs	r1, #1
 8004f90:	69b8      	ldr	r0, [r7, #24]
 8004f92:	f7ff fec3 	bl	8004d1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08e      	sub	sp, #56	@ 0x38
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <xQueueGenericSend+0x34>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	e7fd      	b.n	8004fd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d103      	bne.n	8004fea <xQueueGenericSend+0x42>
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <xQueueGenericSend+0x46>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <xQueueGenericSend+0x48>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10b      	bne.n	800500c <xQueueGenericSend+0x64>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005006:	bf00      	nop
 8005008:	bf00      	nop
 800500a:	e7fd      	b.n	8005008 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d103      	bne.n	800501a <xQueueGenericSend+0x72>
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <xQueueGenericSend+0x76>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <xQueueGenericSend+0x78>
 800501e:	2300      	movs	r3, #0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10b      	bne.n	800503c <xQueueGenericSend+0x94>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	623b      	str	r3, [r7, #32]
}
 8005036:	bf00      	nop
 8005038:	bf00      	nop
 800503a:	e7fd      	b.n	8005038 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800503c:	f001 fa7e 	bl	800653c <xTaskGetSchedulerState>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <xQueueGenericSend+0xa4>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <xQueueGenericSend+0xa8>
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <xQueueGenericSend+0xaa>
 8005050:	2300      	movs	r3, #0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10b      	bne.n	800506e <xQueueGenericSend+0xc6>
	__asm volatile
 8005056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	61fb      	str	r3, [r7, #28]
}
 8005068:	bf00      	nop
 800506a:	bf00      	nop
 800506c:	e7fd      	b.n	800506a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800506e:	f001 ffd3 	bl	8007018 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507a:	429a      	cmp	r2, r3
 800507c:	d302      	bcc.n	8005084 <xQueueGenericSend+0xdc>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d129      	bne.n	80050d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800508a:	f000 fa91 	bl	80055b0 <prvCopyDataToQueue>
 800508e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	2b00      	cmp	r3, #0
 8005096:	d010      	beq.n	80050ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	3324      	adds	r3, #36	@ 0x24
 800509c:	4618      	mov	r0, r3
 800509e:	f001 f887 	bl	80061b0 <xTaskRemoveFromEventList>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d013      	beq.n	80050d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050a8:	4b3f      	ldr	r3, [pc, #252]	@ (80051a8 <xQueueGenericSend+0x200>)
 80050aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	e00a      	b.n	80050d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050c0:	4b39      	ldr	r3, [pc, #228]	@ (80051a8 <xQueueGenericSend+0x200>)
 80050c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050d0:	f001 ffd4 	bl	800707c <vPortExitCritical>
				return pdPASS;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e063      	b.n	80051a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050de:	f001 ffcd 	bl	800707c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e05c      	b.n	80051a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050ec:	f107 0314 	add.w	r3, r7, #20
 80050f0:	4618      	mov	r0, r3
 80050f2:	f001 f8c1 	bl	8006278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050f6:	2301      	movs	r3, #1
 80050f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050fa:	f001 ffbf 	bl	800707c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050fe:	f000 fe29 	bl	8005d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005102:	f001 ff89 	bl	8007018 <vPortEnterCritical>
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800510c:	b25b      	sxtb	r3, r3
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005112:	d103      	bne.n	800511c <xQueueGenericSend+0x174>
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800511c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005122:	b25b      	sxtb	r3, r3
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d103      	bne.n	8005132 <xQueueGenericSend+0x18a>
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005132:	f001 ffa3 	bl	800707c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005136:	1d3a      	adds	r2, r7, #4
 8005138:	f107 0314 	add.w	r3, r7, #20
 800513c:	4611      	mov	r1, r2
 800513e:	4618      	mov	r0, r3
 8005140:	f001 f8b0 	bl	80062a4 <xTaskCheckForTimeOut>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d124      	bne.n	8005194 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800514a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800514c:	f000 fb28 	bl	80057a0 <prvIsQueueFull>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d018      	beq.n	8005188 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005158:	3310      	adds	r3, #16
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f000 ffd4 	bl	800610c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005164:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005166:	f000 fab3 	bl	80056d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800516a:	f000 fe01 	bl	8005d70 <xTaskResumeAll>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	f47f af7c 	bne.w	800506e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005176:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <xQueueGenericSend+0x200>)
 8005178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	e772      	b.n	800506e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800518a:	f000 faa1 	bl	80056d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800518e:	f000 fdef 	bl	8005d70 <xTaskResumeAll>
 8005192:	e76c      	b.n	800506e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005196:	f000 fa9b 	bl	80056d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800519a:	f000 fde9 	bl	8005d70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800519e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3738      	adds	r7, #56	@ 0x38
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b090      	sub	sp, #64	@ 0x40
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80051be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d103      	bne.n	80051ea <xQueueGenericSendFromISR+0x3e>
 80051e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <xQueueGenericSendFromISR+0x42>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <xQueueGenericSendFromISR+0x44>
 80051ee:	2300      	movs	r3, #0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d103      	bne.n	800521a <xQueueGenericSendFromISR+0x6e>
 8005212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <xQueueGenericSendFromISR+0x72>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <xQueueGenericSendFromISR+0x74>
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	623b      	str	r3, [r7, #32]
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	e7fd      	b.n	8005238 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800523c:	f001 ffcc 	bl	80071d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005240:	f3ef 8211 	mrs	r2, BASEPRI
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	61fa      	str	r2, [r7, #28]
 8005256:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005258:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800525a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800525c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005264:	429a      	cmp	r2, r3
 8005266:	d302      	bcc.n	800526e <xQueueGenericSendFromISR+0xc2>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d12f      	bne.n	80052ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800526e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005270:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005274:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005284:	f000 f994 	bl	80055b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005288:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d112      	bne.n	80052b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d016      	beq.n	80052c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800529a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529c:	3324      	adds	r3, #36	@ 0x24
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 ff86 	bl	80061b0 <xTaskRemoveFromEventList>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00e      	beq.n	80052c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e007      	b.n	80052c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80052bc:	3301      	adds	r3, #1
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	b25a      	sxtb	r2, r3
 80052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80052c8:	2301      	movs	r3, #1
 80052ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80052cc:	e001      	b.n	80052d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3740      	adds	r7, #64	@ 0x40
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08c      	sub	sp, #48	@ 0x30
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10b      	bne.n	800531a <xQueueReceive+0x32>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	623b      	str	r3, [r7, #32]
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	e7fd      	b.n	8005316 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d103      	bne.n	8005328 <xQueueReceive+0x40>
 8005320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <xQueueReceive+0x44>
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <xQueueReceive+0x46>
 800532c:	2300      	movs	r3, #0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10b      	bne.n	800534a <xQueueReceive+0x62>
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	61fb      	str	r3, [r7, #28]
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	e7fd      	b.n	8005346 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800534a:	f001 f8f7 	bl	800653c <xTaskGetSchedulerState>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <xQueueReceive+0x72>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <xQueueReceive+0x76>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <xQueueReceive+0x78>
 800535e:	2300      	movs	r3, #0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10b      	bne.n	800537c <xQueueReceive+0x94>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	61bb      	str	r3, [r7, #24]
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800537c:	f001 fe4c 	bl	8007018 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01f      	beq.n	80053cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005390:	f000 f978 	bl	8005684 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	1e5a      	subs	r2, r3, #1
 8005398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00f      	beq.n	80053c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a6:	3310      	adds	r3, #16
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 ff01 	bl	80061b0 <xTaskRemoveFromEventList>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053b4:	4b3c      	ldr	r3, [pc, #240]	@ (80054a8 <xQueueReceive+0x1c0>)
 80053b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053c4:	f001 fe5a 	bl	800707c <vPortExitCritical>
				return pdPASS;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e069      	b.n	80054a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d103      	bne.n	80053da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053d2:	f001 fe53 	bl	800707c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053d6:	2300      	movs	r3, #0
 80053d8:	e062      	b.n	80054a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053e0:	f107 0310 	add.w	r3, r7, #16
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 ff47 	bl	8006278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053ea:	2301      	movs	r3, #1
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053ee:	f001 fe45 	bl	800707c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053f2:	f000 fcaf 	bl	8005d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053f6:	f001 fe0f 	bl	8007018 <vPortEnterCritical>
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005400:	b25b      	sxtb	r3, r3
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d103      	bne.n	8005410 <xQueueReceive+0x128>
 8005408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005412:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005416:	b25b      	sxtb	r3, r3
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541c:	d103      	bne.n	8005426 <xQueueReceive+0x13e>
 800541e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005426:	f001 fe29 	bl	800707c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800542a:	1d3a      	adds	r2, r7, #4
 800542c:	f107 0310 	add.w	r3, r7, #16
 8005430:	4611      	mov	r1, r2
 8005432:	4618      	mov	r0, r3
 8005434:	f000 ff36 	bl	80062a4 <xTaskCheckForTimeOut>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d123      	bne.n	8005486 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800543e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005440:	f000 f998 	bl	8005774 <prvIsQueueEmpty>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d017      	beq.n	800547a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	3324      	adds	r3, #36	@ 0x24
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	4611      	mov	r1, r2
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fe5a 	bl	800610c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800545a:	f000 f939 	bl	80056d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800545e:	f000 fc87 	bl	8005d70 <xTaskResumeAll>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d189      	bne.n	800537c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005468:	4b0f      	ldr	r3, [pc, #60]	@ (80054a8 <xQueueReceive+0x1c0>)
 800546a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	e780      	b.n	800537c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800547a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800547c:	f000 f928 	bl	80056d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005480:	f000 fc76 	bl	8005d70 <xTaskResumeAll>
 8005484:	e77a      	b.n	800537c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005488:	f000 f922 	bl	80056d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800548c:	f000 fc70 	bl	8005d70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005490:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005492:	f000 f96f 	bl	8005774 <prvIsQueueEmpty>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	f43f af6f 	beq.w	800537c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800549e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3730      	adds	r7, #48	@ 0x30
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	e000ed04 	.word	0xe000ed04

080054ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08e      	sub	sp, #56	@ 0x38
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10b      	bne.n	80054da <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	623b      	str	r3, [r7, #32]
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop
 80054d8:	e7fd      	b.n	80054d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <xQueueReceiveFromISR+0x3c>
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <xQueueReceiveFromISR+0x40>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <xQueueReceiveFromISR+0x42>
 80054ec:	2300      	movs	r3, #0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	61fb      	str	r3, [r7, #28]
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800550a:	f001 fe65 	bl	80071d8 <vPortValidateInterruptPriority>
	__asm volatile
 800550e:	f3ef 8211 	mrs	r2, BASEPRI
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	61ba      	str	r2, [r7, #24]
 8005524:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005526:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005528:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800552e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005532:	2b00      	cmp	r3, #0
 8005534:	d02f      	beq.n	8005596 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005538:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800553c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005544:	f000 f89e 	bl	8005684 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554a:	1e5a      	subs	r2, r3, #1
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005550:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d112      	bne.n	8005580 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d016      	beq.n	8005590 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	3310      	adds	r3, #16
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fe22 	bl	80061b0 <xTaskRemoveFromEventList>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00e      	beq.n	8005590 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00b      	beq.n	8005590 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	e007      	b.n	8005590 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005584:	3301      	adds	r3, #1
 8005586:	b2db      	uxtb	r3, r3
 8005588:	b25a      	sxtb	r2, r3
 800558a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005590:	2301      	movs	r3, #1
 8005592:	637b      	str	r3, [r7, #52]	@ 0x34
 8005594:	e001      	b.n	800559a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005596:	2300      	movs	r3, #0
 8005598:	637b      	str	r3, [r7, #52]	@ 0x34
 800559a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f383 8811 	msr	BASEPRI, r3
}
 80055a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3738      	adds	r7, #56	@ 0x38
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10d      	bne.n	80055ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d14d      	bne.n	8005672 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 ffcc 	bl	8006578 <xTaskPriorityDisinherit>
 80055e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	609a      	str	r2, [r3, #8]
 80055e8:	e043      	b.n	8005672 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d119      	bne.n	8005624 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6858      	ldr	r0, [r3, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	461a      	mov	r2, r3
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	f002 fb21 	bl	8007c42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005608:	441a      	add	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	429a      	cmp	r2, r3
 8005618:	d32b      	bcc.n	8005672 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	605a      	str	r2, [r3, #4]
 8005622:	e026      	b.n	8005672 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68d8      	ldr	r0, [r3, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562c:	461a      	mov	r2, r3
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	f002 fb07 	bl	8007c42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	425b      	negs	r3, r3
 800563e:	441a      	add	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d207      	bcs.n	8005660 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	425b      	negs	r3, r3
 800565a:	441a      	add	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d105      	bne.n	8005672 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	3b01      	subs	r3, #1
 8005670:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800567a:	697b      	ldr	r3, [r7, #20]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d018      	beq.n	80056c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569e:	441a      	add	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d303      	bcc.n	80056b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68d9      	ldr	r1, [r3, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c0:	461a      	mov	r2, r3
 80056c2:	6838      	ldr	r0, [r7, #0]
 80056c4:	f002 fabd 	bl	8007c42 <memcpy>
	}
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056d8:	f001 fc9e 	bl	8007018 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056e4:	e011      	b.n	800570a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d012      	beq.n	8005714 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3324      	adds	r3, #36	@ 0x24
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fd5c 	bl	80061b0 <xTaskRemoveFromEventList>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056fe:	f000 fe35 	bl	800636c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	3b01      	subs	r3, #1
 8005706:	b2db      	uxtb	r3, r3
 8005708:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800570a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800570e:	2b00      	cmp	r3, #0
 8005710:	dce9      	bgt.n	80056e6 <prvUnlockQueue+0x16>
 8005712:	e000      	b.n	8005716 <prvUnlockQueue+0x46>
					break;
 8005714:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	22ff      	movs	r2, #255	@ 0xff
 800571a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800571e:	f001 fcad 	bl	800707c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005722:	f001 fc79 	bl	8007018 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800572c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800572e:	e011      	b.n	8005754 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d012      	beq.n	800575e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3310      	adds	r3, #16
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fd37 	bl	80061b0 <xTaskRemoveFromEventList>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005748:	f000 fe10 	bl	800636c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800574c:	7bbb      	ldrb	r3, [r7, #14]
 800574e:	3b01      	subs	r3, #1
 8005750:	b2db      	uxtb	r3, r3
 8005752:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005758:	2b00      	cmp	r3, #0
 800575a:	dce9      	bgt.n	8005730 <prvUnlockQueue+0x60>
 800575c:	e000      	b.n	8005760 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800575e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	22ff      	movs	r2, #255	@ 0xff
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005768:	f001 fc88 	bl	800707c <vPortExitCritical>
}
 800576c:	bf00      	nop
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800577c:	f001 fc4c 	bl	8007018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005784:	2b00      	cmp	r3, #0
 8005786:	d102      	bne.n	800578e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005788:	2301      	movs	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e001      	b.n	8005792 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005792:	f001 fc73 	bl	800707c <vPortExitCritical>

	return xReturn;
 8005796:	68fb      	ldr	r3, [r7, #12]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057a8:	f001 fc36 	bl	8007018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d102      	bne.n	80057be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e001      	b.n	80057c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057c2:	f001 fc5b 	bl	800707c <vPortExitCritical>

	return xReturn;
 80057c6:	68fb      	ldr	r3, [r7, #12]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	e014      	b.n	800580a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005820 <vQueueAddToRegistry+0x50>)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057ec:	490c      	ldr	r1, [pc, #48]	@ (8005820 <vQueueAddToRegistry+0x50>)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005820 <vQueueAddToRegistry+0x50>)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4413      	add	r3, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005802:	e006      	b.n	8005812 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b07      	cmp	r3, #7
 800580e:	d9e7      	bls.n	80057e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20000974 	.word	0x20000974

08005824 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005834:	f001 fbf0 	bl	8007018 <vPortEnterCritical>
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800583e:	b25b      	sxtb	r3, r3
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	d103      	bne.n	800584e <vQueueWaitForMessageRestricted+0x2a>
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005854:	b25b      	sxtb	r3, r3
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	d103      	bne.n	8005864 <vQueueWaitForMessageRestricted+0x40>
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005864:	f001 fc0a 	bl	800707c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	3324      	adds	r3, #36	@ 0x24
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fc6d 	bl	8006158 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800587e:	6978      	ldr	r0, [r7, #20]
 8005880:	f7ff ff26 	bl	80056d0 <prvUnlockQueue>
	}
 8005884:	bf00      	nop
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08e      	sub	sp, #56	@ 0x38
 8005890:	af04      	add	r7, sp, #16
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800589a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10b      	bne.n	80058b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	623b      	str	r3, [r7, #32]
}
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
 80058b6:	e7fd      	b.n	80058b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	61fb      	str	r3, [r7, #28]
}
 80058d0:	bf00      	nop
 80058d2:	bf00      	nop
 80058d4:	e7fd      	b.n	80058d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058d6:	23a8      	movs	r3, #168	@ 0xa8
 80058d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2ba8      	cmp	r3, #168	@ 0xa8
 80058de:	d00b      	beq.n	80058f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	61bb      	str	r3, [r7, #24]
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	e7fd      	b.n	80058f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01e      	beq.n	800593e <xTaskCreateStatic+0xb2>
 8005900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01b      	beq.n	800593e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	2202      	movs	r2, #2
 8005914:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005918:	2300      	movs	r3, #0
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	9302      	str	r3, [sp, #8]
 8005920:	f107 0314 	add.w	r3, r7, #20
 8005924:	9301      	str	r3, [sp, #4]
 8005926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f851 	bl	80059d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005936:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005938:	f000 f8f6 	bl	8005b28 <prvAddNewTaskToReadyList>
 800593c:	e001      	b.n	8005942 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005942:	697b      	ldr	r3, [r7, #20]
	}
 8005944:	4618      	mov	r0, r3
 8005946:	3728      	adds	r7, #40	@ 0x28
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	@ 0x30
 8005950:	af04      	add	r7, sp, #16
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4618      	mov	r0, r3
 8005962:	f001 fc7b 	bl	800725c <pvPortMalloc>
 8005966:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00e      	beq.n	800598c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800596e:	20a8      	movs	r0, #168	@ 0xa8
 8005970:	f001 fc74 	bl	800725c <pvPortMalloc>
 8005974:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	631a      	str	r2, [r3, #48]	@ 0x30
 8005982:	e005      	b.n	8005990 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005984:	6978      	ldr	r0, [r7, #20]
 8005986:	f001 fd37 	bl	80073f8 <vPortFree>
 800598a:	e001      	b.n	8005990 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800598c:	2300      	movs	r3, #0
 800598e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d017      	beq.n	80059c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800599e:	88fa      	ldrh	r2, [r7, #6]
 80059a0:	2300      	movs	r3, #0
 80059a2:	9303      	str	r3, [sp, #12]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	9302      	str	r3, [sp, #8]
 80059a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f80f 	bl	80059d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059ba:	69f8      	ldr	r0, [r7, #28]
 80059bc:	f000 f8b4 	bl	8005b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059c0:	2301      	movs	r3, #1
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	e002      	b.n	80059cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059c6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059cc:	69bb      	ldr	r3, [r7, #24]
	}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3720      	adds	r7, #32
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	461a      	mov	r2, r3
 80059f0:	21a5      	movs	r1, #165	@ 0xa5
 80059f2:	f002 f84d 	bl	8007a90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a00:	3b01      	subs	r3, #1
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	f023 0307 	bic.w	r3, r3, #7
 8005a0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	617b      	str	r3, [r7, #20]
}
 8005a2c:	bf00      	nop
 8005a2e:	bf00      	nop
 8005a30:	e7fd      	b.n	8005a2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01f      	beq.n	8005a78 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a38:	2300      	movs	r3, #0
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	e012      	b.n	8005a64 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	7819      	ldrb	r1, [r3, #0]
 8005a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3334      	adds	r3, #52	@ 0x34
 8005a4e:	460a      	mov	r2, r1
 8005a50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d006      	beq.n	8005a6c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	3301      	adds	r3, #1
 8005a62:	61fb      	str	r3, [r7, #28]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	2b0f      	cmp	r3, #15
 8005a68:	d9e9      	bls.n	8005a3e <prvInitialiseNewTask+0x66>
 8005a6a:	e000      	b.n	8005a6e <prvInitialiseNewTask+0x96>
			{
				break;
 8005a6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a76:	e003      	b.n	8005a80 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	2b37      	cmp	r3, #55	@ 0x37
 8005a84:	d901      	bls.n	8005a8a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a86:	2337      	movs	r3, #55	@ 0x37
 8005a88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a94:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	2200      	movs	r2, #0
 8005a9a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff f8a7 	bl	8004bf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	3318      	adds	r3, #24
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff f8a2 	bl	8004bf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ab4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ac4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad8:	3354      	adds	r3, #84	@ 0x54
 8005ada:	224c      	movs	r2, #76	@ 0x4c
 8005adc:	2100      	movs	r1, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f001 ffd6 	bl	8007a90 <memset>
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8005b1c <prvInitialiseNewTask+0x144>)
 8005ae8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aec:	4a0c      	ldr	r2, [pc, #48]	@ (8005b20 <prvInitialiseNewTask+0x148>)
 8005aee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af2:	4a0c      	ldr	r2, [pc, #48]	@ (8005b24 <prvInitialiseNewTask+0x14c>)
 8005af4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	68f9      	ldr	r1, [r7, #12]
 8005afa:	69b8      	ldr	r0, [r7, #24]
 8005afc:	f001 f95a 	bl	8006db4 <pxPortInitialiseStack>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b12:	bf00      	nop
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20005e28 	.word	0x20005e28
 8005b20:	20005e90 	.word	0x20005e90
 8005b24:	20005ef8 	.word	0x20005ef8

08005b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b30:	f001 fa72 	bl	8007018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b34:	4b2d      	ldr	r3, [pc, #180]	@ (8005bec <prvAddNewTaskToReadyList+0xc4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005bec <prvAddNewTaskToReadyList+0xc4>)
 8005b3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8005bf0 <prvAddNewTaskToReadyList+0xc8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b46:	4a2a      	ldr	r2, [pc, #168]	@ (8005bf0 <prvAddNewTaskToReadyList+0xc8>)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b4c:	4b27      	ldr	r3, [pc, #156]	@ (8005bec <prvAddNewTaskToReadyList+0xc4>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d110      	bne.n	8005b76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b54:	f000 fc2e 	bl	80063b4 <prvInitialiseTaskLists>
 8005b58:	e00d      	b.n	8005b76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b5a:	4b26      	ldr	r3, [pc, #152]	@ (8005bf4 <prvAddNewTaskToReadyList+0xcc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b62:	4b23      	ldr	r3, [pc, #140]	@ (8005bf0 <prvAddNewTaskToReadyList+0xc8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d802      	bhi.n	8005b76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b70:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf0 <prvAddNewTaskToReadyList+0xc8>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b76:	4b20      	ldr	r3, [pc, #128]	@ (8005bf8 <prvAddNewTaskToReadyList+0xd0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf8 <prvAddNewTaskToReadyList+0xd0>)
 8005b7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b80:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf8 <prvAddNewTaskToReadyList+0xd0>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bfc <prvAddNewTaskToReadyList+0xd4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d903      	bls.n	8005b9c <prvAddNewTaskToReadyList+0x74>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b98:	4a18      	ldr	r2, [pc, #96]	@ (8005bfc <prvAddNewTaskToReadyList+0xd4>)
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a15      	ldr	r2, [pc, #84]	@ (8005c00 <prvAddNewTaskToReadyList+0xd8>)
 8005baa:	441a      	add	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f7ff f82b 	bl	8004c0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bb8:	f001 fa60 	bl	800707c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <prvAddNewTaskToReadyList+0xcc>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00e      	beq.n	8005be2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf0 <prvAddNewTaskToReadyList+0xc8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d207      	bcs.n	8005be2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <prvAddNewTaskToReadyList+0xdc>)
 8005bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000e88 	.word	0x20000e88
 8005bf0:	200009b4 	.word	0x200009b4
 8005bf4:	20000e94 	.word	0x20000e94
 8005bf8:	20000ea4 	.word	0x20000ea4
 8005bfc:	20000e90 	.word	0x20000e90
 8005c00:	200009b8 	.word	0x200009b8
 8005c04:	e000ed04 	.word	0xe000ed04

08005c08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d018      	beq.n	8005c4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c1a:	4b14      	ldr	r3, [pc, #80]	@ (8005c6c <vTaskDelay+0x64>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <vTaskDelay+0x32>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	60bb      	str	r3, [r7, #8]
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	e7fd      	b.n	8005c36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c3a:	f000 f88b 	bl	8005d54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c3e:	2100      	movs	r1, #0
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fd09 	bl	8006658 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c46:	f000 f893 	bl	8005d70 <xTaskResumeAll>
 8005c4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d107      	bne.n	8005c62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005c52:	4b07      	ldr	r3, [pc, #28]	@ (8005c70 <vTaskDelay+0x68>)
 8005c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000eb0 	.word	0x20000eb0
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	@ 0x28
 8005c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c82:	463a      	mov	r2, r7
 8005c84:	1d39      	adds	r1, r7, #4
 8005c86:	f107 0308 	add.w	r3, r7, #8
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe ff5e 	bl	8004b4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	9202      	str	r2, [sp, #8]
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	460a      	mov	r2, r1
 8005ca2:	4924      	ldr	r1, [pc, #144]	@ (8005d34 <vTaskStartScheduler+0xc0>)
 8005ca4:	4824      	ldr	r0, [pc, #144]	@ (8005d38 <vTaskStartScheduler+0xc4>)
 8005ca6:	f7ff fdf1 	bl	800588c <xTaskCreateStatic>
 8005caa:	4603      	mov	r3, r0
 8005cac:	4a23      	ldr	r2, [pc, #140]	@ (8005d3c <vTaskStartScheduler+0xc8>)
 8005cae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cb0:	4b22      	ldr	r3, [pc, #136]	@ (8005d3c <vTaskStartScheduler+0xc8>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	e001      	b.n	8005cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d102      	bne.n	8005cce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005cc8:	f000 fd1a 	bl	8006700 <xTimerCreateTimerTask>
 8005ccc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d11b      	bne.n	8005d0c <vTaskStartScheduler+0x98>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	613b      	str	r3, [r7, #16]
}
 8005ce6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ce8:	4b15      	ldr	r3, [pc, #84]	@ (8005d40 <vTaskStartScheduler+0xcc>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3354      	adds	r3, #84	@ 0x54
 8005cee:	4a15      	ldr	r2, [pc, #84]	@ (8005d44 <vTaskStartScheduler+0xd0>)
 8005cf0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cf2:	4b15      	ldr	r3, [pc, #84]	@ (8005d48 <vTaskStartScheduler+0xd4>)
 8005cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cfa:	4b14      	ldr	r3, [pc, #80]	@ (8005d4c <vTaskStartScheduler+0xd8>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d00:	4b13      	ldr	r3, [pc, #76]	@ (8005d50 <vTaskStartScheduler+0xdc>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d06:	f001 f8e3 	bl	8006ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d0a:	e00f      	b.n	8005d2c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d12:	d10b      	bne.n	8005d2c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60fb      	str	r3, [r7, #12]
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	e7fd      	b.n	8005d28 <vTaskStartScheduler+0xb4>
}
 8005d2c:	bf00      	nop
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	08008b1c 	.word	0x08008b1c
 8005d38:	08006385 	.word	0x08006385
 8005d3c:	20000eac 	.word	0x20000eac
 8005d40:	200009b4 	.word	0x200009b4
 8005d44:	2000001c 	.word	0x2000001c
 8005d48:	20000ea8 	.word	0x20000ea8
 8005d4c:	20000e94 	.word	0x20000e94
 8005d50:	20000e8c 	.word	0x20000e8c

08005d54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d58:	4b04      	ldr	r3, [pc, #16]	@ (8005d6c <vTaskSuspendAll+0x18>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	4a03      	ldr	r2, [pc, #12]	@ (8005d6c <vTaskSuspendAll+0x18>)
 8005d60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d62:	bf00      	nop
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	20000eb0 	.word	0x20000eb0

08005d70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d7e:	4b42      	ldr	r3, [pc, #264]	@ (8005e88 <xTaskResumeAll+0x118>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10b      	bne.n	8005d9e <xTaskResumeAll+0x2e>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	603b      	str	r3, [r7, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	bf00      	nop
 8005d9c:	e7fd      	b.n	8005d9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d9e:	f001 f93b 	bl	8007018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005da2:	4b39      	ldr	r3, [pc, #228]	@ (8005e88 <xTaskResumeAll+0x118>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	4a37      	ldr	r2, [pc, #220]	@ (8005e88 <xTaskResumeAll+0x118>)
 8005daa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dac:	4b36      	ldr	r3, [pc, #216]	@ (8005e88 <xTaskResumeAll+0x118>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d162      	bne.n	8005e7a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005db4:	4b35      	ldr	r3, [pc, #212]	@ (8005e8c <xTaskResumeAll+0x11c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d05e      	beq.n	8005e7a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dbc:	e02f      	b.n	8005e1e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dbe:	4b34      	ldr	r3, [pc, #208]	@ (8005e90 <xTaskResumeAll+0x120>)
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3318      	adds	r3, #24
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe ff7c 	bl	8004cc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe ff77 	bl	8004cc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dde:	4b2d      	ldr	r3, [pc, #180]	@ (8005e94 <xTaskResumeAll+0x124>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d903      	bls.n	8005dee <xTaskResumeAll+0x7e>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dea:	4a2a      	ldr	r2, [pc, #168]	@ (8005e94 <xTaskResumeAll+0x124>)
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4a27      	ldr	r2, [pc, #156]	@ (8005e98 <xTaskResumeAll+0x128>)
 8005dfc:	441a      	add	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f7fe ff02 	bl	8004c0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0e:	4b23      	ldr	r3, [pc, #140]	@ (8005e9c <xTaskResumeAll+0x12c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d302      	bcc.n	8005e1e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005e18:	4b21      	ldr	r3, [pc, #132]	@ (8005ea0 <xTaskResumeAll+0x130>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8005e90 <xTaskResumeAll+0x120>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1cb      	bne.n	8005dbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e2c:	f000 fb66 	bl	80064fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e30:	4b1c      	ldr	r3, [pc, #112]	@ (8005ea4 <xTaskResumeAll+0x134>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d010      	beq.n	8005e5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e3c:	f000 f846 	bl	8005ecc <xTaskIncrementTick>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005e46:	4b16      	ldr	r3, [pc, #88]	@ (8005ea0 <xTaskResumeAll+0x130>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f1      	bne.n	8005e3c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005e58:	4b12      	ldr	r3, [pc, #72]	@ (8005ea4 <xTaskResumeAll+0x134>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e5e:	4b10      	ldr	r3, [pc, #64]	@ (8005ea0 <xTaskResumeAll+0x130>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d009      	beq.n	8005e7a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e66:	2301      	movs	r3, #1
 8005e68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea8 <xTaskResumeAll+0x138>)
 8005e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e7a:	f001 f8ff 	bl	800707c <vPortExitCritical>

	return xAlreadyYielded;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20000eb0 	.word	0x20000eb0
 8005e8c:	20000e88 	.word	0x20000e88
 8005e90:	20000e48 	.word	0x20000e48
 8005e94:	20000e90 	.word	0x20000e90
 8005e98:	200009b8 	.word	0x200009b8
 8005e9c:	200009b4 	.word	0x200009b4
 8005ea0:	20000e9c 	.word	0x20000e9c
 8005ea4:	20000e98 	.word	0x20000e98
 8005ea8:	e000ed04 	.word	0xe000ed04

08005eac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005eb2:	4b05      	ldr	r3, [pc, #20]	@ (8005ec8 <xTaskGetTickCount+0x1c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005eb8:	687b      	ldr	r3, [r7, #4]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	20000e8c 	.word	0x20000e8c

08005ecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8006014 <xTaskIncrementTick+0x148>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f040 8090 	bne.w	8006000 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8006018 <xTaskIncrementTick+0x14c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8006018 <xTaskIncrementTick+0x14c>)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d121      	bne.n	8005f38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ef4:	4b49      	ldr	r3, [pc, #292]	@ (800601c <xTaskIncrementTick+0x150>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	603b      	str	r3, [r7, #0]
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	e7fd      	b.n	8005f12 <xTaskIncrementTick+0x46>
 8005f16:	4b41      	ldr	r3, [pc, #260]	@ (800601c <xTaskIncrementTick+0x150>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	4b40      	ldr	r3, [pc, #256]	@ (8006020 <xTaskIncrementTick+0x154>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a3e      	ldr	r2, [pc, #248]	@ (800601c <xTaskIncrementTick+0x150>)
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	4a3e      	ldr	r2, [pc, #248]	@ (8006020 <xTaskIncrementTick+0x154>)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8006024 <xTaskIncrementTick+0x158>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	4a3c      	ldr	r2, [pc, #240]	@ (8006024 <xTaskIncrementTick+0x158>)
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	f000 fae2 	bl	80064fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f38:	4b3b      	ldr	r3, [pc, #236]	@ (8006028 <xTaskIncrementTick+0x15c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d349      	bcc.n	8005fd6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f42:	4b36      	ldr	r3, [pc, #216]	@ (800601c <xTaskIncrementTick+0x150>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d104      	bne.n	8005f56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f4c:	4b36      	ldr	r3, [pc, #216]	@ (8006028 <xTaskIncrementTick+0x15c>)
 8005f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f52:	601a      	str	r2, [r3, #0]
					break;
 8005f54:	e03f      	b.n	8005fd6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f56:	4b31      	ldr	r3, [pc, #196]	@ (800601c <xTaskIncrementTick+0x150>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d203      	bcs.n	8005f76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8006028 <xTaskIncrementTick+0x15c>)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f74:	e02f      	b.n	8005fd6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fea4 	bl	8004cc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d004      	beq.n	8005f92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	3318      	adds	r3, #24
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe fe9b 	bl	8004cc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f96:	4b25      	ldr	r3, [pc, #148]	@ (800602c <xTaskIncrementTick+0x160>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d903      	bls.n	8005fa6 <xTaskIncrementTick+0xda>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa2:	4a22      	ldr	r2, [pc, #136]	@ (800602c <xTaskIncrementTick+0x160>)
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8006030 <xTaskIncrementTick+0x164>)
 8005fb4:	441a      	add	r2, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f7fe fe26 	bl	8004c0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006034 <xTaskIncrementTick+0x168>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d3b8      	bcc.n	8005f42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fd4:	e7b5      	b.n	8005f42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fd6:	4b17      	ldr	r3, [pc, #92]	@ (8006034 <xTaskIncrementTick+0x168>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fdc:	4914      	ldr	r1, [pc, #80]	@ (8006030 <xTaskIncrementTick+0x164>)
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d901      	bls.n	8005ff2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ff2:	4b11      	ldr	r3, [pc, #68]	@ (8006038 <xTaskIncrementTick+0x16c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	e004      	b.n	800600a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006000:	4b0e      	ldr	r3, [pc, #56]	@ (800603c <xTaskIncrementTick+0x170>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a0d      	ldr	r2, [pc, #52]	@ (800603c <xTaskIncrementTick+0x170>)
 8006008:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800600a:	697b      	ldr	r3, [r7, #20]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000eb0 	.word	0x20000eb0
 8006018:	20000e8c 	.word	0x20000e8c
 800601c:	20000e40 	.word	0x20000e40
 8006020:	20000e44 	.word	0x20000e44
 8006024:	20000ea0 	.word	0x20000ea0
 8006028:	20000ea8 	.word	0x20000ea8
 800602c:	20000e90 	.word	0x20000e90
 8006030:	200009b8 	.word	0x200009b8
 8006034:	200009b4 	.word	0x200009b4
 8006038:	20000e9c 	.word	0x20000e9c
 800603c:	20000e98 	.word	0x20000e98

08006040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006046:	4b2b      	ldr	r3, [pc, #172]	@ (80060f4 <vTaskSwitchContext+0xb4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800604e:	4b2a      	ldr	r3, [pc, #168]	@ (80060f8 <vTaskSwitchContext+0xb8>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006054:	e047      	b.n	80060e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006056:	4b28      	ldr	r3, [pc, #160]	@ (80060f8 <vTaskSwitchContext+0xb8>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800605c:	4b27      	ldr	r3, [pc, #156]	@ (80060fc <vTaskSwitchContext+0xbc>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	e011      	b.n	8006088 <vTaskSwitchContext+0x48>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10b      	bne.n	8006082 <vTaskSwitchContext+0x42>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	607b      	str	r3, [r7, #4]
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	e7fd      	b.n	800607e <vTaskSwitchContext+0x3e>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3b01      	subs	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	491d      	ldr	r1, [pc, #116]	@ (8006100 <vTaskSwitchContext+0xc0>)
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0e3      	beq.n	8006064 <vTaskSwitchContext+0x24>
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4a16      	ldr	r2, [pc, #88]	@ (8006100 <vTaskSwitchContext+0xc0>)
 80060a8:	4413      	add	r3, r2
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	605a      	str	r2, [r3, #4]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	3308      	adds	r3, #8
 80060be:	429a      	cmp	r2, r3
 80060c0:	d104      	bne.n	80060cc <vTaskSwitchContext+0x8c>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	605a      	str	r2, [r3, #4]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006104 <vTaskSwitchContext+0xc4>)
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	4a09      	ldr	r2, [pc, #36]	@ (80060fc <vTaskSwitchContext+0xbc>)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060dc:	4b09      	ldr	r3, [pc, #36]	@ (8006104 <vTaskSwitchContext+0xc4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3354      	adds	r3, #84	@ 0x54
 80060e2:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <vTaskSwitchContext+0xc8>)
 80060e4:	6013      	str	r3, [r2, #0]
}
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	20000eb0 	.word	0x20000eb0
 80060f8:	20000e9c 	.word	0x20000e9c
 80060fc:	20000e90 	.word	0x20000e90
 8006100:	200009b8 	.word	0x200009b8
 8006104:	200009b4 	.word	0x200009b4
 8006108:	2000001c 	.word	0x2000001c

0800610c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	60fb      	str	r3, [r7, #12]
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	e7fd      	b.n	8006130 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006134:	4b07      	ldr	r3, [pc, #28]	@ (8006154 <vTaskPlaceOnEventList+0x48>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3318      	adds	r3, #24
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7fe fd8a 	bl	8004c56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006142:	2101      	movs	r1, #1
 8006144:	6838      	ldr	r0, [r7, #0]
 8006146:	f000 fa87 	bl	8006658 <prvAddCurrentTaskToDelayedList>
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	200009b4 	.word	0x200009b4

08006158 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	617b      	str	r3, [r7, #20]
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	e7fd      	b.n	800617e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006182:	4b0a      	ldr	r3, [pc, #40]	@ (80061ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3318      	adds	r3, #24
 8006188:	4619      	mov	r1, r3
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7fe fd3f 	bl	8004c0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006196:	f04f 33ff 	mov.w	r3, #4294967295
 800619a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	68b8      	ldr	r0, [r7, #8]
 80061a0:	f000 fa5a 	bl	8006658 <prvAddCurrentTaskToDelayedList>
	}
 80061a4:	bf00      	nop
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	200009b4 	.word	0x200009b4

080061b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10b      	bne.n	80061de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60fb      	str	r3, [r7, #12]
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3318      	adds	r3, #24
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fe fd70 	bl	8004cc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006260 <xTaskRemoveFromEventList+0xb0>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d11d      	bne.n	800622c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fe fd67 	bl	8004cc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061fe:	4b19      	ldr	r3, [pc, #100]	@ (8006264 <xTaskRemoveFromEventList+0xb4>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d903      	bls.n	800620e <xTaskRemoveFromEventList+0x5e>
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620a:	4a16      	ldr	r2, [pc, #88]	@ (8006264 <xTaskRemoveFromEventList+0xb4>)
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006212:	4613      	mov	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4a13      	ldr	r2, [pc, #76]	@ (8006268 <xTaskRemoveFromEventList+0xb8>)
 800621c:	441a      	add	r2, r3
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	3304      	adds	r3, #4
 8006222:	4619      	mov	r1, r3
 8006224:	4610      	mov	r0, r2
 8006226:	f7fe fcf2 	bl	8004c0e <vListInsertEnd>
 800622a:	e005      	b.n	8006238 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	3318      	adds	r3, #24
 8006230:	4619      	mov	r1, r3
 8006232:	480e      	ldr	r0, [pc, #56]	@ (800626c <xTaskRemoveFromEventList+0xbc>)
 8006234:	f7fe fceb 	bl	8004c0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800623c:	4b0c      	ldr	r3, [pc, #48]	@ (8006270 <xTaskRemoveFromEventList+0xc0>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006242:	429a      	cmp	r2, r3
 8006244:	d905      	bls.n	8006252 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006246:	2301      	movs	r3, #1
 8006248:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800624a:	4b0a      	ldr	r3, [pc, #40]	@ (8006274 <xTaskRemoveFromEventList+0xc4>)
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	e001      	b.n	8006256 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006256:	697b      	ldr	r3, [r7, #20]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	20000eb0 	.word	0x20000eb0
 8006264:	20000e90 	.word	0x20000e90
 8006268:	200009b8 	.word	0x200009b8
 800626c:	20000e48 	.word	0x20000e48
 8006270:	200009b4 	.word	0x200009b4
 8006274:	20000e9c 	.word	0x20000e9c

08006278 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006280:	4b06      	ldr	r3, [pc, #24]	@ (800629c <vTaskInternalSetTimeOutState+0x24>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006288:	4b05      	ldr	r3, [pc, #20]	@ (80062a0 <vTaskInternalSetTimeOutState+0x28>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	605a      	str	r2, [r3, #4]
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	20000ea0 	.word	0x20000ea0
 80062a0:	20000e8c 	.word	0x20000e8c

080062a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	613b      	str	r3, [r7, #16]
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10b      	bne.n	80062ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	60fb      	str	r3, [r7, #12]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80062ea:	f000 fe95 	bl	8007018 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006364 <xTaskCheckForTimeOut+0xc0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006306:	d102      	bne.n	800630e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006308:	2300      	movs	r3, #0
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	e023      	b.n	8006356 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b15      	ldr	r3, [pc, #84]	@ (8006368 <xTaskCheckForTimeOut+0xc4>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d007      	beq.n	800632a <xTaskCheckForTimeOut+0x86>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	429a      	cmp	r2, r3
 8006322:	d302      	bcc.n	800632a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006324:	2301      	movs	r3, #1
 8006326:	61fb      	str	r3, [r7, #28]
 8006328:	e015      	b.n	8006356 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	429a      	cmp	r2, r3
 8006332:	d20b      	bcs.n	800634c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	1ad2      	subs	r2, r2, r3
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff ff99 	bl	8006278 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	e004      	b.n	8006356 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006352:	2301      	movs	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006356:	f000 fe91 	bl	800707c <vPortExitCritical>

	return xReturn;
 800635a:	69fb      	ldr	r3, [r7, #28]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3720      	adds	r7, #32
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20000e8c 	.word	0x20000e8c
 8006368:	20000ea0 	.word	0x20000ea0

0800636c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006370:	4b03      	ldr	r3, [pc, #12]	@ (8006380 <vTaskMissedYield+0x14>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]
}
 8006376:	bf00      	nop
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20000e9c 	.word	0x20000e9c

08006384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800638c:	f000 f852 	bl	8006434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006390:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <prvIdleTask+0x28>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d9f9      	bls.n	800638c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006398:	4b05      	ldr	r3, [pc, #20]	@ (80063b0 <prvIdleTask+0x2c>)
 800639a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063a8:	e7f0      	b.n	800638c <prvIdleTask+0x8>
 80063aa:	bf00      	nop
 80063ac:	200009b8 	.word	0x200009b8
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063ba:	2300      	movs	r3, #0
 80063bc:	607b      	str	r3, [r7, #4]
 80063be:	e00c      	b.n	80063da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4a12      	ldr	r2, [pc, #72]	@ (8006414 <prvInitialiseTaskLists+0x60>)
 80063cc:	4413      	add	r3, r2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fe fbf0 	bl	8004bb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3301      	adds	r3, #1
 80063d8:	607b      	str	r3, [r7, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b37      	cmp	r3, #55	@ 0x37
 80063de:	d9ef      	bls.n	80063c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063e0:	480d      	ldr	r0, [pc, #52]	@ (8006418 <prvInitialiseTaskLists+0x64>)
 80063e2:	f7fe fbe7 	bl	8004bb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063e6:	480d      	ldr	r0, [pc, #52]	@ (800641c <prvInitialiseTaskLists+0x68>)
 80063e8:	f7fe fbe4 	bl	8004bb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063ec:	480c      	ldr	r0, [pc, #48]	@ (8006420 <prvInitialiseTaskLists+0x6c>)
 80063ee:	f7fe fbe1 	bl	8004bb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063f2:	480c      	ldr	r0, [pc, #48]	@ (8006424 <prvInitialiseTaskLists+0x70>)
 80063f4:	f7fe fbde 	bl	8004bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063f8:	480b      	ldr	r0, [pc, #44]	@ (8006428 <prvInitialiseTaskLists+0x74>)
 80063fa:	f7fe fbdb 	bl	8004bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063fe:	4b0b      	ldr	r3, [pc, #44]	@ (800642c <prvInitialiseTaskLists+0x78>)
 8006400:	4a05      	ldr	r2, [pc, #20]	@ (8006418 <prvInitialiseTaskLists+0x64>)
 8006402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006404:	4b0a      	ldr	r3, [pc, #40]	@ (8006430 <prvInitialiseTaskLists+0x7c>)
 8006406:	4a05      	ldr	r2, [pc, #20]	@ (800641c <prvInitialiseTaskLists+0x68>)
 8006408:	601a      	str	r2, [r3, #0]
}
 800640a:	bf00      	nop
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	200009b8 	.word	0x200009b8
 8006418:	20000e18 	.word	0x20000e18
 800641c:	20000e2c 	.word	0x20000e2c
 8006420:	20000e48 	.word	0x20000e48
 8006424:	20000e5c 	.word	0x20000e5c
 8006428:	20000e74 	.word	0x20000e74
 800642c:	20000e40 	.word	0x20000e40
 8006430:	20000e44 	.word	0x20000e44

08006434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800643a:	e019      	b.n	8006470 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800643c:	f000 fdec 	bl	8007018 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006440:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <prvCheckTasksWaitingTermination+0x50>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3304      	adds	r3, #4
 800644c:	4618      	mov	r0, r3
 800644e:	f7fe fc3b 	bl	8004cc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006452:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <prvCheckTasksWaitingTermination+0x54>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3b01      	subs	r3, #1
 8006458:	4a0b      	ldr	r2, [pc, #44]	@ (8006488 <prvCheckTasksWaitingTermination+0x54>)
 800645a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800645c:	4b0b      	ldr	r3, [pc, #44]	@ (800648c <prvCheckTasksWaitingTermination+0x58>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3b01      	subs	r3, #1
 8006462:	4a0a      	ldr	r2, [pc, #40]	@ (800648c <prvCheckTasksWaitingTermination+0x58>)
 8006464:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006466:	f000 fe09 	bl	800707c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f810 	bl	8006490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006470:	4b06      	ldr	r3, [pc, #24]	@ (800648c <prvCheckTasksWaitingTermination+0x58>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e1      	bne.n	800643c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20000e5c 	.word	0x20000e5c
 8006488:	20000e88 	.word	0x20000e88
 800648c:	20000e70 	.word	0x20000e70

08006490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3354      	adds	r3, #84	@ 0x54
 800649c:	4618      	mov	r0, r3
 800649e:	f001 fb0f 	bl	8007ac0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d108      	bne.n	80064be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 ffa1 	bl	80073f8 <vPortFree>
				vPortFree( pxTCB );
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 ff9e 	bl	80073f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064bc:	e019      	b.n	80064f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d103      	bne.n	80064d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 ff95 	bl	80073f8 <vPortFree>
	}
 80064ce:	e010      	b.n	80064f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d00b      	beq.n	80064f2 <prvDeleteTCB+0x62>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	60fb      	str	r3, [r7, #12]
}
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
 80064f0:	e7fd      	b.n	80064ee <prvDeleteTCB+0x5e>
	}
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006502:	4b0c      	ldr	r3, [pc, #48]	@ (8006534 <prvResetNextTaskUnblockTime+0x38>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800650c:	4b0a      	ldr	r3, [pc, #40]	@ (8006538 <prvResetNextTaskUnblockTime+0x3c>)
 800650e:	f04f 32ff 	mov.w	r2, #4294967295
 8006512:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006514:	e008      	b.n	8006528 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006516:	4b07      	ldr	r3, [pc, #28]	@ (8006534 <prvResetNextTaskUnblockTime+0x38>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	4a04      	ldr	r2, [pc, #16]	@ (8006538 <prvResetNextTaskUnblockTime+0x3c>)
 8006526:	6013      	str	r3, [r2, #0]
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	20000e40 	.word	0x20000e40
 8006538:	20000ea8 	.word	0x20000ea8

0800653c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006542:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <xTaskGetSchedulerState+0x34>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800654a:	2301      	movs	r3, #1
 800654c:	607b      	str	r3, [r7, #4]
 800654e:	e008      	b.n	8006562 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006550:	4b08      	ldr	r3, [pc, #32]	@ (8006574 <xTaskGetSchedulerState+0x38>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006558:	2302      	movs	r3, #2
 800655a:	607b      	str	r3, [r7, #4]
 800655c:	e001      	b.n	8006562 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800655e:	2300      	movs	r3, #0
 8006560:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006562:	687b      	ldr	r3, [r7, #4]
	}
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	20000e94 	.word	0x20000e94
 8006574:	20000eb0 	.word	0x20000eb0

08006578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d058      	beq.n	8006640 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800658e:	4b2f      	ldr	r3, [pc, #188]	@ (800664c <xTaskPriorityDisinherit+0xd4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	429a      	cmp	r2, r3
 8006596:	d00b      	beq.n	80065b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	60fb      	str	r3, [r7, #12]
}
 80065aa:	bf00      	nop
 80065ac:	bf00      	nop
 80065ae:	e7fd      	b.n	80065ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10b      	bne.n	80065d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	60bb      	str	r3, [r7, #8]
}
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
 80065ce:	e7fd      	b.n	80065cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d4:	1e5a      	subs	r2, r3, #1
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d02c      	beq.n	8006640 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d128      	bne.n	8006640 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	3304      	adds	r3, #4
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe fb68 	bl	8004cc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006604:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006610:	4b0f      	ldr	r3, [pc, #60]	@ (8006650 <xTaskPriorityDisinherit+0xd8>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d903      	bls.n	8006620 <xTaskPriorityDisinherit+0xa8>
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	4a0c      	ldr	r2, [pc, #48]	@ (8006650 <xTaskPriorityDisinherit+0xd8>)
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4a09      	ldr	r2, [pc, #36]	@ (8006654 <xTaskPriorityDisinherit+0xdc>)
 800662e:	441a      	add	r2, r3
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	3304      	adds	r3, #4
 8006634:	4619      	mov	r1, r3
 8006636:	4610      	mov	r0, r2
 8006638:	f7fe fae9 	bl	8004c0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800663c:	2301      	movs	r3, #1
 800663e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006640:	697b      	ldr	r3, [r7, #20]
	}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	200009b4 	.word	0x200009b4
 8006650:	20000e90 	.word	0x20000e90
 8006654:	200009b8 	.word	0x200009b8

08006658 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006662:	4b21      	ldr	r3, [pc, #132]	@ (80066e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006668:	4b20      	ldr	r3, [pc, #128]	@ (80066ec <prvAddCurrentTaskToDelayedList+0x94>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3304      	adds	r3, #4
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe fb2a 	bl	8004cc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d10a      	bne.n	8006692 <prvAddCurrentTaskToDelayedList+0x3a>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006682:	4b1a      	ldr	r3, [pc, #104]	@ (80066ec <prvAddCurrentTaskToDelayedList+0x94>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3304      	adds	r3, #4
 8006688:	4619      	mov	r1, r3
 800668a:	4819      	ldr	r0, [pc, #100]	@ (80066f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800668c:	f7fe fabf 	bl	8004c0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006690:	e026      	b.n	80066e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4413      	add	r3, r2
 8006698:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800669a:	4b14      	ldr	r3, [pc, #80]	@ (80066ec <prvAddCurrentTaskToDelayedList+0x94>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d209      	bcs.n	80066be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066aa:	4b12      	ldr	r3, [pc, #72]	@ (80066f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	4b0f      	ldr	r3, [pc, #60]	@ (80066ec <prvAddCurrentTaskToDelayedList+0x94>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f7fe facd 	bl	8004c56 <vListInsert>
}
 80066bc:	e010      	b.n	80066e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066be:	4b0e      	ldr	r3, [pc, #56]	@ (80066f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b0a      	ldr	r3, [pc, #40]	@ (80066ec <prvAddCurrentTaskToDelayedList+0x94>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f7fe fac3 	bl	8004c56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066d0:	4b0a      	ldr	r3, [pc, #40]	@ (80066fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d202      	bcs.n	80066e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066da:	4a08      	ldr	r2, [pc, #32]	@ (80066fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	6013      	str	r3, [r2, #0]
}
 80066e0:	bf00      	nop
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20000e8c 	.word	0x20000e8c
 80066ec:	200009b4 	.word	0x200009b4
 80066f0:	20000e74 	.word	0x20000e74
 80066f4:	20000e44 	.word	0x20000e44
 80066f8:	20000e40 	.word	0x20000e40
 80066fc:	20000ea8 	.word	0x20000ea8

08006700 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	@ 0x28
 8006704:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800670a:	f000 fb13 	bl	8006d34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800670e:	4b1d      	ldr	r3, [pc, #116]	@ (8006784 <xTimerCreateTimerTask+0x84>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d021      	beq.n	800675a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800671a:	2300      	movs	r3, #0
 800671c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800671e:	1d3a      	adds	r2, r7, #4
 8006720:	f107 0108 	add.w	r1, r7, #8
 8006724:	f107 030c 	add.w	r3, r7, #12
 8006728:	4618      	mov	r0, r3
 800672a:	f7fe fa29 	bl	8004b80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	9202      	str	r2, [sp, #8]
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	2302      	movs	r3, #2
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	2300      	movs	r3, #0
 800673e:	460a      	mov	r2, r1
 8006740:	4911      	ldr	r1, [pc, #68]	@ (8006788 <xTimerCreateTimerTask+0x88>)
 8006742:	4812      	ldr	r0, [pc, #72]	@ (800678c <xTimerCreateTimerTask+0x8c>)
 8006744:	f7ff f8a2 	bl	800588c <xTaskCreateStatic>
 8006748:	4603      	mov	r3, r0
 800674a:	4a11      	ldr	r2, [pc, #68]	@ (8006790 <xTimerCreateTimerTask+0x90>)
 800674c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800674e:	4b10      	ldr	r3, [pc, #64]	@ (8006790 <xTimerCreateTimerTask+0x90>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006756:	2301      	movs	r3, #1
 8006758:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	613b      	str	r3, [r7, #16]
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006778:	697b      	ldr	r3, [r7, #20]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000ee4 	.word	0x20000ee4
 8006788:	08008b24 	.word	0x08008b24
 800678c:	080068cd 	.word	0x080068cd
 8006790:	20000ee8 	.word	0x20000ee8

08006794 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	@ 0x28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10b      	bne.n	80067c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	623b      	str	r3, [r7, #32]
}
 80067be:	bf00      	nop
 80067c0:	bf00      	nop
 80067c2:	e7fd      	b.n	80067c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067c4:	4b19      	ldr	r3, [pc, #100]	@ (800682c <xTimerGenericCommand+0x98>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d02a      	beq.n	8006822 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b05      	cmp	r3, #5
 80067dc:	dc18      	bgt.n	8006810 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067de:	f7ff fead 	bl	800653c <xTaskGetSchedulerState>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d109      	bne.n	80067fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067e8:	4b10      	ldr	r3, [pc, #64]	@ (800682c <xTimerGenericCommand+0x98>)
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	f107 0110 	add.w	r1, r7, #16
 80067f0:	2300      	movs	r3, #0
 80067f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f4:	f7fe fbd8 	bl	8004fa8 <xQueueGenericSend>
 80067f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80067fa:	e012      	b.n	8006822 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067fc:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <xTimerGenericCommand+0x98>)
 80067fe:	6818      	ldr	r0, [r3, #0]
 8006800:	f107 0110 	add.w	r1, r7, #16
 8006804:	2300      	movs	r3, #0
 8006806:	2200      	movs	r2, #0
 8006808:	f7fe fbce 	bl	8004fa8 <xQueueGenericSend>
 800680c:	6278      	str	r0, [r7, #36]	@ 0x24
 800680e:	e008      	b.n	8006822 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006810:	4b06      	ldr	r3, [pc, #24]	@ (800682c <xTimerGenericCommand+0x98>)
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	f107 0110 	add.w	r1, r7, #16
 8006818:	2300      	movs	r3, #0
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	f7fe fcc6 	bl	80051ac <xQueueGenericSendFromISR>
 8006820:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006824:	4618      	mov	r0, r3
 8006826:	3728      	adds	r7, #40	@ 0x28
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20000ee4 	.word	0x20000ee4

08006830 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af02      	add	r7, sp, #8
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800683a:	4b23      	ldr	r3, [pc, #140]	@ (80068c8 <prvProcessExpiredTimer+0x98>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	3304      	adds	r3, #4
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe fa3d 	bl	8004cc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d023      	beq.n	80068a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	699a      	ldr	r2, [r3, #24]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	18d1      	adds	r1, r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	6978      	ldr	r0, [r7, #20]
 800686a:	f000 f8d5 	bl	8006a18 <prvInsertTimerInActiveList>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d020      	beq.n	80068b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006874:	2300      	movs	r3, #0
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	2300      	movs	r3, #0
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	2100      	movs	r1, #0
 800687e:	6978      	ldr	r0, [r7, #20]
 8006880:	f7ff ff88 	bl	8006794 <xTimerGenericCommand>
 8006884:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d114      	bne.n	80068b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	60fb      	str	r3, [r7, #12]
}
 800689e:	bf00      	nop
 80068a0:	bf00      	nop
 80068a2:	e7fd      	b.n	80068a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	6978      	ldr	r0, [r7, #20]
 80068bc:	4798      	blx	r3
}
 80068be:	bf00      	nop
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000edc 	.word	0x20000edc

080068cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068d4:	f107 0308 	add.w	r3, r7, #8
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 f859 	bl	8006990 <prvGetNextExpireTime>
 80068de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4619      	mov	r1, r3
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f805 	bl	80068f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068ea:	f000 f8d7 	bl	8006a9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068ee:	bf00      	nop
 80068f0:	e7f0      	b.n	80068d4 <prvTimerTask+0x8>
	...

080068f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068fe:	f7ff fa29 	bl	8005d54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006902:	f107 0308 	add.w	r3, r7, #8
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f866 	bl	80069d8 <prvSampleTimeNow>
 800690c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d130      	bne.n	8006976 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10a      	bne.n	8006930 <prvProcessTimerOrBlockTask+0x3c>
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	429a      	cmp	r2, r3
 8006920:	d806      	bhi.n	8006930 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006922:	f7ff fa25 	bl	8005d70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006926:	68f9      	ldr	r1, [r7, #12]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ff81 	bl	8006830 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800692e:	e024      	b.n	800697a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d008      	beq.n	8006948 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006936:	4b13      	ldr	r3, [pc, #76]	@ (8006984 <prvProcessTimerOrBlockTask+0x90>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <prvProcessTimerOrBlockTask+0x50>
 8006940:	2301      	movs	r3, #1
 8006942:	e000      	b.n	8006946 <prvProcessTimerOrBlockTask+0x52>
 8006944:	2300      	movs	r3, #0
 8006946:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006948:	4b0f      	ldr	r3, [pc, #60]	@ (8006988 <prvProcessTimerOrBlockTask+0x94>)
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	4619      	mov	r1, r3
 8006956:	f7fe ff65 	bl	8005824 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800695a:	f7ff fa09 	bl	8005d70 <xTaskResumeAll>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006964:	4b09      	ldr	r3, [pc, #36]	@ (800698c <prvProcessTimerOrBlockTask+0x98>)
 8006966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	f3bf 8f6f 	isb	sy
}
 8006974:	e001      	b.n	800697a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006976:	f7ff f9fb 	bl	8005d70 <xTaskResumeAll>
}
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000ee0 	.word	0x20000ee0
 8006988:	20000ee4 	.word	0x20000ee4
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006998:	4b0e      	ldr	r3, [pc, #56]	@ (80069d4 <prvGetNextExpireTime+0x44>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <prvGetNextExpireTime+0x16>
 80069a2:	2201      	movs	r2, #1
 80069a4:	e000      	b.n	80069a8 <prvGetNextExpireTime+0x18>
 80069a6:	2200      	movs	r2, #0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069b4:	4b07      	ldr	r3, [pc, #28]	@ (80069d4 <prvGetNextExpireTime+0x44>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	e001      	b.n	80069c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069c4:	68fb      	ldr	r3, [r7, #12]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20000edc 	.word	0x20000edc

080069d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069e0:	f7ff fa64 	bl	8005eac <xTaskGetTickCount>
 80069e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a14 <prvSampleTimeNow+0x3c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d205      	bcs.n	80069fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069f0:	f000 f93a 	bl	8006c68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	e002      	b.n	8006a02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a02:	4a04      	ldr	r2, [pc, #16]	@ (8006a14 <prvSampleTimeNow+0x3c>)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a08:	68fb      	ldr	r3, [r7, #12]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000eec 	.word	0x20000eec

08006a18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d812      	bhi.n	8006a64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	1ad2      	subs	r2, r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d302      	bcc.n	8006a52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	e01b      	b.n	8006a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a52:	4b10      	ldr	r3, [pc, #64]	@ (8006a94 <prvInsertTimerInActiveList+0x7c>)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f7fe f8fa 	bl	8004c56 <vListInsert>
 8006a62:	e012      	b.n	8006a8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d206      	bcs.n	8006a7a <prvInsertTimerInActiveList+0x62>
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d302      	bcc.n	8006a7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a74:	2301      	movs	r3, #1
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	e007      	b.n	8006a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a7a:	4b07      	ldr	r3, [pc, #28]	@ (8006a98 <prvInsertTimerInActiveList+0x80>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f7fe f8e6 	bl	8004c56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a8a:	697b      	ldr	r3, [r7, #20]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20000ee0 	.word	0x20000ee0
 8006a98:	20000edc 	.word	0x20000edc

08006a9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08e      	sub	sp, #56	@ 0x38
 8006aa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006aa2:	e0ce      	b.n	8006c42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	da19      	bge.n	8006ade <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006aaa:	1d3b      	adds	r3, r7, #4
 8006aac:	3304      	adds	r3, #4
 8006aae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10b      	bne.n	8006ace <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	61fb      	str	r3, [r7, #28]
}
 8006ac8:	bf00      	nop
 8006aca:	bf00      	nop
 8006acc:	e7fd      	b.n	8006aca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ad4:	6850      	ldr	r0, [r2, #4]
 8006ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ad8:	6892      	ldr	r2, [r2, #8]
 8006ada:	4611      	mov	r1, r2
 8006adc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f2c0 80ae 	blt.w	8006c42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d004      	beq.n	8006afc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af4:	3304      	adds	r3, #4
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe f8e6 	bl	8004cc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006afc:	463b      	mov	r3, r7
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff ff6a 	bl	80069d8 <prvSampleTimeNow>
 8006b04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b09      	cmp	r3, #9
 8006b0a:	f200 8097 	bhi.w	8006c3c <prvProcessReceivedCommands+0x1a0>
 8006b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <prvProcessReceivedCommands+0x78>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b3d 	.word	0x08006b3d
 8006b18:	08006b3d 	.word	0x08006b3d
 8006b1c:	08006b3d 	.word	0x08006b3d
 8006b20:	08006bb3 	.word	0x08006bb3
 8006b24:	08006bc7 	.word	0x08006bc7
 8006b28:	08006c13 	.word	0x08006c13
 8006b2c:	08006b3d 	.word	0x08006b3d
 8006b30:	08006b3d 	.word	0x08006b3d
 8006b34:	08006bb3 	.word	0x08006bb3
 8006b38:	08006bc7 	.word	0x08006bc7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b42:	f043 0301 	orr.w	r3, r3, #1
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	18d1      	adds	r1, r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b5c:	f7ff ff5c 	bl	8006a18 <prvInsertTimerInActiveList>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d06c      	beq.n	8006c40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d061      	beq.n	8006c40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	441a      	add	r2, r3
 8006b84:	2300      	movs	r3, #0
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b8e:	f7ff fe01 	bl	8006794 <xTimerGenericCommand>
 8006b92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d152      	bne.n	8006c40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	61bb      	str	r3, [r7, #24]
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	e7fd      	b.n	8006bae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bb8:	f023 0301 	bic.w	r3, r3, #1
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006bc4:	e03d      	b.n	8006c42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bdc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10b      	bne.n	8006bfe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	617b      	str	r3, [r7, #20]
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	e7fd      	b.n	8006bfa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c00:	699a      	ldr	r2, [r3, #24]
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	18d1      	adds	r1, r2, r3
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c0c:	f7ff ff04 	bl	8006a18 <prvInsertTimerInActiveList>
					break;
 8006c10:	e017      	b.n	8006c42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d103      	bne.n	8006c28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006c20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c22:	f000 fbe9 	bl	80073f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c26:	e00c      	b.n	8006c42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c2e:	f023 0301 	bic.w	r3, r3, #1
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006c3a:	e002      	b.n	8006c42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006c3c:	bf00      	nop
 8006c3e:	e000      	b.n	8006c42 <prvProcessReceivedCommands+0x1a6>
					break;
 8006c40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c42:	4b08      	ldr	r3, [pc, #32]	@ (8006c64 <prvProcessReceivedCommands+0x1c8>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	1d39      	adds	r1, r7, #4
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe fb4c 	bl	80052e8 <xQueueReceive>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f47f af26 	bne.w	8006aa4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	3730      	adds	r7, #48	@ 0x30
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000ee4 	.word	0x20000ee4

08006c68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c6e:	e049      	b.n	8006d04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c70:	4b2e      	ldr	r3, [pc, #184]	@ (8006d2c <prvSwitchTimerLists+0xc4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006d2c <prvSwitchTimerLists+0xc4>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fe f81d 	bl	8004cc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d02f      	beq.n	8006d04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4413      	add	r3, r2
 8006cac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d90e      	bls.n	8006cd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8006d2c <prvSwitchTimerLists+0xc4>)
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	4619      	mov	r1, r3
 8006ccc:	4610      	mov	r0, r2
 8006cce:	f7fd ffc2 	bl	8004c56 <vListInsert>
 8006cd2:	e017      	b.n	8006d04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	2100      	movs	r1, #0
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7ff fd58 	bl	8006794 <xTimerGenericCommand>
 8006ce4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10b      	bne.n	8006d04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	603b      	str	r3, [r7, #0]
}
 8006cfe:	bf00      	nop
 8006d00:	bf00      	nop
 8006d02:	e7fd      	b.n	8006d00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d04:	4b09      	ldr	r3, [pc, #36]	@ (8006d2c <prvSwitchTimerLists+0xc4>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1b0      	bne.n	8006c70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d0e:	4b07      	ldr	r3, [pc, #28]	@ (8006d2c <prvSwitchTimerLists+0xc4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d14:	4b06      	ldr	r3, [pc, #24]	@ (8006d30 <prvSwitchTimerLists+0xc8>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a04      	ldr	r2, [pc, #16]	@ (8006d2c <prvSwitchTimerLists+0xc4>)
 8006d1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d1c:	4a04      	ldr	r2, [pc, #16]	@ (8006d30 <prvSwitchTimerLists+0xc8>)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	6013      	str	r3, [r2, #0]
}
 8006d22:	bf00      	nop
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000edc 	.word	0x20000edc
 8006d30:	20000ee0 	.word	0x20000ee0

08006d34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d3a:	f000 f96d 	bl	8007018 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d3e:	4b15      	ldr	r3, [pc, #84]	@ (8006d94 <prvCheckForValidListAndQueue+0x60>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d120      	bne.n	8006d88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d46:	4814      	ldr	r0, [pc, #80]	@ (8006d98 <prvCheckForValidListAndQueue+0x64>)
 8006d48:	f7fd ff34 	bl	8004bb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d4c:	4813      	ldr	r0, [pc, #76]	@ (8006d9c <prvCheckForValidListAndQueue+0x68>)
 8006d4e:	f7fd ff31 	bl	8004bb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d52:	4b13      	ldr	r3, [pc, #76]	@ (8006da0 <prvCheckForValidListAndQueue+0x6c>)
 8006d54:	4a10      	ldr	r2, [pc, #64]	@ (8006d98 <prvCheckForValidListAndQueue+0x64>)
 8006d56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d58:	4b12      	ldr	r3, [pc, #72]	@ (8006da4 <prvCheckForValidListAndQueue+0x70>)
 8006d5a:	4a10      	ldr	r2, [pc, #64]	@ (8006d9c <prvCheckForValidListAndQueue+0x68>)
 8006d5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d5e:	2300      	movs	r3, #0
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	4b11      	ldr	r3, [pc, #68]	@ (8006da8 <prvCheckForValidListAndQueue+0x74>)
 8006d64:	4a11      	ldr	r2, [pc, #68]	@ (8006dac <prvCheckForValidListAndQueue+0x78>)
 8006d66:	2110      	movs	r1, #16
 8006d68:	200a      	movs	r0, #10
 8006d6a:	f7fe f841 	bl	8004df0 <xQueueGenericCreateStatic>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4a08      	ldr	r2, [pc, #32]	@ (8006d94 <prvCheckForValidListAndQueue+0x60>)
 8006d72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d74:	4b07      	ldr	r3, [pc, #28]	@ (8006d94 <prvCheckForValidListAndQueue+0x60>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d7c:	4b05      	ldr	r3, [pc, #20]	@ (8006d94 <prvCheckForValidListAndQueue+0x60>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	490b      	ldr	r1, [pc, #44]	@ (8006db0 <prvCheckForValidListAndQueue+0x7c>)
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fe fd24 	bl	80057d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d88:	f000 f978 	bl	800707c <vPortExitCritical>
}
 8006d8c:	bf00      	nop
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000ee4 	.word	0x20000ee4
 8006d98:	20000eb4 	.word	0x20000eb4
 8006d9c:	20000ec8 	.word	0x20000ec8
 8006da0:	20000edc 	.word	0x20000edc
 8006da4:	20000ee0 	.word	0x20000ee0
 8006da8:	20000f90 	.word	0x20000f90
 8006dac:	20000ef0 	.word	0x20000ef0
 8006db0:	08008b2c 	.word	0x08008b2c

08006db4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3b04      	subs	r3, #4
 8006dc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3b04      	subs	r3, #4
 8006dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f023 0201 	bic.w	r2, r3, #1
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	3b04      	subs	r3, #4
 8006de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006de4:	4a0c      	ldr	r2, [pc, #48]	@ (8006e18 <pxPortInitialiseStack+0x64>)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3b14      	subs	r3, #20
 8006dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3b04      	subs	r3, #4
 8006dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f06f 0202 	mvn.w	r2, #2
 8006e02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3b20      	subs	r3, #32
 8006e08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	08006e1d 	.word	0x08006e1d

08006e1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e26:	4b13      	ldr	r3, [pc, #76]	@ (8006e74 <prvTaskExitError+0x58>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2e:	d00b      	beq.n	8006e48 <prvTaskExitError+0x2c>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	60fb      	str	r3, [r7, #12]
}
 8006e42:	bf00      	nop
 8006e44:	bf00      	nop
 8006e46:	e7fd      	b.n	8006e44 <prvTaskExitError+0x28>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	60bb      	str	r3, [r7, #8]
}
 8006e5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e5c:	bf00      	nop
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0fc      	beq.n	8006e5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	2000000c 	.word	0x2000000c
	...

08006e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e80:	4b07      	ldr	r3, [pc, #28]	@ (8006ea0 <pxCurrentTCBConst2>)
 8006e82:	6819      	ldr	r1, [r3, #0]
 8006e84:	6808      	ldr	r0, [r1, #0]
 8006e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8a:	f380 8809 	msr	PSP, r0
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f04f 0000 	mov.w	r0, #0
 8006e96:	f380 8811 	msr	BASEPRI, r0
 8006e9a:	4770      	bx	lr
 8006e9c:	f3af 8000 	nop.w

08006ea0 <pxCurrentTCBConst2>:
 8006ea0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop

08006ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ea8:	4808      	ldr	r0, [pc, #32]	@ (8006ecc <prvPortStartFirstTask+0x24>)
 8006eaa:	6800      	ldr	r0, [r0, #0]
 8006eac:	6800      	ldr	r0, [r0, #0]
 8006eae:	f380 8808 	msr	MSP, r0
 8006eb2:	f04f 0000 	mov.w	r0, #0
 8006eb6:	f380 8814 	msr	CONTROL, r0
 8006eba:	b662      	cpsie	i
 8006ebc:	b661      	cpsie	f
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	df00      	svc	0
 8006ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eca:	bf00      	nop
 8006ecc:	e000ed08 	.word	0xe000ed08

08006ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ed6:	4b47      	ldr	r3, [pc, #284]	@ (8006ff4 <xPortStartScheduler+0x124>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a47      	ldr	r2, [pc, #284]	@ (8006ff8 <xPortStartScheduler+0x128>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d10b      	bne.n	8006ef8 <xPortStartScheduler+0x28>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	60fb      	str	r3, [r7, #12]
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	e7fd      	b.n	8006ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ff4 <xPortStartScheduler+0x124>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a3f      	ldr	r2, [pc, #252]	@ (8006ffc <xPortStartScheduler+0x12c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d10b      	bne.n	8006f1a <xPortStartScheduler+0x4a>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	613b      	str	r3, [r7, #16]
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	e7fd      	b.n	8006f16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f1a:	4b39      	ldr	r3, [pc, #228]	@ (8007000 <xPortStartScheduler+0x130>)
 8006f1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	22ff      	movs	r2, #255	@ 0xff
 8006f2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	4b31      	ldr	r3, [pc, #196]	@ (8007004 <xPortStartScheduler+0x134>)
 8006f40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f42:	4b31      	ldr	r3, [pc, #196]	@ (8007008 <xPortStartScheduler+0x138>)
 8006f44:	2207      	movs	r2, #7
 8006f46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f48:	e009      	b.n	8006f5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007008 <xPortStartScheduler+0x138>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	4a2d      	ldr	r2, [pc, #180]	@ (8007008 <xPortStartScheduler+0x138>)
 8006f52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f5e:	78fb      	ldrb	r3, [r7, #3]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f66:	2b80      	cmp	r3, #128	@ 0x80
 8006f68:	d0ef      	beq.n	8006f4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f6a:	4b27      	ldr	r3, [pc, #156]	@ (8007008 <xPortStartScheduler+0x138>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f1c3 0307 	rsb	r3, r3, #7
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d00b      	beq.n	8006f8e <xPortStartScheduler+0xbe>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	60bb      	str	r3, [r7, #8]
}
 8006f88:	bf00      	nop
 8006f8a:	bf00      	nop
 8006f8c:	e7fd      	b.n	8006f8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8007008 <xPortStartScheduler+0x138>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	021b      	lsls	r3, r3, #8
 8006f94:	4a1c      	ldr	r2, [pc, #112]	@ (8007008 <xPortStartScheduler+0x138>)
 8006f96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f98:	4b1b      	ldr	r3, [pc, #108]	@ (8007008 <xPortStartScheduler+0x138>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006fa0:	4a19      	ldr	r2, [pc, #100]	@ (8007008 <xPortStartScheduler+0x138>)
 8006fa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fac:	4b17      	ldr	r3, [pc, #92]	@ (800700c <xPortStartScheduler+0x13c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a16      	ldr	r2, [pc, #88]	@ (800700c <xPortStartScheduler+0x13c>)
 8006fb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006fb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fb8:	4b14      	ldr	r3, [pc, #80]	@ (800700c <xPortStartScheduler+0x13c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a13      	ldr	r2, [pc, #76]	@ (800700c <xPortStartScheduler+0x13c>)
 8006fbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006fc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fc4:	f000 f8da 	bl	800717c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fc8:	4b11      	ldr	r3, [pc, #68]	@ (8007010 <xPortStartScheduler+0x140>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fce:	f000 f8f9 	bl	80071c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fd2:	4b10      	ldr	r3, [pc, #64]	@ (8007014 <xPortStartScheduler+0x144>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8007014 <xPortStartScheduler+0x144>)
 8006fd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006fdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fde:	f7ff ff63 	bl	8006ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fe2:	f7ff f82d 	bl	8006040 <vTaskSwitchContext>
	prvTaskExitError();
 8006fe6:	f7ff ff19 	bl	8006e1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	e000ed00 	.word	0xe000ed00
 8006ff8:	410fc271 	.word	0x410fc271
 8006ffc:	410fc270 	.word	0x410fc270
 8007000:	e000e400 	.word	0xe000e400
 8007004:	20000fe0 	.word	0x20000fe0
 8007008:	20000fe4 	.word	0x20000fe4
 800700c:	e000ed20 	.word	0xe000ed20
 8007010:	2000000c 	.word	0x2000000c
 8007014:	e000ef34 	.word	0xe000ef34

08007018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	607b      	str	r3, [r7, #4]
}
 8007030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007032:	4b10      	ldr	r3, [pc, #64]	@ (8007074 <vPortEnterCritical+0x5c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3301      	adds	r3, #1
 8007038:	4a0e      	ldr	r2, [pc, #56]	@ (8007074 <vPortEnterCritical+0x5c>)
 800703a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800703c:	4b0d      	ldr	r3, [pc, #52]	@ (8007074 <vPortEnterCritical+0x5c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d110      	bne.n	8007066 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007044:	4b0c      	ldr	r3, [pc, #48]	@ (8007078 <vPortEnterCritical+0x60>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <vPortEnterCritical+0x4e>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	603b      	str	r3, [r7, #0]
}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	e7fd      	b.n	8007062 <vPortEnterCritical+0x4a>
	}
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	2000000c 	.word	0x2000000c
 8007078:	e000ed04 	.word	0xe000ed04

0800707c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007082:	4b12      	ldr	r3, [pc, #72]	@ (80070cc <vPortExitCritical+0x50>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <vPortExitCritical+0x26>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	607b      	str	r3, [r7, #4]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070a2:	4b0a      	ldr	r3, [pc, #40]	@ (80070cc <vPortExitCritical+0x50>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	4a08      	ldr	r2, [pc, #32]	@ (80070cc <vPortExitCritical+0x50>)
 80070aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070ac:	4b07      	ldr	r3, [pc, #28]	@ (80070cc <vPortExitCritical+0x50>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d105      	bne.n	80070c0 <vPortExitCritical+0x44>
 80070b4:	2300      	movs	r3, #0
 80070b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	f383 8811 	msr	BASEPRI, r3
}
 80070be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	2000000c 	.word	0x2000000c

080070d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070d0:	f3ef 8009 	mrs	r0, PSP
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	4b15      	ldr	r3, [pc, #84]	@ (8007130 <pxCurrentTCBConst>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	f01e 0f10 	tst.w	lr, #16
 80070e0:	bf08      	it	eq
 80070e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ea:	6010      	str	r0, [r2, #0]
 80070ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80070f4:	f380 8811 	msr	BASEPRI, r0
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f7fe ff9e 	bl	8006040 <vTaskSwitchContext>
 8007104:	f04f 0000 	mov.w	r0, #0
 8007108:	f380 8811 	msr	BASEPRI, r0
 800710c:	bc09      	pop	{r0, r3}
 800710e:	6819      	ldr	r1, [r3, #0]
 8007110:	6808      	ldr	r0, [r1, #0]
 8007112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007116:	f01e 0f10 	tst.w	lr, #16
 800711a:	bf08      	it	eq
 800711c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007120:	f380 8809 	msr	PSP, r0
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	f3af 8000 	nop.w

08007130 <pxCurrentTCBConst>:
 8007130:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop

08007138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	607b      	str	r3, [r7, #4]
}
 8007150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007152:	f7fe febb 	bl	8005ecc <xTaskIncrementTick>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800715c:	4b06      	ldr	r3, [pc, #24]	@ (8007178 <xPortSysTickHandler+0x40>)
 800715e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	2300      	movs	r3, #0
 8007166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	f383 8811 	msr	BASEPRI, r3
}
 800716e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007180:	4b0b      	ldr	r3, [pc, #44]	@ (80071b0 <vPortSetupTimerInterrupt+0x34>)
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007186:	4b0b      	ldr	r3, [pc, #44]	@ (80071b4 <vPortSetupTimerInterrupt+0x38>)
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800718c:	4b0a      	ldr	r3, [pc, #40]	@ (80071b8 <vPortSetupTimerInterrupt+0x3c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a0a      	ldr	r2, [pc, #40]	@ (80071bc <vPortSetupTimerInterrupt+0x40>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	099b      	lsrs	r3, r3, #6
 8007198:	4a09      	ldr	r2, [pc, #36]	@ (80071c0 <vPortSetupTimerInterrupt+0x44>)
 800719a:	3b01      	subs	r3, #1
 800719c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800719e:	4b04      	ldr	r3, [pc, #16]	@ (80071b0 <vPortSetupTimerInterrupt+0x34>)
 80071a0:	2207      	movs	r2, #7
 80071a2:	601a      	str	r2, [r3, #0]
}
 80071a4:	bf00      	nop
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	e000e010 	.word	0xe000e010
 80071b4:	e000e018 	.word	0xe000e018
 80071b8:	20000000 	.word	0x20000000
 80071bc:	10624dd3 	.word	0x10624dd3
 80071c0:	e000e014 	.word	0xe000e014

080071c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80071d4 <vPortEnableVFP+0x10>
 80071c8:	6801      	ldr	r1, [r0, #0]
 80071ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80071ce:	6001      	str	r1, [r0, #0]
 80071d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071d2:	bf00      	nop
 80071d4:	e000ed88 	.word	0xe000ed88

080071d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071de:	f3ef 8305 	mrs	r3, IPSR
 80071e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b0f      	cmp	r3, #15
 80071e8:	d915      	bls.n	8007216 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071ea:	4a18      	ldr	r2, [pc, #96]	@ (800724c <vPortValidateInterruptPriority+0x74>)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4413      	add	r3, r2
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071f4:	4b16      	ldr	r3, [pc, #88]	@ (8007250 <vPortValidateInterruptPriority+0x78>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	7afa      	ldrb	r2, [r7, #11]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d20b      	bcs.n	8007216 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	607b      	str	r3, [r7, #4]
}
 8007210:	bf00      	nop
 8007212:	bf00      	nop
 8007214:	e7fd      	b.n	8007212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007216:	4b0f      	ldr	r3, [pc, #60]	@ (8007254 <vPortValidateInterruptPriority+0x7c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800721e:	4b0e      	ldr	r3, [pc, #56]	@ (8007258 <vPortValidateInterruptPriority+0x80>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d90b      	bls.n	800723e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	603b      	str	r3, [r7, #0]
}
 8007238:	bf00      	nop
 800723a:	bf00      	nop
 800723c:	e7fd      	b.n	800723a <vPortValidateInterruptPriority+0x62>
	}
 800723e:	bf00      	nop
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	e000e3f0 	.word	0xe000e3f0
 8007250:	20000fe0 	.word	0x20000fe0
 8007254:	e000ed0c 	.word	0xe000ed0c
 8007258:	20000fe4 	.word	0x20000fe4

0800725c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	@ 0x28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007268:	f7fe fd74 	bl	8005d54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800726c:	4b5c      	ldr	r3, [pc, #368]	@ (80073e0 <pvPortMalloc+0x184>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007274:	f000 f924 	bl	80074c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007278:	4b5a      	ldr	r3, [pc, #360]	@ (80073e4 <pvPortMalloc+0x188>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4013      	ands	r3, r2
 8007280:	2b00      	cmp	r3, #0
 8007282:	f040 8095 	bne.w	80073b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01e      	beq.n	80072ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800728c:	2208      	movs	r2, #8
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4413      	add	r3, r2
 8007292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	2b00      	cmp	r3, #0
 800729c:	d015      	beq.n	80072ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f023 0307 	bic.w	r3, r3, #7
 80072a4:	3308      	adds	r3, #8
 80072a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00b      	beq.n	80072ca <pvPortMalloc+0x6e>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	617b      	str	r3, [r7, #20]
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop
 80072c8:	e7fd      	b.n	80072c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d06f      	beq.n	80073b0 <pvPortMalloc+0x154>
 80072d0:	4b45      	ldr	r3, [pc, #276]	@ (80073e8 <pvPortMalloc+0x18c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d86a      	bhi.n	80073b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072da:	4b44      	ldr	r3, [pc, #272]	@ (80073ec <pvPortMalloc+0x190>)
 80072dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072de:	4b43      	ldr	r3, [pc, #268]	@ (80073ec <pvPortMalloc+0x190>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072e4:	e004      	b.n	80072f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d903      	bls.n	8007302 <pvPortMalloc+0xa6>
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1f1      	bne.n	80072e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007302:	4b37      	ldr	r3, [pc, #220]	@ (80073e0 <pvPortMalloc+0x184>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007308:	429a      	cmp	r2, r3
 800730a:	d051      	beq.n	80073b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2208      	movs	r2, #8
 8007312:	4413      	add	r3, r2
 8007314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	1ad2      	subs	r2, r2, r3
 8007326:	2308      	movs	r3, #8
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	429a      	cmp	r2, r3
 800732c:	d920      	bls.n	8007370 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800732e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4413      	add	r3, r2
 8007334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00b      	beq.n	8007358 <pvPortMalloc+0xfc>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	613b      	str	r3, [r7, #16]
}
 8007352:	bf00      	nop
 8007354:	bf00      	nop
 8007356:	e7fd      	b.n	8007354 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	1ad2      	subs	r2, r2, r3
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800736a:	69b8      	ldr	r0, [r7, #24]
 800736c:	f000 f90a 	bl	8007584 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007370:	4b1d      	ldr	r3, [pc, #116]	@ (80073e8 <pvPortMalloc+0x18c>)
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	4a1b      	ldr	r2, [pc, #108]	@ (80073e8 <pvPortMalloc+0x18c>)
 800737c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800737e:	4b1a      	ldr	r3, [pc, #104]	@ (80073e8 <pvPortMalloc+0x18c>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b1b      	ldr	r3, [pc, #108]	@ (80073f0 <pvPortMalloc+0x194>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d203      	bcs.n	8007392 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800738a:	4b17      	ldr	r3, [pc, #92]	@ (80073e8 <pvPortMalloc+0x18c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a18      	ldr	r2, [pc, #96]	@ (80073f0 <pvPortMalloc+0x194>)
 8007390:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	4b13      	ldr	r3, [pc, #76]	@ (80073e4 <pvPortMalloc+0x188>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	431a      	orrs	r2, r3
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073a6:	4b13      	ldr	r3, [pc, #76]	@ (80073f4 <pvPortMalloc+0x198>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3301      	adds	r3, #1
 80073ac:	4a11      	ldr	r2, [pc, #68]	@ (80073f4 <pvPortMalloc+0x198>)
 80073ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073b0:	f7fe fcde 	bl	8005d70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00b      	beq.n	80073d6 <pvPortMalloc+0x17a>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	60fb      	str	r3, [r7, #12]
}
 80073d0:	bf00      	nop
 80073d2:	bf00      	nop
 80073d4:	e7fd      	b.n	80073d2 <pvPortMalloc+0x176>
	return pvReturn;
 80073d6:	69fb      	ldr	r3, [r7, #28]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3728      	adds	r7, #40	@ 0x28
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20005e10 	.word	0x20005e10
 80073e4:	20005e24 	.word	0x20005e24
 80073e8:	20005e14 	.word	0x20005e14
 80073ec:	20005e08 	.word	0x20005e08
 80073f0:	20005e18 	.word	0x20005e18
 80073f4:	20005e1c 	.word	0x20005e1c

080073f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d04f      	beq.n	80074aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800740a:	2308      	movs	r3, #8
 800740c:	425b      	negs	r3, r3
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4413      	add	r3, r2
 8007412:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	4b25      	ldr	r3, [pc, #148]	@ (80074b4 <vPortFree+0xbc>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4013      	ands	r3, r2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10b      	bne.n	800743e <vPortFree+0x46>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	60fb      	str	r3, [r7, #12]
}
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	e7fd      	b.n	800743a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <vPortFree+0x66>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60bb      	str	r3, [r7, #8]
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	e7fd      	b.n	800745a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	4b14      	ldr	r3, [pc, #80]	@ (80074b4 <vPortFree+0xbc>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4013      	ands	r3, r2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01e      	beq.n	80074aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d11a      	bne.n	80074aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	4b0e      	ldr	r3, [pc, #56]	@ (80074b4 <vPortFree+0xbc>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	43db      	mvns	r3, r3
 800747e:	401a      	ands	r2, r3
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007484:	f7fe fc66 	bl	8005d54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	4b0a      	ldr	r3, [pc, #40]	@ (80074b8 <vPortFree+0xc0>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4413      	add	r3, r2
 8007492:	4a09      	ldr	r2, [pc, #36]	@ (80074b8 <vPortFree+0xc0>)
 8007494:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007496:	6938      	ldr	r0, [r7, #16]
 8007498:	f000 f874 	bl	8007584 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800749c:	4b07      	ldr	r3, [pc, #28]	@ (80074bc <vPortFree+0xc4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3301      	adds	r3, #1
 80074a2:	4a06      	ldr	r2, [pc, #24]	@ (80074bc <vPortFree+0xc4>)
 80074a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074a6:	f7fe fc63 	bl	8005d70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074aa:	bf00      	nop
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20005e24 	.word	0x20005e24
 80074b8:	20005e14 	.word	0x20005e14
 80074bc:	20005e20 	.word	0x20005e20

080074c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074c6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80074ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074cc:	4b27      	ldr	r3, [pc, #156]	@ (800756c <prvHeapInit+0xac>)
 80074ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f003 0307 	and.w	r3, r3, #7
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00c      	beq.n	80074f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3307      	adds	r3, #7
 80074de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0307 	bic.w	r3, r3, #7
 80074e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	4a1f      	ldr	r2, [pc, #124]	@ (800756c <prvHeapInit+0xac>)
 80074f0:	4413      	add	r3, r2
 80074f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007570 <prvHeapInit+0xb0>)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007570 <prvHeapInit+0xb0>)
 8007500:	2200      	movs	r2, #0
 8007502:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	4413      	add	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800750c:	2208      	movs	r2, #8
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	1a9b      	subs	r3, r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0307 	bic.w	r3, r3, #7
 800751a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4a15      	ldr	r2, [pc, #84]	@ (8007574 <prvHeapInit+0xb4>)
 8007520:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007522:	4b14      	ldr	r3, [pc, #80]	@ (8007574 <prvHeapInit+0xb4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2200      	movs	r2, #0
 8007528:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800752a:	4b12      	ldr	r3, [pc, #72]	@ (8007574 <prvHeapInit+0xb4>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	1ad2      	subs	r2, r2, r3
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007540:	4b0c      	ldr	r3, [pc, #48]	@ (8007574 <prvHeapInit+0xb4>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4a0a      	ldr	r2, [pc, #40]	@ (8007578 <prvHeapInit+0xb8>)
 800754e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	4a09      	ldr	r2, [pc, #36]	@ (800757c <prvHeapInit+0xbc>)
 8007556:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007558:	4b09      	ldr	r3, [pc, #36]	@ (8007580 <prvHeapInit+0xc0>)
 800755a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800755e:	601a      	str	r2, [r3, #0]
}
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	20000fe8 	.word	0x20000fe8
 8007570:	20005e08 	.word	0x20005e08
 8007574:	20005e10 	.word	0x20005e10
 8007578:	20005e18 	.word	0x20005e18
 800757c:	20005e14 	.word	0x20005e14
 8007580:	20005e24 	.word	0x20005e24

08007584 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800758c:	4b28      	ldr	r3, [pc, #160]	@ (8007630 <prvInsertBlockIntoFreeList+0xac>)
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e002      	b.n	8007598 <prvInsertBlockIntoFreeList+0x14>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d8f7      	bhi.n	8007592 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	4413      	add	r3, r2
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d108      	bne.n	80075c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	441a      	add	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	441a      	add	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d118      	bne.n	800760c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	4b15      	ldr	r3, [pc, #84]	@ (8007634 <prvInsertBlockIntoFreeList+0xb0>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d00d      	beq.n	8007602 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	441a      	add	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	e008      	b.n	8007614 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007602:	4b0c      	ldr	r3, [pc, #48]	@ (8007634 <prvInsertBlockIntoFreeList+0xb0>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	e003      	b.n	8007614 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	429a      	cmp	r2, r3
 800761a:	d002      	beq.n	8007622 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007622:	bf00      	nop
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	20005e08 	.word	0x20005e08
 8007634:	20005e10 	.word	0x20005e10

08007638 <std>:
 8007638:	2300      	movs	r3, #0
 800763a:	b510      	push	{r4, lr}
 800763c:	4604      	mov	r4, r0
 800763e:	e9c0 3300 	strd	r3, r3, [r0]
 8007642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007646:	6083      	str	r3, [r0, #8]
 8007648:	8181      	strh	r1, [r0, #12]
 800764a:	6643      	str	r3, [r0, #100]	@ 0x64
 800764c:	81c2      	strh	r2, [r0, #14]
 800764e:	6183      	str	r3, [r0, #24]
 8007650:	4619      	mov	r1, r3
 8007652:	2208      	movs	r2, #8
 8007654:	305c      	adds	r0, #92	@ 0x5c
 8007656:	f000 fa1b 	bl	8007a90 <memset>
 800765a:	4b0d      	ldr	r3, [pc, #52]	@ (8007690 <std+0x58>)
 800765c:	6263      	str	r3, [r4, #36]	@ 0x24
 800765e:	4b0d      	ldr	r3, [pc, #52]	@ (8007694 <std+0x5c>)
 8007660:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007662:	4b0d      	ldr	r3, [pc, #52]	@ (8007698 <std+0x60>)
 8007664:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007666:	4b0d      	ldr	r3, [pc, #52]	@ (800769c <std+0x64>)
 8007668:	6323      	str	r3, [r4, #48]	@ 0x30
 800766a:	4b0d      	ldr	r3, [pc, #52]	@ (80076a0 <std+0x68>)
 800766c:	6224      	str	r4, [r4, #32]
 800766e:	429c      	cmp	r4, r3
 8007670:	d006      	beq.n	8007680 <std+0x48>
 8007672:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007676:	4294      	cmp	r4, r2
 8007678:	d002      	beq.n	8007680 <std+0x48>
 800767a:	33d0      	adds	r3, #208	@ 0xd0
 800767c:	429c      	cmp	r4, r3
 800767e:	d105      	bne.n	800768c <std+0x54>
 8007680:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007688:	f000 bad8 	b.w	8007c3c <__retarget_lock_init_recursive>
 800768c:	bd10      	pop	{r4, pc}
 800768e:	bf00      	nop
 8007690:	080078e1 	.word	0x080078e1
 8007694:	08007903 	.word	0x08007903
 8007698:	0800793b 	.word	0x0800793b
 800769c:	0800795f 	.word	0x0800795f
 80076a0:	20005e28 	.word	0x20005e28

080076a4 <stdio_exit_handler>:
 80076a4:	4a02      	ldr	r2, [pc, #8]	@ (80076b0 <stdio_exit_handler+0xc>)
 80076a6:	4903      	ldr	r1, [pc, #12]	@ (80076b4 <stdio_exit_handler+0x10>)
 80076a8:	4803      	ldr	r0, [pc, #12]	@ (80076b8 <stdio_exit_handler+0x14>)
 80076aa:	f000 b869 	b.w	8007780 <_fwalk_sglue>
 80076ae:	bf00      	nop
 80076b0:	20000010 	.word	0x20000010
 80076b4:	080087a5 	.word	0x080087a5
 80076b8:	20000020 	.word	0x20000020

080076bc <cleanup_stdio>:
 80076bc:	6841      	ldr	r1, [r0, #4]
 80076be:	4b0c      	ldr	r3, [pc, #48]	@ (80076f0 <cleanup_stdio+0x34>)
 80076c0:	4299      	cmp	r1, r3
 80076c2:	b510      	push	{r4, lr}
 80076c4:	4604      	mov	r4, r0
 80076c6:	d001      	beq.n	80076cc <cleanup_stdio+0x10>
 80076c8:	f001 f86c 	bl	80087a4 <_fflush_r>
 80076cc:	68a1      	ldr	r1, [r4, #8]
 80076ce:	4b09      	ldr	r3, [pc, #36]	@ (80076f4 <cleanup_stdio+0x38>)
 80076d0:	4299      	cmp	r1, r3
 80076d2:	d002      	beq.n	80076da <cleanup_stdio+0x1e>
 80076d4:	4620      	mov	r0, r4
 80076d6:	f001 f865 	bl	80087a4 <_fflush_r>
 80076da:	68e1      	ldr	r1, [r4, #12]
 80076dc:	4b06      	ldr	r3, [pc, #24]	@ (80076f8 <cleanup_stdio+0x3c>)
 80076de:	4299      	cmp	r1, r3
 80076e0:	d004      	beq.n	80076ec <cleanup_stdio+0x30>
 80076e2:	4620      	mov	r0, r4
 80076e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e8:	f001 b85c 	b.w	80087a4 <_fflush_r>
 80076ec:	bd10      	pop	{r4, pc}
 80076ee:	bf00      	nop
 80076f0:	20005e28 	.word	0x20005e28
 80076f4:	20005e90 	.word	0x20005e90
 80076f8:	20005ef8 	.word	0x20005ef8

080076fc <global_stdio_init.part.0>:
 80076fc:	b510      	push	{r4, lr}
 80076fe:	4b0b      	ldr	r3, [pc, #44]	@ (800772c <global_stdio_init.part.0+0x30>)
 8007700:	4c0b      	ldr	r4, [pc, #44]	@ (8007730 <global_stdio_init.part.0+0x34>)
 8007702:	4a0c      	ldr	r2, [pc, #48]	@ (8007734 <global_stdio_init.part.0+0x38>)
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	4620      	mov	r0, r4
 8007708:	2200      	movs	r2, #0
 800770a:	2104      	movs	r1, #4
 800770c:	f7ff ff94 	bl	8007638 <std>
 8007710:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007714:	2201      	movs	r2, #1
 8007716:	2109      	movs	r1, #9
 8007718:	f7ff ff8e 	bl	8007638 <std>
 800771c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007720:	2202      	movs	r2, #2
 8007722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007726:	2112      	movs	r1, #18
 8007728:	f7ff bf86 	b.w	8007638 <std>
 800772c:	20005f60 	.word	0x20005f60
 8007730:	20005e28 	.word	0x20005e28
 8007734:	080076a5 	.word	0x080076a5

08007738 <__sfp_lock_acquire>:
 8007738:	4801      	ldr	r0, [pc, #4]	@ (8007740 <__sfp_lock_acquire+0x8>)
 800773a:	f000 ba80 	b.w	8007c3e <__retarget_lock_acquire_recursive>
 800773e:	bf00      	nop
 8007740:	20005f69 	.word	0x20005f69

08007744 <__sfp_lock_release>:
 8007744:	4801      	ldr	r0, [pc, #4]	@ (800774c <__sfp_lock_release+0x8>)
 8007746:	f000 ba7b 	b.w	8007c40 <__retarget_lock_release_recursive>
 800774a:	bf00      	nop
 800774c:	20005f69 	.word	0x20005f69

08007750 <__sinit>:
 8007750:	b510      	push	{r4, lr}
 8007752:	4604      	mov	r4, r0
 8007754:	f7ff fff0 	bl	8007738 <__sfp_lock_acquire>
 8007758:	6a23      	ldr	r3, [r4, #32]
 800775a:	b11b      	cbz	r3, 8007764 <__sinit+0x14>
 800775c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007760:	f7ff bff0 	b.w	8007744 <__sfp_lock_release>
 8007764:	4b04      	ldr	r3, [pc, #16]	@ (8007778 <__sinit+0x28>)
 8007766:	6223      	str	r3, [r4, #32]
 8007768:	4b04      	ldr	r3, [pc, #16]	@ (800777c <__sinit+0x2c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1f5      	bne.n	800775c <__sinit+0xc>
 8007770:	f7ff ffc4 	bl	80076fc <global_stdio_init.part.0>
 8007774:	e7f2      	b.n	800775c <__sinit+0xc>
 8007776:	bf00      	nop
 8007778:	080076bd 	.word	0x080076bd
 800777c:	20005f60 	.word	0x20005f60

08007780 <_fwalk_sglue>:
 8007780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007784:	4607      	mov	r7, r0
 8007786:	4688      	mov	r8, r1
 8007788:	4614      	mov	r4, r2
 800778a:	2600      	movs	r6, #0
 800778c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007790:	f1b9 0901 	subs.w	r9, r9, #1
 8007794:	d505      	bpl.n	80077a2 <_fwalk_sglue+0x22>
 8007796:	6824      	ldr	r4, [r4, #0]
 8007798:	2c00      	cmp	r4, #0
 800779a:	d1f7      	bne.n	800778c <_fwalk_sglue+0xc>
 800779c:	4630      	mov	r0, r6
 800779e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077a2:	89ab      	ldrh	r3, [r5, #12]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d907      	bls.n	80077b8 <_fwalk_sglue+0x38>
 80077a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077ac:	3301      	adds	r3, #1
 80077ae:	d003      	beq.n	80077b8 <_fwalk_sglue+0x38>
 80077b0:	4629      	mov	r1, r5
 80077b2:	4638      	mov	r0, r7
 80077b4:	47c0      	blx	r8
 80077b6:	4306      	orrs	r6, r0
 80077b8:	3568      	adds	r5, #104	@ 0x68
 80077ba:	e7e9      	b.n	8007790 <_fwalk_sglue+0x10>

080077bc <iprintf>:
 80077bc:	b40f      	push	{r0, r1, r2, r3}
 80077be:	b507      	push	{r0, r1, r2, lr}
 80077c0:	4906      	ldr	r1, [pc, #24]	@ (80077dc <iprintf+0x20>)
 80077c2:	ab04      	add	r3, sp, #16
 80077c4:	6808      	ldr	r0, [r1, #0]
 80077c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ca:	6881      	ldr	r1, [r0, #8]
 80077cc:	9301      	str	r3, [sp, #4]
 80077ce:	f000 fcc1 	bl	8008154 <_vfiprintf_r>
 80077d2:	b003      	add	sp, #12
 80077d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077d8:	b004      	add	sp, #16
 80077da:	4770      	bx	lr
 80077dc:	2000001c 	.word	0x2000001c

080077e0 <_puts_r>:
 80077e0:	6a03      	ldr	r3, [r0, #32]
 80077e2:	b570      	push	{r4, r5, r6, lr}
 80077e4:	6884      	ldr	r4, [r0, #8]
 80077e6:	4605      	mov	r5, r0
 80077e8:	460e      	mov	r6, r1
 80077ea:	b90b      	cbnz	r3, 80077f0 <_puts_r+0x10>
 80077ec:	f7ff ffb0 	bl	8007750 <__sinit>
 80077f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077f2:	07db      	lsls	r3, r3, #31
 80077f4:	d405      	bmi.n	8007802 <_puts_r+0x22>
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	0598      	lsls	r0, r3, #22
 80077fa:	d402      	bmi.n	8007802 <_puts_r+0x22>
 80077fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077fe:	f000 fa1e 	bl	8007c3e <__retarget_lock_acquire_recursive>
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	0719      	lsls	r1, r3, #28
 8007806:	d502      	bpl.n	800780e <_puts_r+0x2e>
 8007808:	6923      	ldr	r3, [r4, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d135      	bne.n	800787a <_puts_r+0x9a>
 800780e:	4621      	mov	r1, r4
 8007810:	4628      	mov	r0, r5
 8007812:	f000 f8e7 	bl	80079e4 <__swsetup_r>
 8007816:	b380      	cbz	r0, 800787a <_puts_r+0x9a>
 8007818:	f04f 35ff 	mov.w	r5, #4294967295
 800781c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800781e:	07da      	lsls	r2, r3, #31
 8007820:	d405      	bmi.n	800782e <_puts_r+0x4e>
 8007822:	89a3      	ldrh	r3, [r4, #12]
 8007824:	059b      	lsls	r3, r3, #22
 8007826:	d402      	bmi.n	800782e <_puts_r+0x4e>
 8007828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800782a:	f000 fa09 	bl	8007c40 <__retarget_lock_release_recursive>
 800782e:	4628      	mov	r0, r5
 8007830:	bd70      	pop	{r4, r5, r6, pc}
 8007832:	2b00      	cmp	r3, #0
 8007834:	da04      	bge.n	8007840 <_puts_r+0x60>
 8007836:	69a2      	ldr	r2, [r4, #24]
 8007838:	429a      	cmp	r2, r3
 800783a:	dc17      	bgt.n	800786c <_puts_r+0x8c>
 800783c:	290a      	cmp	r1, #10
 800783e:	d015      	beq.n	800786c <_puts_r+0x8c>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	6022      	str	r2, [r4, #0]
 8007846:	7019      	strb	r1, [r3, #0]
 8007848:	68a3      	ldr	r3, [r4, #8]
 800784a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800784e:	3b01      	subs	r3, #1
 8007850:	60a3      	str	r3, [r4, #8]
 8007852:	2900      	cmp	r1, #0
 8007854:	d1ed      	bne.n	8007832 <_puts_r+0x52>
 8007856:	2b00      	cmp	r3, #0
 8007858:	da11      	bge.n	800787e <_puts_r+0x9e>
 800785a:	4622      	mov	r2, r4
 800785c:	210a      	movs	r1, #10
 800785e:	4628      	mov	r0, r5
 8007860:	f000 f881 	bl	8007966 <__swbuf_r>
 8007864:	3001      	adds	r0, #1
 8007866:	d0d7      	beq.n	8007818 <_puts_r+0x38>
 8007868:	250a      	movs	r5, #10
 800786a:	e7d7      	b.n	800781c <_puts_r+0x3c>
 800786c:	4622      	mov	r2, r4
 800786e:	4628      	mov	r0, r5
 8007870:	f000 f879 	bl	8007966 <__swbuf_r>
 8007874:	3001      	adds	r0, #1
 8007876:	d1e7      	bne.n	8007848 <_puts_r+0x68>
 8007878:	e7ce      	b.n	8007818 <_puts_r+0x38>
 800787a:	3e01      	subs	r6, #1
 800787c:	e7e4      	b.n	8007848 <_puts_r+0x68>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	6022      	str	r2, [r4, #0]
 8007884:	220a      	movs	r2, #10
 8007886:	701a      	strb	r2, [r3, #0]
 8007888:	e7ee      	b.n	8007868 <_puts_r+0x88>
	...

0800788c <puts>:
 800788c:	4b02      	ldr	r3, [pc, #8]	@ (8007898 <puts+0xc>)
 800788e:	4601      	mov	r1, r0
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	f7ff bfa5 	b.w	80077e0 <_puts_r>
 8007896:	bf00      	nop
 8007898:	2000001c 	.word	0x2000001c

0800789c <siprintf>:
 800789c:	b40e      	push	{r1, r2, r3}
 800789e:	b510      	push	{r4, lr}
 80078a0:	b09d      	sub	sp, #116	@ 0x74
 80078a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80078a4:	9002      	str	r0, [sp, #8]
 80078a6:	9006      	str	r0, [sp, #24]
 80078a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078ac:	480a      	ldr	r0, [pc, #40]	@ (80078d8 <siprintf+0x3c>)
 80078ae:	9107      	str	r1, [sp, #28]
 80078b0:	9104      	str	r1, [sp, #16]
 80078b2:	490a      	ldr	r1, [pc, #40]	@ (80078dc <siprintf+0x40>)
 80078b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b8:	9105      	str	r1, [sp, #20]
 80078ba:	2400      	movs	r4, #0
 80078bc:	a902      	add	r1, sp, #8
 80078be:	6800      	ldr	r0, [r0, #0]
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80078c4:	f000 fb20 	bl	8007f08 <_svfiprintf_r>
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	701c      	strb	r4, [r3, #0]
 80078cc:	b01d      	add	sp, #116	@ 0x74
 80078ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d2:	b003      	add	sp, #12
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	2000001c 	.word	0x2000001c
 80078dc:	ffff0208 	.word	0xffff0208

080078e0 <__sread>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	460c      	mov	r4, r1
 80078e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e8:	f000 f95a 	bl	8007ba0 <_read_r>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	bfab      	itete	ge
 80078f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078f2:	89a3      	ldrhlt	r3, [r4, #12]
 80078f4:	181b      	addge	r3, r3, r0
 80078f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078fa:	bfac      	ite	ge
 80078fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078fe:	81a3      	strhlt	r3, [r4, #12]
 8007900:	bd10      	pop	{r4, pc}

08007902 <__swrite>:
 8007902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007906:	461f      	mov	r7, r3
 8007908:	898b      	ldrh	r3, [r1, #12]
 800790a:	05db      	lsls	r3, r3, #23
 800790c:	4605      	mov	r5, r0
 800790e:	460c      	mov	r4, r1
 8007910:	4616      	mov	r6, r2
 8007912:	d505      	bpl.n	8007920 <__swrite+0x1e>
 8007914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007918:	2302      	movs	r3, #2
 800791a:	2200      	movs	r2, #0
 800791c:	f000 f92e 	bl	8007b7c <_lseek_r>
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007926:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800792a:	81a3      	strh	r3, [r4, #12]
 800792c:	4632      	mov	r2, r6
 800792e:	463b      	mov	r3, r7
 8007930:	4628      	mov	r0, r5
 8007932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007936:	f000 b945 	b.w	8007bc4 <_write_r>

0800793a <__sseek>:
 800793a:	b510      	push	{r4, lr}
 800793c:	460c      	mov	r4, r1
 800793e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007942:	f000 f91b 	bl	8007b7c <_lseek_r>
 8007946:	1c43      	adds	r3, r0, #1
 8007948:	89a3      	ldrh	r3, [r4, #12]
 800794a:	bf15      	itete	ne
 800794c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800794e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007952:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007956:	81a3      	strheq	r3, [r4, #12]
 8007958:	bf18      	it	ne
 800795a:	81a3      	strhne	r3, [r4, #12]
 800795c:	bd10      	pop	{r4, pc}

0800795e <__sclose>:
 800795e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007962:	f000 b89d 	b.w	8007aa0 <_close_r>

08007966 <__swbuf_r>:
 8007966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007968:	460e      	mov	r6, r1
 800796a:	4614      	mov	r4, r2
 800796c:	4605      	mov	r5, r0
 800796e:	b118      	cbz	r0, 8007978 <__swbuf_r+0x12>
 8007970:	6a03      	ldr	r3, [r0, #32]
 8007972:	b90b      	cbnz	r3, 8007978 <__swbuf_r+0x12>
 8007974:	f7ff feec 	bl	8007750 <__sinit>
 8007978:	69a3      	ldr	r3, [r4, #24]
 800797a:	60a3      	str	r3, [r4, #8]
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	071a      	lsls	r2, r3, #28
 8007980:	d501      	bpl.n	8007986 <__swbuf_r+0x20>
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	b943      	cbnz	r3, 8007998 <__swbuf_r+0x32>
 8007986:	4621      	mov	r1, r4
 8007988:	4628      	mov	r0, r5
 800798a:	f000 f82b 	bl	80079e4 <__swsetup_r>
 800798e:	b118      	cbz	r0, 8007998 <__swbuf_r+0x32>
 8007990:	f04f 37ff 	mov.w	r7, #4294967295
 8007994:	4638      	mov	r0, r7
 8007996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	6922      	ldr	r2, [r4, #16]
 800799c:	1a98      	subs	r0, r3, r2
 800799e:	6963      	ldr	r3, [r4, #20]
 80079a0:	b2f6      	uxtb	r6, r6
 80079a2:	4283      	cmp	r3, r0
 80079a4:	4637      	mov	r7, r6
 80079a6:	dc05      	bgt.n	80079b4 <__swbuf_r+0x4e>
 80079a8:	4621      	mov	r1, r4
 80079aa:	4628      	mov	r0, r5
 80079ac:	f000 fefa 	bl	80087a4 <_fflush_r>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1ed      	bne.n	8007990 <__swbuf_r+0x2a>
 80079b4:	68a3      	ldr	r3, [r4, #8]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	60a3      	str	r3, [r4, #8]
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	6022      	str	r2, [r4, #0]
 80079c0:	701e      	strb	r6, [r3, #0]
 80079c2:	6962      	ldr	r2, [r4, #20]
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d004      	beq.n	80079d4 <__swbuf_r+0x6e>
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	07db      	lsls	r3, r3, #31
 80079ce:	d5e1      	bpl.n	8007994 <__swbuf_r+0x2e>
 80079d0:	2e0a      	cmp	r6, #10
 80079d2:	d1df      	bne.n	8007994 <__swbuf_r+0x2e>
 80079d4:	4621      	mov	r1, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 fee4 	bl	80087a4 <_fflush_r>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d0d9      	beq.n	8007994 <__swbuf_r+0x2e>
 80079e0:	e7d6      	b.n	8007990 <__swbuf_r+0x2a>
	...

080079e4 <__swsetup_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4b29      	ldr	r3, [pc, #164]	@ (8007a8c <__swsetup_r+0xa8>)
 80079e8:	4605      	mov	r5, r0
 80079ea:	6818      	ldr	r0, [r3, #0]
 80079ec:	460c      	mov	r4, r1
 80079ee:	b118      	cbz	r0, 80079f8 <__swsetup_r+0x14>
 80079f0:	6a03      	ldr	r3, [r0, #32]
 80079f2:	b90b      	cbnz	r3, 80079f8 <__swsetup_r+0x14>
 80079f4:	f7ff feac 	bl	8007750 <__sinit>
 80079f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079fc:	0719      	lsls	r1, r3, #28
 80079fe:	d422      	bmi.n	8007a46 <__swsetup_r+0x62>
 8007a00:	06da      	lsls	r2, r3, #27
 8007a02:	d407      	bmi.n	8007a14 <__swsetup_r+0x30>
 8007a04:	2209      	movs	r2, #9
 8007a06:	602a      	str	r2, [r5, #0]
 8007a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a0c:	81a3      	strh	r3, [r4, #12]
 8007a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a12:	e033      	b.n	8007a7c <__swsetup_r+0x98>
 8007a14:	0758      	lsls	r0, r3, #29
 8007a16:	d512      	bpl.n	8007a3e <__swsetup_r+0x5a>
 8007a18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a1a:	b141      	cbz	r1, 8007a2e <__swsetup_r+0x4a>
 8007a1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a20:	4299      	cmp	r1, r3
 8007a22:	d002      	beq.n	8007a2a <__swsetup_r+0x46>
 8007a24:	4628      	mov	r0, r5
 8007a26:	f000 f91b 	bl	8007c60 <_free_r>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a34:	81a3      	strh	r3, [r4, #12]
 8007a36:	2300      	movs	r3, #0
 8007a38:	6063      	str	r3, [r4, #4]
 8007a3a:	6923      	ldr	r3, [r4, #16]
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f043 0308 	orr.w	r3, r3, #8
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	b94b      	cbnz	r3, 8007a5e <__swsetup_r+0x7a>
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a54:	d003      	beq.n	8007a5e <__swsetup_r+0x7a>
 8007a56:	4621      	mov	r1, r4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f000 fef1 	bl	8008840 <__smakebuf_r>
 8007a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a62:	f013 0201 	ands.w	r2, r3, #1
 8007a66:	d00a      	beq.n	8007a7e <__swsetup_r+0x9a>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	60a2      	str	r2, [r4, #8]
 8007a6c:	6962      	ldr	r2, [r4, #20]
 8007a6e:	4252      	negs	r2, r2
 8007a70:	61a2      	str	r2, [r4, #24]
 8007a72:	6922      	ldr	r2, [r4, #16]
 8007a74:	b942      	cbnz	r2, 8007a88 <__swsetup_r+0xa4>
 8007a76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a7a:	d1c5      	bne.n	8007a08 <__swsetup_r+0x24>
 8007a7c:	bd38      	pop	{r3, r4, r5, pc}
 8007a7e:	0799      	lsls	r1, r3, #30
 8007a80:	bf58      	it	pl
 8007a82:	6962      	ldrpl	r2, [r4, #20]
 8007a84:	60a2      	str	r2, [r4, #8]
 8007a86:	e7f4      	b.n	8007a72 <__swsetup_r+0x8e>
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e7f7      	b.n	8007a7c <__swsetup_r+0x98>
 8007a8c:	2000001c 	.word	0x2000001c

08007a90 <memset>:
 8007a90:	4402      	add	r2, r0
 8007a92:	4603      	mov	r3, r0
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d100      	bne.n	8007a9a <memset+0xa>
 8007a98:	4770      	bx	lr
 8007a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9e:	e7f9      	b.n	8007a94 <memset+0x4>

08007aa0 <_close_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d06      	ldr	r5, [pc, #24]	@ (8007abc <_close_r+0x1c>)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	f7f9 fd9f 	bl	80015ee <_close>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_close_r+0x1a>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_close_r+0x1a>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	20005f64 	.word	0x20005f64

08007ac0 <_reclaim_reent>:
 8007ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8007b78 <_reclaim_reent+0xb8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4283      	cmp	r3, r0
 8007ac6:	b570      	push	{r4, r5, r6, lr}
 8007ac8:	4604      	mov	r4, r0
 8007aca:	d053      	beq.n	8007b74 <_reclaim_reent+0xb4>
 8007acc:	69c3      	ldr	r3, [r0, #28]
 8007ace:	b31b      	cbz	r3, 8007b18 <_reclaim_reent+0x58>
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	b163      	cbz	r3, 8007aee <_reclaim_reent+0x2e>
 8007ad4:	2500      	movs	r5, #0
 8007ad6:	69e3      	ldr	r3, [r4, #28]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	5959      	ldr	r1, [r3, r5]
 8007adc:	b9b1      	cbnz	r1, 8007b0c <_reclaim_reent+0x4c>
 8007ade:	3504      	adds	r5, #4
 8007ae0:	2d80      	cmp	r5, #128	@ 0x80
 8007ae2:	d1f8      	bne.n	8007ad6 <_reclaim_reent+0x16>
 8007ae4:	69e3      	ldr	r3, [r4, #28]
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	68d9      	ldr	r1, [r3, #12]
 8007aea:	f000 f8b9 	bl	8007c60 <_free_r>
 8007aee:	69e3      	ldr	r3, [r4, #28]
 8007af0:	6819      	ldr	r1, [r3, #0]
 8007af2:	b111      	cbz	r1, 8007afa <_reclaim_reent+0x3a>
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 f8b3 	bl	8007c60 <_free_r>
 8007afa:	69e3      	ldr	r3, [r4, #28]
 8007afc:	689d      	ldr	r5, [r3, #8]
 8007afe:	b15d      	cbz	r5, 8007b18 <_reclaim_reent+0x58>
 8007b00:	4629      	mov	r1, r5
 8007b02:	4620      	mov	r0, r4
 8007b04:	682d      	ldr	r5, [r5, #0]
 8007b06:	f000 f8ab 	bl	8007c60 <_free_r>
 8007b0a:	e7f8      	b.n	8007afe <_reclaim_reent+0x3e>
 8007b0c:	680e      	ldr	r6, [r1, #0]
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f000 f8a6 	bl	8007c60 <_free_r>
 8007b14:	4631      	mov	r1, r6
 8007b16:	e7e1      	b.n	8007adc <_reclaim_reent+0x1c>
 8007b18:	6961      	ldr	r1, [r4, #20]
 8007b1a:	b111      	cbz	r1, 8007b22 <_reclaim_reent+0x62>
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f000 f89f 	bl	8007c60 <_free_r>
 8007b22:	69e1      	ldr	r1, [r4, #28]
 8007b24:	b111      	cbz	r1, 8007b2c <_reclaim_reent+0x6c>
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 f89a 	bl	8007c60 <_free_r>
 8007b2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007b2e:	b111      	cbz	r1, 8007b36 <_reclaim_reent+0x76>
 8007b30:	4620      	mov	r0, r4
 8007b32:	f000 f895 	bl	8007c60 <_free_r>
 8007b36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b38:	b111      	cbz	r1, 8007b40 <_reclaim_reent+0x80>
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f000 f890 	bl	8007c60 <_free_r>
 8007b40:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007b42:	b111      	cbz	r1, 8007b4a <_reclaim_reent+0x8a>
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 f88b 	bl	8007c60 <_free_r>
 8007b4a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007b4c:	b111      	cbz	r1, 8007b54 <_reclaim_reent+0x94>
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f000 f886 	bl	8007c60 <_free_r>
 8007b54:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007b56:	b111      	cbz	r1, 8007b5e <_reclaim_reent+0x9e>
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 f881 	bl	8007c60 <_free_r>
 8007b5e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007b60:	b111      	cbz	r1, 8007b68 <_reclaim_reent+0xa8>
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 f87c 	bl	8007c60 <_free_r>
 8007b68:	6a23      	ldr	r3, [r4, #32]
 8007b6a:	b11b      	cbz	r3, 8007b74 <_reclaim_reent+0xb4>
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b72:	4718      	bx	r3
 8007b74:	bd70      	pop	{r4, r5, r6, pc}
 8007b76:	bf00      	nop
 8007b78:	2000001c 	.word	0x2000001c

08007b7c <_lseek_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d07      	ldr	r5, [pc, #28]	@ (8007b9c <_lseek_r+0x20>)
 8007b80:	4604      	mov	r4, r0
 8007b82:	4608      	mov	r0, r1
 8007b84:	4611      	mov	r1, r2
 8007b86:	2200      	movs	r2, #0
 8007b88:	602a      	str	r2, [r5, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f7f9 fd56 	bl	800163c <_lseek>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_lseek_r+0x1e>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_lseek_r+0x1e>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	20005f64 	.word	0x20005f64

08007ba0 <_read_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	4d07      	ldr	r5, [pc, #28]	@ (8007bc0 <_read_r+0x20>)
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	4608      	mov	r0, r1
 8007ba8:	4611      	mov	r1, r2
 8007baa:	2200      	movs	r2, #0
 8007bac:	602a      	str	r2, [r5, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f7f9 fd00 	bl	80015b4 <_read>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d102      	bne.n	8007bbe <_read_r+0x1e>
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	b103      	cbz	r3, 8007bbe <_read_r+0x1e>
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
 8007bc0:	20005f64 	.word	0x20005f64

08007bc4 <_write_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	4d07      	ldr	r5, [pc, #28]	@ (8007be4 <_write_r+0x20>)
 8007bc8:	4604      	mov	r4, r0
 8007bca:	4608      	mov	r0, r1
 8007bcc:	4611      	mov	r1, r2
 8007bce:	2200      	movs	r2, #0
 8007bd0:	602a      	str	r2, [r5, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	f7f9 f854 	bl	8000c80 <_write>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_write_r+0x1e>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_write_r+0x1e>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	20005f64 	.word	0x20005f64

08007be8 <__errno>:
 8007be8:	4b01      	ldr	r3, [pc, #4]	@ (8007bf0 <__errno+0x8>)
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	2000001c 	.word	0x2000001c

08007bf4 <__libc_init_array>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8007c2c <__libc_init_array+0x38>)
 8007bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8007c30 <__libc_init_array+0x3c>)
 8007bfa:	1b64      	subs	r4, r4, r5
 8007bfc:	10a4      	asrs	r4, r4, #2
 8007bfe:	2600      	movs	r6, #0
 8007c00:	42a6      	cmp	r6, r4
 8007c02:	d109      	bne.n	8007c18 <__libc_init_array+0x24>
 8007c04:	4d0b      	ldr	r5, [pc, #44]	@ (8007c34 <__libc_init_array+0x40>)
 8007c06:	4c0c      	ldr	r4, [pc, #48]	@ (8007c38 <__libc_init_array+0x44>)
 8007c08:	f000 fed8 	bl	80089bc <_init>
 8007c0c:	1b64      	subs	r4, r4, r5
 8007c0e:	10a4      	asrs	r4, r4, #2
 8007c10:	2600      	movs	r6, #0
 8007c12:	42a6      	cmp	r6, r4
 8007c14:	d105      	bne.n	8007c22 <__libc_init_array+0x2e>
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c1c:	4798      	blx	r3
 8007c1e:	3601      	adds	r6, #1
 8007c20:	e7ee      	b.n	8007c00 <__libc_init_array+0xc>
 8007c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c26:	4798      	blx	r3
 8007c28:	3601      	adds	r6, #1
 8007c2a:	e7f2      	b.n	8007c12 <__libc_init_array+0x1e>
 8007c2c:	08008bfc 	.word	0x08008bfc
 8007c30:	08008bfc 	.word	0x08008bfc
 8007c34:	08008bfc 	.word	0x08008bfc
 8007c38:	08008c00 	.word	0x08008c00

08007c3c <__retarget_lock_init_recursive>:
 8007c3c:	4770      	bx	lr

08007c3e <__retarget_lock_acquire_recursive>:
 8007c3e:	4770      	bx	lr

08007c40 <__retarget_lock_release_recursive>:
 8007c40:	4770      	bx	lr

08007c42 <memcpy>:
 8007c42:	440a      	add	r2, r1
 8007c44:	4291      	cmp	r1, r2
 8007c46:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c4a:	d100      	bne.n	8007c4e <memcpy+0xc>
 8007c4c:	4770      	bx	lr
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c58:	4291      	cmp	r1, r2
 8007c5a:	d1f9      	bne.n	8007c50 <memcpy+0xe>
 8007c5c:	bd10      	pop	{r4, pc}
	...

08007c60 <_free_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4605      	mov	r5, r0
 8007c64:	2900      	cmp	r1, #0
 8007c66:	d041      	beq.n	8007cec <_free_r+0x8c>
 8007c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c6c:	1f0c      	subs	r4, r1, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bfb8      	it	lt
 8007c72:	18e4      	addlt	r4, r4, r3
 8007c74:	f000 f8e0 	bl	8007e38 <__malloc_lock>
 8007c78:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf0 <_free_r+0x90>)
 8007c7a:	6813      	ldr	r3, [r2, #0]
 8007c7c:	b933      	cbnz	r3, 8007c8c <_free_r+0x2c>
 8007c7e:	6063      	str	r3, [r4, #4]
 8007c80:	6014      	str	r4, [r2, #0]
 8007c82:	4628      	mov	r0, r5
 8007c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c88:	f000 b8dc 	b.w	8007e44 <__malloc_unlock>
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d908      	bls.n	8007ca2 <_free_r+0x42>
 8007c90:	6820      	ldr	r0, [r4, #0]
 8007c92:	1821      	adds	r1, r4, r0
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf01      	itttt	eq
 8007c98:	6819      	ldreq	r1, [r3, #0]
 8007c9a:	685b      	ldreq	r3, [r3, #4]
 8007c9c:	1809      	addeq	r1, r1, r0
 8007c9e:	6021      	streq	r1, [r4, #0]
 8007ca0:	e7ed      	b.n	8007c7e <_free_r+0x1e>
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b10b      	cbz	r3, 8007cac <_free_r+0x4c>
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d9fa      	bls.n	8007ca2 <_free_r+0x42>
 8007cac:	6811      	ldr	r1, [r2, #0]
 8007cae:	1850      	adds	r0, r2, r1
 8007cb0:	42a0      	cmp	r0, r4
 8007cb2:	d10b      	bne.n	8007ccc <_free_r+0x6c>
 8007cb4:	6820      	ldr	r0, [r4, #0]
 8007cb6:	4401      	add	r1, r0
 8007cb8:	1850      	adds	r0, r2, r1
 8007cba:	4283      	cmp	r3, r0
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	d1e0      	bne.n	8007c82 <_free_r+0x22>
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	6053      	str	r3, [r2, #4]
 8007cc6:	4408      	add	r0, r1
 8007cc8:	6010      	str	r0, [r2, #0]
 8007cca:	e7da      	b.n	8007c82 <_free_r+0x22>
 8007ccc:	d902      	bls.n	8007cd4 <_free_r+0x74>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	602b      	str	r3, [r5, #0]
 8007cd2:	e7d6      	b.n	8007c82 <_free_r+0x22>
 8007cd4:	6820      	ldr	r0, [r4, #0]
 8007cd6:	1821      	adds	r1, r4, r0
 8007cd8:	428b      	cmp	r3, r1
 8007cda:	bf04      	itt	eq
 8007cdc:	6819      	ldreq	r1, [r3, #0]
 8007cde:	685b      	ldreq	r3, [r3, #4]
 8007ce0:	6063      	str	r3, [r4, #4]
 8007ce2:	bf04      	itt	eq
 8007ce4:	1809      	addeq	r1, r1, r0
 8007ce6:	6021      	streq	r1, [r4, #0]
 8007ce8:	6054      	str	r4, [r2, #4]
 8007cea:	e7ca      	b.n	8007c82 <_free_r+0x22>
 8007cec:	bd38      	pop	{r3, r4, r5, pc}
 8007cee:	bf00      	nop
 8007cf0:	20005f70 	.word	0x20005f70

08007cf4 <sbrk_aligned>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	4e0f      	ldr	r6, [pc, #60]	@ (8007d34 <sbrk_aligned+0x40>)
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	6831      	ldr	r1, [r6, #0]
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	b911      	cbnz	r1, 8007d06 <sbrk_aligned+0x12>
 8007d00:	f000 fe16 	bl	8008930 <_sbrk_r>
 8007d04:	6030      	str	r0, [r6, #0]
 8007d06:	4621      	mov	r1, r4
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 fe11 	bl	8008930 <_sbrk_r>
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	d103      	bne.n	8007d1a <sbrk_aligned+0x26>
 8007d12:	f04f 34ff 	mov.w	r4, #4294967295
 8007d16:	4620      	mov	r0, r4
 8007d18:	bd70      	pop	{r4, r5, r6, pc}
 8007d1a:	1cc4      	adds	r4, r0, #3
 8007d1c:	f024 0403 	bic.w	r4, r4, #3
 8007d20:	42a0      	cmp	r0, r4
 8007d22:	d0f8      	beq.n	8007d16 <sbrk_aligned+0x22>
 8007d24:	1a21      	subs	r1, r4, r0
 8007d26:	4628      	mov	r0, r5
 8007d28:	f000 fe02 	bl	8008930 <_sbrk_r>
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d1f2      	bne.n	8007d16 <sbrk_aligned+0x22>
 8007d30:	e7ef      	b.n	8007d12 <sbrk_aligned+0x1e>
 8007d32:	bf00      	nop
 8007d34:	20005f6c 	.word	0x20005f6c

08007d38 <_malloc_r>:
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	1ccd      	adds	r5, r1, #3
 8007d3e:	f025 0503 	bic.w	r5, r5, #3
 8007d42:	3508      	adds	r5, #8
 8007d44:	2d0c      	cmp	r5, #12
 8007d46:	bf38      	it	cc
 8007d48:	250c      	movcc	r5, #12
 8007d4a:	2d00      	cmp	r5, #0
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	db01      	blt.n	8007d54 <_malloc_r+0x1c>
 8007d50:	42a9      	cmp	r1, r5
 8007d52:	d904      	bls.n	8007d5e <_malloc_r+0x26>
 8007d54:	230c      	movs	r3, #12
 8007d56:	6033      	str	r3, [r6, #0]
 8007d58:	2000      	movs	r0, #0
 8007d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e34 <_malloc_r+0xfc>
 8007d62:	f000 f869 	bl	8007e38 <__malloc_lock>
 8007d66:	f8d8 3000 	ldr.w	r3, [r8]
 8007d6a:	461c      	mov	r4, r3
 8007d6c:	bb44      	cbnz	r4, 8007dc0 <_malloc_r+0x88>
 8007d6e:	4629      	mov	r1, r5
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7ff ffbf 	bl	8007cf4 <sbrk_aligned>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	4604      	mov	r4, r0
 8007d7a:	d158      	bne.n	8007e2e <_malloc_r+0xf6>
 8007d7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007d80:	4627      	mov	r7, r4
 8007d82:	2f00      	cmp	r7, #0
 8007d84:	d143      	bne.n	8007e0e <_malloc_r+0xd6>
 8007d86:	2c00      	cmp	r4, #0
 8007d88:	d04b      	beq.n	8007e22 <_malloc_r+0xea>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	4630      	mov	r0, r6
 8007d90:	eb04 0903 	add.w	r9, r4, r3
 8007d94:	f000 fdcc 	bl	8008930 <_sbrk_r>
 8007d98:	4581      	cmp	r9, r0
 8007d9a:	d142      	bne.n	8007e22 <_malloc_r+0xea>
 8007d9c:	6821      	ldr	r1, [r4, #0]
 8007d9e:	1a6d      	subs	r5, r5, r1
 8007da0:	4629      	mov	r1, r5
 8007da2:	4630      	mov	r0, r6
 8007da4:	f7ff ffa6 	bl	8007cf4 <sbrk_aligned>
 8007da8:	3001      	adds	r0, #1
 8007daa:	d03a      	beq.n	8007e22 <_malloc_r+0xea>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	442b      	add	r3, r5
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	f8d8 3000 	ldr.w	r3, [r8]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	bb62      	cbnz	r2, 8007e14 <_malloc_r+0xdc>
 8007dba:	f8c8 7000 	str.w	r7, [r8]
 8007dbe:	e00f      	b.n	8007de0 <_malloc_r+0xa8>
 8007dc0:	6822      	ldr	r2, [r4, #0]
 8007dc2:	1b52      	subs	r2, r2, r5
 8007dc4:	d420      	bmi.n	8007e08 <_malloc_r+0xd0>
 8007dc6:	2a0b      	cmp	r2, #11
 8007dc8:	d917      	bls.n	8007dfa <_malloc_r+0xc2>
 8007dca:	1961      	adds	r1, r4, r5
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	6025      	str	r5, [r4, #0]
 8007dd0:	bf18      	it	ne
 8007dd2:	6059      	strne	r1, [r3, #4]
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	bf08      	it	eq
 8007dd8:	f8c8 1000 	streq.w	r1, [r8]
 8007ddc:	5162      	str	r2, [r4, r5]
 8007dde:	604b      	str	r3, [r1, #4]
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 f82f 	bl	8007e44 <__malloc_unlock>
 8007de6:	f104 000b 	add.w	r0, r4, #11
 8007dea:	1d23      	adds	r3, r4, #4
 8007dec:	f020 0007 	bic.w	r0, r0, #7
 8007df0:	1ac2      	subs	r2, r0, r3
 8007df2:	bf1c      	itt	ne
 8007df4:	1a1b      	subne	r3, r3, r0
 8007df6:	50a3      	strne	r3, [r4, r2]
 8007df8:	e7af      	b.n	8007d5a <_malloc_r+0x22>
 8007dfa:	6862      	ldr	r2, [r4, #4]
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	bf0c      	ite	eq
 8007e00:	f8c8 2000 	streq.w	r2, [r8]
 8007e04:	605a      	strne	r2, [r3, #4]
 8007e06:	e7eb      	b.n	8007de0 <_malloc_r+0xa8>
 8007e08:	4623      	mov	r3, r4
 8007e0a:	6864      	ldr	r4, [r4, #4]
 8007e0c:	e7ae      	b.n	8007d6c <_malloc_r+0x34>
 8007e0e:	463c      	mov	r4, r7
 8007e10:	687f      	ldr	r7, [r7, #4]
 8007e12:	e7b6      	b.n	8007d82 <_malloc_r+0x4a>
 8007e14:	461a      	mov	r2, r3
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	d1fb      	bne.n	8007e14 <_malloc_r+0xdc>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	6053      	str	r3, [r2, #4]
 8007e20:	e7de      	b.n	8007de0 <_malloc_r+0xa8>
 8007e22:	230c      	movs	r3, #12
 8007e24:	6033      	str	r3, [r6, #0]
 8007e26:	4630      	mov	r0, r6
 8007e28:	f000 f80c 	bl	8007e44 <__malloc_unlock>
 8007e2c:	e794      	b.n	8007d58 <_malloc_r+0x20>
 8007e2e:	6005      	str	r5, [r0, #0]
 8007e30:	e7d6      	b.n	8007de0 <_malloc_r+0xa8>
 8007e32:	bf00      	nop
 8007e34:	20005f70 	.word	0x20005f70

08007e38 <__malloc_lock>:
 8007e38:	4801      	ldr	r0, [pc, #4]	@ (8007e40 <__malloc_lock+0x8>)
 8007e3a:	f7ff bf00 	b.w	8007c3e <__retarget_lock_acquire_recursive>
 8007e3e:	bf00      	nop
 8007e40:	20005f68 	.word	0x20005f68

08007e44 <__malloc_unlock>:
 8007e44:	4801      	ldr	r0, [pc, #4]	@ (8007e4c <__malloc_unlock+0x8>)
 8007e46:	f7ff befb 	b.w	8007c40 <__retarget_lock_release_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	20005f68 	.word	0x20005f68

08007e50 <__ssputs_r>:
 8007e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	688e      	ldr	r6, [r1, #8]
 8007e56:	461f      	mov	r7, r3
 8007e58:	42be      	cmp	r6, r7
 8007e5a:	680b      	ldr	r3, [r1, #0]
 8007e5c:	4682      	mov	sl, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	4690      	mov	r8, r2
 8007e62:	d82d      	bhi.n	8007ec0 <__ssputs_r+0x70>
 8007e64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e6c:	d026      	beq.n	8007ebc <__ssputs_r+0x6c>
 8007e6e:	6965      	ldr	r5, [r4, #20]
 8007e70:	6909      	ldr	r1, [r1, #16]
 8007e72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e76:	eba3 0901 	sub.w	r9, r3, r1
 8007e7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e7e:	1c7b      	adds	r3, r7, #1
 8007e80:	444b      	add	r3, r9
 8007e82:	106d      	asrs	r5, r5, #1
 8007e84:	429d      	cmp	r5, r3
 8007e86:	bf38      	it	cc
 8007e88:	461d      	movcc	r5, r3
 8007e8a:	0553      	lsls	r3, r2, #21
 8007e8c:	d527      	bpl.n	8007ede <__ssputs_r+0x8e>
 8007e8e:	4629      	mov	r1, r5
 8007e90:	f7ff ff52 	bl	8007d38 <_malloc_r>
 8007e94:	4606      	mov	r6, r0
 8007e96:	b360      	cbz	r0, 8007ef2 <__ssputs_r+0xa2>
 8007e98:	6921      	ldr	r1, [r4, #16]
 8007e9a:	464a      	mov	r2, r9
 8007e9c:	f7ff fed1 	bl	8007c42 <memcpy>
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eaa:	81a3      	strh	r3, [r4, #12]
 8007eac:	6126      	str	r6, [r4, #16]
 8007eae:	6165      	str	r5, [r4, #20]
 8007eb0:	444e      	add	r6, r9
 8007eb2:	eba5 0509 	sub.w	r5, r5, r9
 8007eb6:	6026      	str	r6, [r4, #0]
 8007eb8:	60a5      	str	r5, [r4, #8]
 8007eba:	463e      	mov	r6, r7
 8007ebc:	42be      	cmp	r6, r7
 8007ebe:	d900      	bls.n	8007ec2 <__ssputs_r+0x72>
 8007ec0:	463e      	mov	r6, r7
 8007ec2:	6820      	ldr	r0, [r4, #0]
 8007ec4:	4632      	mov	r2, r6
 8007ec6:	4641      	mov	r1, r8
 8007ec8:	f000 fcf6 	bl	80088b8 <memmove>
 8007ecc:	68a3      	ldr	r3, [r4, #8]
 8007ece:	1b9b      	subs	r3, r3, r6
 8007ed0:	60a3      	str	r3, [r4, #8]
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	4433      	add	r3, r6
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	2000      	movs	r0, #0
 8007eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ede:	462a      	mov	r2, r5
 8007ee0:	f000 fd36 	bl	8008950 <_realloc_r>
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d1e0      	bne.n	8007eac <__ssputs_r+0x5c>
 8007eea:	6921      	ldr	r1, [r4, #16]
 8007eec:	4650      	mov	r0, sl
 8007eee:	f7ff feb7 	bl	8007c60 <_free_r>
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	f8ca 3000 	str.w	r3, [sl]
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007efe:	81a3      	strh	r3, [r4, #12]
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	e7e9      	b.n	8007eda <__ssputs_r+0x8a>
	...

08007f08 <_svfiprintf_r>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	4698      	mov	r8, r3
 8007f0e:	898b      	ldrh	r3, [r1, #12]
 8007f10:	061b      	lsls	r3, r3, #24
 8007f12:	b09d      	sub	sp, #116	@ 0x74
 8007f14:	4607      	mov	r7, r0
 8007f16:	460d      	mov	r5, r1
 8007f18:	4614      	mov	r4, r2
 8007f1a:	d510      	bpl.n	8007f3e <_svfiprintf_r+0x36>
 8007f1c:	690b      	ldr	r3, [r1, #16]
 8007f1e:	b973      	cbnz	r3, 8007f3e <_svfiprintf_r+0x36>
 8007f20:	2140      	movs	r1, #64	@ 0x40
 8007f22:	f7ff ff09 	bl	8007d38 <_malloc_r>
 8007f26:	6028      	str	r0, [r5, #0]
 8007f28:	6128      	str	r0, [r5, #16]
 8007f2a:	b930      	cbnz	r0, 8007f3a <_svfiprintf_r+0x32>
 8007f2c:	230c      	movs	r3, #12
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	b01d      	add	sp, #116	@ 0x74
 8007f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3a:	2340      	movs	r3, #64	@ 0x40
 8007f3c:	616b      	str	r3, [r5, #20]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f42:	2320      	movs	r3, #32
 8007f44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f48:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f4c:	2330      	movs	r3, #48	@ 0x30
 8007f4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80080ec <_svfiprintf_r+0x1e4>
 8007f52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f56:	f04f 0901 	mov.w	r9, #1
 8007f5a:	4623      	mov	r3, r4
 8007f5c:	469a      	mov	sl, r3
 8007f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f62:	b10a      	cbz	r2, 8007f68 <_svfiprintf_r+0x60>
 8007f64:	2a25      	cmp	r2, #37	@ 0x25
 8007f66:	d1f9      	bne.n	8007f5c <_svfiprintf_r+0x54>
 8007f68:	ebba 0b04 	subs.w	fp, sl, r4
 8007f6c:	d00b      	beq.n	8007f86 <_svfiprintf_r+0x7e>
 8007f6e:	465b      	mov	r3, fp
 8007f70:	4622      	mov	r2, r4
 8007f72:	4629      	mov	r1, r5
 8007f74:	4638      	mov	r0, r7
 8007f76:	f7ff ff6b 	bl	8007e50 <__ssputs_r>
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	f000 80a7 	beq.w	80080ce <_svfiprintf_r+0x1c6>
 8007f80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f82:	445a      	add	r2, fp
 8007f84:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f86:	f89a 3000 	ldrb.w	r3, [sl]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 809f 	beq.w	80080ce <_svfiprintf_r+0x1c6>
 8007f90:	2300      	movs	r3, #0
 8007f92:	f04f 32ff 	mov.w	r2, #4294967295
 8007f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f9a:	f10a 0a01 	add.w	sl, sl, #1
 8007f9e:	9304      	str	r3, [sp, #16]
 8007fa0:	9307      	str	r3, [sp, #28]
 8007fa2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fa6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fa8:	4654      	mov	r4, sl
 8007faa:	2205      	movs	r2, #5
 8007fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb0:	484e      	ldr	r0, [pc, #312]	@ (80080ec <_svfiprintf_r+0x1e4>)
 8007fb2:	f7f8 f915 	bl	80001e0 <memchr>
 8007fb6:	9a04      	ldr	r2, [sp, #16]
 8007fb8:	b9d8      	cbnz	r0, 8007ff2 <_svfiprintf_r+0xea>
 8007fba:	06d0      	lsls	r0, r2, #27
 8007fbc:	bf44      	itt	mi
 8007fbe:	2320      	movmi	r3, #32
 8007fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fc4:	0711      	lsls	r1, r2, #28
 8007fc6:	bf44      	itt	mi
 8007fc8:	232b      	movmi	r3, #43	@ 0x2b
 8007fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fce:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fd4:	d015      	beq.n	8008002 <_svfiprintf_r+0xfa>
 8007fd6:	9a07      	ldr	r2, [sp, #28]
 8007fd8:	4654      	mov	r4, sl
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f04f 0c0a 	mov.w	ip, #10
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fe6:	3b30      	subs	r3, #48	@ 0x30
 8007fe8:	2b09      	cmp	r3, #9
 8007fea:	d94b      	bls.n	8008084 <_svfiprintf_r+0x17c>
 8007fec:	b1b0      	cbz	r0, 800801c <_svfiprintf_r+0x114>
 8007fee:	9207      	str	r2, [sp, #28]
 8007ff0:	e014      	b.n	800801c <_svfiprintf_r+0x114>
 8007ff2:	eba0 0308 	sub.w	r3, r0, r8
 8007ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	46a2      	mov	sl, r4
 8008000:	e7d2      	b.n	8007fa8 <_svfiprintf_r+0xa0>
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	1d19      	adds	r1, r3, #4
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	9103      	str	r1, [sp, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	bfbb      	ittet	lt
 800800e:	425b      	neglt	r3, r3
 8008010:	f042 0202 	orrlt.w	r2, r2, #2
 8008014:	9307      	strge	r3, [sp, #28]
 8008016:	9307      	strlt	r3, [sp, #28]
 8008018:	bfb8      	it	lt
 800801a:	9204      	strlt	r2, [sp, #16]
 800801c:	7823      	ldrb	r3, [r4, #0]
 800801e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008020:	d10a      	bne.n	8008038 <_svfiprintf_r+0x130>
 8008022:	7863      	ldrb	r3, [r4, #1]
 8008024:	2b2a      	cmp	r3, #42	@ 0x2a
 8008026:	d132      	bne.n	800808e <_svfiprintf_r+0x186>
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	1d1a      	adds	r2, r3, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	9203      	str	r2, [sp, #12]
 8008030:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008034:	3402      	adds	r4, #2
 8008036:	9305      	str	r3, [sp, #20]
 8008038:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80080fc <_svfiprintf_r+0x1f4>
 800803c:	7821      	ldrb	r1, [r4, #0]
 800803e:	2203      	movs	r2, #3
 8008040:	4650      	mov	r0, sl
 8008042:	f7f8 f8cd 	bl	80001e0 <memchr>
 8008046:	b138      	cbz	r0, 8008058 <_svfiprintf_r+0x150>
 8008048:	9b04      	ldr	r3, [sp, #16]
 800804a:	eba0 000a 	sub.w	r0, r0, sl
 800804e:	2240      	movs	r2, #64	@ 0x40
 8008050:	4082      	lsls	r2, r0
 8008052:	4313      	orrs	r3, r2
 8008054:	3401      	adds	r4, #1
 8008056:	9304      	str	r3, [sp, #16]
 8008058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800805c:	4824      	ldr	r0, [pc, #144]	@ (80080f0 <_svfiprintf_r+0x1e8>)
 800805e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008062:	2206      	movs	r2, #6
 8008064:	f7f8 f8bc 	bl	80001e0 <memchr>
 8008068:	2800      	cmp	r0, #0
 800806a:	d036      	beq.n	80080da <_svfiprintf_r+0x1d2>
 800806c:	4b21      	ldr	r3, [pc, #132]	@ (80080f4 <_svfiprintf_r+0x1ec>)
 800806e:	bb1b      	cbnz	r3, 80080b8 <_svfiprintf_r+0x1b0>
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	3307      	adds	r3, #7
 8008074:	f023 0307 	bic.w	r3, r3, #7
 8008078:	3308      	adds	r3, #8
 800807a:	9303      	str	r3, [sp, #12]
 800807c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800807e:	4433      	add	r3, r6
 8008080:	9309      	str	r3, [sp, #36]	@ 0x24
 8008082:	e76a      	b.n	8007f5a <_svfiprintf_r+0x52>
 8008084:	fb0c 3202 	mla	r2, ip, r2, r3
 8008088:	460c      	mov	r4, r1
 800808a:	2001      	movs	r0, #1
 800808c:	e7a8      	b.n	8007fe0 <_svfiprintf_r+0xd8>
 800808e:	2300      	movs	r3, #0
 8008090:	3401      	adds	r4, #1
 8008092:	9305      	str	r3, [sp, #20]
 8008094:	4619      	mov	r1, r3
 8008096:	f04f 0c0a 	mov.w	ip, #10
 800809a:	4620      	mov	r0, r4
 800809c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080a0:	3a30      	subs	r2, #48	@ 0x30
 80080a2:	2a09      	cmp	r2, #9
 80080a4:	d903      	bls.n	80080ae <_svfiprintf_r+0x1a6>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0c6      	beq.n	8008038 <_svfiprintf_r+0x130>
 80080aa:	9105      	str	r1, [sp, #20]
 80080ac:	e7c4      	b.n	8008038 <_svfiprintf_r+0x130>
 80080ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80080b2:	4604      	mov	r4, r0
 80080b4:	2301      	movs	r3, #1
 80080b6:	e7f0      	b.n	800809a <_svfiprintf_r+0x192>
 80080b8:	ab03      	add	r3, sp, #12
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	462a      	mov	r2, r5
 80080be:	4b0e      	ldr	r3, [pc, #56]	@ (80080f8 <_svfiprintf_r+0x1f0>)
 80080c0:	a904      	add	r1, sp, #16
 80080c2:	4638      	mov	r0, r7
 80080c4:	f3af 8000 	nop.w
 80080c8:	1c42      	adds	r2, r0, #1
 80080ca:	4606      	mov	r6, r0
 80080cc:	d1d6      	bne.n	800807c <_svfiprintf_r+0x174>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	065b      	lsls	r3, r3, #25
 80080d2:	f53f af2d 	bmi.w	8007f30 <_svfiprintf_r+0x28>
 80080d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080d8:	e72c      	b.n	8007f34 <_svfiprintf_r+0x2c>
 80080da:	ab03      	add	r3, sp, #12
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	462a      	mov	r2, r5
 80080e0:	4b05      	ldr	r3, [pc, #20]	@ (80080f8 <_svfiprintf_r+0x1f0>)
 80080e2:	a904      	add	r1, sp, #16
 80080e4:	4638      	mov	r0, r7
 80080e6:	f000 f9bb 	bl	8008460 <_printf_i>
 80080ea:	e7ed      	b.n	80080c8 <_svfiprintf_r+0x1c0>
 80080ec:	08008bc0 	.word	0x08008bc0
 80080f0:	08008bca 	.word	0x08008bca
 80080f4:	00000000 	.word	0x00000000
 80080f8:	08007e51 	.word	0x08007e51
 80080fc:	08008bc6 	.word	0x08008bc6

08008100 <__sfputc_r>:
 8008100:	6893      	ldr	r3, [r2, #8]
 8008102:	3b01      	subs	r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	b410      	push	{r4}
 8008108:	6093      	str	r3, [r2, #8]
 800810a:	da08      	bge.n	800811e <__sfputc_r+0x1e>
 800810c:	6994      	ldr	r4, [r2, #24]
 800810e:	42a3      	cmp	r3, r4
 8008110:	db01      	blt.n	8008116 <__sfputc_r+0x16>
 8008112:	290a      	cmp	r1, #10
 8008114:	d103      	bne.n	800811e <__sfputc_r+0x1e>
 8008116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800811a:	f7ff bc24 	b.w	8007966 <__swbuf_r>
 800811e:	6813      	ldr	r3, [r2, #0]
 8008120:	1c58      	adds	r0, r3, #1
 8008122:	6010      	str	r0, [r2, #0]
 8008124:	7019      	strb	r1, [r3, #0]
 8008126:	4608      	mov	r0, r1
 8008128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800812c:	4770      	bx	lr

0800812e <__sfputs_r>:
 800812e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008130:	4606      	mov	r6, r0
 8008132:	460f      	mov	r7, r1
 8008134:	4614      	mov	r4, r2
 8008136:	18d5      	adds	r5, r2, r3
 8008138:	42ac      	cmp	r4, r5
 800813a:	d101      	bne.n	8008140 <__sfputs_r+0x12>
 800813c:	2000      	movs	r0, #0
 800813e:	e007      	b.n	8008150 <__sfputs_r+0x22>
 8008140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008144:	463a      	mov	r2, r7
 8008146:	4630      	mov	r0, r6
 8008148:	f7ff ffda 	bl	8008100 <__sfputc_r>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d1f3      	bne.n	8008138 <__sfputs_r+0xa>
 8008150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008154 <_vfiprintf_r>:
 8008154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008158:	460d      	mov	r5, r1
 800815a:	b09d      	sub	sp, #116	@ 0x74
 800815c:	4614      	mov	r4, r2
 800815e:	4698      	mov	r8, r3
 8008160:	4606      	mov	r6, r0
 8008162:	b118      	cbz	r0, 800816c <_vfiprintf_r+0x18>
 8008164:	6a03      	ldr	r3, [r0, #32]
 8008166:	b90b      	cbnz	r3, 800816c <_vfiprintf_r+0x18>
 8008168:	f7ff faf2 	bl	8007750 <__sinit>
 800816c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800816e:	07d9      	lsls	r1, r3, #31
 8008170:	d405      	bmi.n	800817e <_vfiprintf_r+0x2a>
 8008172:	89ab      	ldrh	r3, [r5, #12]
 8008174:	059a      	lsls	r2, r3, #22
 8008176:	d402      	bmi.n	800817e <_vfiprintf_r+0x2a>
 8008178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800817a:	f7ff fd60 	bl	8007c3e <__retarget_lock_acquire_recursive>
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	071b      	lsls	r3, r3, #28
 8008182:	d501      	bpl.n	8008188 <_vfiprintf_r+0x34>
 8008184:	692b      	ldr	r3, [r5, #16]
 8008186:	b99b      	cbnz	r3, 80081b0 <_vfiprintf_r+0x5c>
 8008188:	4629      	mov	r1, r5
 800818a:	4630      	mov	r0, r6
 800818c:	f7ff fc2a 	bl	80079e4 <__swsetup_r>
 8008190:	b170      	cbz	r0, 80081b0 <_vfiprintf_r+0x5c>
 8008192:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008194:	07dc      	lsls	r4, r3, #31
 8008196:	d504      	bpl.n	80081a2 <_vfiprintf_r+0x4e>
 8008198:	f04f 30ff 	mov.w	r0, #4294967295
 800819c:	b01d      	add	sp, #116	@ 0x74
 800819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a2:	89ab      	ldrh	r3, [r5, #12]
 80081a4:	0598      	lsls	r0, r3, #22
 80081a6:	d4f7      	bmi.n	8008198 <_vfiprintf_r+0x44>
 80081a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081aa:	f7ff fd49 	bl	8007c40 <__retarget_lock_release_recursive>
 80081ae:	e7f3      	b.n	8008198 <_vfiprintf_r+0x44>
 80081b0:	2300      	movs	r3, #0
 80081b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80081b4:	2320      	movs	r3, #32
 80081b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80081be:	2330      	movs	r3, #48	@ 0x30
 80081c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008370 <_vfiprintf_r+0x21c>
 80081c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081c8:	f04f 0901 	mov.w	r9, #1
 80081cc:	4623      	mov	r3, r4
 80081ce:	469a      	mov	sl, r3
 80081d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d4:	b10a      	cbz	r2, 80081da <_vfiprintf_r+0x86>
 80081d6:	2a25      	cmp	r2, #37	@ 0x25
 80081d8:	d1f9      	bne.n	80081ce <_vfiprintf_r+0x7a>
 80081da:	ebba 0b04 	subs.w	fp, sl, r4
 80081de:	d00b      	beq.n	80081f8 <_vfiprintf_r+0xa4>
 80081e0:	465b      	mov	r3, fp
 80081e2:	4622      	mov	r2, r4
 80081e4:	4629      	mov	r1, r5
 80081e6:	4630      	mov	r0, r6
 80081e8:	f7ff ffa1 	bl	800812e <__sfputs_r>
 80081ec:	3001      	adds	r0, #1
 80081ee:	f000 80a7 	beq.w	8008340 <_vfiprintf_r+0x1ec>
 80081f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081f4:	445a      	add	r2, fp
 80081f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80081f8:	f89a 3000 	ldrb.w	r3, [sl]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 809f 	beq.w	8008340 <_vfiprintf_r+0x1ec>
 8008202:	2300      	movs	r3, #0
 8008204:	f04f 32ff 	mov.w	r2, #4294967295
 8008208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800820c:	f10a 0a01 	add.w	sl, sl, #1
 8008210:	9304      	str	r3, [sp, #16]
 8008212:	9307      	str	r3, [sp, #28]
 8008214:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008218:	931a      	str	r3, [sp, #104]	@ 0x68
 800821a:	4654      	mov	r4, sl
 800821c:	2205      	movs	r2, #5
 800821e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008222:	4853      	ldr	r0, [pc, #332]	@ (8008370 <_vfiprintf_r+0x21c>)
 8008224:	f7f7 ffdc 	bl	80001e0 <memchr>
 8008228:	9a04      	ldr	r2, [sp, #16]
 800822a:	b9d8      	cbnz	r0, 8008264 <_vfiprintf_r+0x110>
 800822c:	06d1      	lsls	r1, r2, #27
 800822e:	bf44      	itt	mi
 8008230:	2320      	movmi	r3, #32
 8008232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008236:	0713      	lsls	r3, r2, #28
 8008238:	bf44      	itt	mi
 800823a:	232b      	movmi	r3, #43	@ 0x2b
 800823c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008240:	f89a 3000 	ldrb.w	r3, [sl]
 8008244:	2b2a      	cmp	r3, #42	@ 0x2a
 8008246:	d015      	beq.n	8008274 <_vfiprintf_r+0x120>
 8008248:	9a07      	ldr	r2, [sp, #28]
 800824a:	4654      	mov	r4, sl
 800824c:	2000      	movs	r0, #0
 800824e:	f04f 0c0a 	mov.w	ip, #10
 8008252:	4621      	mov	r1, r4
 8008254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008258:	3b30      	subs	r3, #48	@ 0x30
 800825a:	2b09      	cmp	r3, #9
 800825c:	d94b      	bls.n	80082f6 <_vfiprintf_r+0x1a2>
 800825e:	b1b0      	cbz	r0, 800828e <_vfiprintf_r+0x13a>
 8008260:	9207      	str	r2, [sp, #28]
 8008262:	e014      	b.n	800828e <_vfiprintf_r+0x13a>
 8008264:	eba0 0308 	sub.w	r3, r0, r8
 8008268:	fa09 f303 	lsl.w	r3, r9, r3
 800826c:	4313      	orrs	r3, r2
 800826e:	9304      	str	r3, [sp, #16]
 8008270:	46a2      	mov	sl, r4
 8008272:	e7d2      	b.n	800821a <_vfiprintf_r+0xc6>
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	1d19      	adds	r1, r3, #4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	9103      	str	r1, [sp, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	bfbb      	ittet	lt
 8008280:	425b      	neglt	r3, r3
 8008282:	f042 0202 	orrlt.w	r2, r2, #2
 8008286:	9307      	strge	r3, [sp, #28]
 8008288:	9307      	strlt	r3, [sp, #28]
 800828a:	bfb8      	it	lt
 800828c:	9204      	strlt	r2, [sp, #16]
 800828e:	7823      	ldrb	r3, [r4, #0]
 8008290:	2b2e      	cmp	r3, #46	@ 0x2e
 8008292:	d10a      	bne.n	80082aa <_vfiprintf_r+0x156>
 8008294:	7863      	ldrb	r3, [r4, #1]
 8008296:	2b2a      	cmp	r3, #42	@ 0x2a
 8008298:	d132      	bne.n	8008300 <_vfiprintf_r+0x1ac>
 800829a:	9b03      	ldr	r3, [sp, #12]
 800829c:	1d1a      	adds	r2, r3, #4
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	9203      	str	r2, [sp, #12]
 80082a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082a6:	3402      	adds	r4, #2
 80082a8:	9305      	str	r3, [sp, #20]
 80082aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008380 <_vfiprintf_r+0x22c>
 80082ae:	7821      	ldrb	r1, [r4, #0]
 80082b0:	2203      	movs	r2, #3
 80082b2:	4650      	mov	r0, sl
 80082b4:	f7f7 ff94 	bl	80001e0 <memchr>
 80082b8:	b138      	cbz	r0, 80082ca <_vfiprintf_r+0x176>
 80082ba:	9b04      	ldr	r3, [sp, #16]
 80082bc:	eba0 000a 	sub.w	r0, r0, sl
 80082c0:	2240      	movs	r2, #64	@ 0x40
 80082c2:	4082      	lsls	r2, r0
 80082c4:	4313      	orrs	r3, r2
 80082c6:	3401      	adds	r4, #1
 80082c8:	9304      	str	r3, [sp, #16]
 80082ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ce:	4829      	ldr	r0, [pc, #164]	@ (8008374 <_vfiprintf_r+0x220>)
 80082d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082d4:	2206      	movs	r2, #6
 80082d6:	f7f7 ff83 	bl	80001e0 <memchr>
 80082da:	2800      	cmp	r0, #0
 80082dc:	d03f      	beq.n	800835e <_vfiprintf_r+0x20a>
 80082de:	4b26      	ldr	r3, [pc, #152]	@ (8008378 <_vfiprintf_r+0x224>)
 80082e0:	bb1b      	cbnz	r3, 800832a <_vfiprintf_r+0x1d6>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	3307      	adds	r3, #7
 80082e6:	f023 0307 	bic.w	r3, r3, #7
 80082ea:	3308      	adds	r3, #8
 80082ec:	9303      	str	r3, [sp, #12]
 80082ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f0:	443b      	add	r3, r7
 80082f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80082f4:	e76a      	b.n	80081cc <_vfiprintf_r+0x78>
 80082f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80082fa:	460c      	mov	r4, r1
 80082fc:	2001      	movs	r0, #1
 80082fe:	e7a8      	b.n	8008252 <_vfiprintf_r+0xfe>
 8008300:	2300      	movs	r3, #0
 8008302:	3401      	adds	r4, #1
 8008304:	9305      	str	r3, [sp, #20]
 8008306:	4619      	mov	r1, r3
 8008308:	f04f 0c0a 	mov.w	ip, #10
 800830c:	4620      	mov	r0, r4
 800830e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008312:	3a30      	subs	r2, #48	@ 0x30
 8008314:	2a09      	cmp	r2, #9
 8008316:	d903      	bls.n	8008320 <_vfiprintf_r+0x1cc>
 8008318:	2b00      	cmp	r3, #0
 800831a:	d0c6      	beq.n	80082aa <_vfiprintf_r+0x156>
 800831c:	9105      	str	r1, [sp, #20]
 800831e:	e7c4      	b.n	80082aa <_vfiprintf_r+0x156>
 8008320:	fb0c 2101 	mla	r1, ip, r1, r2
 8008324:	4604      	mov	r4, r0
 8008326:	2301      	movs	r3, #1
 8008328:	e7f0      	b.n	800830c <_vfiprintf_r+0x1b8>
 800832a:	ab03      	add	r3, sp, #12
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	462a      	mov	r2, r5
 8008330:	4b12      	ldr	r3, [pc, #72]	@ (800837c <_vfiprintf_r+0x228>)
 8008332:	a904      	add	r1, sp, #16
 8008334:	4630      	mov	r0, r6
 8008336:	f3af 8000 	nop.w
 800833a:	4607      	mov	r7, r0
 800833c:	1c78      	adds	r0, r7, #1
 800833e:	d1d6      	bne.n	80082ee <_vfiprintf_r+0x19a>
 8008340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008342:	07d9      	lsls	r1, r3, #31
 8008344:	d405      	bmi.n	8008352 <_vfiprintf_r+0x1fe>
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	059a      	lsls	r2, r3, #22
 800834a:	d402      	bmi.n	8008352 <_vfiprintf_r+0x1fe>
 800834c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800834e:	f7ff fc77 	bl	8007c40 <__retarget_lock_release_recursive>
 8008352:	89ab      	ldrh	r3, [r5, #12]
 8008354:	065b      	lsls	r3, r3, #25
 8008356:	f53f af1f 	bmi.w	8008198 <_vfiprintf_r+0x44>
 800835a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800835c:	e71e      	b.n	800819c <_vfiprintf_r+0x48>
 800835e:	ab03      	add	r3, sp, #12
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	462a      	mov	r2, r5
 8008364:	4b05      	ldr	r3, [pc, #20]	@ (800837c <_vfiprintf_r+0x228>)
 8008366:	a904      	add	r1, sp, #16
 8008368:	4630      	mov	r0, r6
 800836a:	f000 f879 	bl	8008460 <_printf_i>
 800836e:	e7e4      	b.n	800833a <_vfiprintf_r+0x1e6>
 8008370:	08008bc0 	.word	0x08008bc0
 8008374:	08008bca 	.word	0x08008bca
 8008378:	00000000 	.word	0x00000000
 800837c:	0800812f 	.word	0x0800812f
 8008380:	08008bc6 	.word	0x08008bc6

08008384 <_printf_common>:
 8008384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	4616      	mov	r6, r2
 800838a:	4698      	mov	r8, r3
 800838c:	688a      	ldr	r2, [r1, #8]
 800838e:	690b      	ldr	r3, [r1, #16]
 8008390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008394:	4293      	cmp	r3, r2
 8008396:	bfb8      	it	lt
 8008398:	4613      	movlt	r3, r2
 800839a:	6033      	str	r3, [r6, #0]
 800839c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083a0:	4607      	mov	r7, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	b10a      	cbz	r2, 80083aa <_printf_common+0x26>
 80083a6:	3301      	adds	r3, #1
 80083a8:	6033      	str	r3, [r6, #0]
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	0699      	lsls	r1, r3, #26
 80083ae:	bf42      	ittt	mi
 80083b0:	6833      	ldrmi	r3, [r6, #0]
 80083b2:	3302      	addmi	r3, #2
 80083b4:	6033      	strmi	r3, [r6, #0]
 80083b6:	6825      	ldr	r5, [r4, #0]
 80083b8:	f015 0506 	ands.w	r5, r5, #6
 80083bc:	d106      	bne.n	80083cc <_printf_common+0x48>
 80083be:	f104 0a19 	add.w	sl, r4, #25
 80083c2:	68e3      	ldr	r3, [r4, #12]
 80083c4:	6832      	ldr	r2, [r6, #0]
 80083c6:	1a9b      	subs	r3, r3, r2
 80083c8:	42ab      	cmp	r3, r5
 80083ca:	dc26      	bgt.n	800841a <_printf_common+0x96>
 80083cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083d0:	6822      	ldr	r2, [r4, #0]
 80083d2:	3b00      	subs	r3, #0
 80083d4:	bf18      	it	ne
 80083d6:	2301      	movne	r3, #1
 80083d8:	0692      	lsls	r2, r2, #26
 80083da:	d42b      	bmi.n	8008434 <_printf_common+0xb0>
 80083dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083e0:	4641      	mov	r1, r8
 80083e2:	4638      	mov	r0, r7
 80083e4:	47c8      	blx	r9
 80083e6:	3001      	adds	r0, #1
 80083e8:	d01e      	beq.n	8008428 <_printf_common+0xa4>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	6922      	ldr	r2, [r4, #16]
 80083ee:	f003 0306 	and.w	r3, r3, #6
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	bf02      	ittt	eq
 80083f6:	68e5      	ldreq	r5, [r4, #12]
 80083f8:	6833      	ldreq	r3, [r6, #0]
 80083fa:	1aed      	subeq	r5, r5, r3
 80083fc:	68a3      	ldr	r3, [r4, #8]
 80083fe:	bf0c      	ite	eq
 8008400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008404:	2500      	movne	r5, #0
 8008406:	4293      	cmp	r3, r2
 8008408:	bfc4      	itt	gt
 800840a:	1a9b      	subgt	r3, r3, r2
 800840c:	18ed      	addgt	r5, r5, r3
 800840e:	2600      	movs	r6, #0
 8008410:	341a      	adds	r4, #26
 8008412:	42b5      	cmp	r5, r6
 8008414:	d11a      	bne.n	800844c <_printf_common+0xc8>
 8008416:	2000      	movs	r0, #0
 8008418:	e008      	b.n	800842c <_printf_common+0xa8>
 800841a:	2301      	movs	r3, #1
 800841c:	4652      	mov	r2, sl
 800841e:	4641      	mov	r1, r8
 8008420:	4638      	mov	r0, r7
 8008422:	47c8      	blx	r9
 8008424:	3001      	adds	r0, #1
 8008426:	d103      	bne.n	8008430 <_printf_common+0xac>
 8008428:	f04f 30ff 	mov.w	r0, #4294967295
 800842c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008430:	3501      	adds	r5, #1
 8008432:	e7c6      	b.n	80083c2 <_printf_common+0x3e>
 8008434:	18e1      	adds	r1, r4, r3
 8008436:	1c5a      	adds	r2, r3, #1
 8008438:	2030      	movs	r0, #48	@ 0x30
 800843a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800843e:	4422      	add	r2, r4
 8008440:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008444:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008448:	3302      	adds	r3, #2
 800844a:	e7c7      	b.n	80083dc <_printf_common+0x58>
 800844c:	2301      	movs	r3, #1
 800844e:	4622      	mov	r2, r4
 8008450:	4641      	mov	r1, r8
 8008452:	4638      	mov	r0, r7
 8008454:	47c8      	blx	r9
 8008456:	3001      	adds	r0, #1
 8008458:	d0e6      	beq.n	8008428 <_printf_common+0xa4>
 800845a:	3601      	adds	r6, #1
 800845c:	e7d9      	b.n	8008412 <_printf_common+0x8e>
	...

08008460 <_printf_i>:
 8008460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008464:	7e0f      	ldrb	r7, [r1, #24]
 8008466:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008468:	2f78      	cmp	r7, #120	@ 0x78
 800846a:	4691      	mov	r9, r2
 800846c:	4680      	mov	r8, r0
 800846e:	460c      	mov	r4, r1
 8008470:	469a      	mov	sl, r3
 8008472:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008476:	d807      	bhi.n	8008488 <_printf_i+0x28>
 8008478:	2f62      	cmp	r7, #98	@ 0x62
 800847a:	d80a      	bhi.n	8008492 <_printf_i+0x32>
 800847c:	2f00      	cmp	r7, #0
 800847e:	f000 80d1 	beq.w	8008624 <_printf_i+0x1c4>
 8008482:	2f58      	cmp	r7, #88	@ 0x58
 8008484:	f000 80b8 	beq.w	80085f8 <_printf_i+0x198>
 8008488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800848c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008490:	e03a      	b.n	8008508 <_printf_i+0xa8>
 8008492:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008496:	2b15      	cmp	r3, #21
 8008498:	d8f6      	bhi.n	8008488 <_printf_i+0x28>
 800849a:	a101      	add	r1, pc, #4	@ (adr r1, 80084a0 <_printf_i+0x40>)
 800849c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084a0:	080084f9 	.word	0x080084f9
 80084a4:	0800850d 	.word	0x0800850d
 80084a8:	08008489 	.word	0x08008489
 80084ac:	08008489 	.word	0x08008489
 80084b0:	08008489 	.word	0x08008489
 80084b4:	08008489 	.word	0x08008489
 80084b8:	0800850d 	.word	0x0800850d
 80084bc:	08008489 	.word	0x08008489
 80084c0:	08008489 	.word	0x08008489
 80084c4:	08008489 	.word	0x08008489
 80084c8:	08008489 	.word	0x08008489
 80084cc:	0800860b 	.word	0x0800860b
 80084d0:	08008537 	.word	0x08008537
 80084d4:	080085c5 	.word	0x080085c5
 80084d8:	08008489 	.word	0x08008489
 80084dc:	08008489 	.word	0x08008489
 80084e0:	0800862d 	.word	0x0800862d
 80084e4:	08008489 	.word	0x08008489
 80084e8:	08008537 	.word	0x08008537
 80084ec:	08008489 	.word	0x08008489
 80084f0:	08008489 	.word	0x08008489
 80084f4:	080085cd 	.word	0x080085cd
 80084f8:	6833      	ldr	r3, [r6, #0]
 80084fa:	1d1a      	adds	r2, r3, #4
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	6032      	str	r2, [r6, #0]
 8008500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008504:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008508:	2301      	movs	r3, #1
 800850a:	e09c      	b.n	8008646 <_printf_i+0x1e6>
 800850c:	6833      	ldr	r3, [r6, #0]
 800850e:	6820      	ldr	r0, [r4, #0]
 8008510:	1d19      	adds	r1, r3, #4
 8008512:	6031      	str	r1, [r6, #0]
 8008514:	0606      	lsls	r6, r0, #24
 8008516:	d501      	bpl.n	800851c <_printf_i+0xbc>
 8008518:	681d      	ldr	r5, [r3, #0]
 800851a:	e003      	b.n	8008524 <_printf_i+0xc4>
 800851c:	0645      	lsls	r5, r0, #25
 800851e:	d5fb      	bpl.n	8008518 <_printf_i+0xb8>
 8008520:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008524:	2d00      	cmp	r5, #0
 8008526:	da03      	bge.n	8008530 <_printf_i+0xd0>
 8008528:	232d      	movs	r3, #45	@ 0x2d
 800852a:	426d      	negs	r5, r5
 800852c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008530:	4858      	ldr	r0, [pc, #352]	@ (8008694 <_printf_i+0x234>)
 8008532:	230a      	movs	r3, #10
 8008534:	e011      	b.n	800855a <_printf_i+0xfa>
 8008536:	6821      	ldr	r1, [r4, #0]
 8008538:	6833      	ldr	r3, [r6, #0]
 800853a:	0608      	lsls	r0, r1, #24
 800853c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008540:	d402      	bmi.n	8008548 <_printf_i+0xe8>
 8008542:	0649      	lsls	r1, r1, #25
 8008544:	bf48      	it	mi
 8008546:	b2ad      	uxthmi	r5, r5
 8008548:	2f6f      	cmp	r7, #111	@ 0x6f
 800854a:	4852      	ldr	r0, [pc, #328]	@ (8008694 <_printf_i+0x234>)
 800854c:	6033      	str	r3, [r6, #0]
 800854e:	bf14      	ite	ne
 8008550:	230a      	movne	r3, #10
 8008552:	2308      	moveq	r3, #8
 8008554:	2100      	movs	r1, #0
 8008556:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800855a:	6866      	ldr	r6, [r4, #4]
 800855c:	60a6      	str	r6, [r4, #8]
 800855e:	2e00      	cmp	r6, #0
 8008560:	db05      	blt.n	800856e <_printf_i+0x10e>
 8008562:	6821      	ldr	r1, [r4, #0]
 8008564:	432e      	orrs	r6, r5
 8008566:	f021 0104 	bic.w	r1, r1, #4
 800856a:	6021      	str	r1, [r4, #0]
 800856c:	d04b      	beq.n	8008606 <_printf_i+0x1a6>
 800856e:	4616      	mov	r6, r2
 8008570:	fbb5 f1f3 	udiv	r1, r5, r3
 8008574:	fb03 5711 	mls	r7, r3, r1, r5
 8008578:	5dc7      	ldrb	r7, [r0, r7]
 800857a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800857e:	462f      	mov	r7, r5
 8008580:	42bb      	cmp	r3, r7
 8008582:	460d      	mov	r5, r1
 8008584:	d9f4      	bls.n	8008570 <_printf_i+0x110>
 8008586:	2b08      	cmp	r3, #8
 8008588:	d10b      	bne.n	80085a2 <_printf_i+0x142>
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	07df      	lsls	r7, r3, #31
 800858e:	d508      	bpl.n	80085a2 <_printf_i+0x142>
 8008590:	6923      	ldr	r3, [r4, #16]
 8008592:	6861      	ldr	r1, [r4, #4]
 8008594:	4299      	cmp	r1, r3
 8008596:	bfde      	ittt	le
 8008598:	2330      	movle	r3, #48	@ 0x30
 800859a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800859e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085a2:	1b92      	subs	r2, r2, r6
 80085a4:	6122      	str	r2, [r4, #16]
 80085a6:	f8cd a000 	str.w	sl, [sp]
 80085aa:	464b      	mov	r3, r9
 80085ac:	aa03      	add	r2, sp, #12
 80085ae:	4621      	mov	r1, r4
 80085b0:	4640      	mov	r0, r8
 80085b2:	f7ff fee7 	bl	8008384 <_printf_common>
 80085b6:	3001      	adds	r0, #1
 80085b8:	d14a      	bne.n	8008650 <_printf_i+0x1f0>
 80085ba:	f04f 30ff 	mov.w	r0, #4294967295
 80085be:	b004      	add	sp, #16
 80085c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	f043 0320 	orr.w	r3, r3, #32
 80085ca:	6023      	str	r3, [r4, #0]
 80085cc:	4832      	ldr	r0, [pc, #200]	@ (8008698 <_printf_i+0x238>)
 80085ce:	2778      	movs	r7, #120	@ 0x78
 80085d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	6831      	ldr	r1, [r6, #0]
 80085d8:	061f      	lsls	r7, r3, #24
 80085da:	f851 5b04 	ldr.w	r5, [r1], #4
 80085de:	d402      	bmi.n	80085e6 <_printf_i+0x186>
 80085e0:	065f      	lsls	r7, r3, #25
 80085e2:	bf48      	it	mi
 80085e4:	b2ad      	uxthmi	r5, r5
 80085e6:	6031      	str	r1, [r6, #0]
 80085e8:	07d9      	lsls	r1, r3, #31
 80085ea:	bf44      	itt	mi
 80085ec:	f043 0320 	orrmi.w	r3, r3, #32
 80085f0:	6023      	strmi	r3, [r4, #0]
 80085f2:	b11d      	cbz	r5, 80085fc <_printf_i+0x19c>
 80085f4:	2310      	movs	r3, #16
 80085f6:	e7ad      	b.n	8008554 <_printf_i+0xf4>
 80085f8:	4826      	ldr	r0, [pc, #152]	@ (8008694 <_printf_i+0x234>)
 80085fa:	e7e9      	b.n	80085d0 <_printf_i+0x170>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	f023 0320 	bic.w	r3, r3, #32
 8008602:	6023      	str	r3, [r4, #0]
 8008604:	e7f6      	b.n	80085f4 <_printf_i+0x194>
 8008606:	4616      	mov	r6, r2
 8008608:	e7bd      	b.n	8008586 <_printf_i+0x126>
 800860a:	6833      	ldr	r3, [r6, #0]
 800860c:	6825      	ldr	r5, [r4, #0]
 800860e:	6961      	ldr	r1, [r4, #20]
 8008610:	1d18      	adds	r0, r3, #4
 8008612:	6030      	str	r0, [r6, #0]
 8008614:	062e      	lsls	r6, r5, #24
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	d501      	bpl.n	800861e <_printf_i+0x1be>
 800861a:	6019      	str	r1, [r3, #0]
 800861c:	e002      	b.n	8008624 <_printf_i+0x1c4>
 800861e:	0668      	lsls	r0, r5, #25
 8008620:	d5fb      	bpl.n	800861a <_printf_i+0x1ba>
 8008622:	8019      	strh	r1, [r3, #0]
 8008624:	2300      	movs	r3, #0
 8008626:	6123      	str	r3, [r4, #16]
 8008628:	4616      	mov	r6, r2
 800862a:	e7bc      	b.n	80085a6 <_printf_i+0x146>
 800862c:	6833      	ldr	r3, [r6, #0]
 800862e:	1d1a      	adds	r2, r3, #4
 8008630:	6032      	str	r2, [r6, #0]
 8008632:	681e      	ldr	r6, [r3, #0]
 8008634:	6862      	ldr	r2, [r4, #4]
 8008636:	2100      	movs	r1, #0
 8008638:	4630      	mov	r0, r6
 800863a:	f7f7 fdd1 	bl	80001e0 <memchr>
 800863e:	b108      	cbz	r0, 8008644 <_printf_i+0x1e4>
 8008640:	1b80      	subs	r0, r0, r6
 8008642:	6060      	str	r0, [r4, #4]
 8008644:	6863      	ldr	r3, [r4, #4]
 8008646:	6123      	str	r3, [r4, #16]
 8008648:	2300      	movs	r3, #0
 800864a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800864e:	e7aa      	b.n	80085a6 <_printf_i+0x146>
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	4632      	mov	r2, r6
 8008654:	4649      	mov	r1, r9
 8008656:	4640      	mov	r0, r8
 8008658:	47d0      	blx	sl
 800865a:	3001      	adds	r0, #1
 800865c:	d0ad      	beq.n	80085ba <_printf_i+0x15a>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	079b      	lsls	r3, r3, #30
 8008662:	d413      	bmi.n	800868c <_printf_i+0x22c>
 8008664:	68e0      	ldr	r0, [r4, #12]
 8008666:	9b03      	ldr	r3, [sp, #12]
 8008668:	4298      	cmp	r0, r3
 800866a:	bfb8      	it	lt
 800866c:	4618      	movlt	r0, r3
 800866e:	e7a6      	b.n	80085be <_printf_i+0x15e>
 8008670:	2301      	movs	r3, #1
 8008672:	4632      	mov	r2, r6
 8008674:	4649      	mov	r1, r9
 8008676:	4640      	mov	r0, r8
 8008678:	47d0      	blx	sl
 800867a:	3001      	adds	r0, #1
 800867c:	d09d      	beq.n	80085ba <_printf_i+0x15a>
 800867e:	3501      	adds	r5, #1
 8008680:	68e3      	ldr	r3, [r4, #12]
 8008682:	9903      	ldr	r1, [sp, #12]
 8008684:	1a5b      	subs	r3, r3, r1
 8008686:	42ab      	cmp	r3, r5
 8008688:	dcf2      	bgt.n	8008670 <_printf_i+0x210>
 800868a:	e7eb      	b.n	8008664 <_printf_i+0x204>
 800868c:	2500      	movs	r5, #0
 800868e:	f104 0619 	add.w	r6, r4, #25
 8008692:	e7f5      	b.n	8008680 <_printf_i+0x220>
 8008694:	08008bd1 	.word	0x08008bd1
 8008698:	08008be2 	.word	0x08008be2

0800869c <__sflush_r>:
 800869c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a4:	0716      	lsls	r6, r2, #28
 80086a6:	4605      	mov	r5, r0
 80086a8:	460c      	mov	r4, r1
 80086aa:	d454      	bmi.n	8008756 <__sflush_r+0xba>
 80086ac:	684b      	ldr	r3, [r1, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	dc02      	bgt.n	80086b8 <__sflush_r+0x1c>
 80086b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dd48      	ble.n	800874a <__sflush_r+0xae>
 80086b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086ba:	2e00      	cmp	r6, #0
 80086bc:	d045      	beq.n	800874a <__sflush_r+0xae>
 80086be:	2300      	movs	r3, #0
 80086c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80086c4:	682f      	ldr	r7, [r5, #0]
 80086c6:	6a21      	ldr	r1, [r4, #32]
 80086c8:	602b      	str	r3, [r5, #0]
 80086ca:	d030      	beq.n	800872e <__sflush_r+0x92>
 80086cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	0759      	lsls	r1, r3, #29
 80086d2:	d505      	bpl.n	80086e0 <__sflush_r+0x44>
 80086d4:	6863      	ldr	r3, [r4, #4]
 80086d6:	1ad2      	subs	r2, r2, r3
 80086d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086da:	b10b      	cbz	r3, 80086e0 <__sflush_r+0x44>
 80086dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086de:	1ad2      	subs	r2, r2, r3
 80086e0:	2300      	movs	r3, #0
 80086e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086e4:	6a21      	ldr	r1, [r4, #32]
 80086e6:	4628      	mov	r0, r5
 80086e8:	47b0      	blx	r6
 80086ea:	1c43      	adds	r3, r0, #1
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	d106      	bne.n	80086fe <__sflush_r+0x62>
 80086f0:	6829      	ldr	r1, [r5, #0]
 80086f2:	291d      	cmp	r1, #29
 80086f4:	d82b      	bhi.n	800874e <__sflush_r+0xb2>
 80086f6:	4a2a      	ldr	r2, [pc, #168]	@ (80087a0 <__sflush_r+0x104>)
 80086f8:	40ca      	lsrs	r2, r1
 80086fa:	07d6      	lsls	r6, r2, #31
 80086fc:	d527      	bpl.n	800874e <__sflush_r+0xb2>
 80086fe:	2200      	movs	r2, #0
 8008700:	6062      	str	r2, [r4, #4]
 8008702:	04d9      	lsls	r1, r3, #19
 8008704:	6922      	ldr	r2, [r4, #16]
 8008706:	6022      	str	r2, [r4, #0]
 8008708:	d504      	bpl.n	8008714 <__sflush_r+0x78>
 800870a:	1c42      	adds	r2, r0, #1
 800870c:	d101      	bne.n	8008712 <__sflush_r+0x76>
 800870e:	682b      	ldr	r3, [r5, #0]
 8008710:	b903      	cbnz	r3, 8008714 <__sflush_r+0x78>
 8008712:	6560      	str	r0, [r4, #84]	@ 0x54
 8008714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008716:	602f      	str	r7, [r5, #0]
 8008718:	b1b9      	cbz	r1, 800874a <__sflush_r+0xae>
 800871a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800871e:	4299      	cmp	r1, r3
 8008720:	d002      	beq.n	8008728 <__sflush_r+0x8c>
 8008722:	4628      	mov	r0, r5
 8008724:	f7ff fa9c 	bl	8007c60 <_free_r>
 8008728:	2300      	movs	r3, #0
 800872a:	6363      	str	r3, [r4, #52]	@ 0x34
 800872c:	e00d      	b.n	800874a <__sflush_r+0xae>
 800872e:	2301      	movs	r3, #1
 8008730:	4628      	mov	r0, r5
 8008732:	47b0      	blx	r6
 8008734:	4602      	mov	r2, r0
 8008736:	1c50      	adds	r0, r2, #1
 8008738:	d1c9      	bne.n	80086ce <__sflush_r+0x32>
 800873a:	682b      	ldr	r3, [r5, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d0c6      	beq.n	80086ce <__sflush_r+0x32>
 8008740:	2b1d      	cmp	r3, #29
 8008742:	d001      	beq.n	8008748 <__sflush_r+0xac>
 8008744:	2b16      	cmp	r3, #22
 8008746:	d11e      	bne.n	8008786 <__sflush_r+0xea>
 8008748:	602f      	str	r7, [r5, #0]
 800874a:	2000      	movs	r0, #0
 800874c:	e022      	b.n	8008794 <__sflush_r+0xf8>
 800874e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008752:	b21b      	sxth	r3, r3
 8008754:	e01b      	b.n	800878e <__sflush_r+0xf2>
 8008756:	690f      	ldr	r7, [r1, #16]
 8008758:	2f00      	cmp	r7, #0
 800875a:	d0f6      	beq.n	800874a <__sflush_r+0xae>
 800875c:	0793      	lsls	r3, r2, #30
 800875e:	680e      	ldr	r6, [r1, #0]
 8008760:	bf08      	it	eq
 8008762:	694b      	ldreq	r3, [r1, #20]
 8008764:	600f      	str	r7, [r1, #0]
 8008766:	bf18      	it	ne
 8008768:	2300      	movne	r3, #0
 800876a:	eba6 0807 	sub.w	r8, r6, r7
 800876e:	608b      	str	r3, [r1, #8]
 8008770:	f1b8 0f00 	cmp.w	r8, #0
 8008774:	dde9      	ble.n	800874a <__sflush_r+0xae>
 8008776:	6a21      	ldr	r1, [r4, #32]
 8008778:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800877a:	4643      	mov	r3, r8
 800877c:	463a      	mov	r2, r7
 800877e:	4628      	mov	r0, r5
 8008780:	47b0      	blx	r6
 8008782:	2800      	cmp	r0, #0
 8008784:	dc08      	bgt.n	8008798 <__sflush_r+0xfc>
 8008786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800878a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800878e:	81a3      	strh	r3, [r4, #12]
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008798:	4407      	add	r7, r0
 800879a:	eba8 0800 	sub.w	r8, r8, r0
 800879e:	e7e7      	b.n	8008770 <__sflush_r+0xd4>
 80087a0:	20400001 	.word	0x20400001

080087a4 <_fflush_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	690b      	ldr	r3, [r1, #16]
 80087a8:	4605      	mov	r5, r0
 80087aa:	460c      	mov	r4, r1
 80087ac:	b913      	cbnz	r3, 80087b4 <_fflush_r+0x10>
 80087ae:	2500      	movs	r5, #0
 80087b0:	4628      	mov	r0, r5
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	b118      	cbz	r0, 80087be <_fflush_r+0x1a>
 80087b6:	6a03      	ldr	r3, [r0, #32]
 80087b8:	b90b      	cbnz	r3, 80087be <_fflush_r+0x1a>
 80087ba:	f7fe ffc9 	bl	8007750 <__sinit>
 80087be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0f3      	beq.n	80087ae <_fflush_r+0xa>
 80087c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087c8:	07d0      	lsls	r0, r2, #31
 80087ca:	d404      	bmi.n	80087d6 <_fflush_r+0x32>
 80087cc:	0599      	lsls	r1, r3, #22
 80087ce:	d402      	bmi.n	80087d6 <_fflush_r+0x32>
 80087d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087d2:	f7ff fa34 	bl	8007c3e <__retarget_lock_acquire_recursive>
 80087d6:	4628      	mov	r0, r5
 80087d8:	4621      	mov	r1, r4
 80087da:	f7ff ff5f 	bl	800869c <__sflush_r>
 80087de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087e0:	07da      	lsls	r2, r3, #31
 80087e2:	4605      	mov	r5, r0
 80087e4:	d4e4      	bmi.n	80087b0 <_fflush_r+0xc>
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	059b      	lsls	r3, r3, #22
 80087ea:	d4e1      	bmi.n	80087b0 <_fflush_r+0xc>
 80087ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087ee:	f7ff fa27 	bl	8007c40 <__retarget_lock_release_recursive>
 80087f2:	e7dd      	b.n	80087b0 <_fflush_r+0xc>

080087f4 <__swhatbuf_r>:
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	460c      	mov	r4, r1
 80087f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087fc:	2900      	cmp	r1, #0
 80087fe:	b096      	sub	sp, #88	@ 0x58
 8008800:	4615      	mov	r5, r2
 8008802:	461e      	mov	r6, r3
 8008804:	da0d      	bge.n	8008822 <__swhatbuf_r+0x2e>
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800880c:	f04f 0100 	mov.w	r1, #0
 8008810:	bf14      	ite	ne
 8008812:	2340      	movne	r3, #64	@ 0x40
 8008814:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008818:	2000      	movs	r0, #0
 800881a:	6031      	str	r1, [r6, #0]
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	b016      	add	sp, #88	@ 0x58
 8008820:	bd70      	pop	{r4, r5, r6, pc}
 8008822:	466a      	mov	r2, sp
 8008824:	f000 f862 	bl	80088ec <_fstat_r>
 8008828:	2800      	cmp	r0, #0
 800882a:	dbec      	blt.n	8008806 <__swhatbuf_r+0x12>
 800882c:	9901      	ldr	r1, [sp, #4]
 800882e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008832:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008836:	4259      	negs	r1, r3
 8008838:	4159      	adcs	r1, r3
 800883a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800883e:	e7eb      	b.n	8008818 <__swhatbuf_r+0x24>

08008840 <__smakebuf_r>:
 8008840:	898b      	ldrh	r3, [r1, #12]
 8008842:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008844:	079d      	lsls	r5, r3, #30
 8008846:	4606      	mov	r6, r0
 8008848:	460c      	mov	r4, r1
 800884a:	d507      	bpl.n	800885c <__smakebuf_r+0x1c>
 800884c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	2301      	movs	r3, #1
 8008856:	6163      	str	r3, [r4, #20]
 8008858:	b003      	add	sp, #12
 800885a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800885c:	ab01      	add	r3, sp, #4
 800885e:	466a      	mov	r2, sp
 8008860:	f7ff ffc8 	bl	80087f4 <__swhatbuf_r>
 8008864:	9f00      	ldr	r7, [sp, #0]
 8008866:	4605      	mov	r5, r0
 8008868:	4639      	mov	r1, r7
 800886a:	4630      	mov	r0, r6
 800886c:	f7ff fa64 	bl	8007d38 <_malloc_r>
 8008870:	b948      	cbnz	r0, 8008886 <__smakebuf_r+0x46>
 8008872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008876:	059a      	lsls	r2, r3, #22
 8008878:	d4ee      	bmi.n	8008858 <__smakebuf_r+0x18>
 800887a:	f023 0303 	bic.w	r3, r3, #3
 800887e:	f043 0302 	orr.w	r3, r3, #2
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	e7e2      	b.n	800884c <__smakebuf_r+0xc>
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	6020      	str	r0, [r4, #0]
 800888a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	9b01      	ldr	r3, [sp, #4]
 8008892:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008896:	b15b      	cbz	r3, 80088b0 <__smakebuf_r+0x70>
 8008898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800889c:	4630      	mov	r0, r6
 800889e:	f000 f837 	bl	8008910 <_isatty_r>
 80088a2:	b128      	cbz	r0, 80088b0 <__smakebuf_r+0x70>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f023 0303 	bic.w	r3, r3, #3
 80088aa:	f043 0301 	orr.w	r3, r3, #1
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	431d      	orrs	r5, r3
 80088b4:	81a5      	strh	r5, [r4, #12]
 80088b6:	e7cf      	b.n	8008858 <__smakebuf_r+0x18>

080088b8 <memmove>:
 80088b8:	4288      	cmp	r0, r1
 80088ba:	b510      	push	{r4, lr}
 80088bc:	eb01 0402 	add.w	r4, r1, r2
 80088c0:	d902      	bls.n	80088c8 <memmove+0x10>
 80088c2:	4284      	cmp	r4, r0
 80088c4:	4623      	mov	r3, r4
 80088c6:	d807      	bhi.n	80088d8 <memmove+0x20>
 80088c8:	1e43      	subs	r3, r0, #1
 80088ca:	42a1      	cmp	r1, r4
 80088cc:	d008      	beq.n	80088e0 <memmove+0x28>
 80088ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088d6:	e7f8      	b.n	80088ca <memmove+0x12>
 80088d8:	4402      	add	r2, r0
 80088da:	4601      	mov	r1, r0
 80088dc:	428a      	cmp	r2, r1
 80088de:	d100      	bne.n	80088e2 <memmove+0x2a>
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088ea:	e7f7      	b.n	80088dc <memmove+0x24>

080088ec <_fstat_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4d07      	ldr	r5, [pc, #28]	@ (800890c <_fstat_r+0x20>)
 80088f0:	2300      	movs	r3, #0
 80088f2:	4604      	mov	r4, r0
 80088f4:	4608      	mov	r0, r1
 80088f6:	4611      	mov	r1, r2
 80088f8:	602b      	str	r3, [r5, #0]
 80088fa:	f7f8 fe84 	bl	8001606 <_fstat>
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	d102      	bne.n	8008908 <_fstat_r+0x1c>
 8008902:	682b      	ldr	r3, [r5, #0]
 8008904:	b103      	cbz	r3, 8008908 <_fstat_r+0x1c>
 8008906:	6023      	str	r3, [r4, #0]
 8008908:	bd38      	pop	{r3, r4, r5, pc}
 800890a:	bf00      	nop
 800890c:	20005f64 	.word	0x20005f64

08008910 <_isatty_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d06      	ldr	r5, [pc, #24]	@ (800892c <_isatty_r+0x1c>)
 8008914:	2300      	movs	r3, #0
 8008916:	4604      	mov	r4, r0
 8008918:	4608      	mov	r0, r1
 800891a:	602b      	str	r3, [r5, #0]
 800891c:	f7f8 fe83 	bl	8001626 <_isatty>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_isatty_r+0x1a>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_isatty_r+0x1a>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	20005f64 	.word	0x20005f64

08008930 <_sbrk_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4d06      	ldr	r5, [pc, #24]	@ (800894c <_sbrk_r+0x1c>)
 8008934:	2300      	movs	r3, #0
 8008936:	4604      	mov	r4, r0
 8008938:	4608      	mov	r0, r1
 800893a:	602b      	str	r3, [r5, #0]
 800893c:	f7f8 fe8c 	bl	8001658 <_sbrk>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_sbrk_r+0x1a>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	b103      	cbz	r3, 800894a <_sbrk_r+0x1a>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	20005f64 	.word	0x20005f64

08008950 <_realloc_r>:
 8008950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008954:	4607      	mov	r7, r0
 8008956:	4614      	mov	r4, r2
 8008958:	460d      	mov	r5, r1
 800895a:	b921      	cbnz	r1, 8008966 <_realloc_r+0x16>
 800895c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008960:	4611      	mov	r1, r2
 8008962:	f7ff b9e9 	b.w	8007d38 <_malloc_r>
 8008966:	b92a      	cbnz	r2, 8008974 <_realloc_r+0x24>
 8008968:	f7ff f97a 	bl	8007c60 <_free_r>
 800896c:	4625      	mov	r5, r4
 800896e:	4628      	mov	r0, r5
 8008970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008974:	f000 f81a 	bl	80089ac <_malloc_usable_size_r>
 8008978:	4284      	cmp	r4, r0
 800897a:	4606      	mov	r6, r0
 800897c:	d802      	bhi.n	8008984 <_realloc_r+0x34>
 800897e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008982:	d8f4      	bhi.n	800896e <_realloc_r+0x1e>
 8008984:	4621      	mov	r1, r4
 8008986:	4638      	mov	r0, r7
 8008988:	f7ff f9d6 	bl	8007d38 <_malloc_r>
 800898c:	4680      	mov	r8, r0
 800898e:	b908      	cbnz	r0, 8008994 <_realloc_r+0x44>
 8008990:	4645      	mov	r5, r8
 8008992:	e7ec      	b.n	800896e <_realloc_r+0x1e>
 8008994:	42b4      	cmp	r4, r6
 8008996:	4622      	mov	r2, r4
 8008998:	4629      	mov	r1, r5
 800899a:	bf28      	it	cs
 800899c:	4632      	movcs	r2, r6
 800899e:	f7ff f950 	bl	8007c42 <memcpy>
 80089a2:	4629      	mov	r1, r5
 80089a4:	4638      	mov	r0, r7
 80089a6:	f7ff f95b 	bl	8007c60 <_free_r>
 80089aa:	e7f1      	b.n	8008990 <_realloc_r+0x40>

080089ac <_malloc_usable_size_r>:
 80089ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089b0:	1f18      	subs	r0, r3, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bfbc      	itt	lt
 80089b6:	580b      	ldrlt	r3, [r1, r0]
 80089b8:	18c0      	addlt	r0, r0, r3
 80089ba:	4770      	bx	lr

080089bc <_init>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	bf00      	nop
 80089c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c2:	bc08      	pop	{r3}
 80089c4:	469e      	mov	lr, r3
 80089c6:	4770      	bx	lr

080089c8 <_fini>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr
